{"config":{"lang":["hu"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Szoftvertechnik\u00e1k (2024-t\u0151l)","text":"<p>Gyakorlati anyagok \u00e9s h\u00e1zi feladatok a BMEVIAUAB00 Szoftvertechnik\u00e1k c. t\u00e1rgyhoz, 2024 \u00e9vt\u0151l kezd\u0151d\u0151en. A kor\u00e1bbi \u00e9vek anyag\u00e1nak megtekint\u00e9s\u00e9hez az oldal fejl\u00e9c\u00e9ben tal\u00e1lhat\u00f3 leny\u00edl\u00f3 mez\u0151ben a megfelel\u0151 \u00e9vet kell kiv\u00e1lasztani (pl. \"2023-ig\").</p> <p>Jav\u00edt\u00e1s az anyagban</p> <p>A t\u00e1rgy hallgat\u00f3inak a jegyzet anyag\u00e1ban t\u00f6rt\u00e9n\u0151 jav\u00edt\u00e1s\u00e9rt, kieg\u00e9sz\u00edt\u00e9s\u00e9rt plusz pontot adunk! Ha hib\u00e1t tal\u00e1lsz a jegyzet b\u00e1rmely r\u00e9sz\u00e9ben, vagy kieg\u00e9sz\u00edten\u00e9d azt, nyiss egy pull request-et! A repository linkj\u00e9t a jobb fels\u0151 sarokban tal\u00e1lod.</p> <p>Felhaszn\u00e1l\u00e1si felt\u00e9telek</p> <p>Az itt tal\u00e1lhat\u00f3 oktat\u00e1si seg\u00e9danyagok a BMEVIAUAB00 t\u00e1rgy hallgat\u00f3inak k\u00e9sz\u00fcltek. Az anyagok oly m\u00f3d\u00fa felhaszn\u00e1l\u00e1sa, amely a t\u00e1rgy oktat\u00e1s\u00e1hoz nem szorosan kapcsol\u00f3dik, csak a szerz\u0151(k) enged\u00e9ly\u00e9vel \u00e9s a forr\u00e1s megjel\u00f6l\u00e9s\u00e9vel t\u00f6rt\u00e9nhet.</p> <p>Az anyagok a t\u00e1rgy keret\u00e9ben oktatott kontextusban \u00e9rtelmezhet\u0151ek. Az anyagok\u00e9rt egy\u00e9b felhaszn\u00e1l\u00e1s eset\u00e9n a szerz\u0151(k) felel\u0151ss\u00e9get nem v\u00e1llalnak.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/","title":"Interf\u00e9sz \u00e9s absztrakt (\u0151s)oszt\u00e1ly","text":"<p>A fejezet nem tartalmaz feladatot, a hallgat\u00f3k sz\u00e1m\u00e1ra ismerteti a kapcsol\u00f3d\u00f3 elm\u00e9letet.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/#absztrakt-osztaly","title":"Absztrakt oszt\u00e1ly","text":"<p>A fogalmak kor\u00e1bbi t\u00e1rgyak keret\u00e9ben m\u00e1r ismertet\u00e9sre ker\u00fcltek, \u00edgy most csak a legfontosabbakat foglaljuk \u00f6ssze, illetve a C# vonatkoz\u00e1s\u00e1ra t\u00e9r\u00fcnk ki.</p> <p>Absztrakt oszt\u00e1ly: olyan oszt\u00e1ly, mely nem p\u00e9ld\u00e1nyos\u00edthat\u00f3. C# nyelven az oszt\u00e1lydefin\u00edci\u00f3ban az abstract kulcssz\u00f3t kell ki\u00edrni, pl.:</p> <pre><code>abstract class Shape { \u2026 }\n</code></pre> <p>Absztrakt oszt\u00e1lyoknak lehetnek absztrakt met\u00f3dusaik, melyeknek nem adjuk meg a t\u00f6rzs\u00e9t, ezekn\u00e9l is az abstract kulcssz\u00f3t kell haszn\u00e1lni:</p> <pre><code>\u2026\nabstract void Draw();\n\u2026\n</code></pre> <p>Absztrakt oszt\u00e1lyok haszn\u00e1lat\u00e1nak k\u00e9t c\u00e9lja lehet:</p> <ul> <li>Egy oszt\u00e1lyhierarchi\u00e1ban a lesz\u00e1rmazottakra k\u00f6z\u00f6s k\u00f3dot fel tudjuk vinni egy absztrakt k\u00f6z\u00f6s \u0151sbe, \u00edgy elker\u00fclj\u00fck a k\u00f3dduplik\u00e1ci\u00f3t.</li> <li>Egys\u00e9gesen tudjuk absztrakt \u0151sk\u00e9nt hivatkozva a lesz\u00e1rmazottakat kezelni (pl. heterog\u00e9n kollekci\u00f3k).</li> </ul> <p>.NET k\u00f6rnyezetben, csak\u00fagy, mint Java nyelven, egy oszt\u00e1lynak csak egy \u0151soszt\u00e1lya lehet.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/#interfesz","title":"Interf\u00e9sz","text":"<p>Az interf\u00e9sz nem m\u00e1s, mint egy m\u0171velethalmaz. Tulajdonk\u00e9ppen egy olyan absztrakt oszt\u00e1lynak felel meg, melynek minden m\u0171velete absztrakt.</p> <p>C# nyelven az <code>interface</code> kulcssz\u00f3val tudunk interf\u00e9szt defini\u00e1lni:</p> <pre><code>public interface ISerializable \n{\n   void WriteToStream(Stream s);\n   void LoadFromStream(Stream s);\n}\n\npublic interface IComparable \n{\n   int CompareTo(Object obj);\n}\n</code></pre> <p>M\u00edg egy oszt\u00e1lynak csak egy \u0151se lehet, ak\u00e1rh\u00e1ny interf\u00e9szt implement\u00e1lhat:</p> <pre><code>public class Rect : Shape, ISerializable, IComparable\n{\n    \u2026\n}\n</code></pre> <p>Ebben a p\u00e9ld\u00e1ban Rect oszt\u00e1ly a Shape oszt\u00e1lyb\u00f3l sz\u00e1rmazik, valamint az <code>ISerializable</code> \u00e9s <code>IComparable</code> interf\u00e9szeket implement\u00e1lja (k\u00f6telez\u0151en az \u0151soszt\u00e1lyt kell el\u0151sz\u00f6r megadni). Az interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyban annak valamennyi m\u0171velet\u00e9t meg kell val\u00f3s\u00edtani, vagyis meg kell \u00edrni a t\u00f6rzs\u00e9t (kiv\u00e9ve azt a ritka esetet, amikor absztrakt m\u0171velettel val\u00f3s\u00edtjuk meg). Interf\u00e9szek haszn\u00e1lat\u00e1nak egy f\u0151 c\u00e9lja van. Interf\u00e9szk\u00e9nt hivatkozva egys\u00e9gesen tudjuk az interf\u00e9szt implement\u00e1l\u00f3 valamennyi oszt\u00e1lyt kezelni (pl. heterog\u00e9n kollekci\u00f3). Ennek egy k\u00f6vetkezm\u00e9nye: az interf\u00e9szek lehet\u0151v\u00e9 teszik sz\u00e9les k\u00f6rben haszn\u00e1lhat\u00f3 oszt\u00e1lyok \u00e9s f\u00fcggv\u00e9nyek meg\u00edr\u00e1s\u00e1t. Pl. tudunk \u00edrni egy univerz\u00e1lis Sort sorrendez\u0151 f\u00fcggv\u00e9nyt, mely b\u00e1rmilyen oszt\u00e1llyal haszn\u00e1lhat\u00f3, mely implement\u00e1lja az IComparable interf\u00e9szt.</p> <p>Az interf\u00e9sz alkalmaz\u00e1s\u00e1nak el\u0151nyei m\u00e9g:</p> <ul> <li>A kliensnek el\u00e9g a kiszolg\u00e1l\u00f3 objektum interf\u00e9sz\u00e9t ismernie, \u00edgy egyszer\u0171en tudja a kiszolg\u00e1l\u00f3t haszn\u00e1lni.</li> <li>Ha a kliens csak az interf\u00e9szen kereszt\u00fcl haszn\u00e1lja a kiszolg\u00e1l\u00f3t, \u00edgy a kiszolg\u00e1l\u00f3 bels\u0151 implement\u00e1ci\u00f3ja megv\u00e1ltozhat, a klienst nem kell m\u00f3dos\u00edtani (\u00fajra sem kell ford\u00edtani). Ennek megfelel\u0151en az interf\u00e9sz egy szerz\u0151d\u00e9s is a kiszolg\u00e1l\u00f3 \u00e9s a kliens k\u00f6z\u00f6tt: am\u00edg a kiszolg\u00e1l\u00f3 garant\u00e1lja az interf\u00e9sz t\u00e1mogat\u00e1s\u00e1t, a klienst nem kell v\u00e1ltoztatni.</li> </ul>"},{"location":"egyeb/interfesz-es-absztrakt-os/#absztrakt-os-es-interfesz-osszehasonlitasa","title":"Absztrakt \u0151s \u00e9s interf\u00e9sz \u00f6sszehasonl\u00edt\u00e1sa","text":"<p>Az absztrakt \u0151s el\u0151nye az interf\u00e9sszel szemben, hogy adhatunk meg a m\u0171veletekre vonatkoz\u00f3an alap\u00e9rtelmezett implement\u00e1ci\u00f3t, illetve vehet\u00fcnk fel tagv\u00e1ltoz\u00f3kat.</p> <p>Az interf\u00e9szek el\u0151nye az absztrakt \u0151ssel szemben, hogy egy oszt\u00e1ly ak\u00e1rh\u00e1ny interf\u00e9szt implement\u00e1lhat, m\u00edg \u0151se maximum egy lehet.</p> <p>Az interf\u00e9szek haszn\u00e1lat\u00e1nak van m\u00e9g egy k\u00f6vetkezm\u00e9nye, ami bizonyos esetben kellemetlens\u00e9geket okozhat. Amikor az interf\u00e9szbe \u00faj m\u0171veletet vesz\u00fcnk fel, akkor valamennyi implement\u00e1l\u00f3 oszt\u00e1lyt szint\u00e9n b\u0151v\u00edteni kell, k\u00fcl\u00f6nben a k\u00f3d nem fordul. Absztrakt \u0151s b\u0151v\u00edt\u00e9se eset\u00e9n ez nincs \u00edgy: amennyiben \u00faj m\u0171veletet vesz\u00fcnk fel, lehet\u0151s\u00e9g\u00fcnk van azt virtu\u00e1lis f\u00fcggv\u00e9nyk\u00e9nt felvenni, \u00e9s \u00edgy az \u0151sben alap\u00e9rtelmezett implement\u00e1ci\u00f3t adni r\u00e1. Ez esetben az lesz\u00e1rmazottak ig\u00e9ny szerint tudj\u00e1k ezt fel\u00fcldefini\u00e1lni, erre nincsenek r\u00e1k\u00e9nyszer\u00edtve. Az interf\u00e9szek ezen tulajdons\u00e1ga k\u00fcl\u00f6n\u00f6sen oszt\u00e1lyk\u00f6nyvt\u00e1rak/keretrendszerek eset\u00e9n lehet kellemetlen. Tegy\u00fck fel, hogy a .NET \u00faj verzi\u00f3j\u00e1nak kiad\u00e1skor a keretrendszer egyik interf\u00e9sz\u00e9be \u00faj m\u0171veletet vesznek fel. Ekkor valamennyi alkalmaz\u00e1sban valamennyi implement\u00e1l\u00f3 oszt\u00e1lyt m\u00f3dos\u00edtani kell, k\u00fcl\u00f6nben nem fordul a k\u00f3d. Ezt k\u00e9tf\u00e9lek\u00e9ppen lehet elker\u00fclni. Vagy \u0151soszt\u00e1ly haszn\u00e1lat\u00e1val, vagy ha m\u00e9gis interf\u00e9szt kellene b\u0151v\u00edteni, akkor ink\u00e1bb \u00faj interf\u00e9sz bevezet\u00e9s\u00e9vel, amely m\u00e1r az \u00faj m\u0171veletet is tartalmazza. B\u00e1r itt az els\u0151 megk\u00f6zel\u00edt\u00e9s (\u0151soszt\u00e1ly alkalmaz\u00e1sa) t\u0171nik els\u0151 \u00e9rz\u00e9sre vonz\u00f3bbnak, ennek is van h\u00e1tr\u00e1nya: ha az alkalmaz\u00e1s fejleszt\u00e9sekor egy keretrendszerbeli \u0151sb\u0151l sz\u00e1rmaztatunk, akkor oszt\u00e1lyunknak m\u00e1r nem lehet m\u00e1s \u0151se, \u00e9s ez bizony sok esetben f\u00e1jdalmas megk\u00f6t\u00e9st jelent.</p> <p>\u00c9rdemes tudni, hogy C# 8-t\u00f3l (illetve .NET vagy .NET Core runtime is kell hozz\u00e1, .NET Framework alatt nem t\u00e1mogatott) kezdve interf\u00e9sz m\u0171veleteknek is lehet alap\u00e9rtelmezett implement\u00e1ci\u00f3t adni (default interface methods), \u00edgy a fenti probl\u00e9ma megold\u00e1s\u00e1hoz nincs sz\u00fcks\u00e9g absztrakt oszt\u00e1lyra, de interf\u00e9sznek tov\u00e1bbiakban sem lehet tagv\u00e1ltoz\u00f3ja. B\u0151vebben inform\u00e1ci\u00f3 itt:  default interface methods.</p> <p>Mivel mind az interf\u00e9szek, mind az absztrakt \u0151soszt\u00e1lyok alkalmaz\u00e1sa j\u00e1rhat negat\u00edv k\u00f6vetkezm\u00e9nyekkel is, sz\u00e1mos esetben a kett\u0151 egy\u00fcttes haszn\u00e1lat\u00e1val tudjuk kihozni megold\u00e1sunkb\u00f3l a maximumot (vagyis lesz a k\u00f3dunk k\u00f6nnyen b\u0151v\u00edthet\u0151 \u00fagy, hogy nem, vagy csak minim\u00e1lis m\u00e9rt\u00e9kben tartalmaz k\u00f3dduplik\u00e1ci\u00f3t).</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_eng/","title":"Interface and abstract (base) class","text":"<p>The chapter does not contain exercises; instead, it introduces the related theory for the students.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_eng/#abstract-class","title":"Abstract class","text":"<p>The concepts have already been introduced within the context of earlier subjects, so now we will only summarize the most important points and focus on their relevance to C#.</p> <p>Abstract class: a class that cannot be instantiated.  In C#, the <code>abstract</code> keyword must be used in the class definition, for example:</p> <pre><code>abstract class Shape { ... }\n</code></pre> <p>Abstract classes can have abstract methods, where the body is not provided, and the <code>abstract</code> keyword must also be used for these:</p> <pre><code>...\nabstract void Draw();\n...\n</code></pre> <p>There are two purposes for using abstract classes:</p> <ul> <li>In a class hierarchy, we can place common code for the descendants in an abstract common base class, thus avoiding code duplication.</li> <li>We can uniformly handle descendants by referring to them as abstract ancestors (e.g., heterogeneous collections).</li> </ul> <p>In the .NET environment, just like in Java, a class can only have one base class (single inheritance).</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_eng/#interface","title":"Interface","text":"<p>An interface is nothing more than a set of operations. Essentially, it corresponds to an abstract class where all the methods are abstract.</p> <p>In C#, we can define an interface using the <code>interface</code> keyword:</p> <pre><code>public interface ISerializable \n{\n   void WriteToStream(Stream s);\n   void LoadFromStream(Stream s);\n}\n\npublic interface IComparable \n{\n   int CompareTo(Object obj);\n}\n</code></pre> <p>While a class can have only one base class, it can implement any number of interfaces:</p> <pre><code>public class Rect : Shape, ISerializable, IComparable\n{\n    ...\n}\n</code></pre> <p>In this example, the <code>Rect</code> class inherits from the <code>Shape</code> class and implements the <code>ISerializable</code> and <code>IComparable</code> interfaces (the base class must always be specified first). The class implementing the interface must implement all of its operations, meaning it must define the body of the methods (except in the rare case when they are implemented with an abstract method). The main purpose of using interfaces is to enable uniform handling of all classes that implement the interface (e.g., in heterogeneous collections). A consequence of this is that interfaces allow us to write classes and functions that can be widely used. For example, it is possible to write a universal <code>Sort</code> function that can be used with any class that implements the <code>IComparable</code> interface.</p> <p>Other advantages of using the interface include:</p> <ul> <li>The client only needs to be familiar with the server object\u2019s interface, making it simple to use the server.</li> <li>If the client uses the server through the interface only, the server's internal implementation can change, and the client doesn\u2019t need to be modified (or even recompiled). Accordingly, the interface acts as a contract between the server and the client: as long as the server guarantees support for the interface, the client does not need to change.</li> </ul>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_eng/#comparison-of-abstract-base-class-and-interface","title":"Comparison of abstract base class and interface","text":"<p>The advantage of an abstract base class over an interface is that we can provide default implementations for the methods and add member variables.</p> <p>The advantage of interfaces over abstract base classes is that a class can implement any number of interfaces, while it can have at most one base class.</p> <p>There is another consequence of using interfaces, which can cause inconvenience in some cases. When a new operation is added to the interface, all implementing classes must also be extended, otherwise the code will not compile. In contrast, when we extend an abstract base class, this is not the case: if we add a new method, we can add it as a virtual function and provide a default implementation in the base class. In this case, the derived classes can override it if necessary, but they are not forced to. This property of interfaces can be particularly inconvenient in class libraries/frameworks. Let\u2019s assume that a new version of the .NET framework adds a new method to one of its interfaces. Then, in all applications, all implementing classes must be modified, or the code will not compile. There are two ways to avoid this. Either by using a base class, or if we must extend an interface, by introducing a new interface that includes the new method. Although the first approach (using a base class) may seem more attractive at first, it also has a downside: if we derive our class from a framework base class during application development, our class cannot have any other base class, and this can be a painful restriction in many cases.</p> <p>It's worth to know that starting from C# 8 (and with .NET or .NET Core runtime, as it is not supported under .NET Framework), interface methods can have default implementations  (default interface methods), so no abstract class is needed to solve the above problem, but an interfaces still cannot have member variables. More information here: default interface methods.</p> <p>Since both interfaces and abstract base classes can have negative consequences, in many cases, we can get the most out of our solution by using both together (i.e., our code will be easily extensible without or with minimal code duplication).</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_ger/","title":"Schnittstelle und abstrakte (angestammte) Klasse","text":"<p>Letztes \u00c4nderungsdatum: 2022.10.15 Er hat trainiert: Zolt\u00e1n Benedek</p> <p>Das Kapitel enth\u00e4lt keine \u00dcbung, sondern bietet den Studierenden eine Einf\u00fchrung in die entsprechende Theorie.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_ger/#abstrakte-klasse","title":"Abstrakte Klasse","text":"<p>Die Konzepte wurden bereits in fr\u00fcheren Themen behandelt, so dass wir jetzt nur die wichtigsten zusammenfassen und uns auf den C#-Aspekt konzentrieren werden. Abstrakte Klasse Eine Klasse, die nicht instanziiert werden kann. In C# sollte in der Klassendefinition das abstrakte Schl\u00fcsselwort geschrieben werden, z.B.:</p> <pre><code>abstract class Shape { ... }\n</code></pre> <p>Abstrakte Klassen k\u00f6nnen abstrakte Methoden haben, die keine Wurzel haben, und f\u00fcr diese abstrakten Methoden sollte das Schl\u00fcsselwort abstract verwendet werden:</p> <pre><code>..\nabstract void Draw();\n..\n</code></pre> <p>Es gibt zwei Gr\u00fcnde f\u00fcr die Verwendung abstrakter Klassen:</p> <ul> <li>In einer Klassenhierarchie k\u00f6nnen wir Code, der allen Nachkommen gemeinsam ist, auf einen abstrakten gemeinsamen Vorfahren abbilden und so Code-Duplikation vermeiden.</li> <li>Wir k\u00f6nnen uns einheitlich auf Nachkommen als abstrakte Vorfahren beziehen (z. B. heterogene Sammlungen).</li> </ul> <p>in .NET, wie auch in Java, kann eine Klasse nur eine Vorg\u00e4ngerklasse haben.</p>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_ger/#schnittstelle","title":"Schnittstelle","text":"<p>Eine Schnittstelle ist nichts anderes als eine Reihe von Operationen. Sie entspricht in der Tat einer abstrakten Klasse, deren s\u00e4mtliche Operationen abstrakt sind.</p> <p>In C# k\u00f6nnen Sie eine Schnittstelle mit dem Schl\u00fcsselwort <code>interface</code> definieren:</p> <pre><code>public interface ISerializable \n{\n   void WriteToStream(Stream s);\n   void LoadFromStream(Stream s);\n}\n\npublic interface IComparable \n{\n   int CompareTo(Object obj);\n}\n</code></pre> <p>W\u00e4hrend eine Klasse nur einen Vorfahren haben kann, kann sie eine beliebige Anzahl von Schnittstellen implementieren:</p> <pre><code>public class Rect : Shape, ISerializable, IComparable\n{\n    ..\n}\n</code></pre> <p>In diesem Beispiel ist die Klasse Rect von der Klasse Shape abgeleitet und implementiert die Schnittstellen <code>ISerializable</code> und <code>IComparable</code> (die Vorg\u00e4ngerklasse muss zuerst angegeben werden). In der Klasse, die die Schnittstelle implementiert, m\u00fcssen alle ihre Operationen implementiert werden, d. h. ihr Stamm muss geschrieben werden (au\u00dfer in dem seltenen Fall, dass sie durch eine abstrakte Operation implementiert wird). Die Verwendung von Schnittstellen hat vor allem einen Zweck. Als Schnittstelle referenziert, k\u00f6nnen wir alle Klassen, die die Schnittstelle implementieren, einheitlich verwalten (z. B. heterogene Sammlung). Eine Folge davon ist, dass Schnittstellen es Ihnen erm\u00f6glichen, Klassen und Funktionen zu schreiben, die auf vielf\u00e4ltige Weise verwendet werden k\u00f6nnen. Wir k\u00f6nnen zum Beispiel eine universelle Sortierfunktion schreiben, die mit jeder Klasse verwendet werden kann, die die Schnittstelle IComparable implementiert.</p> <p>Weitere Vorteile der Nutzung der Schnittstelle sind:</p> <ul> <li>Der Client muss nur die Schnittstelle des Serverobjekts kennen, um den Server problemlos nutzen zu k\u00f6nnen.</li> <li>Wenn der Client den Server nur \u00fcber die Schnittstelle nutzt, so dass sich die interne Implementierung des Servers \u00e4ndern kann, muss der Client nicht ge\u00e4ndert (und auch nicht neu kompiliert) werden. Dementsprechend ist die Schnittstelle auch ein Vertrag zwischen dem Server und dem Client: Solange der Server die Unterst\u00fctzung f\u00fcr die Schnittstelle garantiert, braucht der Client nicht zu wechseln.</li> </ul>"},{"location":"egyeb/interfesz-es-absztrakt-os/index_ger/#vergleich-von-abstraktem-vorfahren-und-schnittstelle","title":"Vergleich von abstraktem Vorfahren und Schnittstelle","text":"<p>Der Vorteil des abstrakten Vorg\u00e4ngers gegen\u00fcber der Schnittstelle besteht darin, dass Sie eine Standardimplementierung f\u00fcr die Operationen angeben und Membervariablen einschlie\u00dfen k\u00f6nnen.</p> <p>Der Vorteil von Schnittstellen gegen\u00fcber abstrakten Vorfahren besteht darin, dass eine Klasse eine beliebige Anzahl von Schnittstellen implementieren kann, w\u00e4hrend ihr Vorfahre h\u00f6chstens eine implementieren kann.</p> <p>Die Verwendung von Schnittstellen hat noch eine weitere Konsequenz, die in einigen F\u00e4llen zu Unannehmlichkeiten f\u00fchren kann. Wenn eine neue Operation zur Schnittstelle hinzugef\u00fcgt wird, m\u00fcssen alle implementierenden Klassen ebenfalls erweitert werden, sonst l\u00e4sst sich der Code nicht kompilieren. Dies ist bei der Erweiterung eines abstrakten Vorg\u00e4ngers nicht der Fall: Wenn Sie eine neue Operation hinzuf\u00fcgen, haben Sie die M\u00f6glichkeit, sie als virtuelle Funktion hinzuzuf\u00fcgen und ihr somit eine Standardimplementierung im Vorg\u00e4nger zu geben. In diesem Fall k\u00f6nnen die Nachkommen dies nach Belieben umdefinieren, sie sind nicht dazu gezwungen. Diese Eigenschaft von Schnittstellen kann f\u00fcr Klassenbibliotheken/Framework-Systeme besonders unangenehm sein. Angenommen, eine neue Version von .NET wird ver\u00f6ffentlicht und eine neue Operation wird zu einer der Schnittstellen des Frameworks hinzugef\u00fcgt. Alle implementierenden Klassen in allen Anwendungen m\u00fcssen dann ge\u00e4ndert werden, da der Code sonst nicht kompiliert werden kann. Es gibt zwei M\u00f6glichkeiten, dies zu vermeiden. Entweder durch Verwendung einer Legacy-Klasse oder, wenn eine Schnittstelle erweitert werden soll, durch Einf\u00fchrung einer neuen Schnittstelle, die die neue Operation bereits enth\u00e4lt. Obwohl der erste Ansatz (Verwendung einer Vorg\u00e4ngerklasse) auf den ersten Blick attraktiver erscheint, hat er auch einen Nachteil: Wenn Sie bei der Entwicklung Ihrer Anwendung von einem Vorg\u00e4nger im Framework ableiten, kann Ihre Klasse keinen weiteren Vorg\u00e4nger haben, und das ist in vielen F\u00e4llen eine schmerzhafte Einschr\u00e4nkung.</p> <p>Es ist wichtig zu wissen, dass ab C# 8 (oder .NET oder .NET Core Runtime, nicht unterst\u00fctzt unter .NET Framework), Schnittstellenoperationen eine Standardimplementierung (Standardschnittstellenmethoden) gegeben werden kann, so dass keine abstrakte Klasse ben\u00f6tigt wird, um das obige Problem zu l\u00f6sen, aber eine Schnittstelle kann nicht mehr eine Mitgliedsvariable haben. Weitere Informationen finden Sie hier: Standardschnittstellenmethoden.</p> <p>Da sowohl die Verwendung von Schnittstellen als auch von abstrakten Klassen negative Folgen haben kann, k\u00f6nnen wir in vielen F\u00e4llen das meiste aus unserer L\u00f6sung herausholen, wenn wir beides verwenden (d. h. unser Code kann ohne oder mit nur minimaler Code-Duplizierung leicht erweitert werden).</p>"},{"location":"egyeb/uml-kod-kapcsolata/","title":"Az UML oszt\u00e1lydiagram \u00e9s a k\u00f3d kapcsolat\u00e1nak elm\u00e9lete","text":"<p>Utols\u00f3 m\u00f3dos\u00edt\u00e1s ideje: 2022.10.15 Kidolgozta: Benedek Zolt\u00e1n</p> <p>A fejezet nem tartalmaz feladatot, a hallgat\u00f3k sz\u00e1m\u00e1ra ismerteti a kapcsol\u00f3d\u00f3 elm\u00e9letet.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#bevezeto","title":"Bevezet\u0151","text":"<p>A fejezet egy r\u00f6vid, v\u00e1zlatos \u00e1ttekint\u00e9st ad az UML oszt\u00e1lydiagram \u00e9s a forr\u00e1sk\u00f3d k\u00f6z\u00f6tti lek\u00e9pez\u00e9s alapjair\u00f3l, a megel\u0151z\u0151 f\u00e9l\u00e9vben Szoftvertechnol\u00f3gia t\u00e1rgyb\u00f3l m\u00e1r tanultak ism\u00e9tl\u00e9sek\u00e9nt.</p> <p>Napjainkban sz\u00e1mos szoftverfejleszt\u00e9si m\u00f3dszertan l\u00e9tezik. Ezek k\u00fcl\u00f6nb\u00f6z\u0151 m\u00e9rt\u00e9kben \u00e9p\u00edtenek arra, illetve k\u00f6vetelik meg, hogy a szoftver elk\u00e9sz\u00edt\u00e9se sor\u00e1n modellez\u00e9st alkalmazzunk. Az azonban k\u00e9ts\u00e9gtelen, hogy m\u00e9g a legagilisabb, legink\u00e1bb \u201ek\u00f3dcentrikus\u201d szeml\u00e9letm\u00f3dok k\u00f6vet\u0151i is hasznosnak \u00edt\u00e9lik a szoftver fontosabb/komplexebb komponenseinek \u00e9s szerkezeti elemeinek vizu\u00e1lis modellez\u00e9s\u00e9t annak grafikus volt\u00e1b\u00f3l ad\u00f3d\u00f3 nagyobb kifejez\u0151 ereje miatt.</p> <p>Tegy\u00fck fel, hogy feladatunk egy alkalmaz\u00e1s, vagy annak adott modulj\u00e1nak elk\u00e9sz\u00edt\u00e9se. A v\u00e1lasztott m\u00f3dszertanunkat k\u00f6vetve \u2013 j\u00f3 es\u00e9llyel t\u00f6bb iter\u00e1ci\u00f3ban \u2013 a k\u00f6vetelm\u00e9ny elemz\u00e9s, anal\u00edzis, tervez\u00e9s, implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s l\u00e9p\u00e9seit fogjuk \u00e9rinteni. Koncentr\u00e1ljunk most a tervez\u00e9si f\u00e1zisra. Ennek sor\u00e1n elk\u00e9sz\u00fcl a rendszer (legal\u00e1bbis bizonyos r\u00e9szeinek) r\u00e9szletes terve, mely kimenete a r\u00e9szletes/ implement\u00e1ci\u00f3s terv, illetve modell. Ezen a szinten a modellben szerepl\u0151 bizonyos elemek (pl. oszt\u00e1lyok) egy\u00e9rtelm\u0171en lek\u00e9pezhet\u0151k az adott alrendszer implement\u00e1ci\u00f3j\u00e1ul v\u00e1lasztott programoz\u00e1si nyelv elemeire. Ha j\u00f3 a fejleszt\u0151/modellez\u0151 eszk\u00f6z\u00fcnk, akkor az le tudja gener\u00e1lni az oszt\u00e1lyok v\u00e1z\u00e1t (pl. C++, Java, C# oszt\u00e1lyok). A feladatunk ezt k\u00f6vet\u0151en a gener\u00e1lt k\u00f3dban szerepl\u0151 a met\u00f3dusok t\u00f6rzs\u00e9nek kit\u00f6lt\u00e9se.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#fogalmak","title":"Fogalmak","text":"<ul> <li>Forward engineering: modellb\u0151l k\u00f3d gener\u00e1l\u00e1sa. A r\u00e9szletes tervb\u0151l a modellez\u0151 eszk\u00f6z le tudja gener\u00e1lni a programv\u00e1zat. El\u0151nye, hogy kevesebbet kell k\u00f3dolni.</li> <li>Reverse engineering: k\u00f3db\u00f3l modell gener\u00e1l\u00e1sa. A m\u00e1r k\u00e9sz k\u00f3d meg\u00e9rt\u00e9s\u00e9t seg\u00edti.</li> <li>Round-trip engineering: az el\u0151z\u0151 kett\u0151 egy\u00fcttes alkalmaz\u00e1sa. A l\u00e9nyeg: a modell \u00e9s a k\u00f3d v\u00e9gig szinkronban van. Ha a k\u00f3dban v\u00e1ltoztatunk, a v\u00e1ltoz\u00e1s megjelenik a modellben, ha a modellben v\u00e1ltoztatunk, a v\u00e1ltoz\u00e1s megjelenik a k\u00f3dban.</li> </ul> <p>Ahhoz, hogy a k\u00f3dgener\u00e1l\u00e1s el\u0151nyeivel \u00e9lni tudjunk, a k\u00f6vetkez\u0151kkel kell tiszt\u00e1ban legy\u00fcnk: ismern\u00fcnk kell, hogy az adott modellez\u0151 eszk\u00f6z az egyes modell elemeket hogyan k\u00e9pezi le az adott programoz\u00e1si nyelv elemeire. A lek\u00e9pez\u00e9s f\u00fcgg a nyelvt\u0151l \u00e9s a modellez\u0151 eszk\u00f6zt\u0151l is, nincs r\u00e1 univerz\u00e1lis szabv\u00e1ny. A lek\u00e9pez\u00e9sek \u00e1ltal\u00e1ban magukt\u00f3l \u00e9rtet\u0151d\u0151ek, t\u00fal nagy elt\u00e9r\u00e9s nem szokott lenni.</p> <p>A k\u00f6vetkez\u0151kben azt tekintj\u00fck \u00e1t, hogy az UML oszt\u00e1lydiagram egyes modellelemei hogyan k\u00e9pz\u0151dnek le forr\u00e1sk\u00f3dra, \u00e9s viszont.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#osztalyok-lekepezese","title":"Oszt\u00e1lyok lek\u00e9pez\u00e9se","text":"<p>Mondhatni trivi\u00e1lisan egyszer\u0171:</p> <ul> <li>UML oszt\u00e1ly -&gt; oszt\u00e1ly</li> <li>UML attrib\u00fatum -&gt; tagv\u00e1ltoz\u00f3</li> <li>UML m\u0171velet -&gt; m\u0171velet/met\u00f3dus</li> </ul> <p>Egy p\u00e9lda:</p> <p></p> <p>, mely a k\u00f6vetkez\u0151 k\u00f3dnak felel meg C# nyelven:</p> <pre><code>public abstract class Shape\n{\n    private int x;\n    private int y;\n    public Shape(int x, int y) { this.x = x; this.y = y; }\n    public abstract void Draw(Graphics gr);\n}\n</code></pre> <p>A l\u00e1that\u00f3s\u00e1g kapcs\u00e1n a lek\u00e9pez\u00e9s:</p> <ul> <li>+: public</li> <li>-: private</li> <li>#: protected</li> </ul> <p>Enn\u00e9l izgalmasabb k\u00e9rd\u00e9sk\u00f6r, hogy milyen m\u00f3don t\u00f6rt\u00e9nik az oszt\u00e1lyok k\u00f6z\u00f6tti kapcsolatok lek\u00e9pez\u00e9se, ezt a k\u00f6vetkez\u0151 fejezetek ismertetik.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#i-altalanositas-specializacio-kapcsolat","title":"I. \u00c1ltal\u00e1nos\u00edt\u00e1s, specializ\u00e1ci\u00f3 kapcsolat","text":"<p>C# lek\u00e9pez\u00e9s:</p> <pre><code>public class Base\n{ };\npublic class Derived : Base\n{ };\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/#ii-asszociacio","title":"II. Asszoci\u00e1ci\u00f3","text":"<p>Ez a kapcsolatt\u00edpus mindig kommunik\u00e1ci\u00f3t jelent az oszt\u00e1lyok objektumai k\u00f6z\u00f6tt. Egy adott oszt\u00e1ly ig\u00e9nybe veszi egy m\u00e1sik oszt\u00e1ly szolg\u00e1ltat\u00e1sait.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#a-lekepezes-01-multiplicitasu-asszociacios-kapcsolat-eseten","title":"A) Lek\u00e9pez\u00e9s 0..1 multiplicit\u00e1s\u00fa asszoci\u00e1ci\u00f3s kapcsolat eset\u00e9n","text":"<p>Ebben az esetben egy pointert vagy referenci\u00e1t tartalmaz a kliens oszt\u00e1ly, melyen kereszt\u00fcl ig\u00e9nybe tudja venni a c\u00e9loszt\u00e1ly szolg\u00e1ltat\u00e1sait (meg tudja h\u00edvni annak m\u0171veleteit). P\u00e9lda:</p> <p></p> <p>C++ lek\u00e9pez\u00e9s:</p> <pre><code>class Application\n{\n   WindowManager* windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>C# lek\u00e9pez\u00e9s (nincsenek pointerek, csak referenci\u00e1k):</p> <pre><code>class Application\n{\n   WindowManager windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>Mink\u00e9t esetben azt l\u00e1tjuk, hogy a kliens oszt\u00e1lyba felvesz\u00fcnk egy pointer vagy referencia tagv\u00e1ltoz\u00f3t, melynek t\u00edpusa megegyezik az asszoci\u00e1ci\u00f3ban hivatkozott c\u00e9loszt\u00e1ly t\u00edpus\u00e1val, illetve a tagv\u00e1ltoz\u00f3 neve az asszoci\u00e1ci\u00f3s kapcsolatra a c\u00e9loszt\u00e1lyra megadott szereppel (role), mely a p\u00e9ld\u00e1ban a <code>windowManager</code>. A lek\u00e9pez\u00e9s logikus, hiszen a kliens ezen pointeren/referenci\u00e1n kereszt\u00fcl tudja a c\u00e9lobjektumot b\u00e1rmely m\u0171velet\u00e9b\u0151l el\u00e9rni \u00e9s met\u00f3dusait megh\u00edvni.</p> <p>Megjegyz\u00e9s. El\u0151fordulhat, hogy az asszoci\u00e1ci\u00f3 k\u00e9tir\u00e1ny\u00fa, mindk\u00e9t oszt\u00e1ly ig\u00e9nybe veszi a m\u00e1sik szolg\u00e1ltat\u00e1sait. Ilyenkor sokszor nem tessz\u00fck ki az asszoci\u00e1ci\u00f3 mindk\u00e9t v\u00e9g\u00e9re a nyilat, hanem mindk\u00e9t v\u00e9g\u00e9r\u0151l elhagyjuk azt. Ilyen k\u00e9tir\u00e1ny\u00fa kapcsolat eset\u00e9n a szerepet (role) a kapcsolat mindk\u00e9t v\u00e9g\u00e9n meg kell adni. A lek\u00e9pez\u00e9s sor\u00e1n mindk\u00e9t oszt\u00e1lyba felvesz\u00fcnk egy pointert/referenci\u00e1t a m\u00e1sikra.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#b-lekepezes-0n-multiplicitasu-asszociacios-kapcsolat-eseten","title":"B) Lek\u00e9pez\u00e9s 0..n multiplicit\u00e1s\u00fa asszoci\u00e1ci\u00f3s kapcsolat eset\u00e9n","text":"<p>Ebben az esetben egy kliensoldali objektum t\u00f6bb c\u00e9loldali objektummal van kapcsolatban. P\u00e9lda:</p> <p></p> <p>Egy <code>WindowManager</code> objektum t\u00f6bb <code>Window</code> objektumot menedzsel. A lek\u00e9pez\u00e9s sor\u00e1n a kliens oszt\u00e1lyba a c\u00e9loszt\u00e1lybeli objektumok valamilyen gy\u0171jtem\u00e9ny\u00e9t vessz\u00fck fel. Ez lehet t\u00f6mb, lista stb., ami a c\u00e9lunknak az adott helyzetben legink\u00e1bb megfelel.</p> <p>Egy lek\u00e9pz\u00e9si lehet\u0151s\u00e9g a fenti p\u00e9ld\u00e1ra C++ nyelven:</p> <pre><code>class WindowManager\n{\n  vector&lt;Window*&gt; windows;\n};\n</code></pre> <p>Illetve C# nyelven:</p> <pre><code>class WindowManager\n{\n  List&lt;Window&gt; windows; \n};\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/#iii-aggregacio-tartalmazas-resz-egesz-viszony","title":"III. Aggreg\u00e1ci\u00f3 (tartalmaz\u00e1s, r\u00e9sz-eg\u00e9sz viszony)","text":"<p>\u00c1ltal\u00e1ban a lek\u00e9pez\u00e9se pontosan \u00fagy t\u00f6rt\u00e9nik, mint az asszoci\u00e1ci\u00f3 eset\u00e9ben.</p>"},{"location":"egyeb/uml-kod-kapcsolata/#iv-fuggoseg-dependency","title":"IV. F\u00fcgg\u0151s\u00e9g (dependency)","text":"<p>A leglaz\u00e1bb kapcsolatot jelenti oszt\u00e1lyok k\u00f6z\u00f6tt. P\u00e9lda:</p> <p></p> <p>A jelent\u00e9se: a <code>Window</code> oszt\u00e1ly f\u00fcgg a <code>Graphics</code> oszt\u00e1lyt\u00f3l. Vagyis, ha a <code>Graphics</code> oszt\u00e1ly megv\u00e1ltozik, akkor lehet, hogy a Window oszt\u00e1lyt is meg kell v\u00e1ltoztatni. Ezt a kapcsolatt\u00edpust akkor szoktuk haszn\u00e1lni, ha a f\u00fcgg\u0151s\u00e9gi kapcsolat elej\u00e9n lev\u0151 oszt\u00e1ly met\u00f3dusai param\u00e9terlist\u00e1j\u00e1ban/visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u00e9ben szerepel a kapcsolat v\u00e9g\u00e9n lev\u0151 oszt\u00e1ly. A p\u00e9ld\u00e1ban a <code>Window</code> oszt\u00e1ly <code>onDraw</code> m\u0171velete param\u00e9terk\u00e9nt megkapja a <code>Graphics</code> oszt\u00e1ly egy objektum\u00e1t, \u00edgy f\u00fcgg t\u0151le, hiszen a met\u00f3dus t\u00f6rzs\u00e9ben \u00edgy meg tudja h\u00edvni a <code>Graphics</code> oszt\u00e1ly met\u00f3dusait. Ha pl. a <code>Graphics</code> oszt\u00e1ly <code>FillRect</code> met\u00f3dus\u00e1nak nev\u00e9t megv\u00e1ltoztatjuk, akkor ezt a v\u00e1ltoz\u00e1st \u00e1t kell vezetni a h\u00edv\u00e1sok hely\u00e9n, vagyis a <code>Window</code> oszt\u00e1ly onDraw met\u00f3dus\u00e1nak t\u00f6rzs\u00e9ben is.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/","title":"Theory of the relationship between the UML class diagram and code","text":"<p>Last modified date: 2025.02.24 Prepared by Zolt\u00e1n Benedek</p> <p>The chapter does not contain any exercise, it introduces the related theory to students.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#introduction","title":"Introduction","text":"<p>The chapter provides a brief, outline-based overview of the basics of mapping between UML class diagrams and source code, as a review of what was already learned in the previous semester in the Software Technology course.</p> <p>Today, there are many software development methodologies. These methodologies vary in the extent to which they rely on or require modeling during software development. However, it is undeniable that even the followers of the most agile, \"code-centric\" approaches acknowledge the usefulness of visually modeling key/complex software components and structural elements due to the greater expressiveness of graphical representations.</p> <p>Let\u2019s assume our task is to develop an application or a specific module of it. Following our chosen methodology, we will go through the steps of requirements analysis, analysis, design, implementation and testing, probably in multiple iterations. Let's now focus on the design phase. This will result in a detailed design of the system (or at least parts of it), resulting in a detailed/implementation plan and model. At this level, certain elements of the model (e.g. classes) can be explicitly mapped to elements of the programming language chosen for implementing the subsystem. If we have a good development/modeling tool, it can generate class skeletons (e.g. C++, Java, C# classes). Our task then is to fill in the method bodies in the generated code.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#concepts","title":"Concepts","text":"<ul> <li>Forward engineering: generating code from a model. The modeling tool can generate a program skeleton from the detailed design. The advantage is that less manual coding is needed.</li> <li>Reverse engineering: generating a model from existing code. This helps to understand already written code.</li> <li>Round-trip engineering: a combined application of the previous two. The key idea is keeping the model and the code synchronized at all times. Changes in the code are reflected in the model, and changes in the model are reflected in the code.</li> </ul> <p>In order to take advantage of code generation, we must understand how the modeling tool maps specific model elements to elements of the chosen programming language. The mapping depends on both the programming language and the modeling tool, there is no universal standard for it. The mappings are usually intuitive, with little significant variation.</p> <p>In the following sections, we will examine how the different elements of a UML class diagram are mapped to source code and vice versa.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#mapping-of-classes","title":"Mapping of classes","text":"<p>It's trivially simple:</p> <ul> <li>UML class -&gt; class</li> <li>UML attribute -&gt; member variable</li> <li>UML operation -&gt; operation/method</li> </ul> <p>An example:</p> <p></p> <p>which corresponds to the following C# code:</p> <pre><code>public abstract class Shape\n{\n    private int x;\n    private int y;\n    public Shape(int x, int y) { this.x = x; this.y = y; }\n    public abstract void Draw(Graphics gr);\n}\n</code></pre> <p>Regarding visibility, the mapping is:</p> <ul> <li>+: public</li> <li>-: private</li> <li>#: protected</li> </ul> <p>A more interesting topic is how relationships between classes are mapped, which is explained in the following chapters.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#i-generalization-and-specialization-relationship","title":"I. Generalization and Specialization Relationship","text":"<p>C# mapping:</p> <pre><code>public class Base\n{ };\npublic class Derived : Base\n{ };\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#ii-association","title":"II. Association","text":"<p>This type of relationship always represents communication between the objects of classes. A given class utilizes the services of another class.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#a-mapping-of-an-association-with-01-multiplicity","title":"A) Mapping of an association with 0..1 multiplicity","text":"<p>In this case, the client class contains a pointer or reference through which it can use the services of the target class (it can call its operations). Example:</p> <p></p> <p>C++ mapping:</p> <pre><code>class Application\n{\n   WindowManager* windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>C# mapping (no pointers, only references):</p> <pre><code>class Application\n{\n   WindowManager windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>In both cases, we see that a pointer or reference member variable is added to the client class, whose type matches the type of the target class referenced in the association, and the name of the member variable corresponds to the role assigned to the target class in the association, which in this example is <code>windowManager</code>. The mapping is logical, since the client can access the target object from any of its methods and invoke its methods through this pointer/reference.</p> <p>Note. The association may be bidirectional, meaning both classes use each other's services. In such cases, instead of putting an arrow at both ends of the association, the arrows at both ends are often omitted. In a bidirectional relationship, the role must be specified at both ends. When mapping, both classes must contain a pointer/reference to the other.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#b-mapping-in-the-case-of-a-0n-multiplicity-association","title":"B) Mapping in the case of a 0..n multiplicity association","text":"<p>In this case, a client-side object is associated with multiple target-side objects. Example:</p> <p></p> <p>One <code>WindowManager</code> object manages multiple <code>Window</code> objects. In the mapping process, the client class contains some kind of collection of objects from the target class. This can be an array, list, etc., depending on what is most suitable for our specific situation.</p> <p>A possible mapping for the above example in C++:</p> <pre><code>class WindowManager\n{\n  vector&lt;Window*&gt; windows;\n};\n</code></pre> <p>And in C#:</p> <pre><code>class WindowManager\n{\n  List&lt;Window&gt; windows; \n};\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#iii-aggregation-containment-part-whole-relationship","title":"III. Aggregation (containment, part-Whole relationship)","text":"<p>Typically, the mapping is done in exactly the same way as for associations.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_eng/#iv-dependency","title":"IV. Dependency","text":"<p>This represents the loosest relationship between classes. Example:</p> <p></p> <p>Its meaning: the <code>Window</code> class depends on the <code>Graphics</code> class. In other words, if the <code>Graphics</code> class changes, it might be necessary to modify the <code>Window</code> class as well. This type of relationship is typically used when the methods of the class at the beginning of the dependency relationship include the class at the end of the relationship in their parameter list or return type. In the example, the <code>onDraw</code> operation of the <code>Window</code> class receives an object of the <code>Graphics</code> class as a parameter, making it dependent on it because the method body can call methods from the <code>Graphics</code> class. For example, if we change the name of the <code>FillRect</code> method in the <code>Graphics</code> class, this change must be reflected where the method is called, i.e., in the body of the <code>Window</code> class's <code>onDraw</code> method as well.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/","title":"Theorie der Beziehung zwischen dem UML-Klassendiagramm und dem Code","text":"<p>Letztes \u00c4nderungsdatum: 2022.10.15 Ausgearbeitet von: Zolt\u00e1n Benedek</p> <p>Das Kapitel enth\u00e4lt keine \u00dcbung, sondern bietet den Studierenden eine Einf\u00fchrung in die entsprechende Theorie.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Das Kapitel gibt einen kurzen \u00dcberblick \u00fcber die Grundlagen des Mappings zwischen dem UML-Klassendiagramm und dem Quellcode, als Wiederholung dessen, was bereits im vorherigen Semester in Softwarechnologien gelernt wurde.</p> <p>Heutzutage gibt es viele Softwareentwicklungsmethoden. Sie st\u00fctzen sich bei der Erstellung der Software in unterschiedlichem Ma\u00dfe auf die Modellierung bzw. erfordern diese. Es besteht jedoch kein Zweifel daran, dass selbst die Anh\u00e4nger der agilsten, \"code-zentrierten\" Ans\u00e4tze es f\u00fcr n\u00fctzlich halten, die wichtigeren/komplexeren Komponenten und Strukturelemente der Software visuell zu modellieren, da deren grafische Natur eine gr\u00f6\u00dfere Ausdruckskraft hat.</p> <p>Nehmen wir an, man muss eine Anwendung oder ein bestimmtes Modul einer Anwendung erstellen. Nach der von sich gew\u00e4hlten Methodik wird man die Schritte Anforderungsanalyse, Analyse, Entwurf, Implementierung und Test durchf\u00fchren, wahrscheinlich in mehreren Iterationen. Konzentrieren wir uns nun auf die Entwurfsphase. Das Ergebnis ist ein detaillierter Entwurf des Systems (zumindest von Teilen davon), der in einen detaillierten Plan oder ein Modell f\u00fcr die Umsetzung m\u00fcndet. Auf dieser Ebene k\u00f6nnen bestimmte Elemente des Modells (z. B. Klassen) explizit auf Elemente der f\u00fcr die Implementierung des Teilsystems gew\u00e4hlten Programmiersprache abgebildet werden. Wenn man \u00fcber ein gutes Entwicklungs-/Modellierungswerkzeug verf\u00fcgt, kann dieses das Klassenskelett (z. B. C++, Java-, C#-Klassen) generieren. Unsere Aufgabe besteht nun darin, die Wurzel der Methoden in den generierten Code einzutragen.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#konzepte","title":"Konzepte","text":"<ul> <li>Forward Engineering: Generierung von Code aus einem Modell. Aus dem detaillierten Plan kann das Modellierungswerkzeug das Programmger\u00fcst erstellen. Der Vorteil ist, dass weniger Kodierung erforderlich ist.</li> <li>Reverse Engineering: Generierung eines Modells aus Code. Es hilft Ihnen, den bereits vorhandenen Code zu verstehen.</li> <li>Round-Trip-Engineering: eine Kombination der beiden vorgenannten Verfahren. Der springende Punkt ist, dass das Modell und der Code st\u00e4ndig synchronisiert sind. Wenn Sie den Code \u00e4ndern, erscheint die \u00c4nderung im Modell, wenn Sie das Modell \u00e4ndern, erscheint die \u00c4nderung im Code.</li> </ul> <p>Um die Vorteile der Codegenerierung nutzen zu k\u00f6nnen, muss man Folgendes wissen: man muss wissen, wie ein bestimmtes Modellierungswerkzeug jedes Modellelement auf Elemente einer bestimmten Programmiersprache abbildet. Das Mapping h\u00e4ngt von der Sprache und dem Modellierungswerkzeug ab, es gibt keinen universellen Standard. Die Zuordnungen sind in der Regel selbsterkl\u00e4rend, es gibt in der Regel nicht allzu viele Variationen.</p> <p>Im Folgenden werden wir uns ansehen, wie jedes Modellelement des UML-Klassendiagramms auf den Quellcode abgebildet wird und umgekehrt.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#zuordnung-von-klassen","title":"Zuordnung von Klassen","text":"<p>Es ist trivial einfach:</p> <ul> <li>UML-Klasse -&gt; Klasse</li> <li>UML-Attribut -&gt; Mitgliedsvariable</li> <li>UML-Operation -&gt; Funktion/Method</li> </ul> <p>Ein Beispiel:</p> <p></p> <p>, was folgendem Code in C# entspricht:</p> <pre><code>public abstract class Shape\n{\n    private int x;\n    private int y;\n    public Shape(int x, int y) { this.x = x; this.y = y; }\n    public abstract void Draw(Graphics gr);\n}\n</code></pre> <p>Im Zusammenhang mit der Sichtbarkeit, Kartierung:</p> <ul> <li>+: public</li> <li>-: private</li> <li># : protected</li> </ul> <p>Eine spannendere Frage ist, wie die Beziehungen zwischen den Klassen abgebildet werden, und dies wird in den folgenden Kapiteln diskutiert.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#i-generalisierung-und-spezialisierung","title":"I. Generalisierung und Spezialisierung","text":"<p>C#-Zuordnung:</p> <pre><code>public class Base\n{ };\npublic class Derived : Base\n{ };\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#ii-assoziation","title":"II. Assoziation","text":"<p>Dieser Beziehungstyp impliziert immer eine Kommunikation zwischen Objekten von Klassen. Eine Abteilung nimmt die Dienste einer anderen Abteilung in Anspruch.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#a-aufbau-einer-01-multiplizitats-assoziationsbeziehung","title":"A) Aufbau einer 0..1-Multiplizit\u00e4ts-Assoziationsbeziehung","text":"<p>In diesem Fall enth\u00e4lt die Client-Klasse einen Zeiger oder Verweis, \u00fcber den sie die Dienste der Zielklasse nutzen (ihre Operationen aufrufen) kann. Beispiel:</p> <p></p> <p>C++-Zuordnung:</p> <pre><code>klasse Bewerbung\n{\n   WindowManager* windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>C#-Zuordnung (keine Zeiger, nur Referenzen):</p> <pre><code>class Application\n{\n   WindowManager windowManager;\n};\n\nclass WindowManager\n{\n};\n</code></pre> <p>In beiden F\u00e4llen sehen wir, dass wir der Client-Klasse eine Zeiger- oder Referenz-Member-Variable hinzuf\u00fcgen, die vom gleichen Typ ist wie die Zielklasse, auf die in der Assoziation verwiesen wird, und der Name der Member-Variable ist die Rolle, die der Zielklasse f\u00fcr die Assoziationsbeziehung gegeben wurde, die in diesem Beispiel <code>windowManager</code>ist. Die Zuordnung ist logisch, da der Client auf das Zielobjekt aus jeder seiner Operationen zugreifen und seine Methoden \u00fcber diesen Zeiger/Verweis aufrufen kann.</p> <p>Kommentar. Manchmal ist die Assoziation in beide Richtungen, wobei jede Klasse die Dienste der anderen nutzt. Anstatt einen Pfeil an beiden Enden der Assoziation anzubringen, lassen wir ihn oft an beiden Enden stehen. In einer solchen wechselseitigen Beziehung muss die Rolle an beiden Enden der Beziehung angegeben werden. W\u00e4hrend des Mappings f\u00fcgen wir einen Zeiger/Referenz auf jede Klasse der anderen hinzu.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#b-ableitung-fur-eine-assoziationsbeziehung-mit-der-multiplizitat-0n","title":"B) Ableitung f\u00fcr eine Assoziationsbeziehung mit der Multiplizit\u00e4t 0..n","text":"<p>In diesem Fall ist ein Objekt auf der Client-Seite mit mehreren Objekten auf der Zielseite verbunden. Beispiel:</p> <p></p> <p>Ein <code>WindowManager</code> Objekt verwaltet mehrere <code>Window</code> Objekte. Das Mapping \u00fcbernimmt eine Sammlung von Objekten der Zielklasse in die Client-Klasse. Dabei kann es sich um ein Array, eine Liste usw. handeln, je nachdem, was f\u00fcr unsere Zwecke in der jeweiligen Situation am besten geeignet ist.</p> <p>Eine Abbildung des obigen Beispiels in C++:</p> <pre><code>class WindowManager\n{\n  vector&lt;Window*&gt; windows;\n};\n</code></pre> <p>Oder in C#:</p> <pre><code>class WindowManager\n{\n  List&lt;Window&gt; windows; \n};\n</code></pre>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#iii-aggregation-einbeziehung-teil-ganzes-beziehung","title":"III. Aggregation (Einbeziehung, Teil-Ganzes-Beziehung)","text":"<p>Im Allgemeinen ist die Zuordnung genau die gleiche wie bei der Assoziation.</p>"},{"location":"egyeb/uml-kod-kapcsolata/index_ger/#iv-abhangigkeit-dependenz","title":"IV. Abh\u00e4ngigkeit (Dependenz)","text":"<p>Sie stellt die lockerste Verbindung zwischen den Abteilungen dar. Beispiel:</p> <p></p> <p>Das bedeutet: Die Klasse <code>Window</code> h\u00e4ngt von der Klasse <code>Graphics</code> ab. Das hei\u00dft, wenn die Klasse <code>Graphics</code> ge\u00e4ndert wird, muss m\u00f6glicherweise auch die Klasse Window ge\u00e4ndert werden. Diese Art der Beziehung wird verwendet, wenn die Parameterliste/R\u00fcckgabewerte der Methoden der Klasse am Anfang der Abh\u00e4ngigkeitsbeziehung die Klasse am Ende der Beziehung enth\u00e4lt. Im Beispiel erh\u00e4lt die Operation <code>onDraw</code> der Klasse <code>Window</code> ein Objekt der Klasse <code>Graphics</code> als Parameter und ist somit von dieser abh\u00e4ngig, da sie die Methoden der Klasse <code>Graphics</code> im Stamm der Methode aufrufen kann. Wird z.B. der Name der Methode <code>FillRect</code> der Klasse <code>Graphics</code> ge\u00e4ndert, muss sich diese \u00c4nderung in der Aufrufstelle, d.h. im Stamm der Methode onDraw der Klasse <code>Window</code> widerspiegeln.</p>"},{"location":"hazi/","title":"\u00d6n\u00e1ll\u00f3/h\u00e1zi feladatok","text":"<p>Valamennyi h\u00e1zi feladat elk\u00e9sz\u00edt\u00e9se k\u00f6telez\u0151. A megold\u00e1sok bead\u00e1sa GitHub Classroom seg\u00edts\u00e9g\u00e9vel t\u00f6rt\u00e9nik (b\u0151vebben itt). Az \u00f6n\u00e1ll\u00f3/h\u00e1zi feladatokra vonatkoz\u00f3 pontos k\u00f6vetelm\u00e9nyek Moodle-ben, a T\u00e1rgyk\u00f6vetelm\u00e9nyek alatt olvashat\u00f3k (\"\u00d6n\u00e1ll\u00f3/h\u00e1zi feladatok\" fejezet).</p>"},{"location":"hazi/#a-feladatok","title":"A feladatok","text":"<ul> <li>1. HF - A modell \u00e9s a k\u00f3d kapcsolata</li> <li>2. HF - Nyelvi eszk\u00f6z\u00f6k</li> <li>3. HF - Felhaszn\u00e1l\u00f3i fel\u00fclet kialak\u00edt\u00e1sa</li> <li>4. HF - T\u00f6bbsz\u00e1l\u00fa alkalmaz\u00e1sok fejleszt\u00e9se</li> <li>5. HF - MVVM</li> <li>6. HF - Tervez\u00e9si mint\u00e1k</li> <li>IMSc HF - Liftrendszer</li> </ul>"},{"location":"hazi/#a-feladatok-beadasa","title":"A feladatok bead\u00e1sa","text":"<p>Minden h\u00e1zi feladat megold\u00e1s\u00e1t egy szem\u00e9lyre sz\u00f3l\u00f3 git repository-ban kell beadni. Ennek pontos folyamat\u00e1t l\u00e1sd itt. K\u00e9r\u00fcnk, alaposan olvasd v\u00e9gig a le\u00edr\u00e1st!</p> <p>FONTOS</p> <p>A h\u00e1zik elk\u00e9sz\u00edt\u00e9se \u00e9s bead\u00e1s sor\u00e1n az itt le\u00edrtak szerint kell elj\u00e1rnod. A nem ilyen form\u00e1ban beadott h\u00e1zi feladatokat nem \u00e9rt\u00e9kelj\u00fck.</p> <p>Bizonyos h\u00e1zi feladatokhoz automata el\u0151ellen\u0151rz\u0151 is tartozik, err\u0151l itt olvashatsz b\u0151vebben.</p>"},{"location":"hazi/#kepernyokepek","title":"K\u00e9perny\u0151k\u00e9pek","text":"<p>Bizonyos h\u00e1zi feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi.</p> <p>A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, \u00edgy felker\u00fclnek a git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</p>"},{"location":"hazi/#szukseges-eszkozok","title":"Sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k","text":"<p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezet alapvet\u0151en a Visual Studio 2022, err\u0151l itt tal\u00e1lhat\u00f3 b\u0151vebb le\u00edr\u00e1s.</p>"},{"location":"hazi/VisualStudio/","title":"Visual Studio &amp; .NET SDK telep\u00edt\u00e9se","text":"<p>COMING SOON</p>"},{"location":"hazi/index_eng/","title":"Independent/homework assignments","text":"<p>Completing all homework assignments is mandatory. Submissions are made using GitHub Classroom (more details here). The exact requirements for independent/homework assignments can be found on AUT portal.</p>"},{"location":"hazi/index_eng/#the-assignments","title":"The Assignments","text":"<ul> <li>1<sup>st</sup> HW - Model and code relationship</li> <li>2<sup>nd</sup> HW - Language tools</li> <li>3<sup>rd</sup> HW - User interface design</li> <li>4<sup>th</sup> HW - Multithreaded application development</li> <li>5<sup>th</sup> HW - MVVM</li> <li>6<sup>th</sup> HW - Design patterns</li> </ul>"},{"location":"hazi/index_eng/#submitting-assignments","title":"Submitting assignments","text":"<p>Each homework solution must be submitted in a personal Git repository. The exact submission process can be found here. Please read the description carefully!</p> <p>IMPORTANT</p> <p>You must follow the instructions described here when preparing and submitting homework. Assignments not submitted in this format will not be evaluated.</p> <p>Some homework assignments include an automated pre-checker, which you can read more about here.</p>"},{"location":"hazi/index_eng/#screenshots","title":"Screenshots","text":"<p>Certain assignments require you to take a screenshot of a specific part of your solution to prove that you created the solution yourself. The required content of the screenshots is explicitly specified in each assignment.</p> <p>Screenshots must be submitted as part of the solution, so they will be included in the Git repository along with the content. Since the repository is private, only instructors can see it. If the screenshot contains any content you do not want to upload, you may censor it before submission.</p>"},{"location":"hazi/index_eng/#required-tools","title":"Required tools","text":"<p>The primary development environment required is Visual Studio 2022. A more detailed description can be found here.</p>"},{"location":"hazi/meghirdetes-elott/","title":"H\u00e1zi feladat","text":"<p>Ez a h\u00e1zi feladat ebben a f\u00e9l\u00e9vben m\u00e9g nem ker\u00fclt meghirdet\u00e9sre, \u00edgy a le\u00edr\u00e1sa k\u00e9s\u0151bb lesz el\u00e9rhet\u0151 a f\u00e9l\u00e9v folyam\u00e1n.</p>"},{"location":"hazi/meghirdetes-elott_eng/","title":"Homework","text":"<p>This homework assignment has not been announced yet for this semester, so its description will be available later during the semester.</p>"},{"location":"hazi/meghirdetes-elott_ger/","title":"Hausaufgaben","text":"<p>Diese Hausarbeit wurde in diesem Semester noch nicht angek\u00fcndigt, so dass die Beschreibung erst im Laufe des Semesters verf\u00fcgbar sein wird.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/","title":"1. HF - A modell \u00e9s a k\u00f3d kapcsolata","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A feladathoz nem kapcsol\u00f3dik el\u0151ad\u00e1s.  A feladatok elm\u00e9leti \u00e9s gyakorlati h\u00e1tter\u00e9\u00fcl az  \"1. A modell \u00e9s a k\u00f3d kapcsolata\" vezetett laborgyakorlat szolg\u00e1l:</p> <ul> <li>Ezt a laborgyakorlatot a hallgat\u00f3k a gyakorlatvezet\u0151 \u00fatmutat\u00e1s\u00e1val, a gyakorlatvezet\u0151vel k\u00f6z\u00f6sen vezetett m\u00f3don v\u00e9gzik/v\u00e9gezt\u00e9k el.</li> <li>A laborgyakorlathoz \u00fatmutat\u00f3 tartozik, mely r\u00e9szletekbe men\u0151en bemutatja az elm\u00e9leti h\u00e1tteret, valamint l\u00e9p\u00e9senk\u00e9nt ismerteti a megold\u00e1s elk\u00e9sz\u00edt\u00e9s\u00e9t: 1. A modell \u00e9s a k\u00f3d kapcsolata</li> </ul> <p>Erre \u00e9p\u00edtve jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel elv\u00e9gezhet\u0151k.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>Egy egyszer\u0171 .NET alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se, C# alapok gyakorl\u00e1sa</li> <li>Az UML \u00e9s a k\u00f3d kapcsolat\u00e1nak szeml\u00e9ltet\u00e9se</li> <li>Az interf\u00e9sz \u00e9s az absztrakt \u0151soszt\u00e1ly alkalmaz\u00e1stechnik\u00e1j\u00e1nak gyakorl\u00e1sa</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s.</p> <p>C# 12-es (\u00e9s \u00fajabb) nyelvi elemek haszn\u00e1lata</p> <p>A h\u00e1zi feladat megold\u00e1sa sor\u00e1n C# 12-es, \u00e9s ann\u00e1l \u00fajabb nyelvi elemek, (pl. primary constructor) nem haszn\u00e1lhat\u00f3k, ugyanis a GitHub-on fut\u00f3 ellen\u0151rz\u0151 ezeket m\u00e9g nem t\u00e1mogatja.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#a-kiindulasi-keret-letoltese-az-elkeszult-megoldas-feltoltese","title":"A kiindul\u00e1si keret let\u00f6lt\u00e9se, az elk\u00e9sz\u00fclt megold\u00e1s felt\u00f6lt\u00e9se","text":"<p>A h\u00e1zi feladat kiindul\u00e1si k\u00f6rnyezet\u00e9nek publik\u00e1l\u00e1sa, valamint a megold\u00e1s bead\u00e1sa Git, GitHub \u00e9s GitHub Classroom seg\u00edts\u00e9g\u00e9vel t\u00f6rt\u00e9nik. F\u0151bb l\u00e9p\u00e9sek:</p> <ol> <li>GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3).</li> <li>Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t.</li> <li>A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> </ol> <p>Ezekhez itt tal\u00e1lhat\u00f3 r\u00e9szletesebb le\u00edr\u00e1s:</p> <ul> <li>Git, GitHub, GitHub Classroom</li> <li>H\u00e1zi feladat munkafolyamat \u00e9s a Git/GitHub haszn\u00e1lata</li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/#a-hazi-feladat-eloellenorzese-es-hivatalos-ertekelese","title":"A h\u00e1zi feladat el\u0151ellen\u0151rz\u00e9se \u00e9s hivatalos \u00e9rt\u00e9kel\u00e9se","text":"<p>Minden egyes alkalommal, miut\u00e1n a GitHub-ra push-olt\u00e1l k\u00f3dot, a GitHub-on automatikusan lefut a felt\u00f6lt\u00f6tt k\u00f3d (el\u0151)ellen\u0151rz\u00e9se, \u00e9s meg lehet n\u00e9zni a kimenet\u00e9t! Err\u0151l b\u0151vebb inform\u00e1ci\u00f3 itt tal\u00e1lhat\u00f3 (mindenk\u00e9ppen olvasd el): A h\u00e1zi feladat el\u0151ellen\u0151rz\u00e9se \u00e9s hivatalos \u00e9rt\u00e9kel\u00e9se.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#feladat-1-egy-egyszeru-net-konzol-alkalmazas-elkeszitese","title":"Feladat 1 \u2013 Egy egyszer\u0171 .NET konzol alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/#kiindulo-projekt","title":"Kiindul\u00f3 projekt","text":"<p>A kiindul\u00e1si k\u00f6rnyezet a <code>Task1</code> mapp\u00e1ban tal\u00e1lhat\u00f3, az ebben lev\u0151 <code>MusicApp.sln</code> f\u00e1jlt nyissuk meg Visual Studioban \u00e9s ebben a solutionben dolgozzunk.</p> <p>Figyelem!</p> <p>\u00daj solution \u00e9s/vagy projektf\u00e1jl l\u00e9trehoz\u00e1sa, vagy a projekt m\u00e1s/\u00fajabb .NET verzi\u00f3kra targetel\u00e9se tilos.</p> <p>A <code>Task1\\Input</code> mapp\u00e1ban tal\u00e1lhat\u00f3 egy <code>music.txt</code> f\u00e1jl, mely a feladat bemenetek\u00e9nt haszn\u00e1land\u00f3.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#feladat","title":"Feladat","text":"<p>Egy sz\u00f6vegf\u00e1ljban zeneszerz\u0151k/el\u0151ad\u00f3k/egy\u00fcttesek sz\u00e1mainak c\u00edmeit t\u00e1roljuk a k\u00f6vetkez\u0151 form\u00e1tumban.</p> <ul> <li>Minden szerz\u0151h\u00f6z k\u00fcl\u00f6n sor tartozik.</li> <li>Minden sorban el\u0151sz\u00f6r a szerz\u0151 neve szerepel, majd <code>;</code>-t k\u00f6vetve <code>;</code>-vel elv\u00e1lasztva sz\u00e1mok c\u00edmei.</li> <li>A f\u00e1jl tartalma \u00e9rv\u00e9nyesnek tekintend\u0151, ha \u00fcres, vagy csak whitespace (space, tab) karaktereket tartalmaz\u00f3 sorok is vannak.</li> </ul> <p>A mell\u00e9kelt music.txt f\u00e1jl tartalma a k\u00f6vetkez\u0151h\u00f6z hasonl\u00f3:</p> <pre><code>Adele; Hello; Rolling in the Deep; Skyfall\nEnnio Morricone;    A Fistful Of Dollars; Man with a Harmonica\nAC/DC; Thunderstruck; T.N.T\n</code></pre> <p>Olvassuk be a f\u00e1jlt <code>Song</code> oszt\u00e1lybeli objektumok list\u00e1j\u00e1ba. Egy <code>Song</code> objektum egy dal adatait t\u00e1rolja (szerz\u0151 \u00e9s c\u00edm). A beolvas\u00e1st k\u00f6vet\u0151en \u00edrjuk ki form\u00e1zott m\u00f3don az objektumok adatait a szabv\u00e1nyos kimenetre az al\u00e1bbi form\u00e1ban:</p> <pre><code>szerz\u01511: szerz\u01511_dalc\u00edm1\nszerz\u01511: szerz\u01511_dalc\u00edm2\n...\nszerz\u01512: szerz\u01512_dalc\u00edm1\n...\nstb.\n</code></pre> <p>A mintaf\u00e1jlunk eset\u00e9ben a k\u00f6vetkez\u0151 (a f\u00e1jl tartalm\u00e1nak f\u00fcggv\u00e9ny\u00e9ben lehet elt\u00e9r\u00e9s) kimenetet szeretn\u00e9nk l\u00e1tni:</p> <p></p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#a-megvalositas-lepesei","title":"A megval\u00f3s\u00edt\u00e1s l\u00e9p\u00e9sei","text":"<p>Vegy\u00fcnk fel egy <code>Song</code> nev\u0171 oszt\u00e1lyt a projektbe (jobb katt a Solution Explorerben a projekten, a men\u00fcben Add / Class).</p> <p>Vegy\u00fck fel a sz\u00fcks\u00e9ges tagokat \u00e9s egy ezekhez passzol\u00f3 konstruktort:</p> <pre><code>public class Song\n{\n    public readonly string Artist;\n    public readonly string Title;\n\n    public Song(string artist, string title)\n    {\n        Artist = artist;\n        Title = title;\n    }\n}\n</code></pre> <p>Property</p> <p>A tagv\u00e1ltoz\u00f3kat <code>readonly</code>-k\u00e9nt vett\u00fck fel, mert nem akartuk, hogy ezek ut\u00f3lag, a konstruktor lefut\u00e1s\u00e1t k\u00f6vet\u0151en megv\u00e1ltoztathat\u00f3k legyenek. Alternat\u00edva lehetne a csak olvashat\u00f3 tulajdons\u00e1g (property) alkalmaz\u00e1sa a readonly tagv\u00e1ltoz\u00f3k helyett (ez k\u00e9s\u0151bbi tanagyag).</p> <p>A k\u00f6vetkez\u0151kben a <code>Song</code> oszt\u00e1lyunkban defini\u00e1ljuk fel\u00fcl az implicit <code>System.Object</code> \u0151sb\u0151l \u00f6r\u00f6k\u00f6lt <code>ToString</code> m\u0171veletet, hogy az az el\u0151\u00edrt form\u00e1ban adja vissza objektum adatait. A megold\u00e1sban sztring interpol\u00e1ci\u00f3t haszn\u00e1ljunk (ezt m\u00e1r alkalmaztuk az els\u0151 labor keret\u00e9ben):</p> <pre><code>public override string ToString()\n{\n    return $\"{Artist}: {Title}\";\n}\n</code></pre> <p>Sz\u00f6vegf\u00e1jl feldolgoz\u00e1s\u00e1ra legk\u00e9nyelmesebben a <code>System.IO</code> n\u00e9vt\u00e9rben lev\u0151 <code>StreamReader</code> oszt\u00e1lyt tudjuk haszn\u00e1lni.</p> <p>A <code>Main</code> f\u00fcggv\u00e9ny\u00fcnkben olvassuk fel soronk\u00e9nt a f\u00e1jlt, hozzuk l\u00e9tre a <code>Song</code> objektumokat, \u00e9s tegy\u00fck be egy <code>List&lt;Song&gt;</code> dinamikusan ny\u00fajt\u00f3zkod\u00f3 t\u00f6mbbe. Figyelj\u00fcnk arra, hogy a f\u00e1jlban a <code>;</code>-vel elv\u00e1lasztott elemek el\u0151tt/ut\u00e1n whitespace karakterek (space, tab) lehetnek, ezekt\u0151l szabaduljunk meg!</p> <p>A k\u00f6vetkez\u0151 k\u00f3d egy lehets\u00e9ges megold\u00e1st mutat, a megold\u00e1s r\u00e9szleteit a k\u00f3dkommentek magyar\u00e1zz\u00e1k. A f\u00e9l\u00e9v sor\u00e1n ez az els\u0151 \u00f6n\u00e1ll\u00f3 feladat, valamint a hallgat\u00f3k t\u00f6bbs\u00e9g\u00e9nek ez els\u0151 .NET/C# alkalmaz\u00e1sa, \u00edgy itt m\u00e9g adunk mintamegold\u00e1st, de a rutinosabb hallgat\u00f3k \u00f6n\u00e1ll\u00f3an is pr\u00f3b\u00e1lkozhatnak.</p> Megold\u00e1s <pre><code>namespace MusicApp;\n\npublic class Program\n{\n    // A Main f\u00fcggv\u00e9ny a Program oszt\u00e1lyon bel\u00fcl tal\u00e1lhat\u00f3, ezt itt nem jel\u00f6lj\u00fck\n    public static void Main(string[] args)\n    {\n        // Ebben t\u00e1roljuk a dal objektumokat\n        List&lt;Song&gt; songs = new List&lt;Song&gt;();\n\n        // F\u00e1jl beolvas\u00e1sa soronk\u00e9nt, songs lista felt\u00f6lt\u00e9se\n        StreamReader sr = null;\n        try\n        {\n            // A @ jelent\u00e9se a string konstans el\u0151tt:\n            // kikapcsolja a string escape-el\u00e9st,\n            // \u00edgy nem kell a '\\' helyett '\\\\'-t \u00edrni.\n            sr = new StreamReader(@\"C:\\temp\\music.txt\");\n            string line;\n            while ((line = sr.ReadLine()) != null)\n            {\n                // Ha \u00fcres volt a sor\n                if (string.IsNullOrWhiteSpace(line))\n                    continue;\n\n                // A line v\u00e1ltoz\u00f3ban benne van az eg\u00e9sz sor,\n                // a Split-tel a ;-k ment\u00e9n feldaraboljuk\n                string[] lineItems = line.Split(';');\n\n                // Els\u0151 elem, amiben az szerz\u0151 nev\u00e9t v\u00e1rjuk\n                // A Trim elt\u00e1vol\u00edtja a vezet\u0151 \u00e9s z\u00e1r\u00f3 whitespace karaktereket\n                string artist = lineItems[0].Trim();\n\n                // Menj\u00fcnk v\u00e9gig a dalokon, \u00e9s vegy\u00fck fel a list\u00e1ba\n                for (int i = 1; i &lt; lineItems.Length; i++)\n                {\n                    Song song = new Song(artist, lineItems[i].Trim());\n                    songs.Add(song);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"A f\u00e1jl feldolgoz\u00e1sa sikertelen.\");\n            // Az e.Message csak a kiv\u00e9tel sz\u00f6veg\u00e9t tartalmazza. \n            // Ha minden kiv\u00e9tel inform\u00e1ci\u00f3t ki szeretn\u00e9nk \u00edrni (pl. stack trace), \n            // akkor az e.ToString()-et \u00edrjuk ki.\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // L\u00e9nyeges, hogy finally blokkban z\u00e1rjuk le a f\u00e1jlt, \n            // hogy egy esetleges kiv\u00e9tel eset\u00e9n se maradjon m\u00f6g\u00f6tt\u00fcnk lez\u00e1ratlan \u00e1llom\u00e1ny.\n            // try-finally helyett haszn\u00e1lhattunk volna using blokkot,\n            // azt egyel\u0151re nem kell tudni (a f\u00e9l\u00e9v derek\u00e1n tanuljuk).\n            if (sr != null)\n                sr.Close();\n        }\n\n        // A songs lista elemeinek ki\u00edr\u00e1sa a konzolra\n        foreach (Song song in songs)\n            Console.WriteLine(song.ToString());\n    }\n}\n</code></pre> <p>A <code>c:\\temp</code> mapp\u00e1ba m\u00e1soljuk ki a <code>music.txt</code> f\u00e1jlt, \u00e9s futtassuk az alkalmaz\u00e1st. A megval\u00f3s\u00edt\u00e1s sor\u00e1n az egyszer\u0171s\u00e9gre t\u00f6rekedve mindent bele\u00f6nt\u00f6tt\u00fcnk a <code>main</code> f\u00fcggv\u00e9nybe, \u201e\u00e9les\u201d k\u00f6rnyezetben mindenk\u00e9pp c\u00e9lszer\u0171 a k\u00f3dot egy k\u00fcl\u00f6n feldolgoz\u00f3 oszt\u00e1lyba kiszervezni.</p> <p>A fenti p\u00e9ld\u00e1ban j\u00f3p\u00e1r .NET/C# alaptechnika bemutat\u00e1sra ker\u00fcl, mindenk\u00e9pen \u00e9rdemes a fenti k\u00f3dba sz\u00fart megjegyz\u00e9sek alapj\u00e1n ezeket \u00e9rtelmezni \u00e9s megtanulni, a f\u00e9l\u00e9v sor\u00e1n ezekre \u00e9p\u00edteni fogunk.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#feladat-2-az-uml-es-a-kod-kapcsolata-interfesz-es-absztrakt-os-alkalmazastechnikaja","title":"Feladat 2 - Az UML \u00e9s a k\u00f3d kapcsolata, interf\u00e9sz \u00e9s absztrakt \u0151s alkalmaz\u00e1stechnik\u00e1ja","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/#kiindulo-kornyezet","title":"Kiindul\u00f3 k\u00f6rnyezet","text":"<p>A kiindul\u00e1si k\u00f6rnyezet a <code>Task2</code> mapp\u00e1ban tal\u00e1lhat\u00f3, az ebben lev\u0151 <code>Shapes.sln</code> f\u00e1jlt nyissuk meg Visual Studioban, \u00e9s ebben a solutionben dolgozzunk.</p> <p>Figyelem!</p> <p>\u00daj solution \u00e9s/vagy projektf\u00e1jl l\u00e9trehoz\u00e1sa, vagy a projekt m\u00e1s/\u00fajabb .NET verzi\u00f3kra targetel\u00e9se tilos.</p> <p>A <code>Task2\\Shapes</code> mapp\u00e1ban tal\u00e1lhat\u00f3 egy <code>Controls.dll</code> f\u00e1jl, ezt a feladat megold\u00e1sa sor\u00e1n kell majd felhaszn\u00e1lni.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#beadando-a-forraskodon-tulmenoen","title":"Beadand\u00f3 (a forr\u00e1sk\u00f3don t\u00falmen\u0151en)","text":"<p>K\u00e9t-h\u00e1rom bekezd\u00e9sben a Feladat 2 megold\u00e1sa sor\u00e1n hozott tervez\u0151i d\u00f6nt\u00e9sek, a megold\u00e1s legfontosabb alapelveinek r\u00f6vid sz\u00f6veges \u00f6sszefoglal\u00e1sa, indokl\u00e1sa. Ezt a kiindul\u00f3 keret <code>Task2</code> mapp\u00e1j\u00e1ban m\u00e1r megtal\u00e1lhat\u00f3 <code>readme.md</code> sz\u00f6vegf\u00e1jlba kell bele\u00edrni tetsz\u0151leges markdown form\u00e1tumban, vagy egyszer\u0171 nyers sz\u00f6vegk\u00e9nt. Fontos, hogy a <code>Task2</code> mapp\u00e1ban lev\u0151 f\u00e1jlba dolgozz (akkor is, ha esetleg a gy\u00f6k\u00e9rmapp\u00e1ban is van egy azonos nev\u0171 f\u00e1jl).</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#feladat_1","title":"Feladat","text":"<p>Egy s\u00edkbeli vektorgrafikus alakzatokat kezelni k\u00e9pes CAD tervez\u0151alkalmaz\u00e1s els\u0151 v\u00e1ltozat\u00e1nak kifejleszt\u00e9s\u00e9vel b\u00edznak meg benn\u00fcnket. B\u0151vebben:</p> <ul> <li> <p>K\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa alakzatokat kell tudni kezelni. Kezdetben a <code>Square</code> (n\u00e9gyzet), <code>Circle</code> (k\u00f6r) \u00e9s <code>TextArea</code> t\u00edpus\u00fa alakzatokat kell t\u00e1mogatni, de a k\u00f3d legyen k\u00f6nnyen b\u0151v\u00edthet\u0151 \u00faj t\u00edpusokkal. A <code>TextArea</code> egy szerkeszthet\u0151 sz\u00f6vegdoboz.</p> <p>Elnevez\u00e9sek</p> <p>Az oszt\u00e1lyokat mindenk\u00e9ppen a fentieknek megfelel\u0151en nevezz\u00fck el!</p> </li> <li> <p>Az alakzatokhoz tartoz\u00f3 adatok: x \u00e9s y koordin\u00e1ta, valamint olyan adatok, melyek a megjelen\u00edt\u00e9shez \u00e9s az alakzatok ter\u00fclet\u00e9nek kisz\u00e1m\u00edt\u00e1s\u00e1hoz sz\u00fcks\u00e9gesek. Pl. n\u00e9gyzet eset\u00e9ben oldalhossz\u00fas\u00e1g, <code>TextArea</code> eset\u00e9ben sz\u00e9less\u00e9g \u00e9s magass\u00e1g, k\u00f6r eset\u00e9ben a sug\u00e1r.</p> </li> <li> <p>Minden alakzatnak biztos\u00edtania kell m\u0171veleteket t\u00edpus\u00e1nak, koordin\u00e1t\u00e1i \u00e9s ter\u00fclet\u00e9nek lek\u00e9rdez\u00e9s\u00e9hez. A t\u00edpus lek\u00e9rdez\u0151 m\u0171velet <code>string</code>-gel t\u00e9rjen vissza, illetve a be\u00e9p\u00edtett <code>Type</code> oszt\u00e1ly <code>GetType</code> m\u0171velete nem haszn\u00e1lhat\u00f3 a megval\u00f3s\u00edt\u00e1s sor\u00e1n.</p> </li> <li> <p>List\u00e1zni kell tudni a mem\u00f3ri\u00e1ban nyilv\u00e1ntartott alakzatokat a szabv\u00e1nyos kimenetre (konzolra). Ennek sor\u00e1n a k\u00f6vetkez\u0151 adatokat \u00edrjuk ki: alakzat t\u00edpusa (pl. n\u00e9gyzet eset\u00e9n <code>Square</code> stb.), a k\u00e9t koordin\u00e1ta, alakzat ter\u00fclete. A be\u00e9p\u00edtett <code>Type</code> oszt\u00e1ly <code>GetType</code> m\u0171velete nem haszn\u00e1lhat\u00f3 a t\u00edpus ki\u00edr\u00e1s sor\u00e1n.</p> </li> <li> <p>A <code>TextArea</code> oszt\u00e1lynak k\u00f6telez\u0151en a jelen feladathoz tartoz\u00f3 <code>Controls.dll</code> oszt\u00e1lyk\u00f6nyvt\u00e1r <code>Textbox</code> oszt\u00e1ly\u00e1b\u00f3l kell sz\u00e1rmaznia. A <code>Controls.dll</code> egy .NET szerelv\u00e9ny, leford\u00edtott form\u00e1ban tartalmaz oszt\u00e1lyokat.</p> <p>Interf\u00e9szben alap\u00e9rtelmezett implement\u00e1ci\u00f3</p> <p>B\u00e1r C# 8-t\u00f3l t\u00e1mogatott .NET interf\u00e9szben alap\u00e9rtelmezett implement\u00e1ci\u00f3 megad\u00e1sa. Ez sokszor hasznos technika, de a megold\u00e1sban nem alkalmazhat\u00f3, enn\u00e9l \"klasszikusabb\" megk\u00f6zel\u00edt\u00e9st kell v\u00e1lasztani.</p> </li> <li> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n t\u00f6rekedjen egys\u00e9gbez\u00e1r\u00e1sra: pl. az alakzatok menedzsel\u00e9se legyen egy erre dedik\u00e1lt oszt\u00e1ly feladata.</p> <p>Failure</p> <p>Az nem elfogadhat\u00f3, ha a <code>Main</code> f\u00fcggv\u00e9nyben egy helyben l\u00e9trehozott egyszer\u0171 list\u00e1ba ker\u00fclnek az alakzatok t\u00e1rol\u00e1sra! Ezen fel\u00fcl a menedzsel\u00e9s\u00e9rt felel\u0151s oszt\u00e1ly NE sz\u00e1rmazzon a be\u00e9p\u00edtett <code>List</code> vagy hasonl\u00f3 oszt\u00e1lyb\u00f3l, hanem tartalmazza azt. Az adatok szabv\u00e1nyos kimentre t\u00f6rt\u00e9n\u0151 list\u00e1z\u00e1s\u00e1\u00e9rt ez az oszt\u00e1ly legyen a felel\u0151s.</p> </li> <li> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n t\u00f6rekedjen a k\u00f6nny\u0171 b\u0151v\u00edthet\u0151s\u00e9gre, karbantarthat\u00f3s\u00e1gra, ker\u00fclje el a k\u00f3dduplik\u00e1ci\u00f3t (tagv\u00e1ltoz\u00f3k, m\u0171veletek, konstruktorok eset\u00e9ben egyar\u00e1nt). A megold\u00e1s elfogad\u00e1s\u00e1nak ezek kiemelt szempontjai!</p> </li> <li> <p>A <code>Main</code> f\u00fcggv\u00e9nyben mutasson p\u00e9ld\u00e1t az oszt\u00e1lyok haszn\u00e1lat\u00e1ra.</p> </li> <li> <p>Legk\u00e9s\u0151bb a megval\u00f3s\u00edt\u00e1s v\u00e9g\u00e9re k\u00e9sz\u00edtsen a Visual Studio solutionben egy oszt\u00e1lydiagramot, melyen a solution oszt\u00e1lyait j\u00f3l \u00e1ttekinthet\u0151 form\u00e1ban rendezze el. Az asszoci\u00e1ci\u00f3s kapcsolatokat asszoci\u00e1ci\u00f3 form\u00e1j\u00e1ban jelen\u00edtse meg, ne tagv\u00e1ltoz\u00f3k\u00e9nt (Show as Association ill. Show as Collection Association, l\u00e1sd 1. labor \u00fatmutat\u00f3ja).</p> <p>Class Diagram komponens</p> <p>A Visual Studio 2022 nem teszi fel minden esetben a Class Designer komponenst a telep\u00edt\u00e9s sor\u00e1n. Ha nem lehet Class Diagram-ot felvenni a Visual Studio projektbe (mert a Class Diagram nem szerepel a list\u00e1ban az Add / New Item parancs sor\u00e1n megjelen\u0151 ablak list\u00e1j\u00e1ban), akkor a Class Diagram komponenst ut\u00f3lag kell telep\u00edteni. Err\u0151l b\u0151vebben jelen \u00fatmutat\u00f3 Fejleszt\u0151k\u00f6rnyezet oldal\u00e1n lehet olvasni.</p> </li> </ul> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n jelent\u0151s egyszer\u0171s\u00edt\u00e9ssel \u00e9l\u00fcnk:</p> <ul> <li>Az alakzatok kirajzol\u00e1s\u00e1t nem val\u00f3s\u00edtjuk meg (az ehhez sz\u00fcks\u00e9ges ismeretek a f\u00e9l\u00e9v sor\u00e1n k\u00e9s\u0151bb szerepelnek).</li> <li>Az alakzatokat csak a mem\u00f3ri\u00e1ban kell nyilv\u00e1ntartani.</li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/#osztalykonyvtarak-hasznalata","title":"Oszt\u00e1lyk\u00f6nyvt\u00e1rak haszn\u00e1lata","text":"<p>A megold\u00e1s az 1. A modell \u00e9s a k\u00f3d kapcsolata laborgyakorlat mint\u00e1j\u00e1ra kidolgozhat\u00f3. Jelen feladat egy l\u00e9nyeges r\u00e9szlet\u00e9ben k\u00fcl\u00f6nb\u00f6zik t\u0151le: m\u00edg abban csak sz\u00f3ban k\u00f6t\u00f6tt\u00fck ki, hogy a <code>DisplayBase</code> \u0151soszt\u00e1ly forr\u00e1sk\u00f3dja nem megv\u00e1ltoztat\u00f3, jelen esetben a <code>Textbox</code> \u0151soszt\u00e1lyunk eset\u00e9ben ez adott, hiszen csak egy leford\u00edtott dll form\u00e1j\u00e1ban \u00e1ll rendelkez\u00e9sre.</p> <p>Note</p> <p>T\u00f6bbkomponens\u0171 alkalmaz\u00e1sok fejleszt\u00e9s\u00e9r\u0151l, szerelv\u00e9ny \u00e9s projekt referencia alkalmaz\u00e1s\u00e1r\u00f3l az els\u0151 el\u0151ad\u00e1son volt sz\u00f3, ha nem eml\u00e9kszel erre a t\u00e9mak\u00f6rre, c\u00e9lszer\u0171 \u00e1tism\u00e9telni.</p> <p>A k\u00f6vetkez\u0151kben n\u00e9zz\u00fck meg, milyen l\u00e9p\u00e9sekben lehet egy ilyen dll-ben lev\u0151 oszt\u00e1lyokat a k\u00f3dunkban felhaszn\u00e1lni:</p> <ol> <li>A Visual Studio Solution Explorer ablak\u00e1ban jobb gombbal kattintsunk a Dependencies elemen, \u00e9s v\u00e1lasszuk az Add Reference-t vagy Add Project Reference-t (amelyik l\u00e9tezik).</li> <li>A megjelen\u0151 ablak bal oldal\u00e1n v\u00e1lasszuk ki a Browse elemet,</li> <li>Ha az ablak k\u00f6zep\u00e9n a list\u00e1ban megjelenik a <code>Controls.dll</code>, pip\u00e1ljuk ki az elemet.</li> <li>Ha nem jelenik meg, akkor kattintsunk az ablakunk jobb als\u00f3 r\u00e9sz\u00e9ben lev\u0151 Browse... gombon.         1. A megjelen\u0151 f\u00e1jlb\u00f6ng\u00e9sz\u0151 ablakban navig\u00e1ljunk el a <code>Controls.dll</code> f\u00e1jlhoz, \u00e9s kattintsunk rajta  dupl\u00e1n, ami bez\u00e1rja az ablakot.         2. A Reference Manager ablakunk k\u00f6z\u00e9ps\u0151 r\u00e9sz\u00e9n a <code>Controls.dll</code> l\u00e1that\u00f3 kipip\u00e1lva, az OK gombbal z\u00e1rjuk be az ablakot.</li> <li>Az OK gombbal z\u00e1rjuk be az ablakot.</li> </ol> Ha esetleg 'Reference is invalid or unsupported' hiba\u00fczenetet kapsz <p>Nagyon ritk\u00e1n, de el\u0151fordulhat, hogy a fenti l\u00e9p\u00e9sek sor\u00e1n a Visual Studio a \"Reference is invalid or unsupported\" hiba\u00fczenetet jelzi. Ilyenkor az esetek t\u00f6bbs\u00e9g\u00e9ben a Visual Studio \u00fajratelep\u00edt\u00e9se seg\u00edt.</p> <p>Ezzel a projekt\u00fcnkben felvett\u00fcnk egy referenci\u00e1t a <code>Controls.dll</code>-re, \u00edgy a benne lev\u0151 oszt\u00e1lyok haszn\u00e1lhat\u00f3k (pl. lehet p\u00e9ld\u00e1nyos\u00edtani \u0151ket, vagy lehet bel\u0151l\u00fck sz\u00e1rmaztatni). A Solution Explorer-ben a Dependencies majd Assemblies csom\u00f3pontot lenyitva a Controls megjelenik:</p> <p></p> <p>A <code>Textbox</code> oszt\u00e1ly, melyb\u0151l a <code>TextArea</code> oszt\u00e1lyunkat sz\u00e1rmaztatni kell, a <code>Controls</code> n\u00e9vt\u00e9rben tal\u00e1lhat\u00f3. A <code>TextBox</code> oszt\u00e1lynak egy konstruktora van, melynek n\u00e9gy param\u00e9tere van, az x \u00e9s y koordin\u00e1t\u00e1k, valamint a sz\u00e9less\u00e9g \u00e9s a magass\u00e1g. Amennyiben sz\u00fcks\u00e9g lenne r\u00e1, a t\u00f6bbi m\u0171velet felder\u00edt\u00e9s\u00e9ben az Object Browser seg\u00edt. Az Object Browser a View men\u00fcb\u0151l az Object Browser men\u00fc kiv\u00e1laszt\u00e1s\u00e1val nyithat\u00f3 meg. Az Object Browser egy \u00faj tabf\u00fcl\u00f6n jelenik meg.</p> <p>Ha \u00fcres az Object Browser n\u00e9zet</p> <p>A Visual Studio 2022 hajlamos arra, hogy mindaddig, am\u00edg nincs egy forr\u00e1sf\u00e1jl megnyitva, az Object Browserben nem jelen\u00edt meg semmit (csak egy \"No information\" kezdet\u0171 sz\u00f6veg l\u00e1tszik). Ha azt tapasztaljuk, hogy \u00fcres az Object Browser n\u00e9zet, csak nyissuk meg a Program.cs f\u00e1jl a Solution Explorerben, majd v\u00e1ltsunk vissza az Object Browser tabf\u00fclre, ahol \u00edgy m\u00e1r megjelennek a komponensek. </p> <p>Az Object Browserben a <code>Controls</code> komponenst lenyitogatva az egyes csom\u00f3pontokat kiv\u00e1lasztva (n\u00e9vt\u00e9r, oszt\u00e1ly) az adott csom\u00f3pont jellemz\u0151i jelennek meg: pl. az oszt\u00e1ly nev\u00e9n \u00e1llva az oszt\u00e1ly tagjait l\u00e1tjuk.</p> <p></p> <p>Most m\u00e1r minden inform\u00e1ci\u00f3 rendelkez\u00e9s\u00fcnkre \u00e1ll a feladat megval\u00f3s\u00edt\u00e1s\u00e1hoz.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/#beadas","title":"Bead\u00e1s","text":"<p>Ellen\u0151rz\u0151lista ism\u00e9tl\u00e9sk\u00e9ppen:</p> <ul> <li>A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>A GitHub-r\u00f3l let\u00f6lt\u00f6tt kiindul\u00f3 solutionben/projektekben kell dolgozni, nem \u00fajonnan l\u00e9trehozottban.</li> <li>Am\u00edg nem vagy rutinos a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00e9l-e.</li> <li>A GitHub fel\u00fclet\u00e9n ellen\u0151rizd a push-t k\u00f6vet\u0151en, hogy a GitHub Action alap\u00fa el\u0151ellen\u0151rz\u0151 hiba n\u00e9lk\u00fcl lefutott-e.</li> <li>L\u00e9nyeges, hogy a feladatok csak akkor ker\u00fclnek elfogad\u00e1sra, ha teljesen elk\u00e9sz\u00fclnek, \u00e9s minden tekintetben teljes\u00edtik a k\u00f6vetelm\u00e9nyeket. Nem fordul\u00f3 k\u00f3d, illetve r\u00e9szleges megold\u00e1s elfogad\u00e1s\u00e1ban nem \u00e9rdemes b\u00edzni.</li> <li> <p>Term\u00e9szetesen saj\u00e1t munk\u00e1t kell beadni (hiszen \u00e9rt\u00e9kel\u00e9sre ker\u00fcl).</p> </li> <li> <p>A 2. feladat sor\u00e1n ne felejtsd el a <code>readme.md</code>-ben a megold\u00e1sod bemutatni.</p> </li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/","title":"1<sup>st</sup> HW - Relationship between the model and the code","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#introduction","title":"Introduction","text":"<p>There is no lecture associated with this task. The theoretical and practical background for the exercises is provided by the guided laboratory practice \"1. The Relationship Between the Model and the Code\":</p> <ul> <li>This laboratory practice is/was completed by the students with the guidance of the instructor in a supervised manner.</li> <li>A guide accompanies the laboratory practice, detailing the theoretical background and explaining the steps of the solution: 1. Relationship between the model and the code</li> </ul> <p>Based on this, the tasks of this homework can be completed with the help of the brief guidance following the task description.</p> <p>Objectives of the homework:</p> <ul> <li>Developing a simple .NET application and practicing C# basics</li> <li>Demonstrating the relationship between UML and code</li> <li>Practicing the application of interfaces and abstract base classes</li> </ul> <p>A description of the required development environment can be found here.</p> <p>Using C# 12 (and newer) Language Elements</p> <p>During the completion of the assignment, C# 12 and newer language features (e.g., primary constructor) cannot be used, as the verification system running on GitHub does not yet support them.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#downloading-the-initial-framework-and-uploading-the-completed-solution","title":"Downloading the Initial Framework and Uploading the Completed Solution","text":"<p>The initial environment for the homework and the submission of the solution are managed using Git, GitHub, and GitHub Classroom. Main steps:</p> <ol> <li>Create a repository for yourself using GitHub Classroom. The invitation URL can be found in the homework notification (sent via Teams or Neptun).</li> <li>Clone the newly created repository. This will contain the expected structure for the solution.</li> <li>After completing the tasks, commit and push your solution.</li> </ol> <p>More detailed descriptions can be found here: - Git, GitHub, GitHub Classroom - Homework Workflow and Using Git/GitHub</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#pre-evaluation-and-official-assessment-of-the-homework","title":"Pre-evaluation and official assessment of the homework","text":"<p>Every time you push your code to GitHub, an automatic pre-evaluation is performed, and you can check the output! More information is available here (make sure to read it): Pre-evaluation and official assessment of the homework.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#task-1-creating-a-simple-net-console-application","title":"Task 1 \u2013 Creating a Simple .NET Console Application","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#initial-project","title":"Initial Project","text":"<p>The initial environment is located in the <code>Task1</code> folder. Open the <code>MusicApp.sln</code> file in Visual Studio and work within this solution.</p> <p>Attention!</p> <p>Creating a new solution and/or project file or targeting the project to other/newer .NET versions is prohibited.</p> <p>A <code>music.txt</code> file is located in the <code>Task1\\Input</code> folder, that serves as the input for the task.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#task","title":"Task","text":"<p>A text file stores the titles of songs by composers/artists/bands in the following format:</p> <ul> <li>Each composer has a separate line.</li> <li>Each line starts with the composer's name, followed by <code>;</code>, then song titles separated by <code>;</code>.</li> <li>The file content is considered valid even if it contains empty lines or lines with only whitespace characters (space, tab).</li> </ul> <p>The provided <code>music.txt</code> file may contain the following:</p> <pre><code>Adele; Hello; Rolling in the Deep; Skyfall\nEnnio Morricone;    A Fistful Of Dollars; Man with a Harmonica\nAC/DC; Thunderstruck; T.N.T\n</code></pre> <p>Read the file into a list of <code>Song</code> class objects. A <code>Song</code> object stores a song's data (composer and title). After reading, format and display the objects' data on standard output in the following format:</p> <pre><code>composer1: composer1_song1\ncomposer1: composer1_song2\n...\ncomposer2: composer2_song1\n...\netc.\n</code></pre> <p>For the sample file, the expected console output would be:</p> <p></p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#implementation-steps","title":"Implementation steps","text":"<p>Create a <code>Song</code> class in the project (right-click the project in Solution Explorer, select Add / Class).</p> <p>Define the necessary members and a constructor:</p> <pre><code>public class Song\n{\n    public readonly string Artist;\n    public readonly string Title;\n\n    public Song(string artist, string title)\n    {\n        Artist = artist;\n        Title = title;\n    }\n}\n</code></pre> <p>Property</p> <p>The member variables are declared as <code>readonly</code> to prevent modification after object initialization. An alternative would be to use read-only properties (covered later in the course).</p> <p>Next, override the <code>ToString</code> method inherited from <code>System.Object</code> in the <code>Song</code> class:</p> <pre><code>public override string ToString()\n{\n    return $\"{Artist}: {Title}\";\n}\n</code></pre> <p>For reading the text file, use the <code>StreamReader</code> class from <code>System.IO</code>.</p> <p>In our <code>Main</code> function, read the file line by line, create <code>Song</code> objects, and store them in a dynamically growing array, <code>List&lt;Song&gt;</code>. Be mindful that elements in the file separated by <code>;</code> may have whitespace characters (spaces, tabs) before or after them\u2014these should be removed!</p> <p>The following code presents a possible solution, with details explained in the code comments. This is the first homework of the semester, and for most students, their first .NET/C# application. Therefore, we provide a sample solution here, but more experienced students are encouraged to attempt it independently.</p> Solution <pre><code>namespace MusicApp;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        List&lt;Song&gt; songs = new List&lt;Song&gt;();\n\n        StreamReader sr = null;\n        try\n        {\n            sr = new StreamReader(@\"C:\\temp\\music.txt\");\n            string line;\n            while ((line = sr.ReadLine()) != null)\n            {\n                if (string.IsNullOrWhiteSpace(line))\n                    continue;\n\n                string[] lineItems = line.Split(';');\n\n                string artist = lineItems[0].Trim();\n\n                for (int i = 1; i &lt; lineItems.Length; i++)\n                {\n                    Song song = new Song(artist, lineItems[i].Trim());\n                    songs.Add(song);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"File processing failed.\");\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            if (sr != null)\n                sr.Close();\n        }\n\n        foreach (Song song in songs)\n            Console.WriteLine(song.ToString());\n    }\n}\n</code></pre> <p>Copy the <code>music.txt</code> file to the <code>C:\\temp</code> folder and run the application. To keep things simple, everything is handled within the <code>Main</code> function, but in a real-world scenario, the code should be moved to a dedicated processing class.</p> <p>This example introduces several essential .NET/C# techniques. Be sure to read and understand the code comments, as these concepts will be used throughout the semester.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#task-2-uml-and-code-relationship-interface-and-abstract-base-class-application","title":"Task 2 - UML and code relationship, interface and abstract base class application","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#starting-environment","title":"Starting Environment","text":"<p>The starting environment is located in the <code>Task2</code> folder. Open the <code>Shapes.sln</code> file in Visual Studio and work within this solution.</p> <p>Attention!</p> <p>Creating a new solution or project file, or targeting the project to different/newer .NET versions is prohibited.</p> <p>A <code>Controls.dll</code> file is located in the <code>Task2\\Shapes</code> folder, which will be used in this task.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#required-submission-beyond-the-source-code","title":"Required Submission (Beyond the Source Code)","text":"<p>Write a two-to-three paragraph summary explaining the design decisions made during Task 2, as well as the key principles behind the solution. This summary should be added to the <code>readme.md</code> file in the <code>Task2</code> folder. Ensure you modify the file inside the <code>Task2</code> folder (even if an identically named file exists in the root directory).</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#task_1","title":"Task","text":"<p>You have been assigned to develop the first version of a CAD application capable of handling vector-based graphical shapes.</p> <ul> <li>The application must support different types of shapes, initially including <code>Square</code>, <code>Circle</code>, and <code>TextArea</code>. The <code>TextArea</code> represents an editable text box. The code should be designed for easy extension with new shape types.</li> </ul> <p>Naming Conventions</p> <p>The classes must be named according to the specifications above!</p> <ul> <li> <p>Each shape must store its x and y coordinates, as well as data necessary for rendering and area calculation. For example, a square should store its side length, a <code>TextArea</code> should store width and height, and a circle should store its radius.</p> </li> <li> <p>All shapes must provide methods to retrieve their type, coordinates, and area. The type retrieval method should return a <code>string</code>, and the built-in <code>Type.GetType</code> method must not be used.</p> </li> <li> <p>The application must be able to list all stored shapes in memory on the console, displaying the shape type (e.g., <code>Square</code> for squares), the coordinates, and the area. The built-in <code>Type.GetType</code> method must not be used for type identification.</p> </li> <li> <p>The <code>TextArea</code> class must inherit from the <code>Textbox</code> class found in <code>Controls.dll</code>. This <code>.NET assembly</code> provides precompiled class implementations.</p> <p>Default Implementation in Interfaces</p> <p>Although C# 8 and later support default method implementations in interfaces, this feature cannot be used in this task. A more traditional approach is required.</p> </li> <li> <p>The implementation should follow proper encapsulation principles. Shape management must be handled by a dedicated class, rather than being stored in a simple list inside the <code>Main</code> function.</p> <p>Failure</p> <p>It is unacceptable to store shapes in a simple list within <code>Main</code>. Additionally, the managing class should not inherit from built-in collection classes like <code>List&lt;T&gt;</code> but should instead contain such a collection internally. This class should be responsible for listing the data to the standard output.</p> </li> <li> <p>The implementation should prioritize extensibility, maintainability, and avoid code duplication. These factors are key to acceptance.</p> </li> <li> <p>The <code>Main</code> function should demonstrate the usage of the implemented classes.</p> </li> <li> <p>By the end of the implementation, create a class diagram in Visual Studio that clearly presents the relationships between the classes. Use Show as Association or Show as Collection Association instead of member variables when representing relationships. (See 1<sup>st</sup> Lab - instructions)</p> <p>Class Diagram Component</p> <p>Visual Studio 2022 does not always install the Class Designer component by default. If the Class Diagram option is unavailable when adding a new item, install the Class Diagram component manually. See Development environment for further details.</p> </li> </ul> <p>During the implementation, we apply significant simplifications:</p> <ul> <li>The drawing of shapes will not be implemented (the necessary knowledge for this will be covered later in the semester).</li> <li>Shapes only need to be stored in memory.</li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#using-external-libraries","title":"Using external libraries","text":"<p>This task builds on concepts from the 1<sup>st</sup> Lab - Model and Code Relationship. A key difference is that while in that exercise, <code>DisplayBase</code> was read-only by convention, in this task, <code>Textbox</code> is truly immutable as it is only available as a compiled <code>.dll</code>.</p> <p>Note</p> <p>The development of multi-component applications, assembly, and project reference usage were covered in the first lecture. If you do not remember this topic, it is recommended to review it.</p> <p>Follow these steps to use an external <code>dll</code>:</p> <ol> <li>In Solution Explorer, right-click Dependencies and select Add Reference or Add Project Reference (which exists).</li> <li>In the new window, choose Browse.</li> <li>If <code>Controls.dll</code> appears in the list, check it.</li> <li>If not, click Browse..., navigate to <code>Controls.dll</code>, and select it.<ol> <li>In the file browser window that appears, navigate to the <code>Controls.dll</code> file and double-click on it to close the window.</li> <li>In the middle section of the Reference Manager window, <code>Controls.dll</code> should now be checked. Close the window by clicking the OK button.</li> </ol> </li> <li>Click OK to finalize the reference.</li> </ol> If you receive a 'Reference is invalid or unsupported' error <p>In rare cases, Visual Studio may show this error. Reinstalling Visual Studio typically resolves the issue.</p> <p>Now the project includes a reference to <code>Controls.dll</code>, allowing access to its classes. (e.g., they can be instantiated or inherited). In Solution Explorer, expand the D*ependencies and then the Assemblies node to see Controls appear.</p> <p></p> <p>The <code>Textbox</code> class, from which <code>TextArea</code> must inherit, is located in the <code>Controls</code> namespace. It has a constructor with four parameters: x and y coordinates, width, and height. If needed, the Object Browser can help explore additional methods. The Object Browser can be opened by selecting the Object Browser option from the View menu. It will appear in a new tab.</p> <p>If Object Browser appears empty</p> <p>In Visual Studio 2022, the Object Browser sometimes does not display content unless a source file is open. Open <code>Program.cs</code> and then switch back to the Object Browser to see the components.</p> <p>In the Object Browser, expanding the <code>Controls</code> component and selecting individual nodes (namespace, class) will display the properties of the selected node. For example, when selecting a class, its members will be shown.</p> <p></p> <p>Now, all necessary information is available for implementation.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_eng/#submission","title":"Submission","text":"<p>Checklist reminder:</p> <ul> <li>Enter your Neptun code in the neptun.txt file located in the root directory of the repository. The code should be in uppercase letters only, and the file should contain only these six characters\u2014nothing else.</li> <li>Work within the solution/projects downloaded from GitHub, not in a newly created project.</li> <li>If you are not yet experienced in using Visual Studio's Git features, after pushing your changes (or at the latest when you consider your homework submitted), it is advisable to check the repository on GitHub's web interface to ensure that all changes have been successfully uploaded.</li> <li>After pushing, check on GitHub to see if the GitHub Action-based pre-check has run without errors.</li> <li>Assignments will only be accepted if they are fully completed and meet all the requirements. Do not expect acceptance of non-compiling code or partial solutions.</li> <li> <p>Naturally, you must submit your own work, as it will be evaluated.</p> </li> <li> <p>For Task 2, do not forget to document your solution in <code>readme.md</code>.</p> </li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/","title":"1. HF - Beziehung zwischen Modell und Code","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die \u00dcbung ist nicht mit einer Pr\u00e4sentation verbunden.  Den theoretischen und praktischen Hintergrund f\u00fcr die \u00dcbungen liefert das Kapitel \"1. Die Beziehung zwischen Modell und Code\" wird als angeleitete Labor\u00fcbung dienen:</p> <ul> <li>Diese Labor\u00fcbung wird von den Studierenden unter Anleitung des Tutors gemeinsam durchgef\u00fchrt.</li> <li>Die Labor\u00fcbung wird von einem Leitfaden begleitet, der einen detaillierten theoretischen Hintergrund und eine Schritt-f\u00fcr-Schritt-Anleitung f\u00fcr die Herstellung einer L\u00f6sung enth\u00e4lt: 1. Beziehung zwischen dem Modell und dem Code</li> </ul> <p>Darauf aufbauend k\u00f6nnen die Aufgaben dieser Selbst\u00fcbung mit Hilfe der k\u00fcrzeren Leitf\u00e4den, die der Aufgabenbeschreibung folgen, durchgef\u00fchrt werden.</p> <p>Das Ziel der unabh\u00e4ngigen \u00dcbung:</p> <ul> <li>Erstellen einer einfachen .NET-Anwendung, \u00dcben der C#-Grundlagen</li> <li>Veranschaulichung der Beziehung zwischen UML und Code</li> <li>Praktische Anwendung der Schnittstelle und der abstrakten primitiven Klasse</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#laden-sie-den-ausgangsrahmen-herunter-laden-sie-die-fertige-losung-hoch","title":"Laden Sie den Ausgangsrahmen herunter, laden Sie die fertige L\u00f6sung hoch","text":"<p>Die urspr\u00fcngliche Hausaufgabenumgebung wird ver\u00f6ffentlicht und die L\u00f6sung wird \u00fcber Git, GitHub und GitHub Classroom eingereicht. Die wichtigsten Schritte:</p> <ol> <li>Erstellen Sie mit GitHub Classroom ein Repository f\u00fcr sich selbst. Sie finden die Einladungs-URL in Moodle (Sie k\u00f6nnen sie sehen, indem Sie auf den Link*\"GitHub classroom links for homework*\" auf der Startseite des Fachs klicken).</li> <li>Klonen Sie das resultierende Repository. Dazu geh\u00f6rt auch die erwartete Struktur der L\u00f6sung.</li> <li>Nachdem Sie die Aufgaben erledigt haben, \u00fcbergeben Sie Ihre L\u00f6sung alt und dr\u00fccken Sie sie alt.</li> </ol> <p>Diese werden hier ausf\u00fchrlicher beschrieben:</p> <ul> <li>Git, GitHub, GitHub Classroom</li> <li>Arbeitsablauf bei Hausaufgaben und Verwendung von Git/GitHub</li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#vorabkontrolle-und-formale-bewertung-der-hausaufgaben","title":"Vorabkontrolle und formale Bewertung der Hausaufgaben","text":"<p>Jedes Mal, wenn Sie Code auf GitHub hochladen, f\u00fchrt GitHub automatisch eine (Vor-)Pr\u00fcfung des hochgeladenen Codes durch und Sie k\u00f6nnen das Ergebnis sehen! Weitere Informationen dazu finden Sie hier (lesen Sie sie unbedingt): Vorabkontrolle und formale Bewertung der Hausaufgaben.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#aufgabe-1-erstellen-einer-einfachen-net-konsolenanwendung","title":"Aufgabe 1 - Erstellen einer einfachen .NET-Konsolenanwendung","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#ursprungliches-projekt","title":"Urspr\u00fcngliches Projekt","text":"<p>Die anf\u00e4ngliche Umgebung befindet sich im Ordner <code>Feladat1</code>, \u00f6ffnen Sie die Datei <code>MusicApp.sln</code> in Visual Studio und arbeiten Sie in dieser L\u00f6sung.</p> <p>Achtung!</p> <p>Das Erstellen einer neuen Projektmappe und/oder Projektdatei oder die Ausrichtung des Projekts auf andere/neuere .NET-Versionen ist verboten.</p> <p>Im Ordner <code>Feladat1\\Input</code> befindet sich eine Datei <code>music.txt</code>, die als Eingabe f\u00fcr die Aufgabe verwendet werden soll.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#verfasst-am","title":"Verfasst am","text":"<p>In einem Textstring speichern wir die Titel der Lieder von Komponisten/Interpreten/Ensembles im folgenden Format.</p> <ul> <li>Jeder Autor hat eine eigene Zeile.</li> <li>Jede Zeile beginnt mit dem Namen des Autors, gefolgt von <code>;</code>, gefolgt von den Titeln der Nummern, getrennt durch <code>;</code>.</li> <li>Der Inhalt der Datei wird als g\u00fcltig angesehen, wenn Leerzeilen oder Zeilen, die nur Leerzeichen (Leerzeichen, Tabulator) enthalten, vorhanden sind.</li> </ul> <p>Der Inhalt der beigef\u00fcgten Datei music.txt ist \u00e4hnlich wie der folgende:</p> <pre><code>Adele; Hello; Rolling in the Deep; Skyfall\nEnnio Morricone;    A Fistful Of Dollars; Mann mit der Mundharmonika\nAC/DC; Thunderstruck; T.N.T\n</code></pre> <p>Lesen Sie die Datei in die Liste der Klassenobjekte <code>Song</code>.  Ein Objekt <code>Song</code> speichert die Daten (Autor und Titel) eines Liedes. Nach dem Scannen schreiben Sie die formatierten Daten der Objekte in folgendem Format auf die Standardausgabe:</p> <pre><code>autor1: Autor1_Titel1\nautor1: Autor1_Titel2\n...\nautor2: Autor2_Songtitel1\n...\nusw.\n</code></pre> <p>F\u00fcr unsere Beispieldatei m\u00f6chten wir die folgende Ausgabe sehen (die je nach Inhalt der Datei variieren kann):</p> <p></p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#schritte-der-umsetzung","title":"Schritte der Umsetzung","text":"<p>F\u00fcgen Sie dem Projekt eine Klasse mit dem Namen <code>Song</code> hinzu (Rechtsklick auf das Projekt im Solution Explorer, Men\u00fc Hinzuf\u00fcgen / Klasse).</p> <p>F\u00fcgen Sie die erforderlichen Mitglieder und einen passenden Konstruktor ein:</p> <pre><code>public class Song\n{\n    public readonly string Artist;\n    public readonly string Title;\n\n    public Song(string artist, string title)\n    {\n        Artist = artist;\n        Title = title;\n    }\n}\n</code></pre> <p>Property</p> <p>Die Mitgliedsvariablen wurden als <code>readonly</code>eingef\u00fcgt, weil wir nicht wollten, dass sie nach Ausf\u00fchrung des Konstruktors ge\u00e4ndert werden k\u00f6nnen. Eine Alternative w\u00e4re die Verwendung von schreibgesch\u00fctzten Eigenschaften anstelle von schreibgesch\u00fctzten Mitgliedsvariablen (dies ist ein sp\u00e4terer Kern).</p> <p>Im Folgenden werden wir die Operation <code>ToString</code>, die vom impliziten Vorfahren <code>System.Object</code> geerbt wurde, in unserer Klasse <code>Song</code> umdefinieren, um Objektdaten in der gew\u00fcnschten Form zur\u00fcckzugeben. Verwenden Sie die String-Interpolation in der L\u00f6sung (wir haben dies bereits in der ersten \u00dcbung verwendet):</p> <pre><code>public override string ToString()\n{\n    return $\"{Artist}: {Title}\";\n}\n</code></pre> <p>Die geeignetste Klasse zur Verarbeitung einer Textdatei ist <code>StreamReader</code> im Namensraum <code>System.IO</code>. </p> <p>In unserer Funktion <code>Main</code> lesen wir die Datei Zeile f\u00fcr Zeile ein, erstellen die <code>Song</code> Objekte und legen sie in ein <code>List&lt;Song&gt;</code> dynamisch dehnbares Array. Bitte beachten Sie, dass in der Datei vor/nach den durch <code>;</code>getrennten Elementen Leerzeichen (Space, Tab) stehen k\u00f6nnen, entfernen Sie diese!</p> <p>Der folgende Code zeigt eine m\u00f6gliche L\u00f6sung, deren Einzelheiten in den Codekommentaren erl\u00e4utert werden. Dies ist die erste eigenst\u00e4ndige Aufgabe des Semesters und f\u00fcr die meisten Studenten die erste Anwendung von .NET/C#, daher geben wir Ihnen eine Musterl\u00f6sung, aber erfahrenere Studenten k\u00f6nnen es auch selbst versuchen.</p> L\u00f6sung <pre><code>namespace MusicApp;\n\npublic class Program\n{\n    // Die Funktion Main befindet sich innerhalb der Klasse Program, die hier nicht gezeigt wird\n    public static void Main(string[] args)\n    {\n        // Hier werden die Liedobjekte gespeichert\n        Liste&lt;Song&gt; songs = new List&lt;Song&gt;();\n\n        // Datei zeilenweise durchsuchen, Liederliste hochladen\n        StreamReader sr = null;\n        try\n        {\n            // @ steht f\u00fcr @ vor der Zeichenkettenkonstante:\n            // Deaktiviert String Escape,\n            // damit Sie nicht '\\\\' statt '\\\\' schreiben m\u00fcssen.\n            sr = new StreamReader(@\"C:\\temp\\music.txt\");\n            string line;\n            while ((line = sr.ReadLine()) != null)\n            {\n                // Wenn die Warteschlange leer war\n                if (string.IsNullOrWhiteSpace(line))\n                    continue;\n\n                // Die Zeilenvariable enth\u00e4lt die gesamte Zeile,\n                // geteilt entlang der ;- mit Split\n                string[] lineItems = line.Split(';');\n\n                // Erstes Element, in dem wir den Namen des Autors erwarten\n                // Trim entfernt f\u00fchrende und nachfolgende Wei\u00dfraumzeichen\n                string artist = lineItems[0].Trim();\n\n                // Gehen Sie die Lieder durch und f\u00fcgen Sie sie der Liste hinzu\n                for (int i = 1; i &lt; lineItems.Length; i++)\n                {\n                    Song song = new Song(artist, lineItems[i].Trim());\n                    songs.Add(song);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Die Datei konnte nicht verarbeitet werden.\");\n            // e.Message enth\u00e4lt nur den Text der Ausnahme. \n            // Wenn Sie alle Ausnahmeinformationen (z.B. Stacktrace) ausgeben m\u00f6chten, \n            // dann wird e.ToString() gedruckt.\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Es ist wichtig, dass die Datei abschlie\u00dfend in einem Block geschlossen wird, \n            // um sicherzustellen, dass wir im Falle einer Ausnahme keine offene Datei haben.\n            // Wir h\u00e4tten einen using-Block anstelle von try-finally verwenden k\u00f6nnen,\n            // Das brauchen Sie noch nicht zu wissen (wir werden es in der Mitte des Semesters lernen).\n            if (sr != null)\n                sr.Close();\n        }\n\n        // Ausgabe der Lieder in der Liste auf der Konsole\n        foreach (Song song in songs)\n            Console.WriteLine(song.ToString());\n    }\n}\n</code></pre> <p>Kopieren Sie die Datei \"music.txt\" in den Ordner \"c:\\temp\" und starten Sie die Anwendung. Der Einfachheit halber haben wir alles in die Funktion <code>main</code> aufgenommen, aber in einer \"Live\"-Umgebung ist es ratsam, den Code in eine separate Verarbeitungsklasse auszulagern.</p> <p>Im obigen Beispiel werden eine Reihe grundlegender .NET/C#-Techniken vorgestellt. Es lohnt sich auf jeden Fall, sie zu interpretieren und aus den Notizen im obigen Code zu lernen, und wir werden im Laufe des Semesters auf ihnen aufbauen.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#aufgabe-2-beziehung-zwischen-uml-und-code-schnittstellen-und-abstrakten-anwendungstechniken","title":"Aufgabe 2 - Beziehung zwischen UML und Code, Schnittstellen und abstrakten Anwendungstechniken","text":""},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#ursprungliche-umgebung","title":"Urspr\u00fcngliche Umgebung","text":"<p>Die anf\u00e4ngliche Umgebung befindet sich im Ordner <code>Feladat2</code>, \u00f6ffnen Sie die Datei <code>Shapes.sln</code> in Visual Studio und arbeiten Sie in dieser L\u00f6sung.</p> <p>Achtung!</p> <p>Das Erstellen einer neuen Projektmappe und/oder Projektdatei oder die Ausrichtung des Projekts auf andere/neuere .NET-Versionen ist verboten.</p> <p>Es gibt eine Datei <code>Controls.dll</code> im Ordner <code>Feladat2\\Shapes</code>, die Sie zur L\u00f6sung des Problems verwenden m\u00fcssen.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#einzureichen-zusatzlich-zum-quellcode","title":"Einzureichen (zus\u00e4tzlich zum Quellcode)","text":"<p>In zwei bis drei Abs\u00e4tzen eine kurze textliche Zusammenfassung der bei der L\u00f6sung von Aufgabe 2 getroffenen Entwurfsentscheidungen, der wichtigsten Grunds\u00e4tze der L\u00f6sung und der Begr\u00fcndung daf\u00fcr. Dies sollte in die Textdatei <code>readme.md</code> geschrieben werden, die sich bereits im Ordner <code>Feladat2</code> des urspr\u00fcnglichen Frames befindet, in einem beliebigen Markdown-Format oder als einfacher Text. Es ist wichtig, in der Datei im Ordner <code>Feladat2</code> zu arbeiten (auch wenn es eine Datei mit demselben Namen im Stammordner gibt).</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#verfasst-am_1","title":"Verfasst am","text":"<p>Wir haben die Aufgabe, die erste Version einer CAD-Anwendung zu entwickeln, die fl\u00e4chige Vektorgrafiken verarbeiten kann. Lesen Sie mehr:</p> <ul> <li> <p>Sie m\u00fcssen in der Lage sein, verschiedene Arten von Formen zu bearbeiten. Zun\u00e4chst sollten <code>Square</code> (Quadrat), <code>Circle</code> (Kreis) und <code>TextArea</code> unterst\u00fctzt werden, aber der Code sollte leicht um neue Typen erweiterbar sein.  <code>TextArea</code> ist ein editierbares Textfeld.</p> <p>Namen</p> <p>Achten Sie darauf, dass Sie die Klassen entsprechend den obigen Angaben benennen!</p> </li> <li> <p>Die mit den Formen verbundenen Daten: x- und y-Koordinaten sowie Daten, die f\u00fcr die Visualisierung und die Berechnung des Fl\u00e4cheninhalts der Formen erforderlich sind. Zum Beispiel Seitenl\u00e4nge f\u00fcr ein Quadrat, Breite und H\u00f6he f\u00fcr <code>TextArea</code>, Radius f\u00fcr einen Kreis.</p> </li> <li> <p>Jede Form muss Operationen zur Abfrage ihres Typs, ihrer Koordinaten und ihrer Fl\u00e4che bieten. Die Typabfrageoperation sollte <code>string</code>zur\u00fcckgeben, und die Operation <code>GetType</code> der eingebauten Klasse <code>Type</code> sollte in der Implementierung nicht verwendet werden.</p> </li> <li> <p>Sie m\u00fcssen in der Lage sein, die im Speicher abgelegten Formen auf der Standardausgabe (Konsole) aufzulisten. Die folgenden Daten werden geschrieben: Art der Form (z. B. f\u00fcr ein Quadrat <code>Square</code> usw.), die beiden Koordinaten, Fl\u00e4che der Form. Die Operation <code>GetType</code> der eingebauten Klasse <code>Type</code> kann nicht in der Typdeklaration verwendet werden.</p> </li> <li> <p>Die Klasse <code>TextArea</code> muss aus der Klasse <code>Textbox</code> der Klassenbibliothek <code>Controls.dll</code> f\u00fcr diese Aufgabe stammen.  <code>Controls.dll</code> ist eine .NET-Assembly, die kompiliert wurde, um Klassen zu enthalten.</p> <p>Standardimplementierung in Schnittstelle</p> <p>Geben Sie die Standardimplementierung in der .NET-Schnittstelle an, die in C# 8 und h\u00f6her unterst\u00fctzt wird. Dies ist oft eine n\u00fctzliche Technik, die aber bei der L\u00f6sung nicht anwendbar ist; es sollte ein eher \"klassischer\" Ansatz gew\u00e4hlt werden.</p> </li> <li> <p>Bei der Umsetzung ist eine Vereinheitlichung anzustreben: z.B. sollte die Verwaltung der Formen in die Zust\u00e4ndigkeit einer eigenen Abteilung fallen.</p> <p>Failure</p> <p>Es ist nicht zul\u00e4ssig, Formen in einer lokal erzeugten einfachen Liste in der Funktion <code>Main</code> zu speichern! Au\u00dferdem sollte die Klasse, die f\u00fcr die Verwaltung zust\u00e4ndig ist, NICHT von der eingebauten Klasse <code>List</code> oder einer \u00e4hnlichen Klasse abgeleitet werden, sondern sie sollte diese enthalten. Diese Abteilung sollte f\u00fcr die Auflistung der Daten in einer Standardausgabe zust\u00e4ndig sein.</p> </li> <li> <p>Streben Sie bei der Implementierung nach einfacher Erweiterbarkeit, Wartbarkeit und Vermeidung von doppeltem Code (f\u00fcr Mitgliedsvariablen, Operationen, Konstruktoren). Dies sind die wichtigsten Kriterien f\u00fcr die Annahme der L\u00f6sung!</p> </li> <li> <p>Zeigen Sie ein Beispiel f\u00fcr die Verwendung von Klassen in der Funktion <code>Main</code>. </p> </li> <li> <p>Sp\u00e4testens am Ende der Implementierung erstellen Sie in Visual Studio Solution ein Klassendiagramm, in dem Sie die Klassen der L\u00f6sung \u00fcbersichtlich anordnen k\u00f6nnen. Zeigen Sie Assoziationsbeziehungen als Assoziation, nicht als Mitgliedsvariable*(Als Assoziation anzeigen* oder*Als Assoziation* anzeigen). Als Sammlungsverband anzeigen, siehe Laboranleitung 1).</p> <p>Klassendiagrammkomponente</p> <p>Visual Studio 2022 f\u00fcgt die Klassendesignerkomponente bei der Installation nicht immer hinzu. Wenn es nicht m\u00f6glich ist, ein Klassendiagramm zum Visual Studio-Projekt hinzuzuf\u00fcgen (weil das Klassendiagramm nicht in der Liste des Fensters aufgef\u00fchrt ist, das w\u00e4hrend des Befehls Hinzuf\u00fcgen / Neues Element erscheint), muss die Komponente Klassendiagramm nachtr\u00e4glich installiert werden. Weitere Informationen hierzu finden Sie auf der Seite Entwicklungsumgebung in diesem Handbuch.</p> </li> </ul> <p>Wir nehmen erhebliche Vereinfachungen bei der Umsetzung vor:</p> <ul> <li>Formen werden nicht gezeichnet (die notwendigen F\u00e4higkeiten werden sp\u00e4ter im Semester behandelt).</li> <li>Die Formen sollten nur im Speicher aufgezeichnet werden.</li> </ul>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#verwendung-von-klassenbibliotheken","title":"Verwendung von Klassenbibliotheken","text":"<p>Die L\u00f6sung ist 1. Die Beziehung zwischen dem Modell und dem Code kann auf der Grundlage einer Labor\u00fcbung entwickelt werden. Die vorliegende Aufgabe unterscheidet sich in einem wichtigen Detail: W\u00e4hrend wir nur verbal feststellten, dass der Quellcode der Vorfahrenklasse <code>DisplayBase</code> nicht ver\u00e4nderbar ist, ist dies im Fall unserer Vorfahrenklasse <code>Textbox</code> eine Selbstverst\u00e4ndlichkeit, da sie nur als kompilierte DLL verf\u00fcgbar ist.</p> <p>Note</p> <p>Die Entwicklung von Mehrkomponentenanwendungen, die Zusammenstellung und die Projektreferenz wurden in der ersten Vorlesung behandelt; wenn Sie sich nicht an dieses Thema erinnern, lohnt es sich, es zu wiederholen.</p> <p>Im Folgenden werden wir uns die Schritte zur Verwendung der Klassen in einer solchen DLL in unserem Code ansehen:</p> <ol> <li>Klicken Sie im Fenster Visual Studio Solution Explorer mit der rechten Maustaste auf Abh\u00e4ngigkeiten und w\u00e4hlen Sie Verweis hinzuf\u00fcgen oder Projektverweis hinzuf\u00fcgen(je nachdem, was vorhanden ist).</li> <li>W\u00e4hlen Sie auf der linken Seite des angezeigten Fensters Browse,</li> <li>Wenn <code>Controls.dll</code> in der Liste in der Mitte des Fensters erscheint, deaktivieren Sie das Kontrollk\u00e4stchen.</li> <li>Wenn sie nicht angezeigt wird, klicken Sie auf die Schaltfl\u00e4che Durchsuchen... unten rechts im Fenster.         1. Navigieren Sie im angezeigten Dateibrowser-Fenster zur Datei <code>Controls.dll</code> und doppelklicken Sie darauf, um das Fenster zu schlie\u00dfen.         2. In der Mitte des Referenzmanager-Fensters sehen Sie das H\u00e4kchen bei <code>Controls.dll</code>. Klicken Sie auf OK, um das Fenster zu schlie\u00dfen.</li> <li>Klicken Sie auf OK, um das Fenster zu schlie\u00dfen.</li> </ol> Sehr selten, aber es kann vorkommen, dass Visual Studio eine Fehlermeldung <p>Referenz ist ung\u00fcltig oder wird nicht unterst\u00fctzt\" anzeigt, wenn Sie die oben genannten Schritte ausf\u00fchren. In den meisten F\u00e4llen hilft eine Neuinstallation von Visual Studio.</p> <p>Damit haben wir in unserem Projekt einen Verweis auf <code>Controls.dll</code>hinzugef\u00fcgt, so dass die darin enthaltenen Klassen verwendet werden k\u00f6nnen (z. B. k\u00f6nnen sie instanziiert oder von ihnen abgeleitet werden). Wenn Sie im Projektmappen-Explorer auf Abh\u00e4ngigkeiten und dann auf Baugruppen klicken, werden Steuerelemente angezeigt:</p> <p></p> <p>Die Klasse <code>Textbox</code>, von der unsere Klasse <code>TextArea</code> abgeleitet werden soll, befindet sich im Namespace <code>Controls</code>.  Die Klasse <code>TextBox</code> hat einen Konstruktor mit vier Parametern, den x- und y-Koordinaten sowie der Breite und H\u00f6he. Bei Bedarf kann der Object Browser *Ihnen helfen, andere Operationen zu entdecken. Der *Object Browser *kann durch Auswahl des Men\u00fcs *Object Browser *aus dem Men\u00fc *Ansicht ge\u00f6ffnet werden. Der *Object Browser *wird in einer neuen Registerkarte angezeigt.</p> <p>Wenn die Objektbrowser-Ansicht leer ist</p> <p>Visual Studio 2022 zeigt im Objektbrowser nichts an (nur den Text \"Keine Informationen\"), solange keine Quelldatei ge\u00f6ffnet ist. Wenn Sie feststellen, dass die Object Browser-Ansicht leer ist, \u00f6ffnen Sie einfach die Datei Program.cs im Projektmappen-Explorer und wechseln Sie zur\u00fcck zur Registerkarte Object Browser, wo die Komponenten nun angezeigt werden. </p> <p>Wenn Sie im *Object Browser *auf die Komponente <code>Controls</code> klicken und jeden Knoten (Namensraum, Klasse) ausw\u00e4hlen, werden die Attribute dieses Knotens angezeigt: Wenn Sie z. B. auf den Klassennamen klicken, werden die Mitglieder der Klasse angezeigt.</p> <p></p> <p>Wir haben nun alle Informationen, die wir zur Erf\u00fcllung der Aufgabe ben\u00f6tigen.</p>"},{"location":"hazi/1-model-es-kod-kapcsolata/index_ger/#vorlegen-bei","title":"Vorlegen bei","text":"<p>Checkliste f\u00fcr Wiederholungen:</p> <ul> <li>Geben Sie in der Datei neptun.txt im Stammverzeichnis des Repositorys Ihren Neptun-Code in Gro\u00dfbuchstaben ein. Die Datei sollte nur diese sechs Zeichen enthalten und nichts anderes.</li> <li>Sie sollten in den urspr\u00fcnglichen L\u00f6sungen/Projekten arbeiten, die Sie von GitHub heruntergeladen haben, und nicht in neu erstellten Projekten.</li> <li>Solange Sie nicht mit Visual Studio Git vertraut sind, sollten Sie nach dem Push (sp\u00e4testens wenn die Hausarbeit als eingereicht gilt) \u00fcberpr\u00fcfen, ob Sie alle \u00c4nderungen hochgeladen haben, indem Sie sich die Dateien im Repository auf der GitHub-Weboberfl\u00e4che ansehen.</li> <li>\u00dcberpr\u00fcfen Sie in der GitHub-Schnittstelle nach dem Push, ob der GitHub Action-basierte Pre-Validator fehlerfrei gelaufen ist.</li> <li>Es ist wichtig, dass Aufgaben nur angenommen werden, wenn sie vollst\u00e4ndig abgeschlossen sind und den Anforderungen in jeder Hinsicht entsprechen. Nicht rotierenden Codes oder Teill\u00f6sungen sollte man nicht trauen.</li> <li> <p>Nat\u00fcrlich m\u00fcssen Sie Ihre eigene Arbeit einreichen (da sie bewertet wird).</p> </li> <li> <p>Vergessen Sie bei Aufgabe 2 nicht, Ihre L\u00f6sung unter <code>readme.md</code>einzureichen.</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/","title":"2. HF - Nyelvi eszk\u00f6z\u00f6k","text":""},{"location":"hazi/2-nyelvi-eszkozok/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az \u00f6n\u00e1ll\u00f3 feladat a 2. el\u0151ad\u00e1son \u00e9s a 3. el\u0151ad\u00e1s els\u0151 fel\u00e9ben elhangzottakra \u00e9p\u00edt (ezek a \"El\u0151ad\u00e1s 02 - Nyelvi eszk\u00f6z\u00f6k\" el\u0151ad\u00e1sanyagban szerepelnek). Gyakorlati h\u00e1tter\u00e9\u00fcl a 2. labor - Nyelvi eszk\u00f6z\u00f6k laborgyakorlat szolg\u00e1l.</p> <p>A fentiekre \u00e9p\u00edtve, jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel elv\u00e9gezhet\u0151k.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>Tulajdons\u00e1gok (property) haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Deleg\u00e1tok (delegate) \u00e9s esem\u00e9nyek (event) alkalmaz\u00e1sa</li> <li>.NET attrib\u00fatumok haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Alapvet\u0151 gy\u0171jtem\u00e9nyt\u00edpusok haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Lambda kifejez\u00e9sek gyakorl\u00e1sa</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s.</p> <p>C# 12-es (\u00e9s \u00fajabb) nyelvi elemek haszn\u00e1lata</p> <p>A h\u00e1zi feladat megold\u00e1sa sor\u00e1n C# 12-es, \u00e9s ann\u00e1l \u00fajabb nyelvi elemek, (pl. primary constructor) nem haszn\u00e1lhat\u00f3k, ugyanis a GitHub-on fut\u00f3 ellen\u0151rz\u0151 ezeket m\u00e9g nem t\u00e1mogatja.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#beadas-menete-eloellenorzo","title":"Bead\u00e1s menete, el\u0151ellen\u0151rz\u0151","text":"<p>A bead\u00e1s menete megegyezik az els\u0151 h\u00e1zi feladat\u00e9val (r\u00e9szletes le\u00edr\u00e1s a szok\u00e1sos helyen, l\u00e1sd H\u00e1zi feladat munkafolyamat \u00e9s a Git/GitHub haszn\u00e1lata):</p> <ol> <li>GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik).</li> <li>Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t.</li> <li>A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> </ol> <p>Az el\u0151ellen\u0151rz\u0151 is a szok\u00e1sos m\u00f3don m\u0171k\u00f6dik. R\u00e9szletes le\u00edr\u00e1s: A h\u00e1zi feladat el\u0151ellen\u0151rz\u00e9se \u00e9s hivatalos \u00e9rt\u00e9kel\u00e9se.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-1-baljos-arnyak","title":"Feladat 1 \u2013 Balj\u00f3s \u00e1rnyak","text":""},{"location":"hazi/2-nyelvi-eszkozok/#feladat","title":"Feladat","text":"<p>Amint az k\u00f6zismert, a jedi lovagok erej\u00e9t a sejtjeikben \u00e9l\u0151 kis \u00e9letform\u00e1k, a midi-chlorianok adj\u00e1k. Az eddigi legmagasabb midi-chlorian szintet (20.000 f\u00f6l\u00f6tti \u00e9rt\u00e9ket) Anakin Skywalkern\u00e9l m\u00e9rt\u00e9k.</p> <p>K\u00e9sz\u00edts egy oszt\u00e1lyt <code>Jedi</code> n\u00e9ven mely egy <code>string</code> t\u00edpus\u00fa <code>Name</code> \u00e9s egy <code>int</code> t\u00edpus\u00fa <code>MidiChlorianCount</code> tulajdons\u00e1ggal rendelkezik. Ut\u00f3bbi eset\u00e9ben figyelj r\u00e1, hogy a <code>MidiChlorianCount</code> \u00e9rt\u00e9k\u00e9t ne lehessen 35-re, vagy ann\u00e1l kisebb \u00e9rt\u00e9kre \u00e1ll\u00edtani, ha ezzel pr\u00f3b\u00e1lkozik valaki, az oszt\u00e1lynak kiv\u00e9telt kell dobnia. A valid\u00e1ci\u00f3 sor\u00e1n a lehet\u0151 legegyszer\u0171bb, legletisztultabb megold\u00e1st v\u00e1laszd: a property setterben egyszer\u0171 <code>if</code>-et haszn\u00e1lj \u00e9s dobj kiv\u00e9telt, ne legyen az <code>if</code>-nek <code>else</code> \u00e1ga, valamint nincs sz\u00fcks\u00e9g a <code>return</code> haszn\u00e1lat\u00e1ra sem.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#megoldas","title":"Megold\u00e1s","text":"<p>A feladat megold\u00e1sa a 2. labor 1. feladat\u00e1val anal\u00f3g m\u00f3don k\u00e9sz\u00edthet\u0151 el. A <code>MidiChlorianCount</code> tulajdons\u00e1g setter\u00e9ben \u00e9rv\u00e9nytelen \u00e9rt\u00e9k eset\u00e9n dobj kiv\u00e9telt. Ezt p\u00e9ld\u00e1ul a k\u00f6vetkez\u0151 utas\u00edt\u00e1ssal tehet\u0151 meg:</p> <pre><code>throw new ArgumentException(\"You are not a true jedi!\");\n</code></pre>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-2-a-klonok-tamadasa","title":"Feladat 2 \u2013 A kl\u00f3nok t\u00e1mad\u00e1sa","text":""},{"location":"hazi/2-nyelvi-eszkozok/#feladat_1","title":"Feladat","text":"<p>Eg\u00e9sz\u00edtsd ki az 1. feladatban elk\u00e9sz\u00edtett oszt\u00e1lyt attrib\u00fatumokkal \u00fagy, hogy amennyiben az <code>XmlSerializer</code> oszt\u00e1ly seg\u00edts\u00e9g\u00e9vel, XML form\u00e1tum\u00fa adatf\u00e1jlba \u00edrunk/soros\u00edtunk ki egy <code>Jedi</code> objektumot, a tulajdons\u00e1gai egy-egy XML attrib\u00fatum form\u00e1j\u00e1ban, magyarul jelenjenek meg! Ezt k\u00f6vet\u0151en \u00edrj egy f\u00fcggv\u00e9nyt, mely a <code>Jedi</code> oszt\u00e1ly egy p\u00e9ld\u00e1ny\u00e1t egy sz\u00f6vegf\u00e1jlba soros\u00edtja, majd onnan visszaolvassa egy \u00faj objektumba (ezzel tulajdonk\u00e9ppen kl\u00f3nozva az eredeti objektumot).</p> <p>XML soros\u00edt\u00f3 attrib\u00fatumai</p> <p>Az XML soros\u00edt\u00e1st szab\u00e1lyoz\u00f3 attrib\u00fatumokat ne tagv\u00e1ltoz\u00f3k, hanem a property-k felett helyezd el!</p> <p>A Jedi oszt\u00e1ly legyen publikus</p> <p>Az XML soros\u00edt\u00f3 csak publikus oszt\u00e1lyokon tud dolgozni, ennek megfelel\u0151en a Jedi oszt\u00e1ly legyen publikus: <pre><code>public class Jedi { ...}\n</code></pre></p> <p>Fontos</p> <p>A ment\u00e9st \u00e9s bet\u00f6lt\u00e9st v\u00e9gz\u0151/demonstr\u00e1l\u00f3 k\u00f3dot \u00edrd egy k\u00f6z\u00f6s, erre dedik\u00e1lt f\u00fcggv\u00e9nybe, a f\u00fcggv\u00e9nyt pedig l\u00e1sd el a <code>[Description(\"Task2\")]</code> C# attrib\u00fatummal (a f\u00fcggv\u00e9ny el\u0151tti sorba kell be\u00edrni). A mentett/bet\u00f6lt\u00f6tt objektum lok\u00e1lis v\u00e1ltoz\u00f3k\u00e9nt legyen ebben a f\u00fcggv\u00e9nyben megval\u00f3s\u00edtva. Az oszt\u00e1ly/f\u00fcggv\u00e9ny neve b\u00e1rmi lehet (pl. ker\u00fclhet a <code>Program</code> oszt\u00e1lyba is). A f\u00fcggv\u00e9ny nem szorosan a feladathoz tartoz\u00f3 k\u00f3dot ne tartalmazzon, \u00edgy m\u00e1s (r\u00e9sz)feladathoz tartoz\u00f3t sem. A f\u00fcggv\u00e9nyt h\u00edvd meg a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9b\u0151l. A fenti attrib\u00fatum haszn\u00e1lat\u00e1hoz using-olni kell a <code>System.ComponentModel</code> n\u00e9vteret.</p> <p>L\u00e9nyeges, hogy</p> <ul> <li>az attrib\u00fatumot f\u00fcggv\u00e9ny, \u00e9s NE oszt\u00e1ly f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatumot ne a logik\u00e1t megval\u00f3s\u00edt\u00f3, hanem a tesztel\u00e9st v\u00e9gz\u0151 f\u00fcggv\u00e9ny f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatum csak egyetlen f\u00fcggv\u00e9ny f\u00f6l\u00f6tt szerepelhet.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#megoldas_1","title":"Megold\u00e1s","text":"<p>A feladat megold\u00e1sa a 2. labor 4. feladat\u00e1val anal\u00f3g m\u00f3don k\u00e9sz\u00edthet\u0151 el. A megold\u00e1shoz az al\u00e1bbi seg\u00edts\u00e9geket adjuk:</p> <ul> <li> <p>A soros\u00edt\u00e1st k\u00f6vet\u0151en az XML f\u00e1jlnak ehhez hasonl\u00f3an kell kin\u00e9znie:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Jedi xmlns:xsi=\"...\" N\u00e9v=\"Obi-Wan\" MidiChlorianSz\u00e1m=\"15000\" /&gt;\n</code></pre> <p>L\u00e9nyeges, hogy az egyes Jedik <code>Jedi</code> XML elemk\u00e9nt, nev\u00fck <code>N\u00e9v</code>, a midichloriansz\u00e1muk <code>MidiChlorianSz\u00e1m</code> XML attrib\u00fatumk\u00e9nt jelenjen meg.</p> </li> <li> <p>A soros\u00edtott objektumok visszat\u00f6lt\u00e9s\u00e9re a labor sor\u00e1n nem n\u00e9zt\u00fcnk p\u00e9ldak\u00f3dot, ez\u00e9rt ezt itt megadjuk:</p> <pre><code>var serializer = new XmlSerializer(typeof(Jedi));\nvar stream = new FileStream(\"jedi.txt\", FileMode.Open);\nvar clone = (Jedi)serializer.Deserialize(stream);\nstream.Close();\n</code></pre> <p>Az el\u0151z\u0151 m\u0171veletsor el\u0151sz\u00f6r l\u00e9trehoz egy soros\u00edt\u00f3t (<code>serializer</code>), mellyel majd a beolvas\u00e1st k\u00e9s\u0151bb elv\u00e9gezz\u00fck. A beolvas\u00e1st egy <code>jedi.txt</code> nev\u0171 f\u00e1jlb\u00f3l fogjuk v\u00e9gezni, amelyet a m\u00e1sodik sorban olvas\u00e1sra nyitunk meg (figyelj\u00fck meg, hogy ha \u00edrni akartuk volna, akkor<code>FileMode.Create</code>-et kellett volna megadni).</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-3-a-sith-ek-bosszuja","title":"Feladat 3 \u2013 A Sith-ek bossz\u00faja","text":""},{"location":"hazi/2-nyelvi-eszkozok/#feladat_2","title":"Feladat","text":"<p>A Jeditan\u00e1csban az ut\u00f3bbi id\u0151ben nagy a fluktu\u00e1ci\u00f3. Hogy a v\u00e1ltoz\u00e1sokat k\u00f6nnyebben nyomon k\u00f6vethess\u00fck, k\u00e9sz\u00edts egy oszt\u00e1lyt, mely k\u00e9pes nyilv\u00e1ntartani a tan\u00e1cs tagjait \u00e9s minden v\u00e1ltoz\u00e1sr\u00f3l egy esem\u00e9ny form\u00e1j\u00e1ban sz\u00f6veges \u00e9rtes\u00edt\u00e9st k\u00fcldeni! A lista manipul\u00e1ci\u00f3j\u00e1t k\u00e9t f\u00fcggv\u00e9nnyel lehessen v\u00e9gezni. Az <code>Add</code> f\u00fcggv\u00e9ny egy \u00faj jedi lovagot regisztr\u00e1ljon a tan\u00e1csba, m\u00edg a <code>Remove</code> f\u00fcggv\u00e9ny t\u00e1vol\u00edtsa el a legutolj\u00e1ra felvett tan\u00e1cstagot. K\u00fcl\u00f6n \u00e9rtes\u00edt\u00e9s jelezze, ha a tan\u00e1cs teljesen ki\u00fcr\u00fcl (ehhez ugyanazt az esem\u00e9nyt haszn\u00e1ld, mint a t\u00f6bbi v\u00e1ltoz\u00e1s eset\u00e9n, csak m\u00e1s sz\u00f6veggel jelezze).</p> <p>A tan\u00e1cstagok (<code>members</code>) nyilv\u00e1ntart\u00e1s\u00e1t egy <code>List&lt;Jedi&gt;</code> t\u00edpus\u00fa tagv\u00e1ltoz\u00f3ban t\u00e1roljuk, az <code>Add</code> f\u00fcggv\u00e9ny ehhez a list\u00e1hoz f\u0171zze hozz\u00e1 az \u00faj elemeket, m\u00edg a <code>Remove</code> f\u00fcggv\u00e9ny generikus lista <code>RemoveAt</code> utas\u00edt\u00e1s\u00e1val mindig a legutolj\u00e1ra felvett tagot t\u00e1vol\u00edtsa el (az utols\u00f3 elem index\u00e9t a lista hossza alapj\u00e1n tudjuk meghat\u00e1rozni, melyet a <code>Count</code> property ad vissza).</p> <p>Az \u00e9rtes\u00edt\u00e9s egy C# esem\u00e9nyen (C# event) kereszt\u00fcl t\u00f6rt\u00e9njen. Az esem\u00e9nyhez tartoz\u00f3 delegate t\u00edpus param\u00e9terk\u00e9nt egy egyszer\u0171 <code>string</code>-et kapjon. Az \u00faj tag hozz\u00e1ad\u00e1s\u00e1t, az egyes tagok elt\u00e1vol\u00edt\u00e1s\u00e1t, illetve az utols\u00f3 tag elt\u00e1vol\u00edt\u00e1s\u00e1t m\u00e1s-m\u00e1s sz\u00f6veg\u0171 \u00fczenet jelezze. Az esem\u00e9ny els\u00fct\u00e9s\u00e9t k\u00f6zvetlen\u00fcl az <code>Add</code> \u00e9s a <code>Remove</code> m\u0171veletekben v\u00e9gezd el (ne vezess be erre seg\u00e9df\u00fcggv\u00e9nyt).</p> <p>Az esem\u00e9ny t\u00edpus\u00e1nak ne haszn\u00e1lj be\u00e9p\u00edtett delegate t\u00edpust, hanem vezess be egy saj\u00e1tot.</p> <p>Fontos</p> <p>A Jeditan\u00e1cs objektumot l\u00e9trehoz\u00f3 \u00e9s azt tesztel\u0151 (C# esem\u00e9ny\u00e9re val\u00f3 feliratkoz\u00e1s, <code>Add</code> \u00e9s <code>Remove</code> h\u00edv\u00e1sa) k\u00f3d ker\u00fclj\u00f6n egy k\u00f6z\u00f6s, \u00f6n\u00e1ll\u00f3 f\u00fcggv\u00e9nybe, ezt a f\u00fcggv\u00e9nyt pedig l\u00e1sd el a <code>[Description(\"Task3\")]</code> C# attrib\u00fatummal.   Az oszt\u00e1ly/f\u00fcggv\u00e9ny neve b\u00e1rmi lehet.   A f\u00fcggv\u00e9ny nem szorosan a feladathoz tartoz\u00f3 k\u00f3dot ne tartalmazzon, \u00edgy m\u00e1s (r\u00e9sz)feladathoz tartoz\u00f3t sem.   A f\u00fcggv\u00e9nyt h\u00edvd meg a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9b\u0151l.</p> <p>L\u00e9nyeges, hogy</p> <ul> <li>az attrib\u00fatumot f\u00fcggv\u00e9ny, \u00e9s NE oszt\u00e1ly f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatumot ne a logik\u00e1t megval\u00f3s\u00edt\u00f3, hanem a tesztel\u00e9st v\u00e9gz\u0151 f\u00fcggv\u00e9ny f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatum csak egyetlen f\u00fcggv\u00e9ny f\u00f6l\u00f6tt szerepelhet.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#megoldas_2","title":"Megold\u00e1s","text":"<p>A feladat megold\u00e1sa a 2. labor t\u00f6bb r\u00e9szlet\u00e9re is \u00e9p\u00edt. Az \u00faj esem\u00e9ny bevezet\u00e9s\u00e9t a 2. \u00e9s a 3. feladatban le\u00edrt m\u00f3don tudjuk elv\u00e9gezni, m\u00edg a tan\u00e1cs tagjait egy list\u00e1ban tudjuk nyilv\u00e1ntartani.</p> <p>A fenti inform\u00e1ci\u00f3k alapj\u00e1n pr\u00f3b\u00e1ld meg \u00f6n\u00e1ll\u00f3an megoldani a feladatot, majd ha k\u00e9szen vagy, a k\u00f6vetkez\u0151 kinyithat\u00f3 blokkban folytasd az \u00fatmutat\u00f3 olvas\u00e1s\u00e1t \u00e9s vesd \u00f6ssze a megold\u00e1sodat a lenti referencia megold\u00e1ssal! Sz\u00fcks\u00e9g szerint korrig\u00e1ld a saj\u00e1t megold\u00e1sod!</p> <p>Publikus l\u00e1that\u00f3s\u00e1g</p> <p>A p\u00e9lda \u00e9p\u00edt arra, hogy a r\u00e9sztvev\u0151 oszt\u00e1lyok, tulajdons\u00e1gok, delegate-ek publikus l\u00e1that\u00f3s\u00e1g\u00faak. Amennyiben fura ford\u00edt\u00e1si hib\u00e1val tal\u00e1lkozol, vagy az <code>XmlSerializer</code> fut\u00e1sid\u0151ben hib\u00e1t dob, els\u0151 k\u00f6rben azt ellen\u0151rizd, hogy minden \u00e9rintett helyen megfelel\u0151en be\u00e1ll\u00edtottad-e a publikus l\u00e1that\u00f3s\u00e1got.</p> Referencia megold\u00e1s <p>A referencia megold\u00e1s l\u00e9p\u00e9sei a k\u00f6vetkez\u0151k:</p> <ol> <li>Hozzunk l\u00e9tre egy \u00faj oszt\u00e1lyt, <code>JediCouncil</code> n\u00e9ven.</li> <li>Vegy\u00fcnk fel egy <code>List&lt;Jedi&gt;</code> t\u00edpus\u00fa mez\u0151t \u00e9s inicializ\u00e1ljuk egy \u00fcres list\u00e1val.</li> <li> <p>Val\u00f3s\u00edtsuk meg az <code>Add</code> \u00e9s a <code>Remove</code> f\u00fcggv\u00e9nyeket.</p> <p>A fenti l\u00e9p\u00e9seket k\u00f6vet\u0151en az al\u00e1bbi k\u00f3dot kapjuk:</p> <pre><code>public class JediCouncil\n{\n    List&lt;Jedi&gt; members = new List&lt;Jedi&gt;();\n\n    public void Add(Jedi newJedi)\n    {\n        members.Add(newJedi);\n    }\n\n    public void Remove()\n    {\n        // Elt\u00e1vol\u00edtja a lista utols\u00f3 elem\u00e9t\n        members.RemoveAt(members.Count - 1);\n    }\n}\n</code></pre> <p>K\u00f6vetkez\u0151 l\u00e9p\u00e9sk\u00e9nt val\u00f3s\u00edtsuk meg az esem\u00e9nykezel\u00e9st. </p> </li> <li> <p>Defini\u00e1ljunk egy \u00faj deleg\u00e1t t\u00edpust (az oszt\u00e1lyon k\u00edv\u00fcl, mivel ez is egy t\u00edpus), mely az \u00e9rtes\u00edt\u00e9sek sz\u00f6veg\u00e9t adja majd \u00e1t:</p> <pre><code>public delegate void CouncilChangedDelegate(string message);\n</code></pre> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>JediCouncil</code> oszt\u00e1lyt az esem\u00e9nykezel\u0151vel:</p> <pre><code>public class JediCouncil\n{\n    public event CouncilChangedDelegate CouncilChanged;\n\n    // ...\n}\n</code></pre> </li> <li> <p>S\u00fcss\u00fck el az esem\u00e9nyt, amikor \u00faj tan\u00e1cstagot vesz\u00fcnk fel. Ehhez az <code>Add</code> met\u00f3dust kell kieg\u00e9sz\u00edten\u00fcnk.</p> <pre><code>public void Add(Jedi newJedi)\n{\n    members.Add(newJedi);\n\n    // TODO: Itt s\u00fcsd el az esem\u00e9nyt.\n    // Figyelj arra, hogy csak akkor tedd meg, ha van legal\u00e1bb egy feliratkoz\u00f3/el\u0151fizet\u0151.\n    // Ennek sor\u00e1n ne a terjeng\u0151sebb null ellen\u0151rz\u00e9st, hanem a modernebb, ?.Invoke-ot haszn\u00e1ld.\n}\n</code></pre> </li> <li> <p>S\u00fcss\u00fck el az esem\u00e9nyt, amikor egy tan\u00e1cstag t\u00e1vozik! K\u00fcl\u00f6nb\u00f6ztess\u00fck meg azt az esetet, amikor a tan\u00e1cs teljesen ki\u00fcr\u00fcl. Ehhez a <code>Remove</code> met\u00f3dust kell kieg\u00e9sz\u00edten\u00fcnk.</p> <pre><code>public void Remove()\n{\n    // Elt\u00e1vol\u00edtja a lista utols\u00f3 elem\u00e9t\n    members.RemoveAt(members.Count - 1);\n\n    // TODO: Itt s\u00fcsd el az esem\u00e9nyt.\n    // Figyelj arra, hogy csak akkor tedd meg, ha van legal\u00e1bb egy feliratkoz\u00f3/el\u0151fizet\u0151.\n}\n</code></pre> </li> <li> <p>Megold\u00e1sunk tesztel\u00e9s\u00e9hez vegy\u00fcnk fel egy <code>MessageReceived</code> f\u00fcggv\u00e9nyt abba az oszt\u00e1lyba, ahol az esem\u00e9nyre val\u00f3 feliratkoz\u00e1st \u00e9s az esem\u00e9ny kezel\u00e9s\u00e9t tesztelni szeretn\u00e9nk (pl. a <code>Program</code> oszt\u00e1lyba). Ezt a f\u00fcggv\u00e9nyt fogjuk feliratkoztatni a <code>JediCouncil</code> \u00e9rtes\u00edt\u00e9seire.</p> Program.cs<pre><code>private static void MessageReceived(string message)\n{\n    Console.WriteLine(message);\n}\n</code></pre> </li> <li> <p>V\u00e9gezet\u00fcl tesztelj\u00fck az \u00faj oszt\u00e1lyunkat egy erre a c\u00e9lra dedik\u00e1lt f\u00fcggv\u00e9ny meg\u00edr\u00e1s\u00e1val (ez t\u00f6rt\u00e9nhet pl. a <code>Program</code> oszt\u00e1lyban), a f\u00fcggv\u00e9ny f\u00f6l\u00e9 tegy\u00fck oda a <code>[Description(\"Task3\")]</code> attrib\u00fatumot! A f\u00fcggv\u00e9ny v\u00e1za:</p> <pre><code>// Tan\u00e1cs l\u00e9trehoz\u00e1sa\nvar council = new JediCouncil();\n\n// TODO: Itt iratkozz fel a council CouncilChanged esem\u00e9ny\u00e9re\n\n// TODO Itt adj hozz\u00e1 k\u00e9t Jedi objektumot a council objektumhoz az Add h\u00edv\u00e1s\u00e1val\n\ncouncil.Remove();\ncouncil.Remove();\n</code></pre> </li> <li> <p>Ha j\u00f3l v\u00e9gezt\u00fck a dolgunkat, a program futtat\u00e1s\u00e1t k\u00f6vet\u0151en a k\u00f6vetkez\u0151 kimenetet kell kapnunk:</p> <pre><code>\u00daj taggal b\u0151v\u00fclt\u00fcnk\n\u00daj taggal b\u0151v\u00fclt\u00fcnk\nZavart \u00e9rzek az er\u0151ben\nA tan\u00e1cs elesett!\n</code></pre> </li> </ol> <p>Esem\u00e9nyek null vizsg\u00e1lata</p> <p>Amennyiben a <code>JediCouncil.Add</code> m\u0171veletben <code>null</code> vizsg\u00e1lattal v\u00e9gezted annak ellen\u0151rz\u00e9s\u00e9t, hogy van-e legal\u00e1bb egy feliratkoz\u00f3 az esem\u00e9nyre, ezt alak\u00edtsd \u00e1t korszer\u0171bb megold\u00e1sra (<code>?.Invoke</code> alkalmaz\u00e1sa, mely t\u00f6m\u00f6rebb form\u00e1ban szint\u00e9n elv\u00e9gzi az ellen\u0151rz\u00e9st, de <code>null</code> vizsg\u00e1lat n\u00e9lk\u00fcl \u2013 err\u0151l a kapcsol\u00f3d\u00f3 el\u0151ad\u00e1son \u00e9s laboron is volt sz\u00f3). Ezt el\u00e9g a <code>JediCouncil.Add</code> kapcs\u00e1n megtenni, a <code>JediCouncil.Remove</code> eset\u00e9ben mindk\u00e9t megold\u00e1s elfogadhat\u00f3 most.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-4-delegatok","title":"Feladat 4 \u2013 Deleg\u00e1tok","text":""},{"location":"hazi/2-nyelvi-eszkozok/#feladat_3","title":"Feladat","text":"<p>Eg\u00e9sz\u00edtsd ki a <code>JediCouncil</code> oszt\u00e1lyt egy olyan param\u00e9ter n\u00e9lk\u00fcli f\u00fcggv\u00e9nnyel (a f\u00fcggv\u00e9nyn\u00e9v v\u00e9gz\u0151dj\u00f6n <code>_Delegate</code>-re, ez k\u00f6telez\u0151), mely visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u00e9ben visszaadja a Jedi tan\u00e1cs \u00f6sszes olyan tagj\u00e1t, melynek a midi-chlorian sz\u00e1ma 530 alatt van!</p> <ul> <li>F\u00fcggv\u00e9nyt haszn\u00e1lj, ne tulajdons\u00e1got a lek\u00e9rdez\u00e9sre.</li> <li>A f\u00fcggv\u00e9nyen bel\u00fcl a tagok kikeres\u00e9s\u00e9re haszn\u00e1ld a <code>List&lt;Jedi&gt;</code> oszt\u00e1ly <code>FindAll()</code> f\u00fcggv\u00e9ny\u00e9t.</li> <li>Ebben a feladatban m\u00e9g NEM haszn\u00e1lhatsz lambda kifejez\u00e9st!</li> </ul> <p>\u00cdrj egy dedik\u00e1lt \u201etesztel\u0151\u201d f\u00fcggv\u00e9nyt is (pl. a <code>Program</code> oszt\u00e1lyba), mely megh\u00edvja a fenti f\u00fcggv\u00e9ny\u00fcnket \u00e9s ki\u00edrja a visszaadott jedi lovagok neveit! Ez a f\u00fcggv\u00e9ny nem szorosan a feladathoz tartoz\u00f3 k\u00f3dot ne tartalmazzon, \u00edgy m\u00e1s (r\u00e9sz)feladathoz tartoz\u00f3t sem.</p> <p>Fontos</p> <p>Ezt a \u201etesztel\u0151\u201d f\u00fcggv\u00e9nyt l\u00e1sd el a <code>[Description(\"Task4\")]</code> C# attrib\u00fatummal. A f\u00fcggv\u00e9nyt h\u00edvd meg a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9b\u0151l.</p> <p>L\u00e9nyeges, hogy</p> <ul> <li>az attrib\u00fatumot f\u00fcggv\u00e9ny, \u00e9s NE oszt\u00e1ly f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatumot ne a logik\u00e1t megval\u00f3s\u00edt\u00f3, hanem a tesztel\u00e9st v\u00e9gz\u0151 f\u00fcggv\u00e9ny f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatum csak egyetlen f\u00fcggv\u00e9ny f\u00f6l\u00f6tt szerepelhet.</li> </ul> <p>Inicializ\u00e1ci\u00f3 kiszervez\u00e9se</p> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n vezess be egy k\u00fcl\u00f6n statikus met\u00f3dust (pl. a <code>Program</code> oszt\u00e1lyba), mely param\u00e9terk\u00e9nt egy Jeditan\u00e1cs objektumot kap, abba legal\u00e1bb h\u00e1rom felparam\u00e9terezett <code>Jedi</code> objektumot az <code>Add</code> h\u00edv\u00e1s\u00e1val felvesz. A c\u00e9lunk ezzel az, hogy egy olyan inicializ\u00e1l\u00f3 met\u00f3dusunk legyen, mely a k\u00e9s\u0151bbi feladat(ok) sor\u00e1n is felhaszn\u00e1lhat\u00f3, ne kelljen a kapcsol\u00f3d\u00f3 inicializ\u00e1l\u00f3 k\u00f3dot duplik\u00e1lni.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#megoldas_3","title":"Megold\u00e1s","text":"<p>A feladat megold\u00e1s\u00e1hoz a 2. labor 6. feladat\u00e1t haszn\u00e1lhatjuk referenciak\u00e9nt. Seg\u00edts\u00e9gk\u00e9nt megadjuk a k\u00f6vetkez\u0151ket:</p> <ul> <li>a f\u00fcggv\u00e9ny\u00fcnk ak\u00e1r t\u00f6bb tal\u00e1latot is visszaadhat, ez\u00e9rt a visszat\u00e9r\u00e9si \u00e9rt\u00e9k t\u00edpusa <code>List&lt;Jedi&gt;</code>,</li> <li>a <code>FindAll</code> param\u00e9terk\u00e9nt az eset\u00fcnkben egy <code>bool F\u00fcggv\u00e9nyn\u00e9v(Jedi j)</code> szignat\u00far\u00e1j\u00fa sz\u0171r\u0151f\u00fcggv\u00e9nyt v\u00e1r el.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-5-lambda-kifejezesek","title":"Feladat 5 \u2013 Lambda kifejez\u00e9sek","text":"<p>A feladat megfelel az el\u0151z\u0151nek, csak most lambda kifejez\u00e9s seg\u00edts\u00e9g\u00e9vel fogunk dolgozni. Ez a t\u00e9mak\u00f6r szerepelt el\u0151ad\u00e1son \u00e9s laboron is (2. labor 6. feladat).</p> <p>Eg\u00e9sz\u00edtsd ki a JediCouncil oszt\u00e1lyt egy olyan param\u00e9ter n\u00e9lk\u00fcli f\u00fcggv\u00e9nnyel (a f\u00fcggv\u00e9nyn\u00e9v v\u00e9gz\u0151dj\u00f6n <code>_Lambda</code>-ra, ez k\u00f6telez\u0151), mely visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u00e9ben visszaadja a Jedi tan\u00e1cs \u00f6sszes olyan tagj\u00e1t, melynek a midi-chlorian sz\u00e1ma 1000 alatt van!</p> <ul> <li>F\u00fcggv\u00e9nyt haszn\u00e1lj, ne tulajdons\u00e1got a lek\u00e9rdez\u00e9sre.</li> <li>A f\u00fcggv\u00e9nyen bel\u00fcl a tagok kikeres\u00e9s\u00e9re haszn\u00e1ld a <code>List&lt;Jedi&gt;</code> oszt\u00e1ly <code>FindAll()</code> f\u00fcggv\u00e9ny\u00e9t.</li> <li>Ebben a feladatban k\u00f6telez\u0151en lambda kifejez\u00e9st kell haszn\u00e1lj (az mindegy, hogy statement vagy expression lambd\u00e1t)!</li> </ul> <p>\u00cdrj egy dedik\u00e1lt \u201etesztel\u0151\u201d f\u00fcggv\u00e9nyt is (pl. a <code>Program</code> oszt\u00e1lyba), mely megh\u00edvja a fenti f\u00fcggv\u00e9ny\u00fcnket \u00e9s ki\u00edrja a visszaadott jedi lovagok neveit! Ez a f\u00fcggv\u00e9ny nem szorosan a feladathoz tartoz\u00f3 k\u00f3dot ne tartalmazzon, \u00edgy m\u00e1s (r\u00e9sz)feladathoz tartoz\u00f3t sem.</p> <p>Fontos</p> <p>Ezt a \u201etesztel\u0151\u201d f\u00fcggv\u00e9nyt l\u00e1sd el a <code>[Description(\"Task5\")]</code> C# attrib\u00fatummal. A f\u00fcggv\u00e9nyt h\u00edvd meg a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9b\u0151l.</p> <p>L\u00e9nyeges, hogy</p> <ul> <li>az attrib\u00fatumot f\u00fcggv\u00e9ny, \u00e9s NE oszt\u00e1ly f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatumot ne a logik\u00e1t megval\u00f3s\u00edt\u00f3, hanem a tesztel\u00e9st v\u00e9gz\u0151 f\u00fcggv\u00e9ny f\u00f6l\u00e9 \u00edrd,</li> <li>az attrib\u00fatum csak egyetlen f\u00fcggv\u00e9ny f\u00f6l\u00f6tt szerepelhet.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-6-actionfunc-hasznalata","title":"Feladat 6 \u2013 <code>Action</code>/<code>Func</code> haszn\u00e1lata","text":"<p>Ez a feladat a 3. el\u0151ad\u00e1s anyag\u00e1ra \u00e9p\u00edt, laboron (id\u0151 hi\u00e1ny\u00e1ban) nem szerepelt. Ett\u0151l f\u00fcggetlen\u00fcl ez egy l\u00e9nyeges alapt\u00e9mak\u00f6r a t\u00e1rgyban.</p> <p>A projektbe vegy\u00e9l fel egy <code>Person</code> \u00e9s egy <code>ReportPrinter</code> oszt\u00e1lyt (egy-egy, az oszt\u00e1ly nev\u00e9vel egyez\u0151 f\u00e1jlba, az alap\u00e9rtelmezett, <code>ModernLangToolsApp</code> n\u00e9vt\u00e9rbe), a k\u00f6vetkez\u0151 tartalommal:</p> Person \u00e9s ReportPrinter oszt\u00e1lyok <pre><code>class Person\n{\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <pre><code>class ReportPrinter\n{\n    private readonly IEnumerable&lt;Person&gt; people;\n    private readonly Action headerPrinter;\n\n    public ReportPrinter(IEnumerable&lt;Person&gt; people, Action headerPrinter)\n    {\n        this.people = people;\n        this.headerPrinter = headerPrinter;\n    }\n\n    public void PrintReport()\n    {\n        headerPrinter();\n        Console.WriteLine(\"-----------------------------------------\");\n        int i = 0;\n        foreach (var person in people)\n        {\n            Console.Write($\"{++i}. \");\n            Console.WriteLine(\"Person\");\n        }\n        Console.WriteLine(\"--------------- Summary -----------------\");\n        Console.WriteLine(\"Footer\");\n    }\n}\n</code></pre> <p>Ez a <code>ReportPrinter</code> oszt\u00e1ly arra haszn\u00e1lhat\u00f3, hogy a konstruktor\u00e1ban megadott szem\u00e9lyek adatair\u00f3l form\u00e1zott riportot \u00edrjon ki a konzolra fejl\u00e9c/adatok/l\u00e1bl\u00e9c h\u00e1rmas bont\u00e1sban. A <code>Program.cs</code> f\u00e1jlba vedd fel az al\u00e1bbi f\u00fcggv\u00e9nyt a <code>ReportPrinter</code> kipr\u00f3b\u00e1l\u00e1s\u00e1ra, \u00e9s ezt h\u00edvd is meg a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l:</p> ReportPrinter tesztel\u00e9se <pre><code>[Description(\"Task6\")]\nstatic void test6()\n{\n    var employees = new Person[] { new Person(\"Joe\", 20), new Person(\"Jill\", 30) };\n\n    ReportPrinter reportPrinter = new ReportPrinter(\n        employees,\n        () =&gt; Console.WriteLine(\"Employees\")\n        );\n\n    reportPrinter.PrintReport();\n}\n</code></pre> <p>Futtassuk az alkalmaz\u00e1st. Az al\u00e1bbi kimenetet kapjuk a konzolon:</p> <pre><code>Employees\n-----------------------------------------\n1. Person\n2. Person\n--------------- Summary -----------------\nFooter\n</code></pre> <p>Az els\u0151 sorban \"----\" felett tal\u00e1lhat\u00f3 a fejl\u00e9c. Alatta az egye szem\u00e9lyekhez egy-egy \"Person\" be\u00e9getett sz\u00f6veg, majd a \"----\" alatt a l\u00e1bl\u00e9c, egyel\u0151re csak egy be\u00e9getett \"Footer\" sz\u00f6veggel.</p> <p>A megold\u00e1sban l\u00e1that\u00f3, hogy a fejl\u00e9c sz\u00f6vege a <code>ReportPrinter</code> oszt\u00e1lyba nincs be\u00e9getve. Ezt <code>ReportPrinter</code> felhaszn\u00e1l\u00f3ja adja meg konstruktor param\u00e9terben egy delegate, eset\u00fcnkben egy lambda kifejez\u00e9s form\u00e1j\u00e1ban. A delegate t\u00edpusa a .NET be\u00e9p\u00edtett <code>Action</code> t\u00edpusa.</p> <p>A feladatok a k\u00f6vetkez\u0151k:</p> <p>Warning</p> <p>A megold\u00e1s sor\u00e1n NEM haszn\u00e1lhatsz saj\u00e1t delegate t\u00edpust (a .NET be\u00e9p\u00edtett delegate t\u00edpusaival dolgozz, a megold\u00e1s csak ekkor elfogadhat\u00f3).</p> <ol> <li> <p>Alak\u00edtsd \u00e1t a <code>ReportPrinter</code> oszt\u00e1lyt \u00fagy, hogy az oszt\u00e1ly haszn\u00e1l\u00f3ja ne csak a fejl\u00e9cet, hanem a l\u00e1bl\u00e9cet is meg tudja adni egy delegate form\u00e1j\u00e1ban a konstruktorban.</p> </li> <li> <p>Alak\u00edtsd tov\u00e1bb a <code>ReportPrinter</code> oszt\u00e1lyt \u00fagy, hogy az egyes szem\u00e9lyek ki\u00edr\u00e1sakor ne a fix \"Person\" sz\u00f6veg jelenjen meg, hanem a <code>ReportPrinter</code> oszt\u00e1ly haszn\u00e1l\u00f3ja tudja az egyes szem\u00e9lyek adatait az ig\u00e9nyeinek megfelel\u0151en ki\u00edrni a konzolra egy konstruktorban megadott delegate seg\u00edts\u00e9g\u00e9vel (a fix \"Person\" helyett). L\u00e9nyeges, hogy a sorsz\u00e1m a sor elej\u00e9n mindig meg kell jelenjen, ez nem lehet a <code>ReportPrinter</code> haszn\u00e1l\u00f3ja \u00e1ltal megv\u00e1ltoztathat\u00f3 (vagyis ezt a tov\u00e1bbiakban is a <code>ReportPrinter</code> oszt\u00e1lynak kell ki\u00edrnia)!</p> <p>Tipp a megold\u00e1shoz</p> <p>Hasonl\u00f3 megk\u00f6zel\u00edt\u00e9sben gondolkozz, mint a fejl\u00e9c \u00e9s l\u00e1bl\u00e9c eset\u00e9ben, de itt ehhez a <code>ReportPrinter</code> felhaszn\u00e1l\u00f3j\u00e1nak meg kell kapnia a szem\u00e9ly objektumot ahhoz, hogy azt form\u00e1zottan ki tudja \u00edrni a konzolra.</p> </li> <li> <p>A <code>Program.cs</code> f\u00e1jlban a <code>ReportPrinter</code> haszn\u00e1lat\u00e1t alak\u00edtsd \u00fagy (megfelel\u0151 lambda kifejez\u00e9sek megad\u00e1s\u00e1val), hogy a kimenet a konzolon a k\u00f6vetkez\u0151 legyen:</p> <pre><code>Employees\n-----------------------------------------\n1. Name: Joe (Age: 20)\n2. Name: Jill (Age: 30)\n--------------- Summary -----------------\nNumber of Employees: 2\n</code></pre> <p>L\u00e1bl\u00e9cben a dolgoz\u00f3k sz\u00e1m\u00e1nak ki\u00edr\u00e1sa</p> <p>Ahhoz, hogy a l\u00e1bl\u00e9cben a dolgoz\u00f3k sz\u00e1m\u00e1nak ki\u00edr\u00e1s\u00e1t eleg\u00e1ns m\u00f3don meg tudd tenni, sz\u00fcks\u00e9g van a \"variable capturing\" t\u00e9mak\u00f6r ismeret\u00e9re (l\u00e1sd 3. el\u0151ad\u00e1s \"Variable capturing, closure\" fejezet).</p> <p>H\u00e1zi feladat ellen\u0151rz\u00e9se</p> <p>A \"Feladat 6\" feladatot, vagyis azt, hogy a <code>ReportPrinter</code>-t \u00e9s annak haszn\u00e1lat\u00e1t j\u00f3l alak\u00edtottad-e \u00e1t, a GitHub-os automata ellen\u0151rz\u0151 NEM ellen\u0151rzi. Teszteld a megold\u00e1sod alaposan, hogy ne csak a hat\u00e1rid\u0151 ut\u00e1n ut\u00f3lag, a h\u00e1zi feladatok manu\u00e1lis ellen\u0151rz\u00e9se sor\u00e1n der\u00fclj\u00f6n ki, hogy a megold\u00e1s nem elfogadhat\u00f3. (Kieg\u00e9sz\u00edt\u00e9s: 2024.03.13 reggelt\u0151l kezdve m\u00e1r erre is van r\u00e9szleges automata ellen\u0151rz\u00e9s)</p> </li> <li> <p>A k\u00f6vetkez\u0151 feladat opcion\u00e1lis, a be\u00e9p\u00edtett <code>Func</code> delegate-ek gyakorl\u00e1s\u00e1ra ad j\u00f3 lehet\u0151s\u00e9get. A <code>ReportPrinter</code> oszt\u00e1lynak van egy komolyabb h\u00e1tr\u00e1nya: a kimeneti riportot csak a konzolon tudjuk a seg\u00edts\u00e9g\u00e9vel megjelen\u00edteni. Rugalmasabb megold\u00e1s lenne, ha nem \u00edrna a konzolra, hanem egy string form\u00e1j\u00e1ban lehetne a seg\u00edts\u00e9g\u00e9vel a riportot el\u0151\u00e1ll\u00edtani. Ezt a stringet m\u00e1r \u00fagy haszn\u00e1lhatn\u00e1nk fel, ahogy csak szeretn\u00e9nk (pl. \u00edrhatn\u00e1nk f\u00e1jlba is).</p> <p>A feladat a k\u00f6vetkez\u0151: vezess be egy <code>ReportBuilder</code> oszt\u00e1lyt a m\u00e1r megl\u00e9v\u0151 <code>ReportPrinter</code> mint\u00e1j\u00e1ra, de ez ne a konzolra \u00edrjon, hanem egy a teljes riportot tartalmaz\u00f3 stringet \u00e1ll\u00edtson el\u0151, melyet egy \u00fajonnan bevezetett, <code>GetResult()</code> m\u0171velettel lehessen t\u0151le lek\u00e9rdezni. </p> <p>Bead\u00e1s</p> <p>Ha beadod a feladatot, a <code>ReportBuilder</code>-t p\u00e9ld\u00e1nyos\u00edt\u00f3/tesztel\u0151 k\u00f3dot ne a fenti, <code>test6</code> f\u00fcggv\u00e9nybe tedd, hanem vezess be egy <code>test6b</code> nev\u0171 f\u00fcggv\u00e9nyt, \u00e9s l\u00e1sd el a <code>[Description(\"Task6b\")]</code> attrib\u00fatummal.</p> <p>Tippek a megold\u00e1shoz</p> <ul> <li>C\u00e9lszer\u0171 az oszt\u00e1lyba egy <code>StringBuilder</code> tagv\u00e1ltoz\u00f3t bevezetni, \u00e9s ennek seg\u00edts\u00e9g\u00e9vel dolgozni. Ez nagys\u00e1grenddel hat\u00e9konyabb, mint a stringek \"+\"-szal val\u00f3 \u00f6sszef\u0171z\u00f6get\u00e9se.</li> <li>A <code>ReportBuilder</code> oszt\u00e1ly haszn\u00e1l\u00f3ja itt m\u00e1r ne a konzolra \u00edrjon, hanem megfelel\u0151 be\u00e9p\u00edtett t\u00edpus\u00fa delegate-ek (itt az <code>Action</code> nem lesz megfelel\u0151) seg\u00edts\u00e9g\u00e9vel adja vissza a <code>ReportBuilder</code> sz\u00e1m\u00e1ra azokat a stringeket, melyeket bele kell f\u0171znie a kimenetbe. A tesztel\u00e9s sor\u00e1n most is lambda kifejez\u00e9seket haszn\u00e1lj!</li> </ul> </li> </ol>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat-7-imsc-beepitett-funcaction-generikus-delegate-tipusok-hasznalata","title":"Feladat 7 (IMSc) \u2013 be\u00e9p\u00edtett <code>Func</code>/<code>Action</code> generikus delegate t\u00edpusok haszn\u00e1lata","text":"<p>A feladat megold\u00e1sa nem k\u00f6telez\u0151, de er\u0151sen aj\u00e1nlott: alapanyag, \u00edgy ZH-n/vizsg\u00e1n szerepelhet. Laboron nem volt, csak el\u0151ad\u00e1son.</p> <p>A megold\u00e1s\u00e9rt +2 IMSc pont is j\u00e1r.</p>"},{"location":"hazi/2-nyelvi-eszkozok/#feladat_4","title":"Feladat","text":"<p>B\u0151v\u00edtsd ki a <code>JediCouncil</code> oszt\u00e1lyt.</p> <ul> <li> <p>K\u00e9sz\u00edts egy <code>Count</code> nev\u0171 <code>int</code> visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u0171 property-t (tulajdons\u00e1got), amely minden lek\u00e9rdez\u00e9skor a tan\u00e1csban aktu\u00e1lisan tal\u00e1lhat\u00f3 Jedi-k sz\u00e1m\u00e1t adja vissza. \u00dcgyelj arra, hogy ezt az \u00e9rt\u00e9ket csak lek\u00e9rdezni lehessen (be\u00e1ll\u00edtani nem).</p> <p>Tipp</p> <p>A <code>JediCouncil</code>-ban tal\u00e1lhat\u00f3 members nev\u0171 tagv\u00e1ltoz\u00f3nak van egy <code>Count</code> nev\u0171 property-je, a megold\u00e1s \u00e9p\u00edtsen erre.</p> </li> <li> <p>K\u00e9sz\u00edts egy <code>CountIf</code> nev\u0171 f\u00fcggv\u00e9nyt, amely szint\u00e9n a tan\u00e1cstagok megsz\u00e1ml\u00e1l\u00e1s\u00e1ra val\u00f3, de csak bizonyos felt\u00e9telnek eleget tev\u0151 tan\u00e1cstagokat vesz figyelembe. A f\u00fcggv\u00e9ny visszat\u00e9r\u00e9si \u00e9rt\u00e9ke <code>int</code>, \u00e9s a felt\u00e9telt, amelynek megfelel\u0151 tan\u00e1cstagok sz\u00e1m\u00e1t visszaadja, egy delegate seg\u00edts\u00e9g\u00e9vel kapja meg param\u00e9terk\u00e9nt (teh\u00e1t a <code>CountIf</code>-nek kell legyen param\u00e9tere).</p> <p>Delegate t\u00edpusa</p> <p>A delegate t\u00edpusa k\u00f6telez\u0151en a be\u00e9p\u00edtett generikus <code>Action</code> / <code>Func</code> delegate t\u00edpusok k\u00f6z\u00fcl a megfelel\u0151 kell legyen (vagyis saj\u00e1t delegate t\u00edpus, ill. a be\u00e9p\u00edtett <code>Predicate</code> t\u00edpus nem haszn\u00e1lhat\u00f3).</p> <p>Emiatt a list\u00e1n NEM haszn\u00e1lhatod a be\u00e9p\u00edtett <code>FindAll</code> m\u0171velet\u00e9t, mivel az \u00e1ltalunk haszn\u00e1lt delegate t\u00edpus nem lenne kompatibilis a <code>FindAll</code> \u00e1ltal v\u00e1rt param\u00e9terrel. A tagokon egy <code>foreach</code> ciklusban v\u00e9gigiter\u00e1lva dolgozz!</p> </li> <li> <p>A property \u00e9s a f\u00fcggv\u00e9ny m\u0171k\u00f6d\u00e9s\u00e9t demonstr\u00e1ld egy erre dedik\u00e1lt k\u00f6z\u00f6s f\u00fcggv\u00e9nyben, amit l\u00e1ss el a <code>[Description(\"Task7\")]</code> attrib\u00fatummal. Ez a f\u00fcggv\u00e9ny nem szorosan a feladathoz tartoz\u00f3 k\u00f3dot ne tartalmazzon, viszont a Jeditan\u00e1cs felt\u00f6lt\u00e9s\u00e9hez az el\u0151z\u0151 feladatban bevezetett seg\u00e9df\u00fcggv\u00e9nyt h\u00edvd. A f\u00fcggv\u00e9nyt h\u00edvd meg a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9b\u0151l. </p> <p>Fontos</p> <p>A <code>[Description(\"Task7\")]</code> attrib\u00fatum csak egyetlen f\u00fcggv\u00e9ny f\u00f6l\u00f6tt szerepelhet.</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#megoldas_4","title":"Megold\u00e1s","text":"<ul> <li>A <code>Count</code> nev\u0171 property eset\u00e9ben csak a <code>get</code> \u00e1gnak van \u00e9rtelme, ez\u00e9rt a <code>set</code> \u00e1gat meg se \u00edrjuk. Ez egy csak olvashat\u00f3 tulajdons\u00e1g legyen.</li> <li>A <code>CountIf</code> f\u00fcggv\u00e9ny meg\u00edr\u00e1s\u00e1ban a 4-es feladat ny\u00fajt seg\u00edts\u00e9get. A k\u00fcl\u00f6nbs\u00e9g, hogy a <code>CountIf</code> nem a tan\u00e1cstagokat, csak a darabsz\u00e1mot adja vissza.<ul> <li>A <code>CountIf</code> f\u00fcggv\u00e9ny a felt\u00e9telt param\u00e9terk\u00e9nt egy <code>bool F\u00fcggv\u00e9nyn\u00e9v(Jedi jedi)</code> szignat\u00far\u00e1j\u00fa sz\u0171r\u0151f\u00fcggv\u00e9nyt v\u00e1rjon.</li> </ul> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/#beadas","title":"Bead\u00e1s","text":"<p>Ellen\u0151rz\u0151lista ism\u00e9tl\u00e9sk\u00e9ppen:</p> <ul> <li>A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>A GitHub-r\u00f3l let\u00f6lt\u00f6tt kiindul\u00f3 solutionben/projektekben kell dolgozni, nem \u00fajonnan l\u00e9trehozottban.</li> <li>Am\u00edg nem vagy rutinos a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00e9l-e.</li> <li>A GitHub fel\u00fclet\u00e9n ellen\u0151rizd a push-t k\u00f6vet\u0151en, hogy a GitHub Action alap\u00fa el\u0151ellen\u0151rz\u0151 hiba n\u00e9lk\u00fcl lefutott-e.</li> <li>L\u00e9nyeges, hogy a feladatok csak akkor ker\u00fclnek elfogad\u00e1sra, ha teljesen elk\u00e9sz\u00fclnek, \u00e9s minden tekintetben teljes\u00edtik a k\u00f6vetelm\u00e9nyeket. Nem fordul\u00f3 k\u00f3d, illetve r\u00e9szleges megold\u00e1s elfogad\u00e1s\u00e1ban nem \u00e9rdemes b\u00edzni.</li> <li>Term\u00e9szetesen saj\u00e1t munk\u00e1t kell beadni (hiszen \u00e9rt\u00e9kel\u00e9sre ker\u00fcl).</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/","title":"2<sup>nd</sup> Homework - language tools","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#introduction","title":"Introduction","text":"<p>This independent assignment builds on the content presented in the 2<sup>nd</sup> Lab - Language Tools lab session.</p> <p>Based on the above, the tasks in this independent exercise can be completed with the guidance provided after the task descriptions.</p> <p>Goals of the independent exercise:</p> <ul> <li>Practicing the use of properties</li> <li>Applying delegates and events</li> <li>Practicing the use of .NET attributes</li> <li>Utilizing basic collection types</li> <li>Practicing lambda expressions</li> </ul> <p>A description of the necessary development environment can be found here.</p> <p>Usage of C# 12 (and newer) language features</p> <p>When solving the homework, C# 12 and newer language features (e.g., primary constructor) must not be used, as the verification system running on GitHub does not yet support them.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#submission-process-pre-evaluation","title":"Submission Process &amp; Pre-evaluation","text":"<p>The submission process is the same as for the first homework (detailed instructions can be found at the usual location, see Homework Workflow and Using Git/GitHub):</p> <ol> <li>Use GitHub Classroom to create a repository for yourself. The invitation URL can be found in the notification message or post (see Teams or Neptun). It is important to use the correct invitation URL corresponding to this homework assignment (each homework has a different URL).</li> <li>Clone the newly created repository. This will contain the expected structure of the solution.</li> <li>After completing the tasks, commit and push your solution.</li> </ol> <p>The pre-evaluation process also works as usual. Detailed instructions: Pre-evaluation and official grading of the homework.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-1-the-phantom-menace","title":"Task 1 \u2013 The Phantom Menace","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task","title":"Task","text":"<p>As is widely known, Jedi knights derive their power from small life forms living in their cells, called midi-chlorians. The highest midi-chlorian level ever recorded (above 20,000) was measured in Anakin Skywalker.</p> <p>Create a class named <code>Jedi</code>, which has a <code>string</code> type property <code>Name</code> and an <code>int</code> type property <code>MidiChlorianCount</code>. For the latter, ensure that the <code>MidiChlorianCount</code> value cannot be set to 35 or lower. If someone attempts this, the class must throw an exception. For validation, choose the simplest and cleanest solution: use a simple <code>if</code> statement in the property setter and throw an exception. The <code>if</code> statement should not have an <code>else</code> branch, and there is no need to use <code>return</code>.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#solution","title":"Solution","text":"<p>The task can be solved in a manner similar to Lab 2, Task 1. In the <code>MidiChlorianCount</code> property setter, throw an exception if an invalid value is provided. This can be done using the following statement:</p> <pre><code>throw new ArgumentException(\"You are not a true Jedi!\");\n</code></pre>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-2-attack-of-the-clones","title":"Task 2 \u2013 Attack of the Clones","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task_1","title":"Task","text":"<p>Extend the class created in Task 1 with attributes so that when a <code>Jedi</code> object is serialized into an XML file using the <code>XmlSerializer</code> class, its properties appear as XML attributes with names <code>JediName</code> and <code>JediMidiChlorianCount</code> respectively. Then, write a function that serializes an instance of the <code>Jedi</code> class into a text file and then reads it back into a new object (effectively cloning the original object).</p> <p>XML Serializer Attributes</p> <p>Place the XML serialization attributes above the properties, not the member variables!</p> <p>The Jedi Class Must Be Public</p> <p>The XML serializer can only process public classes, so ensure that the <code>Jedi</code> class is public: <pre><code>public class Jedi { ...}\n</code></pre></p> <p>Important</p> <p>Write the save and load demonstration code in a dedicated function, and annotate it with the <code>[Description(\"Task2\")]</code> C# attribute (this should be placed in the line before the function declaration). The saved/loaded object should be implemented as a local variable within this function. The class/function name can be anything (e.g., it can be placed inside the <code>Program</code> class). The function should contain only the relevant code and should not include unrelated subtasks. Call this function from the <code>Main</code> function of the <code>Program</code> class. To use the above attribute, you need to include the <code>System.ComponentModel</code> namespace.</p> <p>Key requirements:</p> <ul> <li>The attribute should be placed above a function, NOT a class.</li> <li>The attribute should be applied to the function that performs testing, not the one implementing the logic.</li> <li>The attribute should only appear above one function.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#solution_1","title":"Solution","text":"<p>The solution follows the approach of Lab 2, Task 4. We provide the following guidance:</p> <ul> <li> <p>After serialization, the XML file should look like this:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Jedi xmlns:xsi=\"...\" JediName=\"Obi-Wan\" JediMidiChlorianCount=\"15000\" /&gt;\n</code></pre> <p>It is essential that each Jedi appears as a <code>Jedi</code> XML element, their name as <code>JediName</code>, and their midi-chlorian count as <code>JediMidiChlorianCount</code> XML attributes.</p> </li> <li> <p>Since we did not examine example code for deserializing objects during the lab, we provide one here:</p> <pre><code>var serializer = new XmlSerializer(typeof(Jedi));\nvar stream = new FileStream(\"jedi.txt\", FileMode.Open);\nvar clone = (Jedi)serializer.Deserialize(stream);\nstream.Close();\n</code></pre> <p>The above code first creates a serializer (<code>serializer</code>), which is later used for reading the data. The reading operation is performed from a file named <code>jedi.txt</code>, which is opened in the second line for reading (note that if we intended to write to it, we would have needed to specify <code>FileMode.Create</code>).</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-3-revenge-of-the-sith","title":"Task 3 \u2013 Revenge of the Sith","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task_2","title":"Task","text":"<p>The Jedi Council has been experiencing high turnover recently. To track changes more easily, create a class that keeps a record of council members and sends text notifications about any changes via an event! The list should be modified with two functions. The <code>Add</code> function should register a new Jedi knight in the council, while the <code>Remove</code> function should remove the last added council member. A separate notification should indicate when the council becomes empty (use the same event as for other changes, but with a different message).</p> <p>The council members (<code>members</code>) should be stored in a <code>List&lt;Jedi&gt;</code> member variable. The <code>Add</code> function should append new elements to this list, while the <code>Remove</code> function should always remove the last added member using the generic list's <code>RemoveAt</code> method (the index of the last element can be determined from the list length, which is provided by the <code>Count</code> property).</p> <p>Notifications should be handled via a C# event. The event delegate type should take a simple <code>string</code> as a parameter. Adding a new member, removing individual members, and removing the last member should each trigger a different message. Fire the event directly within the <code>Add</code> and <code>Remove</code> methods (do not introduce a helper function for this).</p> <p>Do not use a built-in delegate type for the event; instead, define a custom one.</p> <p>Important</p> <p>The code for creating and testing the Jedi Council object (subscribing to its C# event, calling <code>Add</code> and <code>Remove</code>) should be placed in a single dedicated function, which should be annotated with the <code>[Description(\"Task3\")]</code> C# attribute.   The class/function name can be anything.   The function should contain only code relevant to this task and should not include other subtasks.   Call this function from the <code>Main</code> function of the <code>Program</code> class.</p> <p>Key requirements:</p> <ul> <li>The attribute should be placed above a function, NOT a class.</li> <li>The attribute should be applied to the function that performs testing, not the one implementing the logic.</li> <li>The attribute should only appear above a single function.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#solution_2","title":"Solution","text":"<p>The solution builds on several parts of Lab 2. The introduction of the new event should follow the approach described in Tasks 2 and 3, while council members should be stored in a list.</p> <p>Try solving the task independently based on the above information. Once finished, compare your solution with the reference solution provided in the expandable section below! Adjust your solution as needed.</p> <p>Public Visibility</p> <p>The example assumes that the involved classes, properties, and delegates have public visibility. If you encounter strange compilation errors or if <code>XmlSerializer</code> throws a runtime error, first check that all relevant elements have the appropriate public visibility settings.</p> Reference Solution <p>The steps for the reference solution are as follows:</p> <ol> <li>Create a new class named <code>JediCouncil</code>.</li> <li>Add a <code>List&lt;Jedi&gt;</code> type field and initialize it with an empty list.</li> <li> <p>Implement the <code>Add</code> and <code>Remove</code> functions.</p> <p>After completing these steps, the following code is obtained:</p> <pre><code>public class JediCouncil\n{\n    List&lt;Jedi&gt; members = new List&lt;Jedi&gt;();\n\n    public void Add(Jedi newJedi)\n    {\n        members.Add(newJedi);\n    }\n\n    public void Remove()\n    {\n        // Removes the last member of the list\n        members.RemoveAt(members.Count - 1);\n    }\n}\n</code></pre> <p>Next, implement event handling.</p> </li> <li> <p>Define a new delegate type (outside the class, as it is a type) that will pass notification messages:</p> <pre><code>public delegate void CouncilChangedDelegate(string message);\n</code></pre> </li> <li> <p>Extend the <code>JediCouncil</code> class with the event handler:</p> <pre><code>public class JediCouncil\n{\n    public event CouncilChangedDelegate CouncilChanged;\n\n    // ...\n}\n</code></pre> </li> <li> <p>Trigger the event when a new council member is added. To do this, modify the <code>Add</code> method.</p> <pre><code>public void Add(Jedi newJedi)\n{\n    members.Add(newJedi);\n\n    // TODO: Trigger the event here.\n    // Ensure it is only triggered if at least one subscriber is present.\n    // Use the modern ?.Invoke approach instead of verbose null checking.\n}\n</code></pre> </li> <li> <p>Trigger the event when a council member leaves! Differentiate the case when the council becomes completely empty. To do this, modify the <code>Remove</code> method.</p> <pre><code>public void Remove()\n{\n    // Removes the last member of the list\n    members.RemoveAt(members.Count - 1);\n\n    // TODO: Trigger the event here.\n    // Ensure it is only triggered if at least one subscriber is present.\n}\n</code></pre> </li> <li> <p>To test our solution, add a <code>MessageReceived</code> function in the class where you want to test event subscription and handling (e.g., the <code>Program</code> class). This function will subscribe to <code>JediCouncil</code> notifications.</p> Program.cs<pre><code>private static void MessageReceived(string message)\n{\n    Console.WriteLine(message);\n}\n</code></pre> </li> <li> <p>Finally, test our new class by writing a dedicated function (this can be in the <code>Program</code> class). Add the <code>[Description(\"Task3\")]</code> attribute above the function! The function template:</p> <pre><code>// Create the council\nvar council = new JediCouncil();\n\n// TODO: Subscribe to the CouncilChanged event of the council\n\n// TODO: Add two Jedi objects to the council using the Add method\n\ncouncil.Remove();\ncouncil.Remove();\n</code></pre> </li> <li> <p>If everything is implemented correctly, the following output should appear when the program is executed:</p> <pre><code>A new member has joined\nA new member has joined\nI sense a disturbance in the Force\nThe council has fallen!\n</code></pre> </li> </ol> <p>Null Checking for Events</p> <p>If you used explicit <code>null</code> checks in <code>JediCouncil.Add</code> to determine whether there is at least one subscriber, update your approach to the more modern <code>?.Invoke</code> method, which performs the same check in a more concise manner without explicit <code>null</code> validation. This change is required for <code>JediCouncil.Add</code>, but for <code>JediCouncil.Remove</code>, both approaches are acceptable.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-4-delegates","title":"Task 4 \u2013 Delegates","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task_3","title":"Task","text":"<p>Extend the <code>JediCouncil</code> class with a parameterless function (the function name must end with <code>_Delegate</code>, this is mandatory) that returns all members of the Jedi Council whose midi-chlorian count is below 530!</p> <ul> <li>Use a function, not a property, for the query.</li> <li>Within the function, use the <code>FindAll()</code> method of the <code>List&lt;Jedi&gt;</code> class to filter members.</li> <li>In this task, you are NOT allowed to use lambda expressions!</li> </ul> <p>Write a dedicated \"test\" function (e.g., in the <code>Program</code> class) that calls the above function and prints the names of the returned Jedi knights! This function should contain only the relevant test code and should not include unrelated subtasks.</p> <p>Important</p> <p>Annotate this \"test\" function with <code>[Description(\"Task4\")]</code> in C#. Call this function from the <code>Main</code> function of the <code>Program</code> class.</p> <p>Key requirements:</p> <ul> <li>The attribute should be placed above a function, NOT a class.</li> <li>The attribute should be applied to the function that performs testing, not the one implementing the logic.</li> <li>The attribute should only appear above a single function.</li> </ul> <p>Extract Initialization</p> <p>Introduce a separate static method (e.g., in the <code>Program</code> class) that takes a <code>JediCouncil</code> object as a parameter and adds at least three initialized <code>Jedi</code> objects using the <code>Add</code> method. The goal is to have an initialization method that can be reused in later tasks, avoiding redundant initialization code.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#solution_3","title":"Solution","text":"<p>The solution follows the approach of Lab 2, Task 6. Here are some guidelines:</p> <ul> <li>The function may return multiple results, so its return type should be <code>List&lt;Jedi&gt;</code>.</li> <li>The <code>FindAll</code> method expects a filtering function with the signature <code>bool FunctionName(Jedi j)</code>.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-5-lambda-expressions","title":"Task 5 \u2013 Lambda Expressions","text":"<p>This task is similar to the previous one, but now we will use lambda expressions. This topic was covered in both lectures and labs (Lab 2, Task 6).</p> <p>Extend the <code>JediCouncil</code> class with a parameterless function (the function name must end with <code>_Lambda</code>, this is mandatory) that returns all members of the Jedi Council whose midi-chlorian count is below 1000!</p> <ul> <li>Use a function, not a property, for the query.</li> <li>Within the function, use the <code>FindAll()</code> method of the <code>List&lt;Jedi&gt;</code> class to filter members.</li> <li>You must use a lambda expression (either a statement or an expression lambda)!</li> </ul> <p>Write a dedicated \"test\" function (e.g., in the <code>Program</code> class) that calls the above function and prints the names of the returned Jedi knights! This function should contain only the relevant test code and should not include unrelated subtasks.</p> <p>Important</p> <p>Annotate this \"test\" function with <code>[Description(\"Task5\")]</code> in C#. Call this function from the <code>Main</code> function of the <code>Program</code> class.</p> <p>Key requirements:</p> <ul> <li>The attribute should be placed above a function, NOT a class.</li> <li>The attribute should be applied to the function that performs testing, not the one implementing the logic.</li> <li>The attribute should only appear above a single function.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-6-using-actionfunc","title":"Task 6 \u2013 Using <code>Action</code>/<code>Func</code>","text":"<p>Follow the detailed instructions. This topic was not covered in the lab (due to time constraints), but it is an essential topic in the course.</p> <p>Add <code>Person</code> and <code>ReportPrinter</code> classes to the project (each in a separate file named after the class, within the default <code>ModernLangToolsApp</code> namespace) with the following content:</p> Person and ReportPrinter Classes <pre><code>class Person\n{\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <pre><code>class ReportPrinter\n{\n    private readonly IEnumerable&lt;Person&gt; people;\n    private readonly Action headerPrinter;\n\n    public ReportPrinter(IEnumerable&lt;Person&gt; people, Action headerPrinter)\n    {\n        this.people = people;\n        this.headerPrinter = headerPrinter;\n    }\n\n    public void PrintReport()\n    {\n        headerPrinter();\n        Console.WriteLine(\"-----------------------------------------\");\n        int i = 0;\n        foreach (var person in people)\n        {\n            Console.Write($\"{++i}. \");\n            Console.WriteLine(\"Person\");\n        }\n        Console.WriteLine(\"--------------- Summary -----------------\");\n        Console.WriteLine(\"Footer\");\n    }\n}\n</code></pre> <p>This <code>ReportPrinter</code> class is used to generate a formatted report in the console for the persons provided in its constructor, structured in a header/data/footer format. Add the following function to the <code>Program.cs</code> file to test the <code>ReportPrinter</code>, and call this function from the <code>Main</code> function:</p> Testing ReportPrinter <pre><code>[Description(\"Task6\")]\nstatic void test6()\n{\n    var employees = new Person[] { new Person(\"Joe\", 20), new Person(\"Jill\", 30) };\n\n    ReportPrinter reportPrinter = new ReportPrinter(\n        employees,\n        () =&gt; Console.WriteLine(\"Employees\")\n        );\n\n    reportPrinter.PrintReport();\n}\n</code></pre> <p>Run the application. The following output will appear in the console:</p> <p><pre><code>Employees\n-----------------------------------------\n1. Person\n2. Person\n--------------- Summary -----------------\nFooter\n</code></pre> The first row above the \"----\" represents the header. Below, each person is displayed with a hardcoded \"Person\" text, followed by the footer section below the \"----\", which currently only contains a hardcoded \"Footer\" text.</p> <p>In the solution, you can see that the header text is not hardcoded inside the <code>ReportPrinter</code> class. Instead, the <code>ReportPrinter</code> user provides it through the constructor as a delegate, in this case, a lambda expression. The delegate type used is the built-in .NET <code>Action</code> type.</p> <p>Tasks are the following:</p> <p>Warning</p> <p>You MUST NOT use a custom delegate type in this solution. Only the built-in .NET delegate types are allowed; otherwise, the solution will not be accepted.</p> <ol> <li> <p>Modify the <code>ReportPrinter</code> class so that the user can specify not only the header but also the footer as a delegate in the constructor.</p> </li> <li> <p>Further modify the <code>ReportPrinter</code> class so that instead of displaying the fixed \"Person\" text for each individual, the user of <code>ReportPrinter</code> can specify how each person's data is displayed in the console using a delegate provided in the constructor.  It is important that the serial number at the beginning of each row must always be displayed and cannot be modified by the <code>ReportPrinter</code> user. This means that <code>ReportPrinter</code> itself must handle this output.</p> <p>Solution Approach</p> <p>Use a similar approach as for the header and footer, but ensure that the <code>ReportPrinter</code> user receives the person object so they can format and display the data appropriately.</p> </li> <li> <p>Modify the <code>ReportPrinter</code> usage in <code>Program.cs</code> (using appropriate lambda expressions) so that the console output looks like this:</p> <pre><code>Employees\n-----------------------------------------\n1. Name: Joe (Age: 20)\n2. Name: Jill (Age: 30)\n--------------- Summary -----------------\nNumber of Employees: 2\n</code></pre> <p>Displaying the Employee Count in the Footer</p> <p>To properly display the number of employees in the footer, you will need to understand \"variable capturing\" (covered in Lecture 3 under \"Variable Capturing, Closure\").</p> <p>Homework Evaluation</p> <p>The automatic GitHub checker does NOT verify whether you correctly modified <code>ReportPrinter</code> and its usage for \"Task 6\". Be sure to thoroughly test your solution so that any issues do not only become apparent during manual homework evaluation after the deadline. (Update: Since March 13, 2024, partial automatic verification is available for this task.)</p> </li> <li> <p>The following task is optional but provides a good opportunity to practice using the built-in <code>Func</code> delegates.    One major limitation of the <code>ReportPrinter</code> class is that it only allows the output report to be displayed on the console. A more flexible solution would allow generating the report as a string instead, which could then be used as needed (e.g., written to a file).</p> <p>The task is as follows: introduce a <code>ReportBuilder</code> class modeled after <code>ReportPrinter</code>, but instead of writing to the console, it should generate a string containing the entire report, which can be retrieved using a new <code>GetResult()</code> method.</p> <p>Submission</p> <p>If you submit this task, do not include the instantiation/testing code for <code>ReportBuilder</code> in the <code>test6</code> function. Instead, introduce a <code>test6b</code> function and annotate it with <code>[Description(\"Task6b\")]</code>.</p> <p>Solution Hints</p> <ul> <li>Introduce a <code>StringBuilder</code> field in the class to handle string operations efficiently. This is significantly more efficient than concatenating strings using <code>\"+\"</code>.</li> <li>The <code>ReportBuilder</code> user should not write directly to the console but should provide formatted strings to <code>ReportBuilder</code> using built-in delegate types (in this case, <code>Action</code> is not suitable). Use lambda expressions for testing as well.</li> </ul> </li> </ol>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task-7-optional-task-using-built-in-funcaction-generic-delegate-types","title":"Task 7 (Optional task) \u2013 Using Built-in <code>Func</code>/<code>Action</code> Generic Delegate Types","text":"<p>Completing this task is not mandatory, but it is highly recommended, as it is core material that may appear on exams. It was covered in lectures but not in lab sessions.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#task_4","title":"Task","text":"<p>Extend the <code>JediCouncil</code> class.</p> <ul> <li> <p>Create a property named <code>Count</code> with an <code>int</code> return type that, when queried, returns the number of Jedi currently in the council. Ensure that this value can only be read (it should not be set).</p> <p>Tip</p> <p>The <code>JediCouncil</code> class contains a member variable named <code>members</code>, which has a <code>Count</code> property. The solution should build upon this.</p> </li> <li> <p>Create a function named <code>CountIf</code> that also counts the number of council members, but only considers those that meet a specified condition. The function should return an <code>int</code> and take a delegate as a parameter, which defines the condition for counting the Jedi (meaning <code>CountIf</code> must have a parameter).</p> <p>Delegate Type</p> <p>The delegate type must be one of the built-in generic <code>Action</code> / <code>Func</code> delegate types (custom delegate types and the built-in <code>Predicate</code> type are NOT allowed).</p> <p>Because of this, you CANNOT use the built-in <code>FindAll</code> method on the list, as the delegate type we use would not be compatible with the parameter expected by <code>FindAll</code>. Instead, iterate through the members using a <code>foreach</code> loop!</p> </li> <li> <p>Demonstrate the functionality of both the property and the function in a dedicated testing function, which should be annotated with <code>[Description(\"Task7\")]</code>. This function should contain only relevant test code and should not include unrelated subtasks. For filling the <code>JediCouncil</code>, call the helper function introduced in the previous task. Call this function from the <code>Main</code> function of the <code>Program</code> class.</p> <p>Important</p> <p>The <code>[Description(\"Task7\")]</code> attribute should be placed above ONLY ONE function.</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#solution_4","title":"Solution","text":"<ul> <li>The <code>Count</code> property should have only a <code>get</code> accessor, without a <code>set</code> accessor, making it a read-only property.</li> <li>The implementation of the <code>CountIf</code> function is similar to Task 4. The difference is that <code>CountIf</code> does not return the matching council members but only their count.<ul> <li>The <code>CountIf</code> function should take a filtering function as a parameter, with the signature <code>bool FunctionName(Jedi jedi)</code>.</li> </ul> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#submission","title":"Submission","text":"<p>Checklist:</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_eng/#checklist-for-submitting-homework","title":"Checklist for submitting homework","text":"<ul> <li>Enter your Neptun code in the neptun.txt file located in the root directory of the repository. The code should be in uppercase letters only, and the file should contain only these six characters\u2014nothing else.</li> <li>Work within the solution/projects downloaded from GitHub, not in a newly created project.</li> <li>If you are not yet experienced in using Visual Studio's Git features, after pushing your changes (or at the latest when you consider your homework submitted), it is advisable to check the repository on GitHub's web interface to ensure that all changes have been successfully uploaded.</li> <li>After pushing, check on GitHub to see if the GitHub Action-based pre-check has run without errors.</li> <li>Assignments will only be accepted if they are fully completed and meet all the requirements. Do not expect acceptance of non-compiling code or partial solutions.</li> <li>Naturally, you must submit your own work, as it will be evaluated.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/","title":"2. HF - Sprachwerkzeuge","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die eigenst\u00e4ndige Aufgabe baut auf den Vorlesungen der Vorlesung 2 und der ersten H\u00e4lfte der Vorlesung 3 auf (diese sind im Vorlesungsmaterial \"Vorlesung 02 - Sprachliche Mittel\" enthalten). Labor 2 - Sprachwerkzeuge liefert den praktischen Hintergrund f\u00fcr die Labor\u00fcbung.</p> <p>Aufbauend auf den obigen Ausf\u00fchrungen k\u00f6nnen die Aufgaben in dieser Selbst\u00fcbung unter Verwendung der k\u00fcrzeren Richtlinien, die auf die Aufgabenbeschreibung folgen, erledigt werden.</p> <p>Das Ziel der unabh\u00e4ngigen \u00dcbung:</p> <ul> <li>Praktische Nutzung von Eigentum</li> <li>Delegierte und Ereignisse verwenden</li> <li>\u00fcben Sie die Verwendung von .NET-Attributen</li> <li>\u00dcben der Verwendung grundlegender Sammlungstypen</li> <li>\u00dcbung Lambda-Terme</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben.</p> <p>Using C# 12 (and newer) language elements</p> <p>C# 12 und neuere Sprachelemente (z.B. prim\u00e4rer Konstruktor) k\u00f6nnen in dieser Hausaufgabe nicht verwendet werden, da der Checker auf GitHub sie noch nicht unterst\u00fctzt.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#einreichungsverfahren-pre-checker","title":"Einreichungsverfahren, Pre-Checker","text":"<p>Der Einreichungsprozess ist derselbe wie bei der ersten Hausaufgabe (siehe Arbeitsablauf bei Hausaufgaben und Verwendung von Git/GitHub f\u00fcr eine detaillierte Beschreibung an der \u00fcblichen Stelle):</p> <ol> <li>Erstellen Sie mit GitHub Classroom ein Repository f\u00fcr sich selbst. Sie finden die Einladungs-URL in Moodle (Sie k\u00f6nnen sie sehen, indem Sie auf den Link*\"GitHub classroom links for homework*\" auf der Startseite des Fachs klicken). Es ist wichtig, dass Sie die richtige Einladungs-URL f\u00fcr diese Hausaufgabe verwenden (jede Hausaufgabe hat eine andere URL).</li> <li>Klonen Sie das resultierende Repository. Dazu geh\u00f6rt auch die erwartete Struktur der L\u00f6sung.</li> <li>Nachdem Sie die Aufgaben erledigt haben, \u00fcbergeben Sie Ihre L\u00f6sung alt und dr\u00fccken Sie sie alt.</li> </ol> <p>Auch der Pre-Checker funktioniert wie gewohnt. Ausf\u00fchrliche Beschreibung: Vorabkontrolle und formale Bewertung der Hausaufgaben.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#aufgabe-1-ominose-schatten","title":"Aufgabe 1 - Omin\u00f6se Schatten","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#verfasst-am","title":"Verfasst am","text":"<p>Die Macht der Jedi-Ritter kommt bekanntlich von den winzigen Lebensformen, die in ihren Zellen leben, den Midi-Chlorianern. Der h\u00f6chste jemals gemessene Midi-Chlor-Wert (\u00fcber 20.000) wurde bei Anakin Skywalker gemessen.</p> <p>Erstellen Sie eine Klasse mit dem Namen <code>Jedi</code>, die eine Eigenschaft <code>Name</code> vom Typ <code>string</code> und eine Eigenschaft <code>MidiChlorianCount</code> vom Typ <code>int</code> hat. Bei letzterem ist darauf zu achten, dass der Wert von <code>MidiChlorianCount</code> nicht auf 35 oder weniger gesetzt werden kann. W\u00e4hlen Sie f\u00fcr die Validierung die einfachste und sauberste L\u00f6sung, die m\u00f6glich ist: Verwenden Sie ein einfaches <code>if</code>im Property Setter und l\u00f6sen Sie eine Exception aus, keine <code>else</code> Verzweigung von <code>if</code>, und keine Notwendigkeit, <code>return</code> zu verwenden.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#losung","title":"L\u00f6sung","text":"<p>Die L\u00f6sung dieser Aufgabe kann auf \u00e4hnliche Weise vorbereitet werden wie in Labor 2, Aufgabe 1. L\u00f6sen Sie im Setter der Eigenschaft <code>MidiChlorianCount</code> eine Ausnahme f\u00fcr einen ung\u00fcltigen Wert aus. Dies kann zum Beispiel mit dem folgenden Befehl geschehen:</p> <pre><code>throw new ArgumentException(\"You are not a true jedi!\");\n</code></pre>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#aufgabe-2-angriff-auf-die-klone","title":"Aufgabe 2 - Angriff auf die Klone","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#verfasst-am_1","title":"Verfasst am","text":"<p>F\u00fcgen Sie der Klasse, die Sie in \u00dcbung 1 erstellt haben, Attribute hinzu, so dass, wenn Sie ein Objekt <code>Jedi</code> mit der Klasse <code>XmlSerializer</code> in eine XML-Datendatei schreiben/zuweisen, seine Eigenschaften in Englisch als XML-Attribute angezeigt werden Schreiben Sie dann eine Funktion, die eine Instanz der Klasse <code>Jedi</code> in eine Textdatei sortiert und sie in ein neues Objekt zur\u00fcckliest (und damit das urspr\u00fcngliche Objekt klont).</p> <p>XML-Sortierattribute</p> <p>Platzieren Sie die Attribute, die die XML-Sortierung steuern, \u00fcber den Eigenschaften, nicht \u00fcber den Mitgliedsvariablen!</p> <p>Die Jedi-Klasse sollte \u00f6ffentlich sein</p> <p>Der XML-Sorter kann nur mit \u00f6ffentlichen Klassen arbeiten, daher sollte die Jedi-Klasse \u00f6ffentlich sein: <code>csharp     public class Jedi { ...}</code></p> <p>Wichtig</p> <p>Schreiben Sie den Code zum Speichern und Laden/Demonstrieren in eine gemeinsame dedizierte Funktion, und verweisen Sie auf die Funktion mit dem C#-Attribut <code>[Description(\"Task2\")]</code> (das in der Zeile vor der Funktion eingegeben werden muss). Das gespeicherte/geladene Objekt sollte in dieser Funktion als lokale Variable implementiert werden. Der Name der Klasse/Funktion kann beliebig sein (z. B. kann er in der Klasse <code>Program</code> stehen). Die Funktion sollte keinen Code enthalten, der nicht strikt mit der Aufgabe und somit auch nicht mit einer anderen (Unter-)Aufgabe zusammenh\u00e4ngt. Rufen Sie die Funktion \u00fcber die Funktion <code>Main</code> der Klasse <code>Program</code> auf. Um das oben genannte Attribut zu verwenden, m\u00fcssen Sie den Namespace <code>System.ComponentModel</code> verwenden.</p> <p>Es ist wichtig, dass</p> <ul> <li>attribut \u00fcber Funktion und NE-Klasse,</li> <li>schreiben Sie das Attribut nicht \u00fcber die Funktion, die die Logik implementiert, sondern \u00fcber die Funktion, die sie testet,</li> <li>das Attribut kann nur \u00fcber einer einzigen Funktion erscheinen.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#losung_1","title":"L\u00f6sung","text":"<p>Die L\u00f6sung dieser Aufgabe kann auf \u00e4hnliche Weise wie in Labor 2, Aufgabe 4, vorbereitet werden. Die folgende Hilfe wird angeboten:</p> <ul> <li> <p>Nach der Sortierung sollte die XML-Datei etwa so aussehen:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Jedi xmlns:xsi=\"...\" Name=\"Obi-Wan\" MidiChlorianCount=\"15000\" /&gt;\n</code></pre> <p>Es ist wichtig, dass jeder Jedi als XML-Element <code>Jedi</code> erscheint, sein Name <code>Name</code>, seine Midichlorian-Nummer <code>MidiChlorianCount</code> als XML-Attribut.</p> </li> <li> <p>Wir haben uns im Labor keinen Beispielcode f\u00fcr die R\u00fcckgabe sortierter Objekte angesehen, daher stellen wir ihn hier zur Verf\u00fcgung:</p> <pre><code>var serializer = new XmlSerializer(typeof(Jedi));\nvar stream = new FileStream(\"jedi.txt\", FileMode.Open);\nvar clone = (Jedi)serializer.Deserialize(stream);\nstream.Close();\n</code></pre> <p>In der vorherigen Zeile wird zun\u00e4chst eine Sortiertabelle (<code>serializer</code>) erstellt, die sp\u00e4ter zur Durchf\u00fchrung der Suche verwendet wird. Gelesen wird aus einer Datei namens <code>jedi.txt</code>, die in der zweiten Zeile zum Lesen ge\u00f6ffnet wird (wenn wir schreiben wollten, h\u00e4tten wir<code>FileMode.Create</code>angeben m\u00fcssen).</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#herausforderung-3-die-rache-der-sith","title":"Herausforderung 3 - Die Rache der Sith","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#verfasst-am_2","title":"Verfasst am","text":"<p>Im Rat der Jedi hat es in letzter Zeit eine hohe Fluktuation gegeben. Um den \u00dcberblick \u00fcber \u00c4nderungen zu behalten, erstellen Sie eine Klasse, die Vorstandsmitglieder registrieren und eine Textbenachrichtigung \u00fcber \u00c4nderungen in Form eines Ereignisses senden kann! Die Liste kann mit zwei Funktionen bearbeitet werden. Die Funktion <code>Add</code> nimmt einen neuen Jedi-Ritter in den Rat auf, w\u00e4hrend die Funktion <code>Remove</code> das zuletzt aufgenommene Ratsmitglied wieder entfernt. Separate Benachrichtigung, wenn der Rat komplett leer ist (verwenden Sie dasselbe Ereignis wie f\u00fcr andere \u00c4nderungen, nur mit anderem Text).</p> <p>Die Liste der Vorstandsmitglieder (<code>members</code>) wird in einer Mitgliedsvariablen des Typs <code>List&lt;Jedi&gt;</code> gespeichert, die Funktion <code>Add</code> f\u00fcgt dieser Liste neue Mitglieder hinzu, w\u00e4hrend die Funktion <code>Remove</code> immer das letzte durch die generische Liste <code>RemoveAt</code> hinzugef\u00fcgte Mitglied entfernt (der Index des letzten Mitglieds wird durch die L\u00e4nge der Liste bestimmt, die durch die Eigenschaft <code>Count</code> zur\u00fcckgegeben wird).</p> <p>Die Benachrichtigung sollte \u00fcber ein C#-Ereignis erfolgen. Der Delegatentyp f\u00fcr das Ereignis sollte ein einfacher <code>string</code>sein. Das Hinzuf\u00fcgen eines neuen Mitglieds, das Entfernen jedes Mitglieds und das Entfernen des letzten Mitglieds sollte durch einen anderen Nachrichtentext angezeigt werden. Das Ausl\u00f6sen von Ereignissen sollte direkt in <code>Add</code> und <code>Remove</code> erfolgen (f\u00fchren Sie keine Hilfsfunktion ein).</p> <p>Verwenden Sie keinen eingebauten Delegatentyp f\u00fcr den Ereignistyp, sondern f\u00fchren Sie einen eigenen ein.</p> <p>Wichtig</p> <p>Der Code, der das Jeditan\u00e1cs-Objekt erstellt und testet (Abonnieren eines C#-Ereignisses, Aufrufen von <code>Add</code> und <code>Remove</code> ), sollte in einer gemeinsamen, separaten Funktion untergebracht werden, und diese Funktion sollte durch das C#-Attribut <code>[Description(\"Task3\")]</code> dargestellt werden. Der Name der Klasse/Funktion kann beliebig sein. Die Funktion sollte keinen Code enthalten, der nicht strikt mit der Aufgabe und somit auch nicht mit einer anderen (Unter-)Aufgabe zusammenh\u00e4ngt. Rufen Sie die Funktion \u00fcber die Funktion <code>Main</code> der Klasse <code>Program</code> auf.</p> <p>Es ist wichtig, dass</p> <ul> <li>attribut \u00fcber Funktion und NE-Klasse,</li> <li>schreiben Sie das Attribut nicht \u00fcber die Funktion, die die Logik implementiert, sondern \u00fcber die Funktion, die sie testet,</li> <li>das Attribut kann nur \u00fcber einer einzigen Funktion erscheinen.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#losung_2","title":"L\u00f6sung","text":"<p>Die L\u00f6sung dieses Problems baut auf mehreren Details aus Labor 2 auf. Die Einf\u00fchrung einer neuen Veranstaltung kann wie in den \u00dcbungen 2 und 3 beschrieben erfolgen, wobei die Mitglieder des Gremiums in einer Liste eingetragen werden k\u00f6nnen.</p> <p>Versuchen Sie anhand der obigen Informationen, das Problem selbst zu l\u00f6sen. Wenn Sie fertig sind, lesen Sie die Anleitung im n\u00e4chsten zu \u00f6ffnenden Block weiter und vergleichen Sie Ihre L\u00f6sung mit der Referenzl\u00f6sung unten Korrigieren Sie gegebenenfalls Ihre eigene L\u00f6sung!</p> <p>\u00d6ffentliche Sichtbarkeit</p> <p>Das Beispiel baut auf der Tatsache auf, dass die beteiligten Klassen, Eigenschaften und Delegierten \u00f6ffentlich sichtbar sind. Wenn Sie auf einen seltsamen \u00dcbersetzungsfehler sto\u00dfen oder <code>XmlSerializer</code> zur Laufzeit einen Fehler ausl\u00f6st, \u00fcberpr\u00fcfen Sie zun\u00e4chst, ob Sie die \u00f6ffentliche Sichtbarkeit auf allen relevanten Websites korrekt eingestellt haben.</p> Referenzl\u00f6sung <p>Die Schritte der Referenzl\u00f6sung sind wie folgt:</p> <ol> <li>Erstelle eine neue Klasse mit dem Namen <code>JediCouncil</code>.</li> <li>Man nehme ein Feld vom Typ \"Liste\" und initialisiere es mit einer leeren Liste. <li> <p>Machen Sie die Funktionen \"Hinzuf\u00fcgen\" und \"Entfernen\" g\u00fcltig.</p> <p>Nach den obigen Schritten erhalten wir den folgenden Code:</p> <pre><code>public class JediCouncil\n{\n    Liste&lt;Jedi&gt; members = new List&lt;Jedi&gt;();\n\n    public void Add(Jedi newJedi)\n    {\n        members.Add(newJedi);\n    }\n\n    public void Remove()\n    {\n        // Entfernt den letzten Eintrag in der Liste\n        members.RemoveAt(members.Count - 1);\n    }\n}\n</code></pre> <p>Der n\u00e4chste Schritt ist die Implementierung der Ereignisbehandlung. </p> </li> <li> <p>Definieren Sie einen neuen Delegatentyp (au\u00dferhalb der Klasse, da es sich ebenfalls um einen Typ handelt), der den Benachrichtigungstext \u00fcbergeben wird:</p> <pre><code>public delegate void CouncilChangedDelegate(string message);\n</code></pre> </li> <li> <p>F\u00fcgen Sie die Klasse \"JediCouncil\" zum Ereignis-Handler hinzu:</p> <pre><code>public class JediCouncil\n{\n    public event CouncilChangedDelegate CouncilChanged;\n\n    // ...\n}\n</code></pre> </li> <li> <p>Lassen Sie uns das Ereignis feiern, wenn wir ein neues Vorstandsmitglied aufnehmen. Zu diesem Zweck m\u00fcssen wir die Methode \"Hinzuf\u00fcgen\" hinzuf\u00fcgen.</p> <pre><code>public void Add(Jedi newJedi)\n{\n    members.Add(newJedi);\n\n    // TODO: Fry die Veranstaltung hier.\n    // Beachten Sie, dass Sie dies nur tun sollten, wenn Sie mindestens einen Teilnehmer haben.\n    // Verwenden Sie dabei das modernere ?.Invoke und nicht die h\u00e4ufigere Nullpr\u00fcfung.\n}\n</code></pre> </li> <li> <p>Braten Sie das Ereignis, wenn ein Ratsmitglied geht! Unterscheiden Sie den Fall, dass der Rat v\u00f6llig leer ist. Dazu m\u00fcssen wir die Methode <code>Remove</code> hinzuf\u00fcgen.</p> <pre><code>public void Remove()\n{\n    // Entfernt den letzten Eintrag in der Liste\n    members.RemoveAt(members.Count - 1);\n\n    // TODO: Fry die Veranstaltung hier.\n    // Beachten Sie, dass Sie dies nur tun sollten, wenn Sie mindestens einen Teilnehmer haben.\n}\n</code></pre> </li> <li> <p>Um unsere L\u00f6sung zu testen, f\u00fcgen Sie eine Funktion <code>MessageReceived</code> zu der Klasse hinzu, in der wir das Ereignisabonnement und die Ereignisbehandlung testen wollen (z.B. die Klasse <code>Program</code>). Diese Funktion wird verwendet, um `JediCouncil'-Benachrichtigungen zu abonnieren.</p> Programm.cs<pre><code>private static void MessageReceived(string message)\n{\n    Console.WriteLine(Nachricht);\n}\n</code></pre> </li> <li> <p>Testen Sie schlie\u00dflich die neue Klasse, indem Sie eine eigene Funktion schreiben (dies kann in der Klasse <code>Programm</code> geschehen) und f\u00fcgen Sie das Attribut <code>[Description(\"Task3\")]</code> oberhalb der Funktion hinzu Das Grundger\u00fcst der Funktion:</p> <pre><code>// Einrichtung des Rates\nvar council = new JediCouncil();\n\n// TODO: Melden Sie sich hier f\u00fcr die CouncilChanged-Veranstaltung an\n\n// TODO Hier f\u00fcgen Sie zwei Jedi-Objekte zum Ratsobjekt hinzu, indem Sie Add\n\ncouncil.Remove();\ncouncil.Remove();\n</code></pre> </li> <li> <p>Wenn wir unsere Arbeit gut gemacht haben, sollten wir nach der Ausf\u00fchrung des Programms die folgende Ausgabe erhalten:</p> <p>``Text Wir haben ein neues Mitglied Wir haben ein neues Mitglied Ich sp\u00fcre eine St\u00f6rung in der Kraft Der Rat ist gefallen! ```</p> </li> <p>Nullpr\u00fcfung von Ereignissen</p> <p>Wenn Sie <code>null</code> in der Operation <code>JediCouncil.Add</code> verwendet haben, um zu pr\u00fcfen, ob es mindestens einen Abonnenten des Ereignisses gibt, konvertieren Sie dies in eine modernere L\u00f6sung (unter Verwendung von<code>?.Invoke</code>, die die Pr\u00fcfung auch in einer pr\u00e4gnanteren Form durchf\u00fchrt, aber ohne <code>null</code> Pr\u00fcfung - dies wurde in der zugeh\u00f6rigen Pr\u00e4sentation und im Labor besprochen). F\u00fcr <code>JediCouncil.Add</code> ist dies ausreichend, f\u00fcr <code>JediCouncil.Remove</code> sind beide L\u00f6sungen vorerst akzeptabel.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#aufgabe-4-delegierte","title":"Aufgabe 4 - Delegierte","text":""},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#verfasst-am_3","title":"Verfasst am","text":"<p>Erg\u00e4nzen Sie die Klasse <code>JediCouncil</code> um eine parameterlose Funktion**(der Funktionsname muss ** mit** <code>_Delegate</code>enden , das ist zwingend erforderlich**), die alle Mitglieder des Jedi-Rates mit einer Midi-Chlorzahl unter 530 zur\u00fcckgibt</p> <ul> <li>Verwenden Sie zur Abfrage eine Funktion, keine Eigenschaft.</li> <li>Um die Mitglieder innerhalb der Funktion zu finden, verwenden Sie die Funktion <code>FindAll()</code> der Klasse <code>List&lt;Jedi&gt;</code>. </li> <li>In dieser \u00dcbung k\u00f6nnen Sie lambda noch NICHT verwenden!</li> </ul> <p>Schreibe auch eine eigene \"Tester\"-Funktion (z.B. in der Klasse <code>Program</code> ), die unsere obige Funktion aufruft und die Namen der zur\u00fcckgegebenen Jedi-Ritter ausgibt! Diese Funktion sollte keinen Code enthalten, der nicht strikt mit der Aufgabe und somit auch nicht mit einer anderen (Unter-)Aufgabe zusammenh\u00e4ngt.</p> <p>Danger</p> <p>Gefahr \"Wichtig\" Siehe diese \"Tester\"-Funktion mit dem <code>[Description(\"Task4\")]</code> C#-Attribut. Rufen Sie die Funktion \u00fcber die Funktion <code>Main</code> der Klasse <code>Program</code> auf.</p> <p>Es ist wichtig, dass</p> <ul> <li>attribut \u00fcber Funktion und NE-Klasse,</li> <li>schreiben Sie das Attribut nicht \u00fcber die Funktion, die die Logik implementiert, sondern \u00fcber die Funktion, die sie testet,</li> <li>das Attribut kann nur \u00fcber einer einzigen Funktion erscheinen.</li> </ul> <p>Initialisierung auslagern</p> <p>F\u00fchren Sie bei der Implementierung eine eigene statische Methode ein (z.B. in der Klasse <code>Program</code> ), die ein Jeditan\u00e1cs-Objekt als Parameter annimmt und durch Aufruf von <code>Add</code> mindestens drei parametrisierte <code>Jedi</code> -Objekte hinzuf\u00fcgt. Unser Ziel ist es, eine Initialisierungsmethode zu haben, die in der/den sp\u00e4teren Aufgabe(n) verwendet werden kann, ohne dass der entsprechende Initialisierungscode dupliziert werden muss.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#losung_3","title":"L\u00f6sung","text":"<p>Zur L\u00f6sung dieser Aufgabe k\u00f6nnen Sie Labor 2 Labor 6 als Referenz verwenden. Um Sie zu unterst\u00fctzen, bieten wir Folgendes an:</p> <ul> <li>unsere Funktion kann mehrere Treffer zur\u00fcckgeben, daher ist der R\u00fcckgabetyp <code>List&lt;Jedi&gt;</code>,</li> <li>erwartet in unserem Fall eine Filterfunktion mit <code>bool F\u00fcggv\u00e9nyn\u00e9v(Jedi j)</code> als Parameter <code>FindAll</code>. </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#ubung-5-lambda-ausdrucke","title":"\u00dcbung 5 - Lambda-Ausdr\u00fccke","text":"<p>Die \u00dcbung ist dieselbe wie die vorhergehende, nur dass wir diesmal mit Lambda-Ausdr\u00fccken arbeiten werden. Dieses Thema wurde sowohl in der Vorlesung als auch im Labor (Labor 2, \u00dcbung 6) behandelt.</p> <p>F\u00fcge der Klasse JediCouncil eine Funktion ohne Parameter hinzu**(der Funktionsname muss ** mit** <code>_Lambda</code>enden , das ist obligatorisch**), die alle Mitglieder des Jedi-Rates mit einer Midi-Chlorianzahl unter 1000 zur\u00fcckgibt</p> <ul> <li>Verwenden Sie zur Abfrage eine Funktion, keine Eigenschaft.</li> <li>Um die Mitglieder innerhalb der Funktion zu finden, verwenden Sie die Funktion <code>FindAll()</code> der Klasse <code>List&lt;Jedi&gt;</code>. </li> <li>In dieser \u00dcbung m\u00fcssen Sie einen Lambda-Ausdruck verwenden (es spielt keine Rolle, ob Sie Anweisungs- oder Ausdrucks-Lambda verwenden)!</li> </ul> <p>Schreibe auch eine eigene \"Tester\"-Funktion (z.B. in der Klasse <code>Program</code> ), die unsere obige Funktion aufruft und die Namen der zur\u00fcckgegebenen Jedi-Ritter ausgibt! Diese Funktion sollte keinen Code enthalten, der nicht strikt mit der Aufgabe und somit auch nicht mit einer anderen (Unter-)Aufgabe zusammenh\u00e4ngt.</p> <p>Wichtig</p> <p>Siehe diese \"Tester\"-Funktion mit dem <code>[Description(\"Task5\")]</code> C#-Attribut. Rufen Sie die Funktion \u00fcber die Funktion <code>Main</code> der Klasse <code>Program</code> auf.</p> <p>Es ist wichtig, dass</p> <ul> <li>attribut \u00fcber Funktion und NE-Klasse,</li> <li>schreiben Sie das Attribut nicht \u00fcber die Funktion, die die Logik implementiert, sondern \u00fcber die Funktion, die sie testet,</li> <li>das Attribut kann nur \u00fcber einer einzigen Funktion erscheinen.</li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#aufgabe-6-actionfunc-verwenden","title":"Aufgabe 6 - <code>Action</code>/<code>Func</code> verwenden","text":"<p>Diese \u00dcbung baut auf dem Stoff der Vorlesung 3 auf und war (aus Zeitgr\u00fcnden) nicht Bestandteil des Praktikums. Dennoch handelt es sich um ein wesentliches Kernthema des Fachs.</p> <p>F\u00fcgen Sie dem Projekt eine Klasse <code>Person</code> und eine Klasse <code>ReportPrinter</code> (jeweils in einer Datei mit dem gleichen Namen wie die Klasse) mit folgendem Inhalt hinzu:</p> Person und ReportPrinter Klassen <pre><code>class Person\n{\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <pre><code>class ReportPrinter\n{\n    private readonly IEnumerable&lt;Person&gt; people;\n    private readonly Action headerPrinter;\n\n    public ReportPrinter(IEnumerable&lt;Person&gt; people, Action headerPrinter)\n    {\n        this.people = people;\n        this.headerPrinter = headerPrinter;\n    }\n\n    public void PrintReport()\n    {\n        headerPrinter();\n        Console.WriteLine(\"-----------------------------------------\");\n        int i = 0;\n        foreach (var person in people)\n        {\n            Console.Write($\"{++i}. \");\n            Console.WriteLine(\"Person\");\n        }\n        Console.WriteLine(\"--------------- Summary -----------------\");\n        Console.WriteLine(\"Footer\");\n    }\n}\n</code></pre> <p>Diese Klasse <code>ReportPrinter</code> kann verwendet werden, um einen formatierten Bericht \u00fcber die Daten der in ihrem Konstruktor angegebenen Personen in die Konsole zu schreiben, und zwar in einer Dreifachaufteilung von Kopfzeile/Daten/Fu\u00dfzeile. F\u00fcgen Sie die folgende Funktion zu <code>Program.cs</code> hinzu, um <code>ReportPrinter</code> zu testen, und rufen Sie sie von <code>Main</code> aus auf:</p> Test ReportPrinter <pre><code>[Description(\"Task6\")]\nstatic void test6()\n{\n    var employees = new Person[] { new Person(\"Joe\", 20), new Person(\"Jill\", 30) };\n\n    ReportPrinter reportPrinter = new ReportPrinter(\n        employees,\n        () =&gt; Console.WriteLine(\"Employees\")\n        );\n\n    reportPrinter.PrintReport();\n}\n</code></pre> <p>F\u00fchren Sie die Anwendung aus. Die Ausgabe auf der Konsole sieht wie folgt aus:</p> <pre><code>Employees\n-----------------------------------------\n1. Person\n2. Person\n--------------- Summary -----------------\nFooter\n</code></pre> <p>Die erste Zeile \u00fcber \"----\" ist die Kopfzeile. Unter jeder Person befindet sich ein eingebrannter \"Person\"-Text, dann unter \"----\" die Fu\u00dfzeile, vorerst nur mit einem eingebrannten \"Footer\"-Text.</p> <p>In der L\u00f6sung k\u00f6nnen Sie sehen, dass der \u00dcberschriftentext nicht in die Klasse <code>ReportPrinter</code> eingebrannt wird. Diese wird vom Benutzer von <code>ReportPrinter</code> in einem Konstruktorparameter in Form eines Delegaten, in unserem Fall eines Lambda-Ausdrucks, angegeben. Der Delegatentyp ist der in .NET integrierte Typ <code>Action</code>. </p> <p>Die Aufgaben sind:</p> <p>Warning</p> <p>Sie k\u00f6nnen NICHT Ihren eigenen Delegattyp in der L\u00f6sung verwenden (arbeiten Sie mit .NET eingebauten Delegattypen, die L\u00f6sung ist nur dann akzeptabel).</p> <ol> <li> <p>Umstrukturierung der Klasse <code>ReportPrinter</code>, so dass der Benutzer der Klasse nicht nur die Kopfzeile, sondern auch die Fu\u00dfzeile in Form eines Delegaten angeben kann.</p> </li> <li> <p>\u00c4ndern Sie die Klasse <code>ReportPrinter</code> so, dass der feste Text \"Person\" nicht angezeigt wird, wenn jede Person hinzugef\u00fcgt wird, sondern der Benutzer der Klasse <code>ReportPrinter</code> die Daten jeder Person nach Bedarf \u00fcber einen Delegaten hinzuf\u00fcgen kann (anstelle des festen Texts \"Person\"). Es ist wichtig, dass die Zeilennummer immer am Anfang der Zeile steht, sie kann vom Benutzer von <code>ReportPrinter</code> nicht ge\u00e4ndert werden!</p> <p>Tipp f\u00fcr die L\u00f6sung</p> <p>Denken Sie an einen \u00e4hnlichen Ansatz wie f\u00fcr die Kopf- und Fu\u00dfzeile, aber hier muss der Benutzer von <code>ReportPrinter</code> das Personenobjekt erhalten, um es formatiert in die Konsole schreiben zu k\u00f6nnen.</p> </li> <li> <p>\u00c4ndern Sie in der Datei <code>Program.cs</code> die Verwendung von <code>ReportPrinter</code> (mit den entsprechenden Lambda-Ausdr\u00fccken), so dass die Ausgabe auf der Konsole lautet:</p> <pre><code>Employees\n-----------------------------------------\n1. Name: Joe (Age: 20)\n2. Name: Jill (Age: 30)\n--------------- Summary -----------------\nAnzahl der Mitarbeiter: 2\n</code></pre> <p>Hausaufgabenpr\u00fcfung</p> <p>Die Aufgabe \"Aufgabe 6\", d.h. ob Sie <code>ReportPrinter</code>und dessen Verwendung korrekt konvertiert haben, wird NICHT vom automatischen GitHub-Checker gepr\u00fcft. Testen Sie Ihre L\u00f6sung gr\u00fcndlich, damit Sie nicht erst nach dem Abgabetermin bei der manuellen Kontrolle Ihrer Hausaufgaben feststellen, dass sie nicht akzeptabel ist.</p> </li> <li> <p>Die n\u00e4chste \u00dcbung ist optional und bietet Ihnen eine gute Gelegenheit, die eingebauten <code>Func</code> Delegierten zu \u00fcben. Die Klasse <code>ReportPrinter</code> hat einen gro\u00dfen Nachteil: Der Ausgabebericht kann nur auf der Konsole angezeigt werden. Eine flexiblere L\u00f6sung w\u00e4re, nicht in die Konsole zu schreiben, sondern einen String zu verwenden, um den Bericht zu erstellen. Diese Zeichenkette kann auf beliebige Weise verwendet werden (z. B. in eine Datei schreiben).</p> <p>Die Aufgabe besteht darin, eine Klasse <code>ReportBuilder</code> einzuf\u00fchren, die auf der bestehenden <code>ReportPrinter</code> basiert, aber nicht in die Konsole schreibt, sondern eine Zeichenkette mit dem vollst\u00e4ndigen Bericht erzeugt, der durch eine neu eingef\u00fchrte Operation <code>GetResult()</code> abgerufen werden kann. </p> <p>Tipps f\u00fcr die L\u00f6sung</p> <ul> <li>Es ist eine gute Idee, eine <code>StringBuilder</code> Mitgliedsvariable in die Klasse einzuf\u00fchren und mit ihr zu arbeiten. Dies ist um Gr\u00f6\u00dfenordnungen effizienter als die Verkettung von Zeichenketten mit \"+\".</li> <li>In diesem Fall sollte der Benutzer der Klasse <code>ReportBuilder</code> nicht mehr in die Konsole schreiben, sondern die an die Ausgabe anzuh\u00e4ngenden Zeichenketten an <code>ReportBuilder</code> zur\u00fcckgeben und dabei die entsprechenden eingebauten Typdelegierten verwenden ( <code>Action</code> ist hier nicht geeignet). Verwenden Sie jetzt Lambda-Terme in der Pr\u00fcfung!</li> </ul> </li> </ol>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#aufgabe-7-imsc-verwendung-eingebauter-funcaction-generischer-delegatentypen","title":"Aufgabe 7 (IMSc) - Verwendung eingebauter <code>Func</code>/<code>Action</code> generischer Delegatentypen","text":"<p>Das L\u00f6sen der Aufgabe ist nicht obligatorisch, aber sehr empfehlenswert: Es handelt sich um einen Grundstoff, der in die ZH/Pr\u00fcfung aufgenommen werden kann. Nicht in einem Labor, nur in einer Vorlesung.</p> <p>Die L\u00f6sung bringt au\u00dferdem +2 IMSc-Punkte ein.</p>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#verfasst-am_4","title":"Verfasst am","text":"<p>Erweitern Sie die Klasse <code>JediCouncil</code>. </p> <ul> <li> <p>Erstellen Sie eine Eigenschaft <code>Count</code> mit dem R\u00fcckgabewert <code>int</code>, die bei jeder Abfrage die aktuelle Anzahl der Jedi im Rat zur\u00fcckgibt. Achten Sie darauf, dass dieser Wert nur abgefragt (nicht gesetzt) werden kann.</p> <p>Tipp</p> <p>Die Membervariable members in <code>JediCouncil</code>hat eine Eigenschaft <code>Count</code>, die L\u00f6sung baut darauf auf.</p> </li> <li> <p>Erstellen Sie eine Funktion namens <code>CountIf</code>, die ebenfalls die Anzahl der Ratsmitglieder z\u00e4hlt, aber nur die Ratsmitglieder ber\u00fccksichtigt, die bestimmte Bedingungen erf\u00fcllen. Der R\u00fcckgabewert der Funktion ist <code>int</code>, und die Bedingung, f\u00fcr die sie die entsprechende Anzahl von Ratsmitgliedern zur\u00fcckgibt, wird als Parameter \u00fcber einen Delegaten zur\u00fcckgegeben ( <code>CountIf</code>muss also einen Parameter haben).</p> <p>Delegatentyp</p> <p>Der Delegatentyp muss der richtige der eingebauten generischen <code>Action</code> / <code>Func</code> Delegatentypen sein (d.h. Sie k\u00f6nnen nicht Ihren eigenen Delegatentyp oder den eingebauten <code>Predicate</code> Typ verwenden).</p> <p>Aus diesem Grund k\u00f6nnen Sie die eingebaute Operation <code>FindAll</code> f\u00fcr die Liste NICHT verwenden, da der von uns verwendete Delegatentyp nicht mit dem von <code>FindAll</code> erwarteten Parameter kompatibel w\u00e4re. Bearbeite die Tags, indem du eine `foreach'-Schleife durchl\u00e4ufst!</p> </li> <li> <p>Zeigen Sie die Eigenschaft und die Funktion in einer eigenen gemeinsamen Funktion, die Sie mit dem Attribut <code>[Description(\"Task7\")]</code> bereitstellen k\u00f6nnen. Diese Funktion sollte keinen Code enthalten, der nicht unmittelbar mit der Aufgabe zusammenh\u00e4ngt. Um den Jedi-Rat zu laden, rufen Sie die in der vorherigen Aufgabe vorgestellte Hilfsfunktion auf. Rufen Sie die Funktion \u00fcber die Funktion <code>Main</code> der Klasse <code>Program</code> auf. </p> <p>Wichtig</p> <p>Das Attribut <code>[Description(\"Task7\")]</code> kann nur oberhalb einer einzigen Funktion verwendet werden.</p> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#losung_4","title":"L\u00f6sung","text":"<ul> <li>Bei einer Eigenschaft namens <code>Count</code> ist nur der Zweig <code>get</code> sinnvoll, der Zweig <code>set</code> wird also nicht geschrieben. Diese Eigenschaft sollte schreibgesch\u00fctzt sein.</li> <li>\u00dcbung 4 hilft Ihnen, die Funktion <code>CountIf</code> zu schreiben. Der Unterschied besteht darin, dass <code>CountIf</code> nicht die Anzahl der Ratsmitglieder, sondern nur die Anzahl der St\u00fccke angibt.<ul> <li>Die Funktion <code>CountIf</code> sollte eine Filterfunktion mit der Signatur <code>bool F\u00fcggv\u00e9nyn\u00e9v(Jedi jedi)</code> als Bedingungsparameter erwarten.</li> </ul> </li> </ul>"},{"location":"hazi/2-nyelvi-eszkozok/index_ger/#vorlegen-bei","title":"Vorlegen bei","text":"<p>Checkliste f\u00fcr Wiederholungen:</p> <ul> <li>Geben Sie in der Datei neptun.txt im Stammverzeichnis des Repositorys Ihren Neptun-Code in Gro\u00dfbuchstaben ein. Die Datei sollte nur diese sechs Zeichen enthalten und nichts anderes.</li> <li>Sie sollten in den urspr\u00fcnglichen L\u00f6sungen/Projekten arbeiten, die Sie von GitHub heruntergeladen haben, und nicht in neu erstellten Projekten.</li> <li>Solange Sie nicht mit Visual Studio Git vertraut sind, sollten Sie nach dem Push (sp\u00e4testens wenn die Hausarbeit als eingereicht gilt) \u00fcberpr\u00fcfen, ob Sie alle \u00c4nderungen hochgeladen haben, indem Sie sich die Dateien im Repository auf der GitHub-Weboberfl\u00e4che ansehen.</li> <li>\u00dcberpr\u00fcfen Sie in der GitHub-Schnittstelle nach dem Push, ob der GitHub Action-basierte Pre-Validator fehlerfrei gelaufen ist.</li> <li>Es ist wichtig, dass Aufgaben nur angenommen werden, wenn sie vollst\u00e4ndig abgeschlossen sind und den Anforderungen in jeder Hinsicht entsprechen. Nicht rotierenden Codes oder Teill\u00f6sungen sollte man nicht trauen.</li> <li>Nat\u00fcrlich m\u00fcssen Sie Ihre eigene Arbeit einreichen (da sie bewertet wird).</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/","title":"3. HF - Felhaszn\u00e1l\u00f3i fel\u00fclet kialak\u00edt\u00e1sa","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A h\u00e1zi feladatban elk\u00e9sz\u00edtend\u0151 kis szoftver egy egyszer\u0171 feladatkezel\u0151 alkalmaz\u00e1s, amelyben a felhaszn\u00e1l\u00f3k feladatokat tudnak list\u00e1zni l\u00e9trehozni, m\u00f3dos\u00edtani.</p> <p>Az \u00f6n\u00e1ll\u00f3 feladat a XAML el\u0151ad\u00e1sokon elhangzottakra \u00e9p\u00edt. A feladatok gyakorlati h\u00e1tter\u00e9\u00fcl a 3. labor \u2013 Felhaszn\u00e1l\u00f3i fel\u00fcletek kialak\u00edt\u00e1sa laborgyakorlat szolg\u00e1l.</p> <p>A fentiekre \u00e9p\u00edtve, jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel (n\u00e9ha alap\u00e9rtelmezetten \u00f6sszecsukva) \u00f6n\u00e1ll\u00f3an elv\u00e9gezhet\u0151k.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>XAML fel\u00fcletle\u00edr\u00f3 nyelv haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Alapvet\u0151 vez\u00e9rl\u0151k (t\u00e1bl\u00e1zat, gomb, sz\u00f6vegdoboz, list\u00e1k) haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Fel\u00fcleti interakci\u00f3k kezel\u00e9se esem\u00e9nyvez\u00e9relten</li> <li>Adatok megjelen\u00edt\u00e9se a fel\u00fcleten adatk\u00f6t\u00e9ssel</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s.</p> <p>Fejleszt\u0151k\u00f6rnyezet WinUI3 fejleszt\u00e9shez</p> <p>A kor\u00e1bbi laborokhoz k\u00e9pest plusz komponensek telep\u00edt\u00e9se sz\u00fcks\u00e9ges. A fenti oldal eml\u00edti, hogy sz\u00fcks\u00e9g van a \".NET desktop development\" Visual Studio Workload telep\u00edt\u00e9s\u00e9re, valamint ugyanitt az oldal alj\u00e1n van egy \"WinUI t\u00e1mogat\u00e1s\" fejezet, az itt megadott l\u00e9p\u00e9seket is mindenk\u00e9ppen meg kell tenni!</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<p> B\u00e1r az alapok hasonl\u00f3k, vannak l\u00e9nyeges, a folyamatra \u00e9s k\u00f6vetelm\u00e9nyekre vonatkoz\u00f3 elt\u00e9r\u00e9sek a kor\u00e1bbi h\u00e1zi feladatokhoz k\u00e9pest, \u00edgy mindenk\u00e9ppen figyelmesen olvasd el a k\u00f6vetkez\u0151ket.</p> <ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li>A kikl\u00f3nozott f\u00e1jlok k\u00f6z\u00f6tt a <code>TodoXaml.sln</code>-t megnyitva kell dolgozni.</li> <li> A feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi. A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, a repository-d gy\u00f6k\u00e9rmapp\u00e1j\u00e1ba tedd (a neptun.txt mell\u00e9). A k\u00e9perny\u0151k\u00e9pek \u00edgy felker\u00fclnek GitHub-ra a git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</li> <li> Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#kikotesek","title":"Kik\u00f6t\u00e9sek","text":"<p> MVVM minta - ne alkalmazd!   Jelen h\u00e1zi feladatban az MVVM mint\u00e1t m\u00e9g NE haszn\u00e1ld (egyik k\u00e9s\u0151bbi r\u00e9szfeladatn\u00e1l sem), <code>ViewModel</code> oszt\u00e1lyt NE vezess be. Az MVVM egy k\u00e9s\u0151bb h\u00e1zi feladatnak lesz a t\u00e1rgya.</p> <p> Layout - egyszer\u0171s\u00e9g Mint \u00e1ltal\u00e1ban, a jelen h\u00e1zi feladat keret\u00e9ben elk\u00e9sz\u00edtend\u0151 feladatra is igaz, hogy az oldal alapelrendez\u00e9s\u00e9t <code>Grid</code>-del c\u00e9lszer\u0171 kialak\u00edtani. Ugyanakkor az egyes bels\u0151 r\u00e9szek elrendez\u00e9s\u00e9nek kialak\u00edt\u00e1sakor t\u00f6rekedj az egyszer\u0171s\u00e9gre: ahol az <code>StackPanel</code>-t is lehet haszn\u00e1lni, ne haszn\u00e1lj <code>Grid</code>-et.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#1-feladat-modell-kialakitasa-es-tesztadatok","title":"1. feladat - Modell kialak\u00edt\u00e1sa \u00e9s tesztadatok","text":"<p>A projekten bel\u00fcl hozzunk l\u00e9tre egy <code>Models</code> mapp\u00e1t (VS Solution Exporerben), majd a mapp\u00e1ba az al\u00e1bbi \u00e1br\u00e1n l\u00e1that\u00f3 oszt\u00e1lyt \u00e9s enum t\u00edpust. A <code>TodoItem</code> oszt\u00e1ly fogja tartalmazni a teend\u0151k adatait, a priorit\u00e1shoz egy felsorolt t\u00edpust hozunk l\u00e9tre.</p> <p></p> <p>Mindk\u00e9t t\u00edpus legyen publikus (\u00edrjuk a <code>class</code> \u00e9s az <code>enum</code> el\u00e9 a <code>public</code> kulcssz\u00f3t), k\u00fcl\u00f6nben \"Inconsistent accessibility\" hib\u00e1t kapn\u00e1nk a k\u00e9s\u0151bbiekben a ford\u00edt\u00e1s sor\u00e1n.</p> <p>A <code>MainPage</code> oldal fogja a teend\u0151k list\u00e1j\u00e1t megjelen\u00edteni. Most mem\u00f3ri\u00e1ban l\u00e9v\u0151 tesztadatokat haszn\u00e1ljunk, melyeket a <code>Views</code> mapp\u00e1ban tal\u00e1lhat\u00f3 <code>MainPage.xaml.cs</code>-ben hozzunk l\u00e9tre: itt <code>Todos</code> n\u00e9ven vezess\u00fcnk be egy <code>List&lt;TodoItem&gt;</code> tulajdons\u00e1got (melyet k\u00e9s\u0151bb a fel\u00fcleten elhelyezett <code>ListView</code> vez\u00e9rl\u0151h\u00f6z k\u00f6t\u00fcnk adatk\u00f6t\u00e9ssel). Ez a lista <code>TodoItem</code> objektumokat tartalmaz.</p> MainPage.xaml.cs<pre><code>public List&lt;TodoItem&gt; Todos { get; set; } = new()\n{\n    new TodoItem()\n    {\n        Id = 3,\n        Title = \"Add Neptun code to neptun.txt\",\n        Description = \"NEPTUN\",\n        Priority = Priority.Normal,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n    new TodoItem()\n    {\n        Id = 1,\n        Title = \"Buy milk\",\n        Description = \"Should be lactose and gluten free!\",\n        Priority = Priority.Low,\n        IsDone = true,\n        Deadline = DateTimeOffset.Now + TimeSpan.FromDays(1)\n    },\n    new TodoItem()\n    {\n        Id = 2,\n        Title = \"Do the Computer Graphics homework\",\n        Description = \"Ray tracing, make it shiny and gleamy! :)\",\n        Priority = Priority.High,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n};\n</code></pre> A fenti k\u00f3d magyar\u00e1zata <p>A fenti k\u00f3dr\u00e9szletben t\u00f6bb modern C# nyelvi elemet kombin\u00e1ltunk:</p> <ul> <li>Ez egy auto-implement\u00e1lt tulajdons\u00e1g (l\u00e1sd 2. labor).</li> <li>Kedz\u0151\u00e9rt\u00e9ket adtunk neki.</li> <li>A <code>new</code> ut\u00e1n nem adtuk meg a t\u00edpust, mert a ford\u00edt\u00f3 ki tudja k\u00f6vetkeztetni (l\u00e1sd 2. labor \"Target-typed new expressions\").</li> <li>A gy\u0171jtem\u00e9ny elemeit <code>{}</code> k\u00f6z\u00f6tt soroljuk fel (l\u00e1sd 2. labor \"Collection initializer szintaxis\").</li> </ul> <p><code>MainPage</code> oszt\u00e1ly</p> <p>A h\u00e1zi feladat sor\u00e1n a be\u00e9p\u00edtett <code>Page</code> oszt\u00e1lyb\u00f3l sz\u00e1rmaz\u00f3 <code>MainPage</code> oszt\u00e1lyban dolgozunk. A <code>Page</code> oszt\u00e1ly az ablakon bel\u00fcli oldalak k\u00f6z\u00f6tti navig\u00e1ci\u00f3t seg\u00edti. B\u00e1r jelen feladatban ezt nem haszn\u00e1ljuk ki, \u00e9rdemes megszokni a haszn\u00e1lat\u00e1t. Mivel alkalmaz\u00e1sunk egyetlen oldalb\u00f3l \u00e1ll, a f\u0151ablakban egyszer\u0171en csak p\u00e9ld\u00e1nyos\u00edtunk egy <code>MainPage</code> objektumot (\u00e9rdemes a <code>MainWindow.xaml</code> f\u00e1jlban ezt megtekinteni).</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#2-feladat-oldal-elrendezese-layout-lista-megjelenitese","title":"2. feladat - Oldal elrendez\u00e9se (layout), lista megjelen\u00edt\u00e9se","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#layout","title":"Layout","text":"<p>A <code>MainPage.xaml</code>-ben hozzuk l\u00e9tre a fel\u00fcletet, amelyen a teend\u0151k list\u00e1j\u00e1t megjelen\u00edtj\u00fck.</p> <p> K\u00e9sz\u00edtend\u0151 alkalmaz\u00e1s list\u00e1z\u00f3 fel\u00fclettel</p> <p>Mint a fenti \u00e1bra a h\u00e1rom teend\u0151vel mutatja, a teend\u0151k adatait egym\u00e1s alatt kell megjelen\u00edteni, a teend\u0151k priorit\u00e1s\u00e1t sz\u00ednek jelzik, a k\u00e9sz teend\u0151k mellett azok jobb oldal\u00e1n egy pipa jelenik meg.</p> <p>A fel\u00fcleten a k\u00f6vetkez\u0151 strukt\u00far\u00e1ban helyezkednek el az elemek:</p> <ul> <li>A <code>MainPage</code>-en bel\u00fcl egy <code>Grid</code>-et haszn\u00e1ljunk, amelyben k\u00e9t sorban \u00e9s k\u00e9t oszlopban helyezkednek el az elemek. Az els\u0151 oszlop fix sz\u00e9les legyen (pl.: 300 px), a m\u00e1sodik pedig a marad\u00e9k helyet foglalja el.</li> <li> <p>Az els\u0151 oszlop els\u0151 sor\u00e1ban egy <code>CommandBar</code> vez\u00e9rl\u0151 ker\u00fclj\u00f6n, melyben egy c\u00edm \u00e9s egy gomb helyezkedik el. Ehhez az al\u00e1bbi p\u00e9lda szolg\u00e1l seg\u00edts\u00e9g\u00fcl:</p> <pre><code>&lt;CommandBar VerticalContentAlignment=\"Center\"\n            Background=\"{ThemeResource AppBarBackgroundThemeBrush}\"\n            DefaultLabelPosition=\"Right\"&gt;\n    &lt;CommandBar.Content&gt;\n        &lt;TextBlock Margin=\"12,0,0,0\"\n                   Style=\"{ThemeResource SubtitleTextBlockStyle}\"\n                   Text=\"To-Dos\" /&gt;\n    &lt;/CommandBar.Content&gt;\n\n    &lt;AppBarButton Icon=\"Add\"\n                  Label=\"Add\" /&gt;\n&lt;/CommandBar&gt;\n</code></pre> <p>Vil\u00e1gos/s\u00f6t\u00e9t megjelen\u00e9s</p> <p>A Windows be\u00e1ll\u00edtasainak f\u00fcggv\u00e9ny\u00e9ben (light/dark mode) lehets\u00e9ges, hogy s\u00f6t\u00e9t h\u00e1tt\u00e9ren vil\u00e1gos sz\u00ednekkel jelenik meg a fel\u00fclet, ez is teljesen rendben van. A WinUI alkalmaz\u00e1sok alap\u00e9rtelemezett esetben alkalmazkodnak az oper\u00e1ci\u00f3s rendszer be\u00e1ll\u00edt\u00e1s\u00e1hoz, ebb\u0151l ered ez a viselked\u00e9s.</p> <p>ThemeResource</p> <p>A p\u00e9ld\u00e1ban szerepl\u0151 <code>ThemeResource</code>-okat haszn\u00e1lhatjuk a sz\u00ednek \u00e9s st\u00edlusok be\u00e1ll\u00edt\u00e1s\u00e1ra, melyek a fel\u00fclet t\u00e9m\u00e1j\u00e1t\u00f3l f\u00fcgg\u0151en v\u00e1ltoznak. P\u00e9ld\u00e1ul a <code>AppBarBackgroundThemeBrush</code> a fel\u00fclet t\u00e9m\u00e1j\u00e1t\u00f3l (vil\u00e1gos/s\u00f6t\u00e9t) f\u00fcgg\u0151en a megfelel\u0151 sz\u00edn\u0171 h\u00e1tt\u00e9r lesz.</p> <p>R\u00e9szletek\u00e9rt l\u00e1sd a dokument\u00e1ci\u00f3t \u00e9s a WinUI 3 Gallery App Colors p\u00e9ld\u00e1it.</p> </li> </ul> <p>Ha j\u00f3l dolgoztunk, az alkalmaz\u00e1st futtatva, <code>CommandBar</code>-nak a megfelel\u0151 helyen meg kell jelennie.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#lista-megjelenitese","title":"Lista megjelen\u00edt\u00e9se","text":"<p>A <code>CommandBar</code> alatti cell\u00e1ban egy list\u00e1ba (<code>ListView</code>) ker\u00fcljenek a teend\u0151k a k\u00f6vetkez\u0151 tartalommal egym\u00e1s alatt. Az adatok adatk\u00f6t\u00e9sen kereszt\u00fcl hassanak a fel\u00fclet megjelen\u00edt\u00e9s\u00e9re (a kor\u00e1bban bevezetett <code>Todos</code> list\u00e1b\u00f3l jelenjenek meg adatk\u00f6t\u00e9ssel az elemek).</p> <ul> <li>Teend\u0151 c\u00edme<ul> <li>F\u00e9lk\u00f6v\u00e9r (SemiBold) bet\u0171t\u00edpussal</li> <li>Priorit\u00e1s alapj\u00e1n sz\u00ednezve<ul> <li>Magas priorit\u00e1s: piros egy \u00e1rnyalata</li> <li>Norm\u00e1l priorit\u00e1s: be\u00e9p\u00edtett el\u0151t\u00e9rsz\u00edn</li> <li>Alacsony priorit\u00e1s: k\u00e9k egy \u00e1rnyalata</li> </ul> </li> </ul> </li> <li>A teend\u0151 c\u00edm\u00e9vel egy sorban jobbra rendezve egy pipa ikon, ha a teend\u0151 el van v\u00e9gezve</li> <li>Teend\u0151 le\u00edr\u00e1sa</li> <li>Teend\u0151 hat\u00e1rideje <code>yyyy.MM.dd</code> form\u00e1tumban</li> <li>A <code>ListView</code> h\u00e1ttere legyen azonos a <code>CommandBar</code>-\u00e9val, \u00edgy baloldalt egy egybef\u00fcgg\u0151 s\u00e1vot alkotnak.</li> </ul> Elemek a list\u00e1ban <p>Mindig gondoljuk \u00e1t, hogy egy objektumhoz t\u00f6rt\u00e9n\u0151, vagy list\u00e1s adatk\u00f6t\u00e9sr\u0151l van-e sz\u00f3, \u00e9s ennek megfelel\u0151 technik\u00e1t alkalmazzunk! Jelen h\u00e1zi feladatban nem biztos, olyan sorrendben j\u00f6nnek ezek el\u0151, mint ahogy laboron szerepeltek!\"</p> Felt\u00e9teles sz\u00ednez\u00e9s <p>A c\u00edm sz\u00ednez\u00e9s\u00e9re haszn\u00e1lhatunk konvertert vagy <code>x:Bind</code> alap\u00fa f\u00fcggv\u00e9ny k\u00f6t\u00e9st is.</p> <ul> <li> <p><code>x:Bind</code> alap\u00fa f\u00fcggv\u00e9ny k\u00f6t\u00e9s p\u00e9lda:</p> <pre><code>Foreground=\"{x:Bind local:MainPage.GetForeground(Priority)}\"\n</code></pre> <p>Itt a <code>GetForeground</code> egy publikus statikus f\u00fcggv\u00e9ny a <code>MainPage</code> oszt\u00e1lyban, amely a <code>Priority</code> felsorolt t\u00edpus alapj\u00e1n visszaadja a megfelel\u0151 sz\u00edn\u0171 <code>Brush</code> objektumot. Alap esetben nem lenne fontos a f\u00fcggv\u00e9nynek statikusnak lennie, de mivel itt egy <code>DataTemplate</code>-ben haszn\u00e1ljuk az adatk\u00f6t\u00e9st, ez\u00e9rt az <code>x:Bind</code> kontextusa nem az oldal p\u00e9ld\u00e1nya lesz, hanem a listaelem.</p> </li> <li> <p>Converter haszn\u00e1lat\u00e1ra p\u00e9lda:</p> <p>Hozzunk l\u00e9tre egy konverter oszt\u00e1lyt egy <code>Converters</code> mapp\u00e1ba, ami megval\u00f3s\u00edtja az <code>IValueConverter</code> interf\u00e9szt.</p> <pre><code>public class PriorityBrushConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        // TODO return a SolidColorBrush instance\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre> <p>P\u00e9ld\u00e1nyos\u00edtsuk a konvertert a <code>MainPage</code> er\u0151forr\u00e1sai k\u00f6z\u00f6tt.</p> <pre><code>xmlns:c=\"using:TodoXaml.Converters\"\n\n&lt;Page.Resources&gt;\n    &lt;c:PriorityBrushConverter x:Key=\"PriorityBrushConverter\" /&gt;\n&lt;/Page.Resources&gt;\n</code></pre> <p>Haszn\u00e1ljuk az adatk\u00f6t\u00e9sben statikus er\u0151forr\u00e1sk\u00e9nt a konvertert</p> <pre><code>Foreground=\"{x:Bind Priority, Converter={StaticResource PriorityBrushConverter}}\"\n</code></pre> </li> </ul> <p>A Brushok p\u00e9ld\u00e1nyos\u00edt\u00e1s\u00e1hoz haszn\u00e1ljuk a <code>SolidColorBrush</code> oszt\u00e1lyt, vagy haszn\u00e1lhatunk be\u00e9p\u00edtett ecseteket is C#-k\u00f3db\u00f3l (mint fentebb a <code>ThemeResource</code>-szal).</p> <pre><code>new SolidColorBrush(Colors.Red);\n\n(Brush)App.Current.Resources[\"ApplicationForegroundThemeBrush\"]\n</code></pre> F\u00e9lk\u00f6v\u00e9r bet\u0171t\u00edpus <p>A bet\u0171jellemz\u0151ket a \"Font...\" nev\u0171 tulajdons\u00e1gok hat\u00e1rozz\u00e1k meg: <code>FontFamily</code>, <code>FontSize</code>, <code>FontStyle</code>, <code>FontStretch</code> \u00e9s <code>FontWeight</code>.</p> Pipa ikon l\u00e1that\u00f3s\u00e1ga <p>A pipa ikonhoz haszn\u00e1ljunk egy <code>SymbolIcon</code>-t, aminek az <code>Symbol</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtsuk be <code>Accept</code> \u00e9rt\u00e9kre.</p> <p>A pipa ikon megjelen\u00edt\u00e9sekor egy igaz-hamis \u00e9rt\u00e9ket kell \u00e1talak\u00edtani <code>Visibility</code> t\u00edpus\u00fara. Erre ugyan haszn\u00e1lhatn\u00e1nk konvertert is, de ez a konverzi\u00f3 annyira gyakori, hogy az <code>x:Bind</code> adatk\u00f6t\u00e9s be\u00e9p\u00edtetten konvert\u00e1lja a <code>bool</code> \u00e9rt\u00e9ket <code>Visibility</code>-re.</p> Pipa ikon igaz\u00edt\u00e1sa <p>A teend\u0151 c\u00edme \u00e9s a pipa ikon egy sorban kell elhelyezkedjenek (egyik balra, m\u00e1sik jobbra igaz\u00edtva). Ehhez egy tipp: pl. be lehet vetni egy egycell\u00e1s <code>Grid</code>-et. <code>Grid</code>-ben lehet olyat csin\u00e1lni, hogy egy cell\u00e1ba t\u00f6bb vez\u00e9rl\u0151t tesz\u00fcnk \"egym\u00e1sra\", melyek igaz\u00edt\u00e1sa k\u00fcl\u00f6n szab\u00e1lyozhat\u00f3. A m\u00e1sodik laboron \u00edgy oldottuk meg a <code>ListView</code> <code>DataTemplate</code>-ben a n\u00e9v \u00e9s a kor megjelen\u00edt\u00e9s\u00e9t.</p> D\u00e1tumok form\u00e1z\u00e1sa <p>A hat\u00e1rid\u0151 d\u00e1tum form\u00e1z\u00e1s\u00e1ra haszn\u00e1lhatunk szint\u00e9n konvertert vagy <code>x:Bind</code> alap\u00fa f\u00fcggv\u00e9ny k\u00f6t\u00e9st is, ahol a <code>DateTime.ToString</code> f\u00fcggv\u00e9ny\u00e9t k\u00f6tj\u00fck ki param\u00e9terezve.</p> <pre><code>Text=\"{x:Bind Deadline.ToString('yyyy.MM.dd', x:Null)}\"\n</code></pre> <p>A <code>x:Null</code> az\u00e9rt kell, mert a <code>ToString</code> f\u00fcggv\u00e9nynek a m\u00e1sodik param\u00e9ter\u00e9t is meg kell adni, de az lehet <code>null</code> is ebben az esetben.</p> Listaelemek k\u00f6z\u00f6tti hely <p>Az \u00fatmutat\u00f3 k\u00e9perny\u0151ment\u00e9s\u00e9n l\u00e1tszik, hogy a listaelemek k\u00f6z\u00f6tt f\u00fcgg\u0151legesen van kihagyott hely, a listaelemek \u00edgy j\u00f3l elk\u00fcl\u00f6n\u00fclnek. Alapesetben ez nincs \u00edgy. Szerencs\u00e9re a megold\u00e1s sor\u00e1n \u00fagyis kell DataTemplate-et alkalmazni az elemek megjelen\u00edt\u00e9s\u00e9re, \u00edgy ennek kicsi hangol\u00e1s\u00e1val (tipp: egyetlen Margin/Padding megad\u00e1sa) k\u00f6nnyed\u00e9n el\u00e9rhetj\u00fck, hogy a listaelemek k\u00f6z\u00f6tt legyen n\u00e9mi hely a jobb olvashat\u00f3s\u00e1g \u00e9rdek\u00e9ben. </p> <p>2. feladat BEADAND\u00d3</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol az egyik teend\u0151nek a list\u00e1ban a neve vagy le\u00edr\u00e1sa a saj\u00e1t (!) NEPTUN k\u00f3dod legyen! (<code>f2.png</code>)</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#3-feladat-uj-teendo-hozzaadasa","title":"3. feladat - \u00daj teend\u0151 hozz\u00e1ad\u00e1sa","text":"<p>A grid jobb oldal\u00e1n az 1. sorban a \"To-Do item\" sz\u00f6veg legyen l\u00e1that\u00f3, 25-\u00f6s bet\u0171m\u00e9rettel, v\u00edzszintesen balra, f\u00fcgg\u0151legesen pedig k\u00f6z\u00e9pre igaz\u00edtva, baloldalon 20 pixelnyi \u00fcres hellyel.</p> <p>A fel\u00fcleten a Hozz\u00e1ad\u00e1s gombra kattintva jelenjen a 2. sorban egy \u0171rlap, ahol \u00faj teend\u0151t lehet felvenni.</p> <p>Az \u0171rlap kin\u00e9zete legyen a k\u00f6vetkez\u0151:</p> <p> Teend\u0151 szerkeszt\u0151 \u0171rlap</p> <p>Az \u0171rlapban a k\u00f6vetkez\u0151 elemek legyenek egym\u00e1s alatt.</p> <ul> <li>C\u00edm: sz\u00f6veges beviteli mez\u0151</li> <li>Le\u00edr\u00e1s: magasabb sz\u00f6veges beviteli mez\u0151, fogadjon el sort\u00f6r\u00e9st (enter) is (<code>AcceptsReturn=\"True\"</code>)</li> <li>Hat\u00e1rid\u0151: d\u00e1tumv\u00e1laszt\u00f3 (<code>DatePicker</code>) (Megj.: Ez\u00e9rt a vez\u00e9rl\u0151 miatt haszn\u00e1lunk a modellben <code>DateTimeOffset</code> t\u00edpust.)</li> <li>Priorit\u00e1s: leg\u00f6rd\u00fcl\u0151 lista (<code>ComboBox</code>), melyben a <code>Priority</code> felsorolt t\u00edpus \u00e9rt\u00e9kei szerepelnek</li> <li>K\u00e9sz\u00fclts\u00e9g: jel\u00f6l\u0151n\u00e9gyzet (<code>CheckBox</code>)</li> <li>Ment\u00e9s: gomb be\u00e9p\u00edtett accent st\u00edlussal (<code>Style=\"{StaticResource AccentButtonStyle}\"</code>)</li> </ul> <p>Az \u0171rlaphoz nem kell speci\u00e1lis, egyedi vez\u00e9rl\u0151t (pl. <code>UserControl</code> k\u00e9sz\u00edteni): egyszer\u0171en haszn\u00e1ljuk valamelyik, a feladathoz j\u00f3l illeszked\u0151 layout panel t\u00edpust. </p> <p>N\u00e9h\u00e1ny fenti \u00e9s al\u00e1bb meghat\u00e1rozott k\u00f6vetelm\u00e9ny megval\u00f3s\u00edt\u00e1sa kapcs\u00e1n lentebb g\u00f6rgetve leny\u00edl\u00f3 mez\u0151kben n\u00e9mi ir\u00e1nymutat\u00e1st ad az \u00fatmutat\u00f3.</p> <p>Tov\u00e1bbi funkcion\u00e1lis k\u00f6vetelm\u00e9nyek:</p> <ul> <li>Az \u0171rlap csak akkor legyen l\u00e1that\u00f3, ha a Hozz\u00e1ad\u00e1s gombra kattintottak, \u00e9s t\u0171nj\u00f6n el, ha a teend\u0151 ment\u00e9sre ker\u00fcl.</li> <li>A Ment\u00e9s gombra kattintva a felvitt adatok ker\u00fcljenek a list\u00e1ba, \u00e9s az \u0171rlap t\u0171nj\u00f6n el.</li> <li>A Hozz\u00e1ad\u00e1s gombra kattintva a list\u00e1ban \u00fcr\u00edts\u00fck ki az aktu\u00e1lisan kiv\u00e1lasztott elem jel\u00f6l\u00e9s\u00e9t (<code>SelectedItem</code>)</li> <li>Opcion\u00e1lis feladat: Az \u0171rlap legyen g\u00f6rgethet\u0151, ha a tartalma nem f\u00e9r ki a k\u00e9perny\u0151re (<code>ScrollViewer</code> haszn\u00e1lata).</li> </ul> <p>Az \u0171rlap elrendez\u00e9se</p> <ul> <li>A <code>TextBox</code>, <code>ComboBox</code> \u00e9s <code>DatePicker</code> vez\u00e9rl\u0151k rendelkeznek egy <code>Header</code> tulajdons\u00e1ggal, melyben a vez\u00e9rl\u0151 feletti fejl\u00e9csz\u00f6veg megadhat\u00f3. A fejl\u00e9csz\u00f6vegek megad\u00e1s\u00e1hoz ezt haszn\u00e1ljuk, ne k\u00fcl\u00f6n <code>TextBlock</code>-ot!</li> <li>Az \u0171rlapon az elemek ne legyenek t\u00fal s\u0171r\u0171n egym\u00e1s alatt, legyen k\u00f6z\u00f6tt\u00fck kb. 15 pixel extra hely (erre remek\u00fcl alkalmazhat\u00f3 pl. a <code>StackPanel</code> <code>Spacing</code> tulajdons\u00e1ga).</li> <li>Az \u0171rlapnak \u00e1ll\u00edtsunk be egy j\u00f3l l\u00e1that\u00f3 keretet. Ezt nem az\u00e9rt tessz\u00fck, hogy szebb legyen a fel\u00fclet\u00fcnk, hanem az\u00e9rt, hogy j\u00f3l l\u00e1that\u00f3 legyen, pontosan hol helyezkedik el az \u0171rlapunk (alternat\u00edva lehetne a h\u00e1tt\u00e9rsz\u00edn\u00e9nek a megv\u00e1ltoztat\u00e1sa). Ezt a \"tr\u00fckk\u00f6t\" ideiglenesen is szoktuk alkalmazni a fel\u00fcletkialak\u00edt\u00e1s sor\u00e1n, ha nem egy\u00e9rtelm\u0171, pontosan mi hol helyezkedik el a fel\u00fcleten. Ehhez az \u0171rlap kont\u00e9ner <code>BorderThickness</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtsuk 1-re, valamint a keret sz\u00edn\u00e9t (<code>BorderBrush</code> tulajdons\u00e1g) valamilyen j\u00f3l l\u00e1that\u00f3 sz\u00ednre (pl. <code>LightGray</code>-re).</li> <li>Az \u0171rlap baloldal\u00e1n, jobboldal\u00e1n, \u00e9s alj\u00e1n haszn\u00e1ljunk 8-as, tetej\u00e9n pedig 0-\u00e1s marg\u00f3t (ekkora hely legyen az \u0171rlap kerete \u00e9s a tartalmaz\u00f3ja k\u00f6z\u00f6tt, ak\u00e1rmekkor\u00e1ra is m\u00e9retezi a felhaszn\u00e1l\u00f3 fut\u00e1s k\u00f6zben az ablakot). </li> <li>Az \u0171rlap kerete, \u00e9s a benne lev\u0151 vez\u00e9rl\u0151k sz\u00e9le k\u00f6z\u00f6tt legyen alul \u00e9s fel\u00fcl 15, bal \u00e9s jobb oldalt 10 pixel szabad hely minden ir\u00e1nyban. Ehhez ne az \u0171rlapban lev\u0151 vez\u00e9rl\u0151k marg\u00f3it \u00e1ll\u00edtsuk egyes\u00e9vel, hanem az \u0171rlap kont\u00e9ner egy megfelel\u0151 tulajdons\u00e1g\u00e1t \u00e1ll\u00edtsuk be (mely azt szab\u00e1lyozza, mennyi hely van a sz\u00e9le, a bels\u0151 tartalma k\u00f6z\u00f6tt)!</li> <li> <p>Az el\u0151z\u0151 k\u00e9t pont azt is jelenti, hogy az \u0171rlapnak, \u00e9s benne a sz\u00f6vegdobozoknak automatikusan m\u00e9retez\u0151dni\u00fck kell az ablakkal, ezt az al\u00e1bbi lenyithat\u00f3 szekci\u00f3 alatt megjelen\u0151 k\u00e9pek illusztr\u00e1lj\u00e1k.</p> Az \u0171rlap viselked\u00e9s\u00e9nek \u00e9s elv\u00e1rt m\u00e9retek illusztr\u00e1l\u00e1sa <p> </p> </li> </ul> Ment\u00e9s megval\u00f3s\u00edt\u00e1s\u00e1nak l\u00e9p\u00e9sei <ol> <li>Az \u0171rlapban l\u00e9v\u0151 adatokat egy \u00faj <code>TodoItem</code> objektumba gy\u0171jts\u00fck \u00f6ssze, melynek tulajdons\u00e1gait adatk\u00f6tj\u00fck (k\u00e9t ir\u00e1ny\u00faan!) a fel\u00fcleten. Vezess\u00fcnk be egy tulajdons\u00e1got ehhez <code>EditedTodo</code> n\u00e9ven. Ett\u0151l a pontt\u00f3l kezdve k\u00e9t megk\u00f6zel\u00edt\u00e9ssel dolgozhatunk:<ol> <li>Az EditedTodo alapesetben null. Amikor a felhaszn\u00e1l\u00f3 \u00faj to-do elem felv\u00e9tel\u00e9t kezdem\u00e9nyezi, akkor hozzuk l\u00e9tre az \u00faj EditedTodo objektumot, mely az adott \u00faj elem adatait t\u00e1rolja. Ment\u00e9skor ezt az objektumot tessz\u00fck bele a list\u00e1ba. \u00cdgy minden \u00faj elem felv\u00e9telekor az EditedTodo egy \u00faj objektumra hivatkozik. </li> <li>Egy k\u00f6z\u00f6s EditedTodo objektumot haszn\u00e1lunk minden to-do elem felv\u00e9telekor. Ezt m\u00e1r az oldal l\u00e9trehoz\u00e1skor p\u00e9ld\u00e1nyos\u00edtjuk. Amikor a felhaszn\u00e1l\u00f3 \u00faj to-do elem felv\u00e9tel\u00e9t kezdem\u00e9nyezi (vagy a ment\u00e9s v\u00e9g\u00e9n), akkor gondoskodni kell az EditedTodo alap\u00e9rtelmezett \u00e9rt\u00e9kekkel val\u00f3 felt\u00f6lt\u00e9s\u00e9r\u0151l. Ment\u00e9skor egy m\u00e1solatot kell k\u00e9sz\u00edteni r\u00f3la \u00e9s ezt kell a k\u00f6z\u00f6s list\u00e1ba beletenni.</li> </ol> </li> <li>A k\u00f6vezkez\u0151kben a fenti 1. megk\u00f6zel\u00edt\u00e9s l\u00e9p\u00e9seire adunk ir\u00e1nymutat\u00e1st, de mindenk\u00e9ppen \u00e9rdemes el\u0151sz\u00f6r \u00f6n\u00e1l\u00f3an pr\u00f3b\u00e1lkozni. </li> <li>Az EditedTodo kezd\u0151\u00e9rt\u00e9ke legyen null, illetve a Hozz\u00e1ad\u00e1s gombra kattintva legyen p\u00e9ld\u00e1nyos\u00edtva az <code>EditedTodo</code>. </li> <li>A ment\u00e9s sor\u00e1n a <code>Todos</code> list\u00e1hoz adjuk hozz\u00e1 a szerkesztett teend\u0151 objektumot. Gondoljunk arra, hogy az adatk\u00f6t\u00e9seknek friss\u00fclni\u00fck kell a fel\u00fcleten a lista tartalm\u00e1nak v\u00e1ltoz\u00e1sa sor\u00e1n (ehhez az adataink t\u00e1rol\u00e1s\u00e1n kell v\u00e1ltoztatni).</li> <li>A ment\u00e9s sor\u00e1n az <code>EditedTodo</code> property-t nullozzuk ki. Ezt annak \u00e9rdek\u00e9ben, tessz\u00fck, hogy a k\u00f6vetkez\u0151 to-do elem felv\u00e9telekor az adatk\u00f6t\u00e9s miatt \u00fcresek legyenek az \u0171rlapon a vez\u00e9rl\u0151k, ne a kor\u00e1bbi to-do elem adatai legyenek rajta. Gondoljuk \u00e1t, ez el\u00e9g lesz-e a megold\u00e1shoz? Pr\u00f3b\u00e1ljuk is ki a megold\u00e1sunkat! Amikor az <code>EditedTodo</code> tulajdons\u00e1got \u00e1ll\u00edtjuk, a k\u00f6t\u00f6tt vez\u00e9rl\u0151knek friss\u00fclni\u00fck kell. Mire van ehhez sz\u00fcks\u00e9g?      (Tipp: itt most nem az \u00e9rdekel minket, hogy az <code>EditedTodo</code> \u00e1ltal hivatkozott <code>TodoItem</code> tulajdons\u00e1gai, pl. <code>Title</code>, <code>Description</code> v\u00e1ltoznak, hanem a <code>MainPage</code> oszt\u00e1ly <code>EditedTodo</code> tulajdons\u00e1ga v\u00e1ltozik: ennek megfelel\u0151en az <code>EditedTodo</code>-t tartalmaz\u00f3 oszt\u00e1lyban kell a megfelel\u0151 interf\u00e9szt megval\u00f3s\u00edtani).</li> </ol> Az \u0171rlap l\u00e1that\u00f3s\u00e1g szab\u00e1lyoz\u00e1sa <p>Ha a fentieknek megfelel\u0151en dolgoztunk, az \u0171rlapunk pontosan akkor kell l\u00e1that\u00f3 legyen, amikor az <code>EditedTodo</code> \u00e9rt\u00e9ke nem null (gondoljuk \u00e1t, hogy val\u00f3ban \u00edgy van). Erre \u00e9p\u00edtve t\u00f6bb megold\u00e1st is kidolgozhatunk. A legegyszer\u0171bb a klasszikus <code>x:Bind</code> tulajdons\u00e1g alap\u00fa adatk\u00f6t\u00e9s alkalmaz\u00e1sa:</p> <ol> <li>Vezess\u00fcnk be egy \u00faj tulajdons\u00e1got a <code>MainPage</code> oszt\u00e1lyunkban (pl. <code>IsFormVisible</code> n\u00e9ven, bool t\u00edpussal).</li> <li>Ez pontosan akkor legyen igaz, amikor az <code>EditedTodo</code> nem null. Ennek a karbantart\u00e1sa a mi feladatunk, pl. az <code>EditedTodo</code> setter\u00e9ben.</li> <li>Ezt a tulajdons\u00e1got lehet adatk\u00f6tni az \u0171rlapunkat reprezent\u00e1l\u00f3 kont\u00e9ner l\u00e1that\u00f3s\u00e1g\u00e1hoz (<code>Visibility</code> tulajdons\u00e1g). Igaz, hogy a t\u00edpusuk nem egyezik, de WinUI alatt van automatikus konverzi\u00f3 a <code>bool</code> \u00e9s <code>Visibility</code> t\u00edpusok k\u00f6z\u00f6tt.</li> <li>Gondoljunk arra is, hogy amikor a forr\u00e1s tulajdons\u00e1g (<code>IsFormVisible</code>) v\u00e1ltozik, a hozz\u00e1 k\u00f6t\u00f6tt c\u00e9l tulajdons\u00e1got (vez\u00e9rl\u0151 l\u00e1that\u00f3s\u00e1g) eset\u00fcnkben mindig friss\u00edteni kell. Mire van ehhez sz\u00fcks\u00e9g? (Tipp: a tulajdons\u00e1got k\u00f6zvetlen\u00fcl tartalmaz\u00f3 oszt\u00e1lynak - gondoljuk \u00e1t, eset\u00fcnkben ez melyik oszt\u00e1ly - egy megfelel\u0151 interf\u00e9szt meg kell val\u00f3s\u00edtania stb.)</li> </ol> Alternat\u00edv lehet\u0151s\u00e9gek a megold\u00e1sra <p>Egy\u00e9b alternat\u00edv\u00e1k alkalmaz\u00e1sa is lehets\u00e9ges (csak \u00e9rdekess\u00e9gk\u00e9ppen, de ne ezeket alkalmazzuk a megold\u00e1s sor\u00e1n):</p> <ol> <li>F\u00fcggv\u00e9ny alap\u00fa adatk\u00f6t\u00e9s megval\u00f3s\u00edt\u00e1sa, de eset\u00fcnkben ez k\u00f6r\u00fclm\u00e9nyesebb lenne.<ul> <li>A <code>x:Bind</code> alapon k\u00f6t\u00f6tt f\u00fcggv\u00e9nynek a megjelen\u00edt\u00e9s \u00e9s elrejt\u00e9shez az <code>EditedTodo</code> property <code>null</code> vagy nem <code>null</code> \u00e9rt\u00e9k\u00e9t kell konvert\u00e1lni <code>Visibility</code>-re.</li> <li>Az adatk\u00f6t\u00e9s sor\u00e1n a <code>FallbackValue='Collapsed'</code> be\u00e1ll\u00edt\u00e1st is haszn\u00e1lnunk kell, mert sajnos az <code>x:Bind</code> alap\u00e9rtelmezetten nem h\u00edvja meg a f\u00fcggv\u00e9nyt, ha az \u00e9rt\u00e9k <code>null</code>.</li> <li>A k\u00f6t\u00f6tt f\u00fcggv\u00e9nynek param\u00e9terben meg kell adni azt a tulajdons\u00e1got, melynek v\u00e1ltoz\u00e1sa eset\u00e9n az adatk\u00f6t\u00e9st friss\u00edteni kell, illetve a tulajdons\u00e1gra vonatkoz\u00f3 v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st itt is meg kell val\u00f3s\u00edtani.</li> </ul> </li> <li>Konverter alkalmaz\u00e1sa.</li> </ol> Priorit\u00e1sok list\u00e1ja <p>A <code>ComboBox</code>-ban a <code>Priority</code> felsorolt t\u00edpus \u00e9rt\u00e9keit jelen\u00edts\u00fck meg. Ehhez haszn\u00e1lhatjuk a <code>Enum.GetValues</code> f\u00fcggv\u00e9nyt, amihez k\u00e9sz\u00edts\u00fcnk egy tulajdons\u00e1got a <code>MainPage.xaml.cs</code>-ben.</p> <pre><code>public List&lt;Priority&gt; Priorities { get; } = Enum.GetValues(typeof(Priority)).Cast&lt;Priority&gt;().ToList();\n</code></pre> <p>A <code>ComboBox</code> <code>ItemsSource</code> tulajdons\u00e1g\u00e1hoz k\u00f6ss\u00fck az <code>Priorities</code> list\u00e1t.</p> <pre><code>&lt;ComboBox ItemsSource=\"{x:Bind Priorities}\" /&gt;\n</code></pre> <p>A fenti p\u00e9ld\u00e1ban az <code>ItemsSource</code> csak azt hat\u00e1rozza meg, hogy milyen elemek jelenjenek meg a <code>ComboBox</code> list\u00e1j\u00e1ban. De ez semmit nem mond arr\u00f3l, hogy a <code>ComboBox</code> kiv\u00e1lasztott elem\u00e9t mihez kell k\u00f6tni. Ehhez sz\u00fcks\u00e9g van m\u00e9g egy adatk\u00f6t\u00e9sre. Laboron ez nem szerepelt, el\u0151ad\u00e1sanyagban pl. a <code>SelectedItem</code>-re \u00e9rdemes r\u00e1keresni (minden el\u0151fordul\u00e1s\u00e1t \u00e9rdemes megn\u00e9zni).</p> N\u00e9h\u00e1ny fontosabb vez\u00e9rl\u0151 tulajdons\u00e1g <ul> <li>A <code>CheckBox</code> vez\u00e9rl\u0151 <code>IsChecked</code> (\u00e9s nem a <code>Checked</code>!) tulajdons\u00e1ga. A mellette jobbra megjelen\u0151 sz\u00f6veg a <code>Content</code> tulajdons\u00e1g\u00e1val adhat\u00f3 meg.</li> <li><code>DatePicker</code> vez\u00e9rl\u0151 <code>Date</code> tulajdons\u00e1ga</li> </ul> Furcsa, adatk\u00f6t\u00e9shez kapcsol\u00f3d\u00f3 NullReferenceException <p>Ha egy \"megfoghatatlannak\" t\u0171n\u0151 <code>NullReferenceException</code>-t kapsz az \u00faj elem felv\u00e9telekor, akkor ellen\u0151rizd, hogy a <code>ComboBox</code> eset\u00e9ben a <code>SelectedValue</code>-t k\u00f6t\u00f6tted-e esetleg a <code>SelectedItem</code> helyett (a <code>SelectedItem</code> haszn\u00e1land\u00f3).</p> <p>3. feladat BEADAND\u00d3</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol az \u00faj teend\u0151 felv\u00e9tele l\u00e1that\u00f3 m\u00e9g ment\u00e9s el\u0151tt! (<code>f3.1.png</code>)</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol az el\u0151z\u0151 k\u00e9pen l\u00e9v\u0151 teend\u0151 a list\u00e1ba ker\u00fclt \u00e9s elt\u0171nt az \u0171rlap! (<code>f3.2.png</code>)</p> <p>Fontos krit\u00e9riumok</p> <p>Az al\u00e1bbiakban megadunk n\u00e9h\u00e1ny fontos krit\u00e9riumot, melyek mindenk\u00e9ppen felt\u00e9telei a h\u00e1zi feladat elfogad\u00e1s\u00e1nak:</p> <ul> <li>A feladatki\u00edr\u00e1s kik\u00f6t\u00f6tte, hogy a list\u00e1ban \u00e9s az \u0171rlapon lev\u0151 vez\u00e9rl\u0151k eset\u00e9ben is adatk\u00f6t\u00e9ssel kell dolgozni. Olyan megold\u00e1s nem elfogadhat\u00f3, mely ezt megker\u00fcli. \u00cdgy p\u00e9ld\u00e1ul nem lehet a code behind f\u00e1jlban (<code>MainPage.xaml.cs</code>) olyan k\u00f3d, mely az \u0171rlapokon lev\u0151 vez\u00e9rl\u0151k tulajdons\u00e1gait (pl. TextBox Text tulajdons\u00e1ga) k\u00f6zvetlen\u00fcl k\u00e9rdezi le vagy \u00e1ll\u00edtja.</li> <li>Az el\u0151z\u0151 pont al\u00f3l k\u00e9t kiv\u00e9tel van: <ul> <li>A <code>ListView</code> <code>SelectedItem</code> tulajdons\u00e1ga k\u00f6zvetlen\u00fcl \u00e1ll\u00edtand\u00f3.</li> <li>Az \u0171rlap l\u00e1that\u00f3s\u00e1g\u00e1nak szab\u00e1lyoz\u00e1sa adatk\u00f6t\u00e9s n\u00e9lk\u00fcl is elfogadhat\u00f3 (b\u00e1r nem a legszebb megold\u00e1s, \u00e9s a gyakorl\u00e1s kedv\u00e9\u00e9rt is \u00e9rdemesebb adatk\u00f6t\u00e9ssel dolgozni).</li> </ul> </li> <li>Amikor egy \u00faj to-do elem felv\u00e9tele t\u00f6rt\u00e9nik, \u00e9s kor\u00e1bban m\u00e1r t\u00f6rt\u00e9nt egy ilyen elem felv\u00e9tele, akkor a kor\u00e1bbi elem adatai NEM lehetnek benne az \u0171rlap vez\u00e9rl\u0151iben.</li> </ul> <p>Opcion\u00e1lis gyakorl\u00f3 feladatok</p> Opcion\u00e1lis gyakorl\u00f3 feladat 1 - \u0170rlap g\u00f6rgethet\u0151v\u00e9 t\u00e9tele <p>Ehhez mind\u00f6ssze be kell csomagolni az \u0171rlapot egy <code>ScrollViewer</code> vez\u00e9rl\u0151be (illetve ne feledkezz\u00fcnk meg arr\u00f3l, hogy \u00edgy m\u00e1r ez lesz a legk\u00fcls\u0151 elem a grid cell\u00e1ban, \u00edgy r\u00e1 vonatkoz\u00f3an kell megadni a gridbeli poz\u00edci\u00f3t). Ha ezt megval\u00f3s\u00edtod, benne lehet a beadott megold\u00e1sodban.</p> Opcion\u00e1lis gyakorl\u00f3 feladat 2 - Fix sz\u00e9less\u00e9g\u0171 \u0171rlap <p>Jelen megold\u00e1sunkban az \u0171rlap automatikusan m\u00e9retez\u0151dik az ablakkal. J\u00f3 gyakorl\u00e1si lehet\u0151s\u00e9g ennek olyan \u00e1talak\u00edt\u00e1sa, mely esetben az \u0171rlap fix sz\u00e9less\u00e9g\u0171 (pl. 500 pixel) \u00e9s olyan magass\u00e1g\u00fa, mint a benne lev\u0151 elemek \u00f6ssz magass\u00e1ga. Ha az \u0171rlap eset\u00e9n StackPanellel dolgozt\u00e1l, ehhez mind\u00f6ssze h\u00e1rom attrib\u00fatumot kell felvenni vagy megv\u00e1ltoztatni. Ezt a viselked\u00e9st az al\u00e1bbi anim\u00e1lt k\u00e9p illusztr\u00e1lja. L\u00e9nyeges, hogy beadni a kor\u00e1bbi megold\u00e1st kell, nem ez az opcion\u00e1lis feladatban le\u00edrt viselked\u00e9st! </p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#4-opcionalis-feladat-3-imsc-pontert-teendo-szerkesztese","title":"4. Opcion\u00e1lis feladat 3 IMSc pont\u00e9rt - Teend\u0151 szerkeszt\u00e9se","text":"<p>Val\u00f3s\u00edtsd meg a teend\u0151k szerkeszt\u00e9s\u00e9nek lehet\u0151s\u00e9g\u00e9t az al\u00e1bbiak szerint:</p> <ul> <li>A fel\u00fcleten a teend\u0151k list\u00e1ban az elemre kattintva, az adott teend\u0151 adatai a szerkeszt\u0151 fel\u00fcleten (a kor\u00e1bbi feladatban bevezetett \u0171rlapon) ker\u00fcljenek megjelen\u00edt\u00e9sre, ahol azok \u00edgy szerkeszthet\u0151ek \u00e9s menthet\u0151ek lesznek.</li> <li>A ment\u00e9s sor\u00e1n a list\u00e1ban a szerkesztett teend\u0151 adatai friss\u00fcljenek, \u00e9s az \u0171rlap t\u0171nj\u00f6n el.</li> </ul> Megold\u00e1si tippek <ul> <li>\u00c9rdemes karbantartani a teend\u0151k egyedi azonos\u00edt\u00f3j\u00e1t a besz\u00far\u00e1s sor\u00e1n, hogy meg tudjuk k\u00fcl\u00f6nb\u00f6ztetni ment\u00e9skor, szerkeszt\u00e9s vagy besz\u00far\u00e1s esete \u00e1ll fenn. Pl. besz\u00far\u00e1s eset\u00e9n haszn\u00e1lhatjuk a -1 \u00e9rt\u00e9ket, melyet ment\u00e9s sor\u00e1n lecser\u00e9l\u00fcnk az eddig haszn\u00e1ltakn\u00e1l eggyel nagyobb sz\u00e1mra. De tegy\u00fck fel, hogy a -1 is egy olyan \u00e9rt\u00e9k, mellyel rendelkezhet egy \u00e9rv\u00e9nyes to-do objektum. Mit lehet ekkor tenni? A <code>TodoItem</code> oszt\u00e1lyban az <code>Id</code> t\u00edpus\u00e1t alak\u00edtsuk \u00e1t <code>int?</code>-re. A <code>?</code>-lel az \u00e9rt\u00e9k t\u00edpusok (<code>int</code>, <code>bool</code>, <code>char</code>, <code>enum</code>, <code>struct</code> stb.) is felvehetnek <code>null</code> \u00e9rt\u00e9ket. Ezeket nullable \u00e9rt\u00e9k t\u00edpusoknak (nullable value types) nevezz\u00fck. Ezek a <code>Nullable&lt;T&gt;</code> .NET strukt\u00far\u00e1ra k\u00e9pz\u0151dnek le ford\u00edt\u00e1s sor\u00e1n, melyek tartalmazz\u00e1k az eredeti v\u00e1ltoz\u00f3t, illetve egy flag-et, mely jelzi, ki van-e t\u00f6ltve az \u00e9rt\u00e9k, vagy sem. B\u0151vebben itt \u00e9s itt lehet ezekr\u0151l olvasni. Alkalmazzuk ezt a megold\u00e1s sor\u00e1n.</li> <li>A lista elemre kattint\u00e1shoz a <code>ListView</code> <code>ItemClick</code> esem\u00e9ny\u00e9t c\u00e9lszer\u0171 haszn\u00e1lni, miut\u00e1n bekapcsoltuk a <code>IsItemClickEnabled</code> tulajdons\u00e1got a <code>ListView</code>-n. Az \u00fajonnan kiv\u00e1lasztott listaelem kapcs\u00e1n inform\u00e1ci\u00f3t az esem\u00e9nykezel\u0151 <code>ItemClickEventArgs</code> param\u00e9ter\u00e9ben kapunk. </li> <li>A szerkesztend\u0151 adatok kezel\u00e9s\u00e9re t\u00f6bb megold\u00e1s is elk\u00e9pzelhet\u0151, ezekb\u0151l az egyik: <ul> <li>Az <code>EditedTodo</code> property-t \u00e1ll\u00edtsuk be a szerkesztett teend\u0151re a kattint\u00e1skor.</li> <li>A ment\u00e9s gombra kattintva a <code>Todos</code> list\u00e1ban cser\u00e9lj\u00fck le a szerkesztett teend\u0151t az <code>EditedTodo</code> \u00e9rt\u00e9k\u00e9re. Val\u00f3j\u00e1ban ugyanazt az elemet cser\u00e9lj\u00fck le \u00f6nmag\u00e1ra, de a <code>ListView</code> \u00edgy friss\u00fclni tud.</li> </ul> </li> </ul> <p>4. iMSc feladat BEADAND\u00d3</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol egy megl\u00e9v\u0151 elemre kattintva kit\u00f6lt\u0151dik az \u0171rlap! (<code>f4.imsc.1.png</code>)</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol az el\u0151z\u0151 k\u00e9pen kiv\u00e1lasztott teend\u0151 ment\u00e9s hat\u00e1s\u00e1ra friss\u00fcl a list\u00e1ban! (<code>f4.imsc.2.png</code>)</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/#beadas","title":"Bead\u00e1s","text":"<p>Ellen\u0151rz\u0151lista ism\u00e9tl\u00e9sk\u00e9ppen:</p> <ul> <li>A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>A GitHub-r\u00f3l let\u00f6lt\u00f6tt kiindul\u00f3 solutionben/projektekben kell dolgozni, nem \u00fajonnan l\u00e9trehozottban.</li> <li>Am\u00edg nem vagy rutinos a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00e9l-e.</li> <li>A GitHub fel\u00fclet\u00e9n ellen\u0151rizd a push-t k\u00f6vet\u0151en, hogy a GitHub Action alap\u00fa el\u0151ellen\u0151rz\u0151 hiba n\u00e9lk\u00fcl lefutott-e.</li> <li>L\u00e9nyeges, hogy a feladatok csak akkor ker\u00fclnek elfogad\u00e1sra, ha teljesen elk\u00e9sz\u00fclnek, \u00e9s minden tekintetben teljes\u00edtik a k\u00f6vetelm\u00e9nyeket. Nem fordul\u00f3 k\u00f3d, illetve r\u00e9szleges megold\u00e1s elfogad\u00e1s\u00e1ban nem \u00e9rdemes b\u00edzni.</li> <li>Term\u00e9szetesen saj\u00e1t munk\u00e1t kell beadni (hiszen \u00e9rt\u00e9kel\u00e9sre ker\u00fcl).</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/","title":"3<sup>rd</sup> Homework - The design of the user interface","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#introduction","title":"Introduction","text":"<p>In this homework, you will develop a simple task management application where users can list, create, and modify tasks.</p> <p>This independent task builds upon the content covered in XAML lectures. Its practical foundation is based on the 3<sup>rd</sup> lab \u2013 The design of the user interface exercise.</p> <p>Based on the above, the tasks in this independent exercise can be completed independently with the help of the short guidelines following the task descriptions (sometimes collapsed by default).</p> <p>Objectives:</p> <ul> <li>Practicing the use of the XAML interface description language</li> <li>Practicing the use of basic controls (table, button, text box, lists)</li> <li>Handling user interactions with event-driven programming</li> <li>Displaying data in the UI using data binding</li> </ul> <p>A description of the necessary development environment can be found here.</p> <p>Environment for WinUI3 development</p> <p>Additional components must be installed compared to previous labs. The above page mentions that the \".NET desktop development\" Visual Studio Workload is required. Additionally, at the bottom of the same page, there is a \"WinUI support\" section. Make sure to follow the listed steps! </p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#submission-process","title":"Submission process","text":"<p> Although the basics are similar, there are important differences in the process and requirements compared to previous homework assignments. Therefore, be sure to read the following carefully.</p> <ul> <li>The general process remains the same as before. Use GitHub Classroom to create a repository for yourself. The invitation URL can be found in the Teams post about the homework. Make sure to use the correct invitation URL corresponding to this specific homework (each homework has a different URL). Clone the newly created repository, which will contain the expected structure for your solution. After completing the tasks, commit and push your solution.</li> <li>Among the cloned files, open and work in <code>TodoXaml.sln</code>.</li> <li> Some tasks require you to take screenshots of certain parts of your solution to prove that you created it yourself. The required content of the screenshots is explicitly specified in each task. Screenshots must be submitted as part of your solution and placed in the root directory of your repository (next to neptun.txt). This ensures that the screenshots are uploaded to GitHub along with the repository content. Since the repository is private, only instructors can see it. If the screenshot contains any content you do not wish to upload, you may blur it or cut it out.</li> <li> There is no substantive pre-checker for this assignment: while an automated check will run after each push, it will only verify that neptun.txt is filled out. The actual evaluation will be conducted by the lab instructors after the submission deadline.</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#restrictions","title":"Restrictions","text":"<p> MVVM Pattern - Do not use!     In this homework, do not use the MVVM pattern (not even in any of the later subtasks), and do not introduce a <code>ViewModel</code> class. MVVM will be the subject of a later homework assignment.</p> <p> Layout - Keep it simple     As in most cases, the basic page layout for this homework should be created using a <code>Grid</code>. However, when designing the internal sections, prioritize simplicity: where a <code>StackPanel</code> is sufficient, avoid using <code>Grid</code>.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#task-1-model-creation-and-test-data","title":"Task 1 - Model creation and test data","text":"<p>Within the project, create a <code>Models</code> folder in Visual Studio Solution Explorer and add the class and enum type shown in the diagram below. The <code>TodoItem</code> class will store the task data, and an enumerated type will be used for priority.</p> <p></p> <p>Both types should be public (add the <code>public</code> keyword before <code>class</code> and <code>enum</code>), otherwise, you may encounter an \"Inconsistent accessibility\" error during compilation.</p> <p>The <code>MainPage</code> will display the list of tasks. For now, use in-memory test data, which should be created in <code>MainPage.xaml.cs</code>, located inside the <code>Views</code> folder. Here, introduce a <code>List&lt;TodoItem&gt;</code> property named <code>Todos</code> (which will later be bound to the <code>ListView</code> control on the UI using data binding). This list should contain <code>TodoItem</code> objects.</p> MainPage.xaml.cs<pre><code>public List&lt;TodoItem&gt; Todos { get; set; } = new()\n{\n    new TodoItem()\n    {\n        Id = 3,\n        Title = \"Add Neptun code to neptun.txt\",\n        Description = \"NEPTUN\",\n        Priority = Priority.Normal,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n    new TodoItem()\n    {\n        Id = 1,\n        Title = \"Buy milk\",\n        Description = \"Should be lactose and gluten free!\",\n        Priority = Priority.Low,\n        IsDone = true,\n        Deadline = DateTimeOffset.Now + TimeSpan.FromDays(1)\n    },\n    new TodoItem()\n    {\n        Id = 2,\n        Title = \"Do the Computer Graphics homework\",\n        Description = \"Ray tracing, make it shiny and gleamy! :)\",\n        Priority = Priority.High,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n};\n</code></pre> Explanation of the code above <p>The code snippet above combines several modern C# language features:</p> <ul> <li>It uses an auto-implemented property (see Lab 2).  </li> <li>It is initialized.  </li> <li>The <code>new</code> keyword does not specify a type because the compiler can infer it (see Lab 2, \"Target-typed new expressions\").  </li> <li>The elements of the collection are listed within <code>{}</code> (see Lab 2, \"Collection initializer syntax\").  </li> </ul> <p><code>MainPage</code> class</p> <p>In this homework, we work within the <code>MainPage</code> class, which inherits from the built-in <code>Page</code> class. The <code>Page</code> class facilitates navigation between pages within a window. Although this feature is not used in the current task, it is good to familiarize yourself with it. Since our application consists of a single page, the main window simply instantiates a <code>MainPage</code> object (you can check this in the <code>MainWindow.xaml</code> file).</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#task-2-page-layout-and-list-display","title":"Task 2 - Page layout and list display","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#layout","title":"Layout","text":"<p>In <code>MainPage.xaml</code>, create the user interface that will display the task list.</p> <p> Task management application with a list view</p> <p>As shown in the above diagram, which displays three tasks, the task details should be displayed in a vertical list. Task priorities are indicated by colors. Completed tasks have a checkmark on the right side.</p> <p>The interface elements should be structured as follows:</p> <ul> <li>Inside <code>MainPage</code>, use a <code>Grid</code> layout with two rows and two columns. The first column should have a fixed width (e.g., 300 px), while the second column should take up the remaining available space.</li> <li> <p>In the first row of the first column, place a <code>CommandBar</code> control containing a title and a button. The following example provides guidance for this:</p> <pre><code>&lt;CommandBar VerticalContentAlignment=\"Center\"\n            Background=\"{ThemeResource AppBarBackgroundThemeBrush}\"\n            DefaultLabelPosition=\"Right\"&gt;\n    &lt;CommandBar.Content&gt;\n        &lt;TextBlock Margin=\"12,0,0,0\"\n                   Style=\"{ThemeResource SubtitleTextBlockStyle}\"\n                   Text=\"To-Dos\" /&gt;\n    &lt;/CommandBar.Content&gt;\n\n    &lt;AppBarButton Icon=\"Add\"\n                  Label=\"Add\" /&gt;\n&lt;/CommandBar&gt;\n</code></pre> <p>Light/dark appearance</p> <p>Depending on your Windows settings (light/dark mode), the interface may appear with light colors on a dark background. This is completely normal.By default, WinUI applications adapt to the operating system's theme settings, which is why this behavior occurs.</p> <p>ThemeResource</p> <p>The example uses <code>ThemeResource</code> values to set colors and styles that automatically adjust based on the application's theme. For instance, <code>AppBarBackgroundThemeBrush</code> will apply the appropriate background color depending on whether the theme is light or dark.</p> <p>For more details, refer to the documentation and WinUI 3 Gallery App Colors.</p> </li> </ul> <p>If everything is set up correctly, when you run the application, the <code>CommandBar</code> should appear in the appropriate position.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#list-display","title":"List display","text":"<p>In the cell below the <code>CommandBar</code>, add a <code>ListView</code> to display the list of tasks (Todos) with the following content. The UI should be updated dynamically using data binding, ensuring that the elements displayed are bound to the previously defined Todos list. Each task should be displayed as follows:</p> <ul> <li>Task title<ul> <li>Use SemiBold font style.</li> <li>Color based on priority:<ul> <li>High priority: A shade of red</li> <li>Normal priority: Default foreground color.</li> <li>Low priority: A shade of blue.</li> </ul> </li> </ul> </li> <li>Task completion indicator: a checkmark icon aligned to the right of the task title if the task is completed.</li> <li>Task description</li> <li>Task deadline displayed in <code>yyyy.MM.dd</code> format</li> <li>The <code>ListView</code> background should match the <code>CommandBar</code> to create a continuous left-aligned section.</li> </ul> Binding elements in the list <p>Always consider whether you are binding to a single object or a list, and apply the appropriate binding technique! In this homework, the order of elements may differ from how they were covered in the lab sessions.</p> Conditional formatting <p>You can use either a converter or an <code>x:Bind</code> function binding to set the title color dynamically based on priority.</p> <ul> <li> <p>Example of an <code>x:Bind</code> function binding:</p> <p><pre><code>Foreground=\"{x:Bind local:MainPage.GetForeground(Priority)}\"\n</code></pre> Here, <code>GetForeground</code> is a public static function within the <code>MainPage</code> class that returns the appropriate <code>Brush</code> object based on the <code>Priority</code> enumeration type. Normally, the function does not need to be static, but since it is used inside a <code>DataTemplate</code>, the context of <code>x:Bind</code> will be the list item rather than the page instance.</p> </li> <li> <p>Example of using a converter </p> <p>To use a converter, create a new class inside a <code>Converters</code> folder that implements the <code>IValueConverter</code> interface.</p> <pre><code>public class PriorityBrushConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        // TODO return a SolidColorBrush instance\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre> <p>Instantiate the converter within the resources of <code>MainPage</code>.</p> <pre><code>xmlns:c=\"using:TodoXaml.Converters\"\n\n&lt;Page.Resources&gt;\n    &lt;c:PriorityBrushConverter x:Key=\"PriorityBrushConverter\" /&gt;\n&lt;/Page.Resources&gt;\n</code></pre> <p>Use the converter as a static resource in data binding:</p> <pre><code>Foreground=\"{x:Bind Priority, Converter={StaticResource PriorityBrushConverter}}\"\n</code></pre> </li> </ul> <p>To instantiate brushes, use the SolidColorBrush class, or alternatively, use built-in brushes in C# code (as shown above with ThemeResource).</p> <pre><code>new SolidColorBrush(Colors.Red);\n\n(Brush)App.Current.Resources[\"ApplicationForegroundThemeBrush\"]\n</code></pre> Bold Font Style <p>Font characteristics are determined by properties with names starting with \"Font...\": <code>FontFamily</code>, <code>FontSize</code>, <code>FontStyle</code>, <code>FontStretch</code> and <code>FontWeight</code>.</p> Checkmark icon visibility <p>Use a <code>SymbolIcon</code> for the checkmark and set its <code>Symbol</code> property to <code>Accept</code>.</p> <p>The checkmark icon should be displayed based on a boolean value converted to a <code>Visibility</code> type. While a converter could be used, this conversion is so common that <code>x:Bind</code> automatically converts a <code>bool</code> to <code>Visibility</code>.</p> Aligning the checkmark icon <p>The task title and checkmark icon should be in the same row (one aligned left, the other right). Tip: You can use a single-cell <code>Grid</code>. In a <code>Grid</code>, multiple controls can be placed in the same cell, while each control's alignment is individually controlled. This technique was used in Lab 2 to display names and ages in a <code>ListView</code> <code>DataTemplate</code>.</p> Formatting dates <p>The deadline date can be formatted using a converter or an <code>x:Bind</code> function binding. One approach is binding <code>DateTime.ToString</code> with parameters:</p> <pre><code>Text=\"{x:Bind Deadline.ToString('yyyy.MM.dd', x:Null)}\"\n</code></pre> <p>The <code>x:Null</code> is required because the <code>ToString</code> function expects a second parameter, which can be <code>null</code> in this case.</p> Spacing between list items <p>The provided screenshot example shows that there is vertical spacing between list items, improving readability. By default, this spacing is not present. Since a DataTemplate will already be used for displaying items, a small adjustment (e.g., setting Margin/Padding) can create adequate spacing between list items for better readability. </p> <p>Task 2 - Submission requirement</p> <p>Insert a screenshot of the application where one task in the list has either its title or description set to your NEPTUN code! (<code>f2.png</code>)</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#task-3-adding-a-new-task","title":"Task 3 - Adding a new task","text":"<p>On the right side of the grid, in row 1, display the text \"To-Do item\" with:</p> <ul> <li>A font size of 25,</li> <li>Horizontally aligned to the left,</li> <li>Vertically centered,</li> <li>20 pixels of left padding.</li> </ul> <p>Clicking the Add button should display a form in row 2, allowing the user to add a new task.</p> <p>The form should look like this:</p> <p> To-Do Item Editor Form</p> <p>The form should contain the following elements in a vertical layout:</p> <ul> <li>Title: Text input field</li> <li>Description: Multi-line text input field (accepts line breaks with Enter, set AcceptsReturn=\"True\").</li> <li>Deadline: Date picker (<code>DatePicker</code>) (Note: This is why the model uses the <code>DateTimeOffset</code> type.)</li> <li>Priority: Dropdown list (<code>ComboBox</code>) containing values from the <code>Priority</code> enum.</li> <li>Completion Status: Checkbox (<code>CheckBox</code>).</li> <li>Save: <code>Button</code> with built-in accent style (<code>Style=\"{StaticResource AccentButtonStyle}\"</code>).</li> </ul> <p>You do not need to create a custom control (e.g., <code>UserControl</code>) for this form. Simply use a layout panel that best fits the task.</p> <p>Additional guidance on implementing some of the requirements is available in the collapsible sections below.</p> <p>Functional requirements:</p> <ul> <li>The form should only be visible after clicking the Add button and should disappear once the task is saved.</li> <li>Clicking the Save button should add the entered data to the list and hide the form.</li> <li>Clicking the Add button should clear the currently selected item in the list (<code>SelectedItem</code>).</li> <li>Optional: Make the form scrollable if its content does not fit on the screen (use <code>ScrollViewer</code>).</li> </ul> <p>Form layout</p> <ul> <li>Use the <code>Header</code> property in <code>TextBox</code>, <code>ComboBox</code>, and <code>DatePicker</code> controls to define their labels instead of adding separate <code>TextBlock</code> elements.</li> <li>Ensure sufficient spacing between form elements. It should be about 15 pixels (use the <code>StackPanel</code> <code>Spacing</code> property for easy control).</li> <li>Add a visible border to the form: This is not for styling but to clearly show where the form is placed (alternatively, a background color change could be used.). Set <code>BorderThickness=\"1\"</code> and <code>BorderBrush=\"LightGray\"</code> for clear visibility.</li> <li>Apply margins: Left, right, and bottom margins should be 8 px. Top margin should be 0 px. This ensures consistent spacing between the form and its container, even when the window is resized.</li> <li>Maintain spacing inside the form: Add 15 px padding at the top and bottom. Add 10 px padding on the left and right. Instead of setting margins individually for each control, adjust the container\u2019s padding to maintain spacing between the form\u2019s border and its contents.</li> <li> <p>Ensure the form and textboxes resize with the window, as illustrated below:</p> Illustration of form behavior and expected sizes <p> </p> </li> </ul> Steps to implement the save functionality <ol> <li>Store form data in a new <code>TodoItem</code> object bound to UI elements using two-way data binding. Introduce a property named <code>EditedTodo</code>. Then two possible approaches are working:<ol> <li>EditedTodo is initially null. When the user starts adding a new task, create a new EditedTodo object to hold the task data. On save, add this object to the list. Every time a new task is added, EditedTodo points to a new object.</li> <li>Use a shared EditedTodo object for all task entries. Initialize it when the page is created. When a user adds a task (or after saving), reset EditedTodo with default values. On save, create a copy of EditedTodo and add it to the list.</li> </ol> </li> <li>The following guidance focuses on the first approach, but you should try implementing it independently first.</li> <li>Initialize EditedTodo as null and instantiate it when the Add button is clicked.</li> <li>On save, add the edited task object to the <code>Todos</code> list. Ensure that the UI updates when the list contents change (this may require modifying how data is stored).</li> <li>After saving, reset the EditedTodo property to null. This ensures that the form fields are empty when adding a new task instead of retaining the previous task\u2019s data. Test your solution! Does resetting EditedTodo alone ensure that the UI updates? Consider what\u2019s needed for bound controls to refresh when EditedTodo changes.     (Hint: The concern here is not that properties of the <code>TodoItem</code> change, but that MainPage\u2019s <code>EditedTodo</code> property itself is updated. What interface needs to be implemented in the containing class?)</li> </ol> Controlling form visibility <p>If implemented correctly, the form should be visible only when EditedTodo is not null (consider whether this holds true). Based on this, several approaches can be used, but the simplest is property-based binding with <code>x:Bind</code>:</p> <ol> <li>Introduce a new boolean property in <code>MainPage</code> (e.g., <code>IsFormVisible</code>).</li> <li>Set <code>IsFormVisible</code> to true whenever EditedTodo is not null. This must be maintained manually, e.g., in the EditedTodo setter.</li> <li>Bind this property to the <code>Visibility</code> of the container representing the form. Although <code>Visibility</code> is not a boolean, WinUI automatically converts <code>bool</code> to <code>Visibility</code>.</li> <li>Ensure that when the source property (<code>IsFormVisible</code>) changes, the bound UI property (control visibility) is updated. (Hint: The class containing <code>IsFormVisible</code> must implement an appropriate interface to notify about changes.)</li> </ol> Alternative Approaches <p>Other solutions could be used, but stick to the method above for this assignment:</p> <ol> <li>Function-based binding using x:Bind, but this would be more complex:<ul> <li>The function should convert <code>EditedTodo</code> being null/non-null to <code>Visibility</code>.</li> <li>FallbackValue='Collapsed' must be used since <code>x:Bind</code> does not call functions when bound properties are null by default.</li> <li>The function needs to take a parameter indicating which property should trigger updates, and property change notifications must be handled manually.</li> </ul> </li> <li>Using a converter to transform <code>bool</code> to <code>Visibility</code>.</li> </ol> Priority list <p>The <code>ComboBox</code> should display all values of the Priority enum. To achieve this, use <code>Enum.GetValues</code> and define a property in <code>MainPage.xaml.cs</code>:</p> <pre><code>public List&lt;Priority&gt; Priorities { get; } = Enum.GetValues(typeof(Priority)).Cast&lt;Priority&gt;().ToList();\n</code></pre> <p>Bind this list to the <code>ItemsSource</code> of the <code>ComboBox</code>:</p> <pre><code>&lt;ComboBox ItemsSource=\"{x:Bind Priorities}\" /&gt;\n</code></pre> <p>However, this only defines the list of available values. To bind the selected value, another data binding must be added. (Check lecture materials for <code>SelectedItem</code>. It's worth reviewing all mentions of it.)</p> Key Control Properties <ul> <li><code>CheckBox</code>: Use <code>IsChecked</code> (not <code>Checked!</code>) to store the checked state. The accompanying label text can be set via the <code>Content</code> property.</li> <li><code>DatePicker</code>: The selected date is stored in the <code>Date</code> property.</li> </ul> Strange NullReferenceException in data binding <p>If you encounter an unexpected <code>NullReferenceException</code> when adding a new item, check whether you accidentally bound <code>ComboBox</code> <code>SelectedValue</code> instead of <code>SelectedItem</code>. Always use <code>SelectedItem</code> for binding in this case.</p> <p>Task 3 - Submission requirement</p> <p>Insert a screenshot of the application where the new task entry form is visible before saving! (<code>f3.1.png</code>) Insert a screenshot of the application where the previously entered task appears in the list and the form has disappeared! (<code>f3.2.png</code>)</p> <p>Important criteria</p> <p>The following criteria are mandatory for the homework to be accepted:</p> <ul> <li>The task description explicitly requires that both the list and form controls must use data binding. Any solution that bypasses data binding is not acceptable. For example, the code-behind file (<code>MainPage.xaml.cs</code>) must NOT contain code that directly reads or modifies form control properties (e.g., <code>TextBox.Text</code>).</li> <li>Two exceptions to this rule: <ul> <li>The <code>ListView.SelectedItem</code> property should be set directly.  </li> <li>Controlling form visibility without data binding is acceptable (though using data binding is recommended for better practice).  </li> </ul> </li> <li>If a new task is added after a previous task, the previous task's data must NOT remain in the form controls.</li> </ul> <p>Optional Practice Tasks</p> Optional Practice Task 1 - Making the Form Scrollable <p>Wrap the form inside a ScrollViewer control. Note: Since the ScrollViewer will now be the outermost element in the grid cell, its grid position must be specified.If implemented, this can be included in the submitted solution.</p> Optional Practice Task 2 - Fixed-Width Form <p>In the current solution, the form resizes automatically with the window. A good practice task is to modify the form so that it has a fixed width (e.g., 500 pixels) and its height matches the total height of its contents. If you used a StackPanel for the form layout, only three attributes need to be added or modified. The animation below illustrates this behavior. Note: The submitted solution must follow the original requirement (auto-resizing form), not the behavior from this optional task. </p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_eng/#submission","title":"Submission","text":"<p>Checklist Reminder</p> <ul> <li>Enter your Neptun code in the neptun.txt file located in the root directory of the repository. The code should be in uppercase letters only, and the file should contain only these six characters\u2014nothing else.</li> <li>Work within the solution/projects downloaded from GitHub, not in a newly created project.</li> <li>If you are not yet experienced in using Visual Studio's Git features, after pushing your changes (or at the latest when you consider your homework submitted), it is advisable to check the repository on GitHub's web interface to ensure that all changes have been successfully uploaded.</li> <li>After pushing, check on GitHub to see if the GitHub Action-based pre-check has run without errors.</li> <li>Assignments will only be accepted if they are fully completed and meet all the requirements. Do not expect acceptance of non-compiling code or partial solutions.</li> <li>Naturally, you must submit your own work, as it will be evaluated.</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/","title":"3. HA - Entwurf der Benutzeroberfl\u00e4che","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die kleine Software, die in der Hausaufgabe verwirklicht werden soll, ist eine einfache Anwendung zur Aufgabenverwaltung, mit der Benutzer Aufgaben auflisten, erstellen und \u00e4ndern k\u00f6nnen.</p> <p>Die eigenst\u00e4ndige Aufgabe baut auf dem auf, was in den XAML-Vorlesungen vermittelt wurde. Den praktischen Hintergrund f\u00fcr die Aufgaben liefert das Labor 3 - Entwurf der Benutzeroberfl\u00e4che. </p> <p>Darauf aufbauend k\u00f6nnen die Aufgaben dieser Selbst\u00fcbung mit Hilfe der k\u00fcrzeren Leitf\u00e4den, die auf die Aufgabenbeschreibung folgen (manchmal standardm\u00e4\u00dfig eingeklappt), selbst\u00e4ndig bearbeitet werden.</p> <p>Das Ziel der Hausaufgabe:</p> <ul> <li>\u00dcben der Verwendung der Oberfl\u00e4chenbeschreibungssprache XAML</li> <li>\u00dcben der Verwendung grundlegender Steuerelemente (Tabelle, Taste, Textfeld, Listen)</li> <li>Ereignisgesteuerte Verwaltung von Oberfl\u00e4cheninteraktionen</li> <li>Anzeige von Daten auf der Oberfl\u00e4che mit Datenbindung</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#das-verfahren-der-eingabe","title":"Das Verfahren der Eingabe","text":"<p>Auf das Moodle soll ein ZIP-Archiv hochgeladen werden, das die folgenden Anforderungen entspricht:</p> <ul> <li>Die Aufgaben sind aufeinander basiert, deshalb ist es gen\u00fcgend den resultierenden Quellcode am Ende der letzten Aufgabe hochzuladen (Visual Studio Solution Verzeichnis). Der Name des Verzeichnisses soll \"TodoXaml_NEPTUN\" sein (wo NEPTUN Ihre Neptun-Code ist).</li> <li>Wir erwarten keine schriftliche Begr\u00fcndung oder Beschreibung, aber die komplexe Codeteile sollen mit Kommentaren versehen werden</li> <li>Das ZIP-Archiv darf die Ausgangsdaten (.exe) und die tempor\u00e4ren Dateien nicht enthalten. Um diese Best\u00e4nde zu l\u00f6schen, Visual Studio soll ge\u00f6ffnet werden und in dem Solution Explorer Rechtsklick an dem \u201eClean Solution\u201d Men\u00fcelement. Das manuelle L\u00f6schen von den \"obj\" und \"bin\" Verzeichnissen kann auch n\u00f6tig sein.</li> <li> In den Aufgaben werden Sie aufgefordert, einen Screenshot von einem Teil Ihrer L\u00f6sung zu machen, da dies beweist, dass Sie Ihre L\u00f6sung selbst erstellt haben. Der erwartete Inhalt der Screenshots ist immer in der Aufgabe angegeben. Die Screenshots sollten als Teil der L\u00f6sung eingegeben, also innerhalb dem ZIP-Archiv auf das Moodle hochgeladen werden. Wenn Sie Inhalte im Screenshot haben, die Sie nicht hochladen m\u00f6chten, k\u00f6nnen Sie diese aus dem Screenshot ausblenden.</li> </ul>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#vorbedingungen","title":"Vorbedingungen","text":"<p> MVVM-Modell - nicht benutzen!   Verwenden Sie in dieser Hausaufgabe NICHT das MVVM-Muster (auch nicht in den sp\u00e4teren Teilaufgaben), f\u00fchren Sie NICHT die Klasse <code>ViewModel</code> ein. MVVM wird das Thema einer sp\u00e4teren Hausaufgabe sein.</p> <p> Layout - Einfachheit Wie im Allgemeinen, auch in dieser Hausaufgabe sollte das grundlegende Layout der Seite mit <code>Grid</code> gestaltet werden. Bei der Gestaltung der einzelnen internen Abschnitte sollten Sie jedoch darauf achten, dass sie einfach gehalten sind: Wo <code>StackPanel</code>verwendet werden kann, sollten Sie nicht <code>Grid</code>verwenden.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#aufgabe-1-modellentwurf-und-testdaten","title":"Aufgabe 1. - Modellentwurf und Testdaten","text":"<p>Erstellen Sie ein neuen Projekt mit Visual Studio (WinUI 3 Projekt, Blank App, Packaged (WinUI 3 in Desktop) type), und addieren Sie einen Ordner namens <code>Models</code> zu dem erzeugten Projekt. Erstellen Sie die Klasse und den Enum-Typ, die in der folgenden Abbildung gezeigt werden, im Ordner <code>Models</code>. Die Klasse <code>TodoItem</code> enth\u00e4lt die Details zu den Aufgaben, f\u00fcr die Priorit\u00e4t wird ein aufgelisteter Typ erstellt.</p> <p></p> <p>Beide Typen sollten \u00f6ffentlich sein ( <code>class</code> und <code>enum</code> mit <code>public</code> vorangestellt), da Ihr sonst sp\u00e4ter bei der \u00dcbersetzung einen Fehler \"Inconsistent accessibility\" erhalten w\u00fcrden.</p> <p>Addieren Sie einen Ordner namens <code>Views</code> zu dem Projekt, und eine neue leere Seite namens <code>MainPage</code> zu diesem Ordner (Rechtsklick auf <code>Views</code>: Add/New Item/Blank Page (WinUI 3)). Um diese Seite auf dem Fenster unserer Anwendung anzuzeigen, muss ein <code>MainPage</code> Objekt im Hauptfenster <code>MainWindow.xaml</code> instanziiert werden (Namensraum <code>views</code> soll auch addiert werden):</p> MainWindow.xaml<pre><code>    &lt;Window\n        x:Class=\"HA3.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"using:HA3\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n        xmlns:views=\"using:HA3.Views\"\n        mc:Ignorable=\"d\"&gt;\n\n        &lt;views:MainPage /&gt;    \n\n    &lt;/Window&gt; \n</code></pre> <p>Auf der Seite <code>MainPage</code> wird eine Liste der zu erledigenden Aufgaben angezeigt. Jetzt verwenden Sie speicherinterne Testdaten, die in <code>MainPage.xaml.cs</code> erstellt wurden: Hier f\u00fchren Sie eine Eigenschaft <code>List&lt;TodoItem&gt;</code> mit dem Namen <code>Todos</code> ein (die sp\u00e4ter an das Steuerelement <code>ListView</code> auf der Benutzeroberfl\u00e4che gebunden wird). Diese Liste enth\u00e4lt <code>TodoItem</code> Objekte.</p> MainPage.xaml.cs<pre><code>public List&lt;TodoItem&gt; Todos { get; set; } = new()\n{\n    new TodoItem()\n    {\n        Id = 3,\n        Title = \"Add Neptun code to neptun.txt\",\n        Description = \"NEPTUN\",\n        Priority = Priority.Normal,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n    new TodoItem()\n    {\n        Id = 1,\n        Title = \"Buy milk\",\n        Description = \"Should be lactose and gluten free!\",\n        Priority = Priority.Low,\n        IsDone = true,\n        Deadline = DateTimeOffset.Now + TimeSpan.FromDays(1)\n    },\n    new TodoItem()\n    {\n        Id = 2,\n        Title = \"Do the Computer Graphics homework\",\n        Description = \"Ray tracing, make it shiny and gleamy! :)\",\n        Priority = Priority.High,\n        IsDone = false,\n        Deadline = new DateTime(2024, 11, 08)\n    },\n};\n</code></pre> Erkl\u00e4rung des obigen Codes <p>In dem obigen Code sind mehrere moderne C#-Sprachelemente kombiniert:</p> <ul> <li>Dies ist eine automatisch implementierte Eigenschaft (siehe Labor 2 \"auto-implemented property\").</li> <li>Die Eigenschaft hat einen Anfangswert.</li> <li>Der Typ wird nicht nach <code>new</code> angegeben, da der Compiler ihn ableiten kann (siehe Labor 2 \"Target-typed new expressions\").</li> <li>Die Sammlungselemente werden in <code>{}</code> aufgelistet (siehe Labor 2 \"Collection initializer syntax\").</li> </ul> <p><code>MainPage</code> Klasse</p> <p>W\u00e4hrend der Hausaufgabe werden Sie in der Klasse <code>MainPage</code> arbeiten, die aus der eingebauten Klasse <code>Page</code> abgeleitet ist. Die Klasse <code>Page</code> hilft Ihnen, zwischen den Seiten innerhalb des Fensters zu navigieren. Obwohl sie in dieser Hausaufgabe nicht verwendet wird, lohnt es sich, sich an ihre Verwendung zu gew\u00f6hnen. Da unsere Anwendung aus einer einzigen Seite besteht, instanziieren wir einfach ein Objekt <code>MainPage</code> im Hauptfenster (Sie k\u00f6nnen es sich in der Datei <code>MainWindow.xaml</code> ansehen).</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#aufgabe-2-seitenlayout-liste-anzeigen","title":"Aufgabe 2 - Seitenlayout, Liste anzeigen","text":""},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#layout","title":"Layout","text":"<p>Unter <code>MainPage.xaml</code>erstellen Sie die Oberfl\u00e4che, auf der die Liste der Aufgaben angezeigt wird.</p> <p> Die zu erstellende Anwendung mit einer Benutzeroberfl\u00e4che f\u00fcr Listen</p> <p>Wie in der obigen Abbildung mit den drei Aufgaben zu sehen ist, werden die Aufgabendetails untereinander angezeigt, die Priorit\u00e4t der Aufgaben wird durch Farben angezeigt, und neben den erledigten Aufgaben werden mit einem H\u00e4kchen rechts bezeichnet.</p> <p>Die Elemente sind in der folgenden Struktur auf der Oberfl\u00e4che angeordnet:</p> <ul> <li>Verwenden Sie in <code>MainPage</code>eine <code>Grid</code>mit zwei Zeilen und zwei Spalten von Elementen. Die erste Spalte sollte eine feste Breite haben (z. B: 300 px) und die zweite nimmt den restlichen Platz ein.</li> <li> <p>Die erste Zeile der ersten Spalte sollte ein <code>CommandBar</code> Steuerelement mit einer Adresse und einer Taste enthalten. Das folgende Beispiel ist hilfreich:</p> <pre><code>&lt;CommandBar VerticalContentAlignment=\"Center\"\n            Background=\"{ThemeResource AppBarBackgroundThemeBrush}\"\n            DefaultLabelPosition=\"Right\"&gt;\n    &lt;CommandBar.Content&gt;\n        &lt;TextBlock Margin=\"12,0,0,0\"\n                   Style=\"{ThemeResource SubtitleTextBlockStyle}\"\n                   Text=\"To-Dos\" /&gt;\n    &lt;/CommandBar.Content&gt;\n\n    &lt;AppBarButton Icon=\"Add\"\n                  Label=\"Add\" /&gt;\n&lt;/CommandBar&gt;\n</code></pre> <p>ThemeResource</p> <p>Die <code>ThemeResource</code>im Beispiel kann verwendet werden, um die Farben und Stile einzustellen, die je nach Thema der Oberfl\u00e4che variieren werden. Zum Beispiel hat <code>AppBarBackgroundThemeBrush</code> die richtige Hintergrundfarbe je nach dem Thema der Oberfl\u00e4che (hell/dunkel).</p> <p>Einzelheiten finden Sie in der Dokumentation und die Beispiele in WinUI 3 Gallery App Colors.</p> </li> </ul> <p>Wenn Sie Ihre Arbeit richtig gemacht haben, sollte bei der Ausf\u00fchrung der Anwendung <code>CommandBar</code>an der richtigen Stelle erscheinen.</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#liste-anzeigen","title":"Liste anzeigen","text":"<p>Stellen Sie in der Zelle unter <code>CommandBar</code> in einer Liste (<code>ListView</code>) die Aufgaben mit folgendem Inhalt untereinander. Die Daten sollen \u00fcber Datenverbindung in der Benutzeroberfl\u00e4che angezeigt werden (die Elemente sollen \u00fcber Datenverbindung aus der zuvor vorgestellten Liste <code>Todos</code> angezeigt werden).</p> <ul> <li>Titel der Aufgabe<ul> <li>Fette Schriftart (SemiBold)</li> <li>Gef\u00e4rbt nach Priorit\u00e4t<ul> <li>Hohe Priorit\u00e4t: ein roter Farbton</li> <li>Normale Priorit\u00e4t: eingebaute Vordergrundfarbe</li> <li>Niedrige Priorit\u00e4t: ein blauer Farbton</li> </ul> </li> </ul> </li> <li>Ein H\u00e4kchensymbol rechts neben dem Aufgabentitel, wenn die Aufgabe fertig ist</li> <li>Beschreibung der Aufgabe</li> <li>Abgabetermin im Format <code>yyyy.MM.dd</code> </li> <li>Der Hintergrund von <code>ListView</code> sollte derselbe sein wie der von <code>CommandBar</code>, so dass sie einen durchgehenden Balken auf der linken Seite bilden.</li> </ul> Elemente in der Liste <p>\u00dcberlegen Sie immer, ob Sie Daten an ein Objekt oder an eine Liste binden, und verwenden Sie die entsprechende Technik! Bei dieser Hausaufgabe ist es nicht sicher, dass sie in der Reihenfolge kommen, in der sie im Labor waren!\"</p> Bedingte Einf\u00e4rbung <p>Sie k\u00f6nnen einen Konverter oder eine Funktionsbindung auf Basis von <code>x:Bind</code> verwenden, um die Adresse einzuf\u00e4rben.</p> <ul> <li> <p>Beispiel f\u00fcr Funktionsbindung auf der Grundlage von \"x:Bind\":</p> <pre><code>Foreground=\"{x:Bind local:MainPage.GetForeground(Priority)}\"\n</code></pre> <p>Hier ist \"GetForeground\" eine \u00f6ffentliche statische Funktion in der Klasse \"MainPage\", die das Objekt \"Brush\" mit der entsprechenden Farbe auf der Grundlage des aufgelisteten Typs \"Priorit\u00e4t\" zur\u00fcckgibt. Normalerweise w\u00e4re es nicht wichtig, dass die Funktion statisch ist, aber da wir die Datenverbindung in einem <code>DataTemplate</code> verwenden, ist der Kontext von <code>x:Bind</code> nicht die Seiteninstanz, sondern das Listenelement.</p> </li> <li> <p>Beispiel f\u00fcr die Verwendung des Konverters:</p> <p>Erstellen Sie eine Konverterklasse in einem Ordner <code>Converters</code>, die die Schnittstelle <code>IValueConverter</code> implementiert.</p> <pre><code>public class PriorityBrushConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        // TODO R\u00fcckgabe einer SolidColorBrush-Instanz\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre> <p>Instanziierung des Konverters unter den Ressourcen der <code>MainPage</code>.</p> <pre><code>xmlns:c=\"using:TodoXaml.Converters\"\n\n&lt;Page.Resources&gt;\n    &lt;c:PriorityBrushConverter x:Key=\"PriorityBrushConverter\" /&gt;\n&lt;/Page.Resources&gt;\n</code></pre> <p>Verwendung des Konverters als statische Ressource in der Datenverbindung</p> <p>``xml Foreground=\"{x:Bind Priority, Converter={StaticResource PriorityBrushConverter}}\" ```</p> </li> </ul> <p>Um die Pinsel (Brush) zu instanziieren, verwenden Sie die Klasse <code>SolidColorBrush</code>, oder k\u00f6nnen Sie auch eingebaute Pinsel aus C#-Code (wie mit <code>ThemeResource</code> oben) benutzen.</p> <pre><code>new SolidColorBrush(Colors.Red);\n\n(Brush)App.Current.Resources[\"ApplicationForegroundThemeBrush\"]\n</code></pre> Fette Schriftart <p>Schriftattribute k\u00f6nnen unter die Eigenschaften namens \"Font...\" eingestellt werden: <code>FontFamily</code> , <code>FontSize</code>, <code>FontStyle</code>, <code>FontStretch</code> und <code>FontWeight</code>.</p> Sichtbarkeit des H\u00e4kchen-Symbol <p>F\u00fcr das H\u00e4kchen-Symbol verwenden Sie <code>SymbolIcon</code>, wobei die Eigenschaft <code>Symbol</code> auf <code>Accept</code> gesetzt ist.</p> <p>Wenn das H\u00e4kchen-Symbol angezeigt wird, muss ein Wahr-Falsch-Wert in einen <code>Sichtbarkeit</code>-Typ umgewandelt werden. Man k\u00f6nnte daf\u00fcr einen Konverter verwenden, aber diese Konvertierung ist so \u00fcblich, dass in der Datenverbindung <code>x:Bind</code> die Konvertierung von <code>bool</code> in <code>Sichtbarkeit</code> bereits eingebaut ist.</p> Ausrichtung des H\u00e4kchen-Symbols <p>Der Titel der Aufgabe und das H\u00e4kchen-Symbol m\u00fcssen ausgerichtet sein (eines nach links und eines nach rechts). Hier ein Tipp: Sie k\u00f6nnen z. B. eine einzelne Zelle verwenden <code>Grid</code>. In <code>Grid</code>k\u00f6nnen Sie mehrere Steuerelemente in einer Zelle \"stapeln\" und ihre Ausrichtung separat einstellen. Im zweiten Labor haben wir das Problem der Anzeige von Name und Alter in <code>ListView</code> <code>DataTemplate</code>folgenderma\u00dfen gel\u00f6st.</p> Datumsformatierung <p>Zur Formatierung des Datums der Abgabefrist k\u00f6nnen Sie auch einen Konverter oder eine Funktionsbindung auf der Grundlage von <code>x:Bind</code> verwenden, wobei Sie die Funktion <code>DateTime.ToString</code> mit Parametern binden.</p> <pre><code>Text=\"{x:Bind Deadline.ToString('yyyy.MM.dd', x:Null)}\"\n</code></pre> <p>Das <code>x:Null</code> wird ben\u00f6tigt, weil der zweite Parameter der Funktion <code>ToString</code> angegeben werden muss, aber in diesem Fall kann er <code>null</code> sein.</p> Abstand zwischen den Listenelementen <p>Auf dem Screenshot der Anleitung sehen Sie, dass zwischen den Listenelementen ein vertikaler Abstand besteht, so dass die Listenelemente gut voneinander getrennt sind. Dies ist nicht standardm\u00e4\u00dfig der Fall. Gl\u00fccklicherweise erfordert die L\u00f6sung, dass DataTemplate f\u00fcr die Anzeige der Elemente verwendet wird, so dass Sie durch eine kleine Anpassung (Tipp: geben Sie einen einzelnen Margin/Padding an) leicht etwas Platz zwischen den Listenelementen f\u00fcr eine bessere Lesbarkeit erreichen k\u00f6nnen. </p> <p>Aufgabe 2 - EINGABE</p> <p>F\u00fcgen Sie ein Bildschirmfoto der Anwendung ein, in der eine der Aufgaben in der Liste Ihren NEPTUN-Code als Namen oder Beschreibung hat (<code>f2.png</code>).</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#aufgabe-3-eine-neue-aufgabe-hinzufugen","title":"Aufgabe 3 - Eine neue Aufgabe hinzuf\u00fcgen","text":"<p>Der Text \"To-Do item\" sollte auf der rechten Seite des Grids in Zeile 1 angezeigt werden, mit Schriftgrad 25, horizontal links ausgerichtet und vertikal zentriert, mit 20 Pixel Leerraum auf der linken Seite.</p> <p>Klicken Sie auf der Oberfl\u00e4che auf die Taste Add, um in der zweiten Zeile ein Formular anzuzeigen, in dem Sie eine neue Aufgabe hinzuf\u00fcgen k\u00f6nnen.</p> <p>Das Formular sollte wie das folgende aussehen:</p> <p> Formular f\u00fcr die Bearbeitung einer Aufgabe</p> <p>Das Formular sollte die folgenden Elemente enthalten, die untereinander angeordnet sind.</p> <ul> <li>Titel: Texteingabefeld</li> <li>Beschreibung: h\u00f6heres Texteingabefeld, akzeptiert auch Zeilenumbruch (Enter) (<code>AcceptsReturn=\"True\"</code>)</li> <li>Abgabetermin: Datumsausw\u00e4hler (<code>DatePicker</code>) (Bemerkung: wir verwenden im Modell <code>DateTimeOffset</code> wegen dieses Controllers)</li> <li>Priorit\u00e4t: Dropdown-Liste (<code>ComboBox</code>) mit den Werten des Typs <code>Priority</code> </li> <li>Bereitschaft: Kontrollk\u00e4stchen (<code>CheckBox</code>)</li> <li>Speichern: Taste mit eingebautem Stil accent (<code>Style=\"{StaticResource AccentButtonStyle}\"</code>)</li> </ul> <p>Das Formular ben\u00f6tigt kein spezielles, benutzerdefiniertes Steuerelement (z. B. <code>UserControl</code> ): Verwenden Sie einfach einen der Layout-Paneltypen, die f\u00fcr die Aufgabe geeignet sind.</p> <p>Zus\u00e4tzliche funktionale Anforderungen:</p> <ul> <li>Das Formular sollte nur sichtbar sein, wenn die Taste Add angeklickt wird, und verschwinden, wenn die Aufgabe gespeichert wird.</li> <li>Klicken Sie auf Save, um die Daten zur Liste hinzuzuf\u00fcgen, und das Formular wird ausgeblendet.</li> <li>Mit dem Klicken auf die Taste Add soll die Auswahl der aktuellen Element in der Liste entfernt werden (<code>SelectedItem</code>). (Nur die Auswahl, nicht das Element sich selbst.)</li> <li>Optionale Aufgabe: Das Formular sollte scrollbar sein, wenn sein Inhalt nicht auf den Bildschirm passt (verwenden Sie<code>ScrollViewer</code> ).</li> </ul> <p>Layout des Formulars</p> <ul> <li>Die Steuerelemente <code>TextBox</code>, <code>ComboBox</code> und <code>DatePicker</code> haben eine Eigenschaft <code>Header</code>, in der der \u00dcberschrifttext \u00fcber dem Steuerelement angegeben werden kann. Verwenden Sie dies, um Kopftexte anzugeben, nicht eine separate <code>TextBlock</code>!</li> <li>Auf dem Formular sollten die Elemente nicht zu dicht nebeneinander liegen, mit etwa 15 Pixeln zus\u00e4tzlichem Abstand zwischen ihnen (die Eigenschaft <code>StackPanel</code> <code>Spacing</code> ist eine gute M\u00f6glichkeit, dies zu erreichen).</li> <li>Legen Sie einen sichtbaren Rahmen f\u00fcr das Formular fest. Wir tun dies nicht, um unsere Benutzeroberfl\u00e4che h\u00fcbscher zu machen, sondern um besser erkennen zu k\u00f6nnen, wo genau sich unser Formular befindet (eine Alternative w\u00e4re, die Hintergrundfarbe zu \u00e4ndern). Dieser \"Trick\" wird tempor\u00e4r auch w\u00e4hren der Gestaltung der Oberfl\u00e4che eingesetzt, wenn nicht klar ist, wo genau sich etwas auf der Oberfl\u00e4che befindet. Setzen Sie dazu die Eigenschaft <code>BorderThickness</code> des Formular-Containers auf 1 und die Rahmenfarbe (Eigenschaft<code>BorderBrush</code> ) auf eine sichtbare Farbe (z.B. <code>LightGray</code>).</li> <li>Verwenden Sie links, rechts und unten im Formular einen Rand von 8 und oben einen Rand von 0 (dies ist der Abstand zwischen dem Rand des Formulars und seinem Inhalt, unabh\u00e4ngig davon, wie gro\u00df der Benutzer das Fenster zur Laufzeit skaliert). </li> <li>Zwischen dem Rahmen des Formulars und dem Rand der Steuerelemente sollten oben und unten jeweils 15 Pixel und links und rechts jeweils 10 Pixel Platz sein. Um dies zu tun, setzen Sie nicht die R\u00e4nder der Steuerelemente im Formular einzeln, sondern setzen Sie eine entsprechende Eigenschaft des Formular-Containers (die steuert, wie viel Platz zwischen den R\u00e4ndern des Containers und seinem inneren Inhalt vorhanden ist)!</li> <li> <p>Die beiden vorangegangenen Punkte bedeuten auch, dass das Formular und die darin enthaltenen Textfelder automatisch mit dem Fenster skaliert werden sollten, wie in den Bildern unter dem Dropdown-Bereich dargestellt.</p> Illustration des Formularverhaltens und der erwarteten Gr\u00f6\u00dfe <p> </p> </li> </ul> Schritte zur Implementierung des Speicherns und der Kontrolle der Formularsichtbarkeit <ol> <li>Die Daten im Formular werden in einem neuen \"ToDoItem\"-Objekt gesammelt, dessen Eigenschaften (bidirektional!) zu der Oberfl\u00e4che gebunden werden. Erstellen Sie eine Eigenschaft mit dem Namen <code>EditedTodo</code> (der Anfangswert sollte null sein).</li> <li>Klicken Sie auf die Taste Add, um <code>EditedTodo</code> zu kopieren. </li> <li>F\u00fcgen Sie beim Speichern das zu bearbeitende Objekt in die Liste \"ToDos\" ein. Denken Sie daran, dass die Datenverbindungen in der Oberfl\u00e4che aktualisiert werden m\u00fcssen, wenn sich der Inhalt der Liste \u00e4ndert (dies erfordert \u00c4nderungen an der Art und Weise, wie wir unsere Daten speichern).</li> <li>W\u00e4hrend des Speicherns wird die Eigenschaft \"EditedTodo\" gel\u00f6scht, auf \"null\" gesetzt.</li> <li>Wenn Sie das oben beschriebene getan haben, sollte das Formular genau dann sichtbar sein, wenn <code>EditedTodo</code> nicht null ist (stellen Sie sicher, dass es so ist). Darauf aufbauend k\u00f6nnen Sie mehrere L\u00f6sungen entwickeln. Am einfachsten ist es, die klassische, auf Eigenschaften basierende Datenverbindung \"x:Bind\" zu verwenden:<ol> <li>F\u00fchren Sie eine neue Eigenschaft in unsere Klasse <code>Page</code> ein (z.B. <code>IsFormVisible</code>, mit dem Typ bool).</li> <li>Dies sollte genau dann wahr sein, wenn <code>EditedTodo</code> nicht null ist. Sie sind daf\u00fcr verantwortlich, dies zu pflegen, z.B. im Setter <code>EditedTodo</code>.</li> <li>Diese Eigenschaft kann mit der Sichtbarkeit des Containers, der unser Formular darstellt, verkn\u00fcpft werden (Eigenschaft \"Visibility\"). Sie sind zwar nicht vom selben Typ, aber unter WinUI gibt es eine automatische Konvertierung zwischen den Typen <code>bool</code> und <code>Visibility</code>.</li> <li>Beachten Sie auch, dass bei einer \u00c4nderung der Quelleigenschaft (<code>IsFormVisible</code>) die damit verbundene Zieleigenschaft (Sichtbarkeit des Steuerelements) immer aktualisiert werden muss. Was wird ben\u00f6tigt? (Hinweis: in der Klasse, die direkt die Eigenschaft enth\u00e4lt - \u00fcberlegen Sie, um welche Klasse es in unserem Fall ist - muss eine geeignete Schnittstelle implementiert werden usw.)</li> </ol> </li> </ol> Alternative M\u00f6glichkeiten f\u00fcr die L\u00f6sung <p>Andere Alternativen sind ebenfalls m\u00f6glich (nur interessehalber, aber verwenden Sie sie nicht diese in der L\u00f6sung):</p> <ol> <li>Implementieren einer funktionsbasierte Datenverbindung, aber in unserem Fall w\u00e4re dies komplizierter.<ul> <li>Bei einer auf der Grundlage von \"x:Bind\" gebundenen Funktion wird der Wert \"null\" oder ein anderer Wert als \"null\" der Eigenschaft \"EditedTodo\" zum Anzeigen und Ausblenden in \"Sichtbarkeit\" umgewandelt.</li> <li>Wenn wir Daten binden, m\u00fcssen wir auch <code>FallbackValue='Collapsed'</code> verwenden, denn leider ruft <code>x:Bind</code> die Funktion standardm\u00e4\u00dfig nicht auf, wenn der Wert <code>null</code> ist.</li> <li>Die gebundene Funktion muss einen Parameter haben, der die Eigenschaft angibt, deren \u00c4nderung die Aktualisierung der Datenverbindung bewirkt, und auch die \u00c4nderungsmeldung f\u00fcr die Eigenschaft muss hier implementiert werden.</li> </ul> </li> <li>Anwendung des Konverters.</li> </ol> Liste der Priorit\u00e4ten <p>Zeigen Sie in <code>ComboBox</code>die Werte des aufgelisteten Typs <code>Priority</code> an. Zu diesem Zweck k\u00f6nnen Sie die Funktion <code>Enum.GetValues</code> verwenden und eine Eigenschaft in <code>MainPage.xaml.cs</code>erstellen.</p> <pre><code>public List&lt;Priority&gt; Priorities { get; } = Enum.GetValues(typeof(Priority)).Cast&lt;Priority&gt;().ToList();\n</code></pre> <p>Binden Sie die Liste \"Priorities\" an die Eigenschaft \"ItemsSource\" der \"ComboBox\".</p> <pre><code>&lt;ComboBox ItemsSource=\"{x:Bind Priorities}\" /&gt;\n</code></pre> <p>Im obigen Beispiel gibt <code>ItemsSource</code> nur an, welche Elemente in der Liste der <code>ComboBox</code> erscheinen sollen. Aber das sagt nichts dar\u00fcber aus, woran das ausgew\u00e4hlte Element in der \"ComboBox\" gebunden sein soll. Dies erfordert eine weitere Datenverbindung. Dies wurde in der \u00dcbung nicht erw\u00e4hnt, aber es lohnt sich im Vorlesungsmaterial zum Beispiel <code>SelectedItem</code> suchen (alle Vorkommen lohnt es sich anzuschauen).</p> Einige wichtige Controller-Eigenschaften <ul> <li>Die Eigenschaft <code>IsChecked</code> (und nicht <code>Checked</code>!) von<code>CheckBox</code> </li> <li>Die Eigenschaft <code>Date</code> von <code>DatePicker</code> </li> </ul> <p>Aufgabe 3 - EINGABE</p> <p>F\u00fcgen Sie ein Bildschirmfoto der Anwendung ein, auf dem das Hinzuf\u00fcgen der neuen Aufgabe vor dem Speichern sehbar ist! (<code>f3.1.png</code>)</p> <p>F\u00fcgen Sie ein Bildschirmfoto der Anwendung ein, auf dem die Aufgabe im vorherigen Bild der Liste hinzugef\u00fcgt wurde und das Formular verschwunden ist (<code>f3.2.png</code>)</p> <p>Optionale \u00dcbungsaufgaben</p> Optionale \u00dcbungsaufgabe 1 - Ein Formular scrollbar machen <p>Alles, was Sie tun m\u00fcssen, ist, das Formular in ein <code>ScrollViewer</code> Steuerelement einzuschlie\u00dfen (und denken Sie daran, dass dies das \u00e4u\u00dferste Element in der Gridzelle sein wird, so dass Sie die Position innerhalb dem Grid daf\u00fcr angeben m\u00fcssen). Wenn Sie dies implementieren, kann es in Ihre eingereichte L\u00f6sung aufgenommen werden.</p> Optionale \u00dcbungsaufgabe 2 - Formular mit fester Breite <p>In unserer L\u00f6sung wird das Formular automatisch mit dem Fenster skaliert. Eine gute M\u00f6glichkeit ist zu \u00fcben, dies so zu \u00e4ndern, dass das Formular eine feste Breite (z. B. 500 Pixel) und eine H\u00f6he hat, die der Gesamth\u00f6he der darin enthaltenen Elemente entspricht. Wenn Sie f\u00fcr das Formular mit StackPanel gearbeitet haben, m\u00fcssen Sie nur drei Attribute hinzuf\u00fcgen oder \u00e4ndern. Dieses Verhalten wird in der nachstehenden animierten Abbildung veranschaulicht. Es ist wichtig, dass Sie die vorherige L\u00f6sung eingaben soll und nicht das in dieser optionalen \u00dcbung beschriebene Verhalten! </p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#4-optionale-aufgabe-fur-3-imsc-punkte-bearbeiten-einer-aufgabe-todo","title":"4. Optionale Aufgabe f\u00fcr 3 IMSc-Punkte - Bearbeiten einer Aufgabe (ToDo)","text":"<p>Machen Sie es m\u00f6glich, die Aufgaben wie folgt zu bearbeiten:</p> <ul> <li>Wenn Sie auf der Benutzeroberfl\u00e4che auf ein Element in der Aufgabenliste klicken, werden die Daten f\u00fcr diese Aufgabe in der Bearbeitungsoberfl\u00e4che angezeigt (das in der vorherigen Aufgabe vorgestellte Formular), wo sie bearbeitet und gespeichert werden kann.</li> <li>Beim Speichern sollte die bearbeitete Aufgabenliste aktualisiert werden und das Formular verschwinden.</li> </ul> Tipps zur L\u00f6sung <ul> <li>Es lohnt sich, die eindeutige ID der Aufgaben w\u00e4hrend des Einf\u00fcgens beizubehalten, damit Sie w\u00e4hrend dem Speichern, zwischen Bearbeiten und Einf\u00fcgen unterscheiden k\u00f6nnen. Im Falle einer Einf\u00fcgung k\u00f6nnen Sie beispielsweise den Wert -1 verwenden, den wir durch eine Zahl ersetzen, die um eins gr\u00f6\u00dfer ist als die zuvor verwendete. Aber nehmen wir an, dass -1 auch ein Wert ist, den ein g\u00fcltiges Aufgabenobjekt haben kann. Was kann getan werden? \u00c4ndern Sie in der Klasse <code>TodoItem</code> den Typ von <code>Id</code> in <code>int?</code>. Bei <code>?</code>k\u00f6nnen die Wertetypen (<code>int</code>, <code>bool</code>, <code>char</code>, <code>enum</code>, <code>struct</code> usw.) auch den Wert <code>null</code> annehmen. Diese werden als nullable Werttypen (nullable value types) bezeichnet. Sie werden w\u00e4hrend der Kompilierung auf die Struktur <code>Nullable&lt;T&gt;</code>.NET abgebildet, die die urspr\u00fcngliche Variable und ein Flag enth\u00e4lt, das angibt, ob der Wert gef\u00fcllt ist oder nicht. Lesen Sie mehr \u00fcber sie hier und hier.  Wenden Sie dies in der L\u00f6sung an.</li> <li>Um auf das Listenelement zu klicken, empfiehlt es sich, das Ereignis <code>ListView</code> <code>ItemClick</code> zu verwenden, nachdem die Eigenschaft <code>IsItemClickEnabled</code> auf <code>ListView</code>aktiviert wurde. Informationen \u00fcber das neu ausgew\u00e4hlte Listenelement werden im Parameter <code>ItemClickEventArgs</code> des Ereignishandlers angegeben. </li> <li>Es gibt mehrere M\u00f6glichkeiten, die zu bearbeitenden Daten zu behandeln, eine davon ist: <ul> <li>Setzen Sie die Eigenschaft <code>EditedTodo</code> auf die bearbeitete Aufgabe, wenn Sie darauf klicken.</li> <li>Wenn Sie auf die Taste \"Save\" klicken, wird die bearbeitete Aufgabe in der Liste <code>Todos</code> durch den Wert <code>EditedTodo</code> ersetzt. Im Endeffekt ersetzen wir das gleiche Element durch sich selbst, aber <code>ListView</code> wird aktualisiert.</li> </ul> </li> </ul> <p>Aufgave 4. iMSc - EINGABE</p> <p>F\u00fcgen Sie ein Bildschirmfoto der Anwendung ein, bei der ein Klick auf einen vorhandenen Eintrag das Formular ausf\u00fcllt (<code>f4.imsc.1.png</code>)</p> <p>F\u00fcgen Sie ein Bildschirmfoto der Anwendung ein, auf dem die im vorherigen Screenshot ausgew\u00e4hlte Aufgabe in der Liste als Ergebnis der Speicheraktion aktualisiert wird! (<code>f4.imsc.2.png</code>)</p>"},{"location":"hazi/3-felhasznaloi-felulet-kialakitasa/index_ger/#eingabe","title":"Eingabe","text":"<p>Checkliste f\u00fcr Wiederholungen:</p> <ul> <li>Es ist wichtig, dass nur die Aufgaben akzeptiert werden, die Sie vollst\u00e4ndig gemacht haben und die die Anforderungen in jeder Hinsicht erf\u00fcllen. </li> <li>Sie m\u00fcssen nat\u00fcrlich Ihre eigene Arbeit eingeben (da sie bewertet wird).</li> <li>Nicht nur das Quellcode, sondern auch die erwartete Bildschirmfotos sollen eingegeben werden.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/","title":"4. HF - T\u00f6bbsz\u00e1l\u00fa alkalmaz\u00e1sok fejleszt\u00e9se","text":""},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#bevezetes","title":"Bevezet\u00e9s","text":"<p>Az \u00f6n\u00e1ll\u00f3 feladat a konkurens/t\u00f6bbsz\u00e1l\u00fa alkalmaz\u00e1sok fejleszt\u00e9se el\u0151ad\u00e1sokon elhangzottakra \u00e9p\u00edt. A feladatok gyakorlati h\u00e1tter\u00e9\u00fcl a 4. labor \u2013 T\u00f6bbsz\u00e1l\u00fa alkalmaz\u00e1sok fejleszt\u00e9se laborgyakorlat szolg\u00e1l.</p> <p>A fentiekre \u00e9p\u00edtve, jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel elv\u00e9gezhet\u0151k. Az \u00f6n\u00e1ll\u00f3 gyakorlat a k\u00f6vetkez\u0151 ismeretek elm\u00e9ly\u00edt\u00e9s\u00e9t c\u00e9lozza:</p> <ul> <li>Sz\u00e1lak ind\u00edt\u00e1sa \u00e9s le\u00e1ll\u00edt\u00e1sa, sz\u00e1lf\u00fcggv\u00e9ny</li> <li>Jelz\u00e9s \u00e9s jelz\u00e9sre v\u00e1rakoz\u00e1s (<code>ManualResetEvent</code>, <code>AutoResetEvent</code>)</li> <li>K\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1sa (<code>lock</code> haszn\u00e1lata)</li> <li>WinUI fel\u00fcletelemekhez hozz\u00e1f\u00e9r\u00e9s munkasz\u00e1lakb\u00f3l</li> <li>Delegate-ek haszn\u00e1lat\u00e1nak gyakorl\u00e1sa (<code>Action&lt;T&gt;</code>)</li> <li>Felhaszn\u00e1l\u00f3i fel\u00fclet kialak\u00edt\u00e1s\u00e1nak gyakorl\u00e1sa: id\u0151z\u00edt\u0151 haszn\u00e1lata, fel\u00fcletelemek manipul\u00e1l\u00e1sa code behind f\u00e1jlb\u00f3l (ez nem kapcsol\u00f3dik a sz\u00e1lkezel\u00e9shez)</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezet a szok\u00e1sos, itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s (a le\u00edr\u00e1sban szerepl\u0151 Windows App SDK-ra is sz\u00fcks\u00e9g van).</p> <p>Ellen\u0151rz\u0151 futtat\u00e1sa</p> <p>Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi \u00e9s azt, van-e ford\u00edt\u00e1si hiba. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li>A neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod!</li> <li>A kikl\u00f3nozott f\u00e1jlok k\u00f6z\u00f6tt a <code>MultiThreadedApp.sln</code>-t megnyitva kell dolgozni.</li> <li> A feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi. A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, a repository-d gy\u00f6k\u00e9rmapp\u00e1j\u00e1ba tedd (a neptun.txt mell\u00e9). A k\u00e9perny\u0151k\u00e9pek \u00edgy felker\u00fclnek GitHub-ra git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-0-a-feladat-attekintese-ismerkedes-a-kiindulo-kerettel","title":"Feladat 0 \u2013 A feladat \u00e1ttekint\u00e9se, ismerked\u00e9s a kiindul\u00f3 kerettel","text":"<p>A feladat egy bicikliversenyt szimul\u00e1l\u00f3 alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se. A megval\u00f3s\u00edt\u00e1s alappill\u00e9re az alkalmaz\u00e1slogika \u00e9s a megjelen\u00edt\u00e9s k\u00fcl\u00f6nv\u00e1laszt\u00e1sa: az alkalmaz\u00e1slogika semmilyen szinten nem f\u00fcgghet a megjelen\u00edt\u00e9st\u0151l, a megjelen\u00edt\u00e9s pedig f\u00fcgg az alkalmaz\u00e1slogik\u00e1t\u00f3l (\u00e9rtelemszer\u0171en, hiszen annak aktu\u00e1lis \u00e1llapot\u00e1t jelen\u00edti meg).</p> <p>A kiindul\u00f3 keret m\u00e1r tartalmaz n\u00e9mi alkalmaz\u00e1s \u00e9s megjelen\u00edt\u00e9shez kapcsol\u00f3d\u00f3 logik\u00e1t. Futtassuk az alkalmaz\u00e1st, \u00e9s tekints\u00fck \u00e1t a fel\u00fclet\u00e9t:</p> <p></p> <ul> <li>Az ablak fels\u0151 r\u00e9sz\u00e9n tal\u00e1lhat\u00f3 a versenyp\u00e1lya. Bal oldalon sorakoznak a biciklik, majd l\u00e1that\u00f3 a startvonal, a p\u00e1lya k\u00f6zepe fel\u00e9 egy k\u00f6ztes meg\u00e1ll\u00f3 (dep\u00f3), ill. a c\u00e9lvonal.</li> <li>Az ablak als\u00f3 r\u00e9sz\u00e9n a verseny vez\u00e9rl\u00e9s\u00e9re szolg\u00e1l\u00f3 gombok tal\u00e1lhat\u00f3k. M\u00e9g nem kapcsol\u00f3dik hozz\u00e1juk logika, a k\u00f6vetkez\u0151 viselked\u00e9st fogjuk a k\u00e9s\u0151bbiekben megval\u00f3s\u00edtani:<ul> <li><code>Prepare Race</code>: A verseny el\u0151k\u00e9sz\u00edt\u00e9se (biciklik l\u00e9trehoz\u00e1sa \u00e9s felsorakoztat\u00e1sa a startvonalhoz).</li> <li><code>Start Race</code>: A verseny ind\u00edt\u00e1sa, mely hat\u00e1s\u00e1ra a biciklik egym\u00e1ssal versenyezve el\u00e9rnek a dep\u00f3ba, \u00e9s ott v\u00e1rakoznak.</li> <li><code>Start Next Bike From Depo</code>: A dep\u00f3ban v\u00e1rakoz\u00f3 biciklik k\u00f6z\u00fcl elind\u00edt egyet (mely bicikli eg\u00e9szen a c\u00e9lvonalig halad). A gombon t\u00f6bbsz\u00f6r is lehet kattintani, minden alkalommal egy biciklit enged tov\u00e1bb.</li> </ul> </li> </ul> <p>Az al\u00e1bbi anim\u00e1lt k\u00e9pen azt illusztr\u00e1lja, hogy a megold\u00e1s sor\u00e1n hova szeretn\u00e9nk eljutni:</p> <p></p> <p>A j\u00e1t\u00e9k/szimul\u00e1ci\u00f3 alapelvelve a k\u00f6vetkez\u0151 (m\u00e9g nincs megval\u00f3s\u00edtva):</p> <ul> <li>Minden egyes biciklihez egy k\u00fcl\u00f6n sz\u00e1l tartozik.</li> <li>A j\u00e1t\u00e9k/szimul\u00e1ci\u00f3 iter\u00e1ci\u00f3kra bontott: minden iter\u00e1ci\u00f3ban a biciklihez tartoz\u00f3 sz\u00e1l (amennyiben az \u00e9ppen nem v\u00e1rakozik a verseny ind\u00edt\u00e1s\u00e1ra vagy a dep\u00f3ban) egy v\u00e9letlenszer\u0171 sz\u00e1m\u00e9rt\u00e9kkel l\u00e9p el\u0151re a p\u00e1ly\u00e1n, eg\u00e9szen addig, am\u00edg el nem \u00e9ri a c\u00e9lvonalat.</li> </ul> <p>Egy extra megval\u00f3s\u00edtott funkci\u00f3 (ez m\u00e1r m\u0171k\u00f6dik): a vil\u00e1gos \u00e9s s\u00f6t\u00e9t t\u00e9ma k\u00f6z\u00f6tti v\u00e1lt\u00e1sra lehet\u0151s\u00e9g van a Ctrl+T billenty\u0171kombin\u00e1ci\u00f3val.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#alkalmazaslogika","title":"Alkalmaz\u00e1slogika","text":"<p>A kiindul\u00f3 keretben az alkalmaz\u00e1slogika oszt\u00e1lyai csak kezdetleges \u00e1llapotban vannak megval\u00f3s\u00edtva. Az oszt\u00e1lyok az <code>AppLogic</code> mapp\u00e1ban/n\u00e9vt\u00e9rben tal\u00e1lhat\u00f3k, n\u00e9zz\u00fck meg ezek k\u00f3dj\u00e1t:</p> <ul> <li><code>Bike</code>: Egy biciklit reprezent\u00e1l, melyhez hozz\u00e1tartozik a bicikli rajtsz\u00e1ma, poz\u00edci\u00f3ja \u00e9s azon inform\u00e1ci\u00f3, hogy az adott bicikli nyerte-e meg a versenyt. A <code>Step</code> m\u0171velete a bicikli v\u00e9letlenszer\u0171 l\u00e9pt\u00e9kkel t\u00f6rt\u00e9n\u0151 l\u00e9ptet\u00e9s\u00e9re szolg\u00e1l a verseny k\u00f6zben.</li> <li><code>Game</code>: A j\u00e1t\u00e9k vez\u00e9rl\u00e9s\u00e9nek logik\u00e1ja (ezt tov\u00e1bb lehetne darabolni, de az egyszer\u0171s\u00e9g kedv\u00e9\u00e9rt alapvet\u0151en ebbe az oszt\u00e1lyba fogunk dolgozni).<ul> <li>Defini\u00e1lja az egyes versenyp\u00e1lya elemek, \u00fagymint startvonal, k\u00f6ztes meg\u00e1ll\u00f3 (dep\u00f3) \u00e9s c\u00e9lvonal poz\u00edci\u00f3it: <code>StartLinePosition</code>, <code>DepoPosition</code> \u00e9s <code>FinishLinePosition</code> konstansok.</li> <li>T\u00e1rolja a versenyz\u0151 bicikliket (<code>Bikes</code> tagv\u00e1ltoz\u00f3).</li> <li><code>PrepareRace</code> m\u0171velet: El\u0151k\u00e9sz\u00edti a versenyt. Egyel\u0151re a <code>CreateBike</code> seg\u00e9df\u00fcggv\u00e9ny felhaszn\u00e1l\u00e1s\u00e1val l\u00e9trehoz h\u00e1rom biciklit. A feladata lesz m\u00e9g a biciklik felsorakoztat\u00e1sa a startvonalhoz.</li> <li><code>StartBikes</code> m\u0171velet: Verseny ind\u00edt\u00e1sa (mely hat\u00e1s\u00e1ra a biciklik egym\u00e1ssal versenyezve el\u00e9rnek a dep\u00f3ba, \u00e9s ott v\u00e1rakoznak). Nincs megval\u00f3s\u00edtva.</li> <li><code>StartNextBikeFromDepo</code> m\u0171velet: A dep\u00f3ban v\u00e1rakoz\u00f3 biciklik k\u00f6z\u00fcl elind\u00edt egyet (de csak egyet). Nincs megval\u00f3s\u00edtva.</li> </ul> </li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#megjelenites","title":"Megjelen\u00edt\u00e9s","text":"<p>A kiindul\u00f3 keretben a megjelen\u00edt\u00e9s viszonylag j\u00f3l el\u0151 van k\u00e9sz\u00edtve, de ezen is fogunk m\u00e9g dolgozni.</p> <p>A fel\u00fclet kialak\u00edt\u00e1sa a <code>MainWindow.xaml</code>-ben tal\u00e1lhat\u00f3, a k\u00f6vetkez\u0151 alapelvek szerint:</p> <ul> <li>Az ablak alapelrendez\u00e9s\u00e9nek kialak\u00edt\u00e1s\u00e1ra \"szok\u00e1sosan\" egy <code>Grid</code>-et haszn\u00e1ltunk, mely k\u00e9t sorb\u00f3l \u00e1ll. Az els\u0151 sor\u00e1ban tal\u00e1lhat\u00f3 a versenyp\u00e1lya a biciklikkel (<code>*</code> sormagass\u00e1g), az als\u00f3 r\u00e9szben pedig egy <code>StackPanel</code> a gombokkal (<code>Auto</code> sormagass\u00e1g).</li> <li>A p\u00e1lya kialak\u00edt\u00e1s\u00e1ra <code>Rectangle</code> objektumokat (h\u00e1tt\u00e9r, startvonal, depo, c\u00e9legyenes), a sz\u00f6vegelemek elrendez\u00e9s\u00e9re pedig (r\u00e9szben elforgatott) <code>TextBlock</code> objektumokat haszn\u00e1ltunk.</li> <li>Az egyes bicikliket egy vertik\u00e1lis <code>StackPanel</code>-en helyezt\u00fck el. A bicikliket egy-egy <code>TextBlock</code> objektummal jelen\u00edtj\u00fck meg (<code>Webdings</code> bet\u0171t\u00edpus, <code>b</code> bet\u0171). Haszn\u00e1lhattunk volna <code>FontIcon</code>-t is, a <code>TextBlock</code>-ra csak az\u00e9rt esett a v\u00e1laszt\u00e1sunk, mert ezzel m\u00e1r kor\u00e1bban megismerkedt\u00fcnk.</li> <li>A p\u00e1lya valamennyi elem\u00e9t \u00e9s a bicikliket tartalmaz\u00f3 <code>StackPanel</code>-t is a <code>Grid</code> els\u0151 (technikailag 0-dik) sor\u00e1ban helyezt\u00fck el. Ezek a defini\u00e1l\u00e1suk sorrendj\u00e9ben rajzol\u00f3dnak ki, az igaz\u00edt\u00e1sok \u00e9s marg\u00f3k \u00e1ltal meghat\u00e1rozott helyen. A biciklik <code>TextBlock</code>-j\u00e1nak poz\u00edcion\u00e1l\u00e1s\u00e1ra is a marg\u00f3t haszn\u00e1ljuk majd. Egy alternat\u00edva megold\u00e1s lett volna, ha minden fel\u00fcletelemet egy <code>Canvas</code>-re helyezt\u00fcnk volna el, \u00e9s azon \u00e1ll\u00edtottuk volna be az elemek abszol\u00fat poz\u00edci\u00f3j\u00e1t \u00e9s m\u00e9ret\u00e9t (Left, Top, Width, Height) a marg\u00f3k alkalmaz\u00e1sa helyett.</li> </ul> <p>Az ablakhoz tartoz\u00f3 <code>MainWindow.xaml.cs</code> code behind f\u00e1jlt is n\u00e9zz\u00fck meg, f\u0151bb elemei a k\u00f6vetkez\u0151k:</p> <ul> <li><code>game</code> tagv\u00e1ltoz\u00f3: Maga a <code>Game</code> j\u00e1t\u00e9kobjektum, melynek \u00e1llapot\u00e1t a f\u0151ablak megjelen\u00edti.</li> <li><code>bikeTextBlocks</code> tagv\u00e1ltoz\u00f3: Ebben a list\u00e1ban t\u00e1roljuk majd a bicikliket megjelen\u00edt\u0151 <code>TextBlock</code> objektumokat. Egyel\u0151re \u00fcres, a karbantart\u00e1s\u00e1t nek\u00fcnk kell majd megval\u00f3s\u00edtani.</li> <li>Konstruktor: Be\u00e1ll\u00edtja a startvonal, dep\u00f3 \u00e9s c\u00e9lvonal fel\u00fcletelemek x koordin\u00e1t\u00e1j\u00e1t a <code>Game</code> \u00e1ltal meghat\u00e1rozott konstans \u00e9rt\u00e9kek alapj\u00e1n. Az x koordin\u00e1ta be\u00e1ll\u00edt\u00e1sa a baloldali marg\u00f3 (<code>Margin</code>) megfelel\u0151 be\u00e1ll\u00edt\u00e1s\u00e1val t\u00f6rt\u00e9nik (mivel ezek az elemek balra igaz\u00edtottak a kont\u00e9ner\u00fckben!). Ezen fel\u00fcl a <code>AddKeyboardAcceleratorToChangeTheme</code> seg\u00e9df\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel beregisztr\u00e1lja a Ctrl+T gyors\u00edt\u00f3billenty\u0171t a vil\u00e1gos/s\u00f6t\u00e9t t\u00e9ma k\u00f6z\u00f6tti v\u00e1lt\u00e1sra.</li> <li><code>PrepareRaceButton_Click</code>, <code>StartRaceButton_Click</code>, <code>StartNextFromDepoButton_Click</code>: a h\u00e1rom gomb esem\u00e9nykezel\u0151je.</li> <li><code>UpdateUI</code> m\u0171velet: Kulcsfontoss\u00e1g\u00fa logik\u00e1t tartalmaz. A j\u00e1t\u00e9k \u00e1llapot\u00e1nak megfelel\u0151en friss\u00edti a fel\u00fcletet. V\u00e9gig iter\u00e1l a j\u00e1t\u00e9k \u00f6sszes biciklij\u00e9n, \u00e9s a biciklikhez tartoz\u00f3 <code>TextBlock</code>-ok x poz\u00edci\u00f3j\u00e1t be\u00e1ll\u00edtja a bicikli poz\u00edci\u00f3ja alapj\u00e1n (a baloldali marg\u00f3 megfelel\u0151 be\u00e1ll\u00edt\u00e1s\u00e1val). Az <code>UpdateUI</code> m\u0171velet egyel\u0151re soha nem h\u00edv\u00f3dik, \u00edgy a fel\u00fclet nem friss\u00fcl.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-1-a-felulet-frissitese","title":"Feladat 1 \u2013 A fel\u00fclet friss\u00edt\u00e9se","text":"<p>Jelen pillanatban hi\u00e1ba m\u00f3dos\u00edtan\u00e1nk fut\u00e1s k\u00f6zben a j\u00e1t\u00e9k \u00e1llapot\u00e1t: a fel\u00fcletbe be van \u00e9getve a h\u00e1rom bicikli fix poz\u00edci\u00f3ban, ezen fel\u00fcl a fel\u00fcletet friss\u00edt\u0151 <code>UpdateUI</code> m\u0171velet egyel\u0151re soha nem h\u00edv\u00f3dik. Miel\u0151tt belev\u00e1gn\u00e1nk a j\u00e1t\u00e9klogika megval\u00f3s\u00edt\u00e1s\u00e1ba, m\u00f3dos\u00edtsuk a fel\u00fclethez tartoz\u00f3 logik\u00e1t, hogy az k\u00e9pes legyen folyamatosan a j\u00e1t\u00e9k friss \u00e1llapot\u00e1t megjelen\u00edteni.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#a-biciklik-dinamikus-kezelese","title":"A biciklik dinamikus kezel\u00e9se","text":"<p>Az els\u0151 probl\u00e9ma: a <code>MainWindow.xaml</code>-be be van \u00e9getve a h\u00e1rom, biciklit megjelen\u00edt\u0151 <code>TextBlock</code>. \u00cdgy a fel\u00fclet\u00fcnk csak olyan j\u00e1t\u00e9k megjelen\u00edt\u00e9s\u00e9re lenne k\u00e9pes, melyben pontosan h\u00e1rom versenyz\u0151 szerepel. K\u00e9sz\u00edts\u00fck el\u0151 a megjelen\u00edt\u00e9st tetsz\u0151leges sz\u00e1m\u00fa bicikli kezel\u00e9s\u00e9re. Els\u0151 l\u00e9p\u00e9sben t\u00e1vol\u00edtsuk el a <code>MainWindow.xaml</code>-b\u0151l a h\u00e1rom biciklihez tartoz\u00f3 \"be\u00e9getett\" <code>TextBlock</code> defin\u00edci\u00f3t (kommentezz\u00fck ki a h\u00e1rom sort). Ezt k\u00f6vet\u0151en, a code behind f\u00e1jlban, a <code>PrepareRaceButton_Click</code> esem\u00e9nykezel\u0151ben a verseny el\u0151k\u00e9sz\u00edt\u00e9se (<code>game.PrepareRace()</code> h\u00edv\u00e1s) ut\u00e1n:</p> <ol> <li>Dinamikusan hozzunk l\u00e9tre minden, a <code>game</code> objektumban szerepl\u0151 biciklihez (<code>game.Bikes</code> tulajdons\u00e1g!) egy megfelel\u0151 <code>TextBlock</code> objektumot . A l\u00e9trehozott <code>TextBlock</code> tulajdons\u00e1gai pontosan feleljenek meg annak, mint amit a xaml f\u00e1jlban kiiktattunk (<code>FontFamily</code>, <code>FontSize</code>, <code>Margin</code>, <code>Text</code>)</li> <li>A l\u00e9trehozott <code>TextBlock</code> objektumokat fel kell venni a <code>bikesPanel</code> nev\u0171 <code>StackPanel</code> gyerekei k\u00f6z\u00e9 (a xaml f\u00e1jlban kikommentezett <code>TextBlock</code>-ok is ennek gyerekei voltak, ezt n\u00e9zz\u00fck meg!), m\u00e9gpedig a <code>bikesPanel.Children.Add</code> h\u00edv\u00e1s\u00e1val.</li> <li>A l\u00e9trehozott <code>TextBlock</code> objektumokat vegy\u00fck fel a <code>bikeTextBlocks</code> list\u00e1ba is. Ez az\u00e9rt fontos - n\u00e9zz\u00fck is meg a k\u00f3dban - mert az <code>UpdateUI</code> fel\u00fcletfriss\u00edt\u0151 f\u00fcggv\u00e9ny a biciklikhez tartoz\u00f3 <code>TextBlock</code>-okat a <code>bikeTextBlocks</code> list\u00e1ban keresi (t\u00f6mbindex alapj\u00e1n p\u00e1ros\u00edtja a bicikliket \u00e9s a <code>TextBlock</code>-okat).</li> </ol> <p>Annyiban megv\u00e1ltozik az alkalmaz\u00e1s m\u0171k\u00f6d\u00e9se (de ez sz\u00e1nd\u00e9kos), hogy indul\u00e1skor nem jelennek meg biciklik, hanem csak a <code>Prepare Race</code> gombon kattint\u00e1skor.</p> <p>Pr\u00f3b\u00e1ljuk a megold\u00e1st magunkt\u00f3l megval\u00f3s\u00edtani a fenti pontokat k\u00f6vetve, majd ellen\u0151rizz\u00fck, hogy alapvet\u0151en megfelel-e az al\u00e1bbi megold\u00e1snak.</p> Megold\u00e1s <pre><code>foreach (var bike in game.Bikes)\n{\n    var bikeTextBlock = new TextBlock()\n    {\n        Text = \"b\",\n        FontFamily = new FontFamily(\"Webdings\"),\n        FontSize = 64,\n        Margin = new Thickness(10, 0, 0, 0)\n    };\n\n    bikesPanel.Children.Add(bikeTextBlock);\n    bikeTextBlocks.Add(bikeTextBlock);\n}\n</code></pre>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#a-feluletfrissites-megvalositasa","title":"A fel\u00fcletfriss\u00edt\u00e9s megval\u00f3s\u00edt\u00e1sa","text":"<p>Most m\u00e1r pontosan annyi <code>TextBlock</code>-unk lesz, ah\u00e1ny bicikli van a <code>game</code> objektumban. S\u0151t, az <code>UpdateUI</code> m\u0171velettel tudjuk is a fel\u00fcletet b\u00e1rmikor friss\u00edteni (a <code>game</code> aktu\u00e1lis \u00e1llapot\u00e1nak megfelel\u0151en). A k\u00f6vetkez\u0151 kardin\u00e1lis k\u00e9rd\u00e9s: mikor h\u00edvjuk ez a f\u00fcggv\u00e9nyt, vagyis mikor friss\u00edts\u00fck a fel\u00fcletet. T\u00f6bb megold\u00e1s k\u00f6z\u00fcl v\u00e1laszthatunk:</p> <ul> <li>a) Mindig, amikor a <code>Game</code> \u00e1llapota megv\u00e1ltozik.</li> <li>b) Adott id\u0151k\u00f6z\u00f6nk\u00e9nt (pl. 100 ms-k\u00e9nt) \"folyamatosan\", egy id\u0151z\u00edt\u0151 seg\u00edts\u00e9g\u00e9vel.</li> </ul> <p>\u00c1ltal\u00e1noss\u00e1g\u00e1ban mindk\u00e9t megold\u00e1snak lehetnek el\u0151nyei \u00e9s h\u00e1tr\u00e1nyai. A b) bizonyos tekintetben egyszer\u0171bb (nem kell tudni, mikor v\u00e1ltozik a <code>Game</code> \u00e1llapota), ugyanakkor felesleges friss\u00edt\u00e9s is t\u00f6rt\u00e9nhet (ha nem v\u00e1ltozott az \u00e1llapot k\u00e9t friss\u00edt\u00e9s k\u00f6z\u00f6tt). De hat\u00e9konyabb is lehet, ha az \u00e1llapot nagyon gyakran v\u00e1ltozik, \u00e9s nem akarjuk minden v\u00e1ltoz\u00e1skor a fel\u00fcletet friss\u00edteni, el\u00e9g adott id\u0151k\u00f6z\u00f6nk\u00e9nt egyszer (pl. a szem\u00fcnk \u00fagysem tudja lek\u00f6vetni). Eset\u00fcnkben - els\u0151sorban egyszer\u0171s\u00e9ge miatt - a \"b)\", vagyis id\u0151z\u00edt\u0151 alap\u00fa megold\u00e1st v\u00e1lasztjuk.</p> <p>WinUI 3 k\u00f6rnyezetben periodikus esem\u00e9nyek kezel\u00e9s\u00e9re a <code>DispatchTimer</code> oszt\u00e1ly alkalmaz\u00e1sa javasolt (k\u00fcl\u00f6n\u00f6sen, ha a fel\u00fcletelemekhez is hozz\u00e1 k\u00edv\u00e1nunk f\u00e9rni az id\u0151z\u00edtett m\u0171veletben).</p> <p>A <code>MainWindow</code> oszt\u00e1lyban vezess\u00fcnk be egy tagv\u00e1ltoz\u00f3t:</p> <pre><code>    private DispatcherTimer timer;\n</code></pre> <p>Ezt k\u00f6vet\u0151en a konstruktorban p\u00e9ld\u00e1nyos\u00edtsuk a timert, rendelj\u00fcnk a <code>Tick</code> esem\u00e9ny\u00e9hez egy esem\u00e9nykezel\u0151 f\u00fcggv\u00e9nyt (ez h\u00edv\u00f3dik adott id\u0151k\u00f6z\u00f6nk\u00e9nt), \u00e1ll\u00edtsuk be az id\u0151k\u00f6zt 100 ms-ra (<code>Interval</code> tulajdons\u00e1g), \u00e9s ind\u00edtsuk el a timert:</p> <pre><code>public MainWindow()\n{\n    ...\n\n    timer = new DispatcherTimer();\n    timer.Tick += Timer_Tick;\n    timer.Interval = TimeSpan.FromMilliseconds(100);\n    timer.Start();\n}\n\nprivate void Timer_Tick(object sender, object e)\n{\n    UpdateUI();\n}\n</code></pre> <p>Mint l\u00e1that\u00f3, az id\u0151z\u00edt\u0151 esem\u00e9nykezel\u0151ben az <code>UpdateUI</code> h\u00edv\u00e1s\u00e1val friss\u00edtj\u00fck a fel\u00fcletet.</p> <p>K\u00e9rd\u00e9s, hogyan tudjuk a megold\u00e1sunkat tesztelni, vagyis azt ellen\u0151rizni, hogy a <code>Timer_Tick</code> esem\u00e9nykezel\u0151 val\u00f3ban megh\u00edv\u00f3dik-e 100 ms-k\u00e9nt. Ehhez Trace-elj\u00fck ki ideiglenesen a Visual Studio Output ablak\u00e1ba az aktu\u00e1lis id\u0151t megfelel\u0151en form\u00e1zva az esem\u00e9nykezel\u0151ben:</p> <pre><code>private void Timer_Tick(object sender, object e)\n{\n    System.Diagnostics.Trace.WriteLine($\"Time: {DateTime.Now.ToString(\"hh:mm:ss.fff\")}\");\n\n    UpdateUI();\n}\n</code></pre> <p>A <code>Trace.WriteLine</code> m\u0171velet a Visual Studio Output ablak\u00e1ba \u00edr egy sort, a <code>DateTime.Now</code>-val pedig az aktu\u00e1lis id\u0151t lehet lek\u00e9rdeni. Ezt alak\u00edtjuk a <code>ToString</code> h\u00edv\u00e1ssal megfelel\u0151 form\u00e1tum\u00fa sz\u00f6vegg\u00e9. Futtassuk az alkalmaz\u00e1st (l\u00e9nyeges, hogy debuggolva, vagyis az F5 billenty\u0171vel) \u00e9s ellen\u0151rizz\u00fck a Visual Studio Output ablak\u00e1t, hogy val\u00f3ban megjelenik egy \u00faj sor 100 ms-k\u00e9nt. Ha minden j\u00f3l m\u0171k\u00f6dik, a Trace-el\u0151 sort kommentezz\u00fck ki.</p> <p>A DispatcherTimer pontoss\u00e1ga</p> <p>Azt megfigyelhetj\u00fck, hogy a <code>DispatcherTimer</code> nem k\u00fcl\u00f6n\u00f6sebben pontos, de c\u00e9ljainknak t\u00f6k\u00e9letesen megfelel. Ugyanakkor sz\u00e1munkra fontos tulajdons\u00e1ga, hogy a UI sz\u00e1lon h\u00edv\u00f3dik (a <code>Tick</code> esem\u00e9nye ezen s\u00fcl el), \u00edgy a kezel\u0151f\u00fcggv\u00e9ny\u00fcnkb\u0151l (<code>Timer_Tick</code>) hozz\u00e1 tudunk f\u00e9rni a fel\u00fcletelemekhez.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#foablak-fejlece","title":"F\u0151ablak fejl\u00e9ce","text":"<p> A f\u0151ablak fejl\u00e9ce a \"Tour de France\" sz\u00f6veg legyen, hozz\u00e1f\u0171zve a saj\u00e1t Neptun k\u00f3dod: (pl. \"ABCDEF\" Neptun k\u00f3d eset\u00e9n \"Tour de France - ABCDEF\"), fontos, hogy ez legyen a sz\u00f6veg! Ehhez a f\u0151ablakunk <code>Title</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtsuk be erre a sz\u00f6vegre a <code>MainWindow.xaml</code> f\u00e1jlban.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-2-a-verseny-elokeszitese","title":"Feladat 2 \u2013 A verseny el\u0151k\u00e9sz\u00edt\u00e9se","text":"<p>A fentiek sor\u00e1n el is k\u00e9sz\u00fclt\u00fcnk a megjelen\u00edt\u00e9si logik\u00e1val, a f\u00f3kuszunkat most m\u00e1r az alkalmaz\u00e1slogik\u00e1ra, \u00e9s az ahhoz kapcsol\u00f3d\u00f3 sz\u00e1lkezel\u00e9si t\u00e9mak\u00f6rre helyezz\u00fck \u00e1t. Ennek megfelel\u0151en mostant\u00f3l els\u0151dlegesen a <code>Game</code> oszt\u00e1lyban fogunk dolgozni.</p> <p>Eml\u00e9keztet\u0151k\u00e9nt, a megold\u00e1sunk alapelve a k\u00f6vetkez\u0151 lesz:</p> <ul> <li>Minden egyes biciklihez egy k\u00fcl\u00f6n sz\u00e1lat ind\u00edtunk.</li> <li>A j\u00e1t\u00e9k/szimul\u00e1ci\u00f3 iter\u00e1ci\u00f3kra bontott: minden iter\u00e1ci\u00f3ban a biciklihez tartoz\u00f3 sz\u00e1l (amennyiben az \u00e9ppen nem v\u00e1rakozik a verseny ind\u00edt\u00e1s\u00e1ra vagy a dep\u00f3ban) egy v\u00e9letlenszer\u0171 sz\u00e1m\u00e9rt\u00e9kkel l\u00e9p el\u0151re a p\u00e1ly\u00e1n, eg\u00e9szen addig, am\u00edg el nem \u00e9ri a c\u00e9lvonalat.</li> </ul> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9seknek megfelel\u0151en alak\u00edtsuk ki a kereteket:</p> <ol> <li>A <code>Game</code> oszt\u00e1ly <code>CreateBike</code> f\u00fcggv\u00e9ny\u00e9nek a v\u00e9g\u00e9n ind\u00edtsunk el egy a ker\u00e9kp\u00e1rhoz tartoz\u00f3 sz\u00e1lat.</li> <li>A sz\u00e1lf\u00fcggv\u00e9ny a <code>Game</code> oszt\u00e1lyban legyen.</li> <li>A sz\u00e1lf\u00fcggv\u00e9nynek a <code>CreateBike</code> adja \u00e1t param\u00e9terk\u00e9nt a bicikli objektumot, melyet az adott sz\u00e1l mozgatni fog.</li> <li>A fut\u00f3 sz\u00e1lak ne blokkolj\u00e1k az alkalmaz\u00e1s bez\u00e1r\u00e1s\u00e1t (vagyis, amikor bez\u00e1rjuk a f\u0151ablakot, de van m\u00e9g fut\u00f3 sz\u00e1l, a process azonnal sz\u0171nj\u00f6n meg, ne v\u00e1rja be ezeket a sz\u00e1lakat)</li> <li> <p>A sz\u00e1lf\u00fcggv\u00e9ny megval\u00f3s\u00edt\u00e1sa els\u0151 k\u00f6rben a k\u00f6vetkez\u0151kre terjedjen ki.</p> <p>Egy ciklusban minden iter\u00e1ci\u00f3ban:</p> <ul> <li>v\u00e9letlenszer\u0171 l\u00e9p\u00e9ssel (Bike oszt\u00e1ly <code>Step</code> f\u00fcggv\u00e9ny\u00e9nek h\u00edv\u00e1sa) l\u00e9ptesse a biciklit,</li> <li>majd altassa a sz\u00e1lat 100 ms-ig.</li> </ul> <p>Mindez a mozgat\u00e1s addig tartson, m\u00edg a bicikli el nem \u00e9ri a startvonalat (a poz\u00edci\u00f3ja el nem \u00e9ri a <code>StartLinePosition</code> tagv\u00e1ltoz\u00f3 \u00e1ltal meghat\u00e1rozott \u00e9rt\u00e9ket).</p> </li> </ol> <p>Pr\u00f3b\u00e1ld a fentieket \u00f6n\u00e1ll\u00f3an megval\u00f3s\u00edtani az el\u0151ad\u00e1son \u00e9s a laboron tanultak alapj\u00e1n. A megold\u00e1sod debuggol\u00e1ssal tudod tesztelni, illetve mivel a fel\u00fclet logik\u00e1t kor\u00e1bban megval\u00f3s\u00edtottuk, az alkalmaz\u00e1st futtatva a <code>Prepare Race</code> gombra kattintva is: ekkor a biciklik el kell g\u00f6rd\u00fcljenek fokozatosan haladva eg\u00e9szen a startvonalig.</p> <p>Ezekhez a l\u00e9p\u00e9sekhez m\u00e9g adunk megold\u00e1st (de sokkal t\u00f6bbet tanulsz bel\u0151le, ha magad pr\u00f3b\u00e1lkozol, csak ellen\u0151rz\u00e9sk\u00e9pen haszn\u00e1ld a megold\u00e1st):</p> Megold\u00e1s <p>A <code>Game</code> oszt\u00e1lyban a sz\u00e1lf\u00fcggv\u00e9ny:</p> <pre><code>void BikeThreadFunction(object bikeAsObject)\n{\n    Bike bike = (Bike)bikeAsObject;\n    while (bike.Position &lt;= StartLinePosition)\n    {\n        bike.Step();\n\n        Thread.Sleep(100);\n    }\n}\n</code></pre> <p>Mint l\u00e1that\u00f3, sz\u00e1lf\u00fcggv\u00e9nyn\u00e9l nem a param\u00e9ter n\u00e9lk\u00fcli, hanem az object param\u00e9ter\u0171 lehet\u0151s\u00e9get v\u00e1lasztottuk, hiszen a sz\u00e1lf\u00fcggv\u00e9nynek \u00e1t kell adni az \u00e1ltala mozgatott biciklit.</p> <p>A sz\u00e1l ind\u00edt\u00e1sa a <code>CreateBike</code> f\u00fcggv\u00e9ny v\u00e9g\u00e9n:</p> <pre><code>private void CreateBike()\n{\n    ...\n\n    var thread = new Thread(BikeThreadFunction);\n    thread.IsBackground = true; // Ne blokkolja a sz\u00e1l a processz megsz\u0171n\u00e9s\u00e9t\n    thread.Start(bike); // itt adjuk \u00e1t param\u00e9terben a sz\u00e1lf\u00fcggv\u00e9nynek a biciklit\n}\n</code></pre> <p>BEADAND\u00d3</p> <p>Miel\u0151tt tov\u00e1bbmenn\u00e9l a k\u00f6vetkez\u0151 feladatra, egy k\u00e9perny\u0151ment\u00e9st kell k\u00e9sz\u00edtened.</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat1.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Game.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>Game</code> oszt\u00e1ly <code>CreateBike</code> \u00e9s <code>BikeThreadFunction</code> f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-2-a-verseny-inditasa","title":"Feladat 2 \u2013 A verseny ind\u00edt\u00e1sa","text":"<p>Val\u00f3s\u00edtsd meg a verseny ind\u00edt\u00e1s\u00e1t a rajtvonalr\u00f3l \u00e9s futtat\u00e1s\u00e1t mindaddig, am\u00edg a biciklik meg nem \u00e9rkeznek a dep\u00f3ba, a k\u00f6vetkez\u0151 ir\u00e1nyelveknek megfelel\u0151en:</p> <ul> <li>A versenyt a <code>Start Race</code> gombkattint\u00e1s sor\u00e1n m\u00e1r h\u00edvott <code>Game</code> oszt\u00e1lybeli <code>StartBikes</code> f\u00fcggv\u00e9ny ind\u00edtsa.</li> <li>Fontos, hogy a <code>StartBikes</code> m\u0171veletben ne \u00faj sz\u00e1lakat ind\u00edtsunk, hanem meg kell oldani, hogy megl\u00e9v\u0151 sz\u00e1lak v\u00e1rakozzanak, majd a <code>StartBikes</code> f\u00fcggv\u00e9ny h\u00edv\u00e1s\u00e1nak \"hat\u00e1s\u00e1ra\" folytass\u00e1k fut\u00e1sukat.</li> <li>Ha a felhaszn\u00e1l\u00f3 azel\u0151tt nyomja meg a <code>Start Race</code> gombot, hogy a biciklik el\u00e9rn\u00e9k a startvonalat, akkor a bicikliknek m\u00e1r nem kell meg\u00e1llni a startvonalon (de az is teljesen j\u00f3 megold\u00e1s, ha ilyen esetben a gomb lenyom\u00e1s\u00e1t m\u00e9g figyelmen k\u00edv\u00fcl hagyja az alkalmaz\u00e1s).</li> <li>A biciklik eg\u00e9szen a dep\u00f3ig haladjanak el (m\u00edg poz\u00edci\u00f3juk el nem \u00e9ri a <code>DepoPosition</code> tagv\u00e1ltoz\u00f3 \u00e1ltal meghat\u00e1rozott \u00e9rt\u00e9ket).</li> <li>A <code>Game</code> oszt\u00e1lyban dolgozz.</li> </ul> <p>Tipp a megold\u00e1shoz</p> <p>Mivel a v\u00e1rakoz\u00e1st k\u00f6vet\u0151en a versenyz\u0151knek egyszerre kell indulniuk, a v\u00e1rakoz\u00e1s \u00e9s ind\u00edt\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra egy <code>ManualResetEvent</code> objektumot c\u00e9lszer\u0171 haszn\u00e1lni.</p> <p>BEADAND\u00d3</p> <p>Miel\u0151tt tov\u00e1bbmenn\u00e9l a k\u00f6vetkez\u0151 feladatra, egy k\u00e9perny\u0151ment\u00e9st kell k\u00e9sz\u00edtened.</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat2.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Game.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>Game</code> oszt\u00e1ly <code>BikeThreadFunction</code> f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-3-a-versenyzok-inditasa-a-depobol","title":"Feladat 3 \u2013 A versenyz\u0151k ind\u00edt\u00e1sa a dep\u00f3b\u00f3l","text":"<p>Val\u00f3s\u00edtsd meg a versenyz\u0151k ind\u00edt\u00e1s\u00e1t a dep\u00f3b\u00f3l \u00e9s futtat\u00e1s\u00e1t mindaddig, am\u00edg a biciklik meg nem \u00e9rkeznek a c\u00e9lba, a k\u00f6vetkez\u0151 ir\u00e1nyelveknek megfelel\u0151en:</p> <ul> <li>Az egyes versenyz\u0151ket a <code>Start Next Bike From Depo</code> gombkattint\u00e1s sor\u00e1n m\u00e1r h\u00edvott <code>Game</code> oszt\u00e1lybeli <code>StartNextBikeFromDepo</code> f\u00fcggv\u00e9ny ind\u00edtsa a dep\u00f3b\u00f3l.</li> <li>Minden gombkattint\u00e1sra csak egyetlen versenyz\u0151 indulhat el a dep\u00f3b\u00f3l.</li> <li>Fontos, hogy a <code>StartNextBikeFromDepo</code> m\u0171veletben ne \u00faj sz\u00e1lakat ind\u00edtsunk, hanem meg kell oldani, hogy megl\u00e9v\u0151 sz\u00e1lak v\u00e1rakozzanak, majd a <code>StartNextBikeFromDepo</code> f\u00fcggv\u00e9ny h\u00edv\u00e1s\u00e1nak \"hat\u00e1s\u00e1ra\" folytass\u00e1k fut\u00e1sukat.</li> <li>Ha a felhaszn\u00e1l\u00f3 azel\u0151tt nyomja meg a <code>Start Next Bike From Depo</code> gombot, hogy a biciklik el\u00e9rn\u00e9k a dep\u00f3t, akkor egy bicikli m\u00e1r tov\u00e1bbmehet a dep\u00f3b\u00f3l, amikor meg\u00e9rkezik oda (de az is teljesen j\u00f3 megold\u00e1s, ha ilyen esetben a gomb lenyom\u00e1s\u00e1t m\u00e9g figyelmen k\u00edv\u00fcl hagyja az alkalmaz\u00e1s).</li> <li>A biciklik eg\u00e9szen a c\u00e9legyenesig haladjanak el (m\u00edg poz\u00edci\u00f3juk el nem \u00e9ri a <code>FinishLinePosition</code> tagv\u00e1ltoz\u00f3 \u00e1ltal meghat\u00e1rozott \u00e9rt\u00e9ket). Amikor egy bicikli el\u00e9ri a c\u00e9lvonalat, a biciklihez tartoz\u00f3 sz\u00e1l fejezze be a fut\u00e1s\u00e1t.</li> <li>A <code>Game</code> oszt\u00e1lyban dolgozz.</li> </ul> <p>Tipp a megold\u00e1shoz</p> <p>A feladat megold\u00e1sa anal\u00f3g az el\u0151z\u0151\u00e9vel, \u00e1m ez\u00fattal a <code>ManualResetEvent</code> helyett egy m\u00e1s t\u00edpus\u00fa, de hasonl\u00f3 objektumot kell haszn\u00e1lni...</p> <p>BEADAND\u00d3</p> <p>Miel\u0151tt tov\u00e1bbmenn\u00e9l a k\u00f6vetkez\u0151 feladatra, egy k\u00e9perny\u0151ment\u00e9st kell k\u00e9sz\u00edtened.</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat3.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Game.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>Game</code> oszt\u00e1ly <code>BikeThreadFunction</code> f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-4-gyoztes-bicikli-megvalositasa","title":"Feladat 4 \u2013 Gy\u0151ztes bicikli megval\u00f3s\u00edt\u00e1sa","text":"<p>Val\u00f3s\u00edtsd meg a gy\u0151ztes bicikli meghat\u00e1roz\u00e1s\u00e1nak \u00e9s megjelen\u00edt\u00e9s\u00e9nek logik\u00e1j\u00e1t, a k\u00f6vetkez\u0151 ir\u00e1nyelveknek megfelel\u0151en:</p> <ul> <li>A biciklik k\u00f6z\u00fcl az a gy\u0151ztes, mely el\u0151sz\u00f6r \u00e9ri ez a c\u00e9lvonalat (a poz\u00edci\u00f3ja el\u0151sz\u00f6r \u00e9ri el a <code>FinishLinePosition</code> tagv\u00e1ltoz\u00f3 \u00e1ltal meghat\u00e1rozott \u00e9rt\u00e9ket).</li> <li>A megold\u00e1s sor\u00e1n haszn\u00e1ld fel, hogy a <code>Bike</code> oszt\u00e1lyban m\u00e1r van egy <code>isWinner</code> v\u00e1ltoz\u00f3, mely \u00e9rt\u00e9ke kezdetben hamis, \u00e9s a <code>SetAsWinner</code> m\u0171velettel igazz\u00e1 tehet\u0151, illetve az \u00e9rt\u00e9ke az <code>IsWinner</code> tulajdons\u00e1ggal lek\u00e9rdezhet\u0151.</li> <li>Annak eld\u00f6nt\u00e9se, hogy az adott bicikli lett-e a gy\u0151ztes, a <code>Game</code> oszt\u00e1lyban biciklihez tartoz\u00f3 sz\u00e1lf\u00fcggv\u00e9ny feladata, ide tedd a d\u00f6nt\u00e9si logik\u00e1t.</li> <li> Kulcsfontoss\u00e1g\u00fa, hogy pontosan egy gy\u0151ztes lehet. Ha egyn\u00e9l t\u00f6bb bicikli ker\u00fcl gy\u0151ztesnek megjel\u00f6l\u00e9sre (vagyis a <code>Bike</code> oszt\u00e1ly <code>SetAsWinner</code> m\u0171velete t\u00f6bb biciklire is megh\u00edv\u00e1sra ker\u00fcl), az nagyon s\u00falyos hiba!</li> <li>A <code>Game</code> oszt\u00e1lyban dolgozz.</li> </ul> <p>A logika megval\u00f3s\u00edt\u00e1sa el\u0151tt egy kicsit finom\u00edtunk a megjelen\u00edt\u00e9sen, annak \u00e9rdek\u00e9ben, hogy a gy\u0151ztes bicikli megk\u00fcl\u00f6nb\u00f6ztethet\u0151 legyen a t\u00f6bbit\u0151l a fel\u00fcleten. Ehhez a <code>MainWindow</code> oszt\u00e1ly <code>UpdateUI</code> f\u00fcggv\u00e9ny\u00e9be tegy\u00fcnk be egy kis plusz logik\u00e1t: ha az adott bicikli gy\u0151ztes lett, akkor a megjelen\u00edt\u00e9s\u00e9t v\u00e1ltoztassuk \u00e1t egy serlegre. Ehhez a biciklihez tartoz\u00f3 <code>TextBlock</code> sz\u00f6veg\u00e9t kell \"%\"-ra v\u00e1ltoztatni:</p> <pre><code>private void UpdateUI()\n{\n    for (int i = 0; i &lt; game.Bikes.Count;i++)\n    {\n        ...\n\n        if (bike.IsWinner)\n            tbBike.Text = \"%\";\n    }\n}\n</code></pre> <p>A logik\u00e1t ezt k\u00f6vet\u0151en \u00f6n\u00e1ll\u00f3an val\u00f3s\u00edtsd meg, az al\u00e1bbi ir\u00e1nyleveknek \u00e9s tippeknek megfelel\u0151en.</p> <p>Ir\u00e1nyelvek \u00e9s tippek a megold\u00e1shoz</p> <ul> <li>Annak eld\u00f6nt\u00e9s\u00e9re, hogy volt-e m\u00e1r gy\u0151ztes, a <code>Game</code> oszt\u00e1lyban vezess be egy <code>bool hasWinner</code> seg\u00e9dv\u00e1ltoz\u00f3t (ez azt jelezze, volt-e m\u00e1r gy\u0151ztes hirdetve).</li> <li>El\u0151ad\u00e1son egy nagyon hasonl\u00f3 p\u00e9lda szerepelt a \"A lock haszn\u00e1lata\" t\u00e9mak\u00f6rben, r\u00e9szletes magyar\u00e1zattal.</li> <li>A megold\u00e1snak akkor is j\u00f3l kell m\u0171k\u00f6dnie (egy gy\u0151ztes lehet \u00e9s nem t\u00f6bb), ha a <code>hasWinner</code> felt\u00e9telvizsg\u00e1lat \u00e9s a <code>hasWinner</code> igazba \u00e1ll\u00edt\u00e1sa k\u00f6z\u00e9 egy hosszabb mesters\u00e9ges k\u00e9sleltet\u00e9s ker\u00fcl, azt szimul\u00e1lva, hogy a sz\u00e1l \"pechesen\" itt veszti el a fut\u00e1si jog\u00e1t, \u00e9s a dep\u00f3b\u00f3l a biciklik \"azonnal\" tov\u00e1bb vannak engedve (vagyis k\u00f6zel egyszerre \u00e9rnek a c\u00e9lba). </li> <li>A tesztel\u00e9s idej\u00e9re tegy\u00e9l ide (a felt\u00e9telvizsg\u00e1lat \u00e9s <code>hasWinner</code> \u00e1ll\u00edt\u00e1sa k\u00f6z\u00e9) egy <code>Thread.Sleep(2000)</code> sort, melyet tesztel\u00e9s ut\u00e1n kommentezz ki. Term\u00e9szetesen \u00fagy tesztelj, hogy a bicikliket a dep\u00f3b\u00f3l min\u00e9l ink\u00e1bb egyszerre engedd tov\u00e1bb a gombkattint\u00e1sokkal, hogy a biciklik kb. egyszerre \u00e9rjenek a c\u00e9lba. Ha t\u00f6bb gy\u0151ztes is lenne (mert nem j\u00f3 a megold\u00e1sod), akkor a c\u00e9lban t\u00f6bb bicikli is serlegg\u00e9 v\u00e1lik!</li> </ul> <p>BEADAND\u00d3</p> <p>Miel\u0151tt tov\u00e1bbmenn\u00e9l a k\u00f6vetkez\u0151 feladatra, egy k\u00e9perny\u0151ment\u00e9st kell k\u00e9sz\u00edtened.</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat4.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Game.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>Game</code> oszt\u00e1ly <code>BikeThreadFunction</code> f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-5-kolcsonos-kizaras-valamint-volatile","title":"Feladat 5 \u2013 K\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s, valamint volatile","text":"<p>Az el\u0151z\u0151 feladatban l\u00e1ttuk, hogy a hasWinner lek\u00e9rdez\u00e9s\u00e9t \u00e9s be\u00e1ll\u00edt\u00e1s\u00e1t \"oszthatatlann\u00e1\", \"atomiv\u00e1\" kellett tegy\u00fck, vagyis ennek sor\u00e1n meg kellett val\u00f3s\u00edtsuk a k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1st. K\u00e9rd\u00e9s, van-e esetleg m\u00e1r olyan m\u00e1s logika is az alkalmaz\u00e1sban, ahol ezt meg kellet volna tenni a konzisztencia garant\u00e1l\u00e1s\u00e1nak \u00e9rdek\u00e9ben. Ehhez azt kell megvizsg\u00e1ljuk, melyek azok a v\u00e1ltoz\u00f3k, melyeket t\u00f6bb sz\u00e1lb\u00f3l is \u00edrunk (vagy egyikb\u0151l \u00edrunk \u00e9s m\u00e1sikb\u00f3l olvasunk). A k\u00f6vetkez\u0151k \u00e9rintettek:</p> <ul> <li><code>Bike</code> oszt\u00e1ly <code>position</code> tagja. Ezt a biciklik sz\u00e1lf\u00fcggv\u00e9nye m\u00f3dos\u00edtja a <code>+=</code> oper\u00e1torral, a f\u0151sz\u00e1l pedig olvassa a <code>Position</code> property seg\u00edts\u00e9g\u00e9vel a megjelen\u00edt\u00e9s sor\u00e1n. K\u00e9rd\u00e9s, lehet-e ebb\u0151l b\u00e1rmif\u00e9le inkonzisztencia (mert ha igen, akkor meg kellene val\u00f3s\u00edtani a k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1st, pl. a <code>lock</code> utas\u00edt\u00e1s seg\u00edts\u00e9g\u00e9vel). Ez m\u00e9lyebb \u00e1tgondol\u00e1st ig\u00e9nyel. Az <code>int</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3k olvas\u00e1sa \u00e9s \u00edr\u00e1sa (sima <code>=</code> oper\u00e1tor) atomi, \u00edgy ez rendben is volna. Csakhogy itt m\u00f3dos\u00edt\u00e1sra nem az <code>=</code>, hanem <code>+=</code> oper\u00e1tort haszn\u00e1ljuk. A <code>+=</code> oper\u00e1tor nem atomi, t\u00f6bb l\u00e9p\u00e9sb\u0151l \u00e1ll: v\u00e1ltoz\u00f3 kiolvas\u00e1sa, n\u00f6vel\u00e9se, majd vissza\u00edr\u00e1sa (ha nem tiszta, pontosan mi\u00e9rt \u00e9s milyen probl\u00e9ma l\u00e9phet fel, mindenk\u00e9ppen n\u00e9zd \u00e1t a kapcsol\u00f3d\u00f3 el\u0151ad\u00e1s di\u00e1t). \u00cdgy, ha t\u00f6bb sz\u00e1l is haszn\u00e1lja \"egyszerre\" a <code>+=</code> oper\u00e1tort ugyanazon a v\u00e1ltoz\u00f3n, akkor abb\u00f3l inkonzisztencia lehet. De ne kapkodjunk, gondoljunk bele jobban: a mi eset\u00fcnkben egyszerre egy sz\u00e1l h\u00edv <code>+=</code>-t, a m\u00e1sik sz\u00e1lunk csak olvassa a <code>position</code> \u00e9rt\u00e9k\u00e9t. Ebb\u0151l nem lehet inkonzisztencia, mert egyszer\u0171en csak arr\u00f3l van sz\u00f3, hogy az olvas\u00e1s el\u0151tt vagy a n\u00f6vel\u00e9s el\u0151tti \u00e9rt\u00e9ket, vagy az ut\u00e1ni \u00e9rt\u00e9ket kapja meg az olvas\u00f3 sz\u00e1l (ha szinte pont egyszerre olvas a += oper\u00e1tor-t v\u00e9grehajt\u00f3 m\u00e1sik sz\u00e1llal). \u00cdgy kijelenthetj\u00fck, ennek kapcs\u00e1n nincs sz\u00fcks\u00e9g k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra.</li> <li><code>Bike</code> oszt\u00e1ly <code>isWinner</code> tagja. Ezt a biciklik sz\u00e1lf\u00fcggv\u00e9nye m\u00f3dos\u00edtja a <code>SetAsWinner</code> h\u00edv\u00e1s\u00e1val, a f\u0151sz\u00e1l pedig olvassa az <code>IsWinner</code> property seg\u00edts\u00e9g\u00e9vel a megjelen\u00edt\u00e9s sor\u00e1n. T\u00edpusa <code>bool</code>, melynek \u00edr\u00e1sa \u00e9s olvas\u00e1sa atomi, \u00edgy nincs sz\u00fcks\u00e9g k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra.</li> <li><code>Game</code> oszt\u00e1ly <code>hasWinner</code> tagja. T\u00edpusa bool, melynek \u00edr\u00e1sa \u00e9s olvas\u00e1sa atomi, \u00edgy amiatt nincs sz\u00fcks\u00e9g k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra. De volt egy plusz felt\u00e9tel\u00fcnk: csak egy gy\u0151ztes lehet versenyben, emiatt m\u00e9gis sz\u00fcks\u00e9g volt k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra (ezt az el\u0151z\u0151 feladatban meg is tett\u00fck).</li> </ul> <p>Azt is mondhatn\u00e1nk, hogy a fenti h\u00e1rom v\u00e1ltoz\u00f3 tekintet\u00e9ben akkor minden rendben is van, de ez nincs \u00edgy. Amikor a v\u00e1ltoz\u00f3k \u00e9rt\u00e9k\u00e9t az egyik sz\u00e1l m\u00f3dos\u00edtja, el\u0151fordulhat, hogy a v\u00e1ltoz\u00f3k \u00e9rt\u00e9k\u00e9t a rendszer cache-eli (pl. regiszterben), \u00edgy a m\u00e1sik sz\u00e1l a v\u00e1ltoztat\u00e1s ut\u00e1n is a kor\u00e1bbi \u00e9rt\u00e9ket l\u00e1tja. Ennek megakad\u00e1lyoz\u00e1s\u00e1ra ezeket a v\u00e1ltoz\u00f3kat volatile-nak kell defini\u00e1lni a <code>volatile</code> kulcssz\u00f3val, mely a v\u00e1ltoz\u00f3 megv\u00e1ltoztat\u00e1sa ut\u00e1n garant\u00e1lja, hogy annak ki\u00edr\u00e1sa megt\u00f6rt\u00e9nik a mem\u00f3ri\u00e1ba, \u00e9s a m\u00e1sik sz\u00e1l friss \u00e9rt\u00e9ket olvas (a <code>volatile</code> m\u0171k\u00f6d\u00e9se enn\u00e9l valamivel \u00f6sszetettebb, el\u0151ad\u00e1son b\u0151vebben kifejt\u00e9sre ker\u00fcl). Fontos megjegyz\u00e9s: a <code>volatile</code> alkalmaz\u00e1s\u00e1ra nincs sz\u00fcks\u00e9g, ha az adott v\u00e1ltoz\u00f3t <code>lock</code> blokkb\u00f3l \u00edrjuk \u00e9s olvassuk, vagy az <code>Interlocked</code> oszt\u00e1ly seg\u00edts\u00e9g\u00e9vel m\u00f3dos\u00edtjuk. Amiatt csak a <code>position</code> \u00e9s az <code>isWinner</code> eset\u00e9ben vezess\u00fck be:</p> <pre><code>class Bike\n{\n    private volatile int position = 65;\n    private volatile bool isWinner;\n</code></pre>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-5-lepesek-naplozasa-nem-szalbiztos-net-osztalyok","title":"Feladat 5 \u2013 L\u00e9p\u00e9sek napl\u00f3z\u00e1sa (nem sz\u00e1lbiztos .NET oszt\u00e1lyok)","text":"<p>Val\u00f3s\u00edtsd meg a verseny sor\u00e1n a biciklik \u00e1ltal megtett minden egyes l\u00e9p\u00e9s napl\u00f3z\u00e1s\u00e1t a <code>Game</code> oszt\u00e1lyban egy (minden biciklire k\u00f6z\u00f6s) <code>List&lt;int&gt;</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3ba. A napl\u00f3zott \u00e9rt\u00e9kekkel nem kell semmit csin\u00e1lni (pl. megjelen\u00edteni sem). A megold\u00e1s sor\u00e1n ki kell haszn\u00e1lni, hogy a <code>Bike</code> oszt\u00e1ly <code>Step</code> m\u0171velete visszaadja a megtett l\u00e9p\u00e9st egy <code>int</code> v\u00e1ltoz\u00f3 form\u00e1j\u00e1ban, ezt kell napl\u00f3zni (csak bele kell tenni a list\u00e1ba).</p> Tipp a megold\u00e1shoz <p>Mivel a <code>List&lt;T&gt;</code> oszt\u00e1ly nem sz\u00e1lbiztos (nem thread safe), \u00e9s t\u00f6bb sz\u00e1lb\u00f3l is \u00edrunk bele, meg kell val\u00f3s\u00edtani a hozz\u00e1f\u00e9r\u00e9s sor\u00e1n a k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1st a <code>lock</code> utas\u00edt\u00e1s seg\u00edts\u00e9g\u00e9vel.</p> <p>System.Collections.Concurrent n\u00e9vt\u00e9r gy\u0171jtem\u00e9nyoszt\u00e1lyai</p> <p>Ha a <code>List&lt;T&gt;</code> helyett egy a c\u00e9lnak megfelel\u0151, <code>System.Collections.Concurrent</code> n\u00e9vt\u00e9rbeli oszt\u00e1ly objektum\u00e1ba napl\u00f3zn\u00e1nk (pl. <code>ConcurrentQueue</code>), akkor nem lenne sz\u00fcks\u00e9g a k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1s megval\u00f3s\u00edt\u00e1s\u00e1ra, mert ebben a n\u00e9vt\u00e9rben sz\u00e1lbiztos (thread safe) gy\u0171jtem\u00e9nyoszt\u00e1lyok tal\u00e1lhat\u00f3k.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat-6-felulet-frissitese-minden-valtozas-eseten-felhasznaloi-feluletelemek-elerese-munkaszalakbol","title":"Feladat 6 \u2013 Fel\u00fclet friss\u00edt\u00e9se minden v\u00e1ltoz\u00e1s eset\u00e9n (felhaszn\u00e1l\u00f3i fel\u00fcletelemek el\u00e9r\u00e9se munkasz\u00e1lakb\u00f3l)","text":"<p>Aktu\u00e1lis megold\u00e1sunkban a fel\u00fclet friss\u00edt\u00e9s\u00e9t periodikusan, adott id\u0151k\u00f6z\u00f6nk\u00e9nt val\u00f3s\u00edtjuk meg egy id\u0151z\u00edt\u0151 seg\u00edts\u00e9g\u00e9vel. Ezt a megold\u00e1st most lecser\u00e9lj\u00fck. Alak\u00edtsd \u00e1t a megold\u00e1st \u00fagy, hogy a fel\u00fclet friss\u00edt\u00e9se minden esetben azonnal megt\u00f6rt\u00e9njen, amikor a <code>Game</code> \u00e1llapota megv\u00e1ltozik (az id\u0151z\u00edtett friss\u00edt\u00e9st pedig m\u00e1r ne haszn\u00e1ld).</p> <p>A k\u00f6vetkez\u0151 fejezetben a lehets\u00e9ges megold\u00e1sok r\u00f6viden \u00e1ttekint\u00e9sre ker\u00fclnek, \u00e9s v\u00e1lasztunk is egyet k\u00f6z\u00fcl\u00fck, de el\u0151bb pr\u00f3b\u00e1ld magadt\u00f3l \u00e1tgondolni, milyen megold\u00e1st c\u00e9lszer\u0171 ehhez v\u00e1lasztani. Kulcsfontoss\u00e1g\u00fa, hogy csak olyan megold\u00e1s fogadhat\u00f3 el, mely nem vezet be az alkalmaz\u00e1slogik\u00e1ban (<code>Game</code> oszt\u00e1ly) f\u00fcgg\u0151s\u00e9get a fel\u00fcltett\u0151l. Eml\u00e9kezz\u00fcnk vissza, az alapelv\u00fcnk az volt, hogy az alkalmaz\u00e1slogika nem f\u00fcgghet semmilyen szinten a fel\u00fclet logik\u00e1t\u00f3l!</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#a-felulet-ertesitesenek-megvalositasa","title":"A fel\u00fclet \u00e9rtes\u00edt\u00e9s\u00e9nek megval\u00f3s\u00edt\u00e1sa","text":"<p>Alternat\u00edv\u00e1k:</p> <ol> <li>Alkalmazhatjuk az Observer tervez\u00e9si mint\u00e1t. Err\u0151l a f\u00e9l\u00e9v sor\u00e1n k\u00e9s\u0151bb fogunk tanulni, b\u00e1r \u00e9rdemes megjegyezni, hogy a C# esem\u00e9nyek is az Observer minta alapkoncepci\u00f3ira \u00e9p\u00fclnek.</li> <li>K\u00e9zenfekv\u0151 megold\u00e1s lehet egy C# esem\u00e9ny bevezet\u00e9se (pl. <code>BikeStateChanged</code> n\u00e9ven), melyet a <code>Game</code> oszt\u00e1ly akkor s\u00fct el, amikor egy bicikli \u00e1llapota megv\u00e1ltozott, param\u00e9terk\u00e9nt \u00e1tadva a bicikli objektumot. Ez egy kerek, \u00e1ltal\u00e1nos megold\u00e1s lenne: b\u00e1rmikor, b\u00e1rmely oszt\u00e1ly feliratkozhatna az esem\u00e9nyre. Ehhez - ha k\u00f6vetni szeretn\u00e9nk a Microsoft aj\u00e1nl\u00e1sokat - be kellene vezetni egy <code>EventArgs</code> lesz\u00e1rmazott oszt\u00e1lyt (esem\u00e9ny param\u00e9ter), \u00e9s be kellene vezetni egy \u00faj delegate t\u00edpust (vagy haszn\u00e1lhatn\u00e1nk a be\u00e9p\u00edtett <code>EventHandler&lt;TEventArgs&gt;</code> generikus delegate t\u00edpust).</li> <li> <p>Az el\u0151z\u0151 pontban eml\u00edtett C# esem\u00e9ny alap\u00fa megold\u00e1s teljesen \"korrekt\" lenne, ugyanakkor nek\u00fcnk nem felt\u00e9tlen c\u00e9lunk, hogy b\u00e1rmikor b\u00e1rmely oszt\u00e1ly feliratkozhasson az \u00e1llapotv\u00e1ltoz\u00e1s esem\u00e9nyre. Emiatt \u00e1tgondolhatunk egy \"c\u00e9lir\u00e1nyosabb\" megold\u00e1st (\u00e9s ezt is fogjuk alkalmazni). Ez, b\u00e1r delegate-et haszn\u00e1l, nem vezet be <code>event</code> esem\u00e9nyt, \u00e9s alapvet\u0151en csak egyetlen objektum sz\u00e1m\u00e1ra biztos\u00edt \u00e9rtes\u00edt\u00e9st/visszah\u00edv\u00e1st (a <code>MainWindow</code>-nak, hiszen \u0151 kell friss\u00edtse a fel\u00fclet\u00e9t, amikor v\u00e1ltozik egy bicikli \u00e1llapota). Ezen megk\u00f6zel\u00edt\u00e9s elemei a k\u00f6vetkez\u0151k:</p> <ul> <li><code>Game</code> oszt\u00e1ly, mint \"\u00e9rtes\u00edt\u0151\":<ul> <li>Azt a f\u00fcggv\u00e9nyt (delegate objektumot), melyet <code>Game</code> oszt\u00e1ly a biciklik \u00e1llapot\u00e1nak v\u00e1ltoz\u00e1sakor megh\u00edv (\u00e9rtes\u00edt\u00e9s/visszah\u00edv\u00e1s), a <code>PrepareRace</code> m\u0171velet param\u00e9terek\u00e9nt kapja meg a <code>Game</code> oszt\u00e1ly, melyet egy tagv\u00e1ltoz\u00f3ban el is t\u00e1rol.</li> <li>Ennek a param\u00e9ternek \u00e9s tagv\u00e1ltoz\u00f3nak a t\u00edpusa legyen <code>Action&lt;Bike&gt;</code> (az <code>Action</code> \u00e9s <code>Action&lt;T&gt;</code> t\u00edpusokr\u00f3l m\u00e1r kor\u00e1bban tanultunk).</li> <li>Amikor megv\u00e1ltozik egy bicikli \u00e1llapota (helye vagy \"nyertes\" \u00e1llapota a sz\u00e1lf\u00fcggv\u00e9nyben), akkor a <code>Game</code> oszt\u00e1ly h\u00edvja meg ezt a tagv\u00e1ltoz\u00f3ban t\u00e1rolt f\u00fcggv\u00e9nyt (de csak ha nem null, vagyis ez a f\u00fcggv\u00e9ny m\u00e1r be lett \u00e1ll\u00edtva, ill. a <code>?.Invoke</code> is haszn\u00e1lhat\u00f3), param\u00e9terk\u00e9nt \u00e1tadva neki a megv\u00e1ltozott bicikli objektumot. Ez\u00e1ltal \u00e9rtes\u00edti az el\u0151fizet\u0151t.</li> </ul> </li> <li><code>MainWindow</code>, mint \"el\u0151fizet\u0151\":<ul> <li>A <code>MainWindow</code> oszt\u00e1lyban be kell vezetni egy <code>UpdateBikeUI(Bike bike)</code> f\u00fcggv\u00e9nyt, \u00e9s a <code>Game.PrepareRace</code> h\u00edv\u00e1sakor ezt kell \u00e1tadni param\u00e9terk\u00e9nt (delegate objektumk\u00e9nt). Ebben az <code>UpdateBikeUI</code> f\u00fcggv\u00e9nyben kell gondoskodni arr\u00f3l, hogy a param\u00e9terk\u00e9nt kapott bicikli objektumhoz tartoz\u00f3 fel\u00fcletelem (<code>TextBlock</code>) friss\u00fclj\u00f6n.</li> <li>Az el\u0151z\u0151 pontban v\u00e1lik egy\u00e9rtelm\u0171v\u00e9, mi\u00e9rt <code>Action&lt;Bike&gt;</code> t\u00edpus\u00fa delegate-et haszn\u00e1ltunk, \u00e9s mi\u00e9rt nem pl. <code>Action</code>-t: a <code>Game</code> a \u00e9rtes\u00edt\u00e9s/visszah\u00edv\u00e1s sor\u00e1n \u00edgy meg tudja adni, mely bicikli v\u00e1ltozott, \u00e9s a visszah\u00edvott/beregisztr\u00e1lt f\u00fcggv\u00e9ny (eset\u00fcnkben <code>MainWindow.UpdateBikeUI</code>) \u00edgy megkapja ezt param\u00e9terben, \u00e9s \u00edgy tudja a megjelen\u00e9s\u00e9t friss\u00edteni (kapott bicikli \u00e1llapota alapj\u00e1n).</li> </ul> </li> <li>Az id\u0151z\u00edt\u0151 ind\u00edt\u00e1s\u00e1t (<code>MainWindow</code> konstruktorban <code>timer.Start()</code> h\u00edv\u00e1s) kommentezd ki (hiszen a fel\u00fclet friss\u00edt\u00e9s\u00e9t m\u00e1r a fenti <code>Action&lt;Bike&gt;</code>) alap\u00fa \u00e9rtes\u00edt\u00e9s/visszah\u00edv\u00e1s seg\u00edts\u00e9g\u00e9vel oldjuk meg.</li> </ul> </li> </ol> <p>Val\u00f3s\u00edtsd meg a fenti 3. pontban v\u00e1zolt \u00e9rtes\u00edt\u00e9st! A <code>MainWindow.UpdateBikeUI</code> implement\u00e1ci\u00f3j\u00e1t megadjuk seg\u00edts\u00e9gk\u00e9ppen (a l\u00e9nyege az, hogy a param\u00e9terben kapott <code>Bike</code> alapj\u00e1n friss\u00edti a biciklit megjelen\u00edt\u0151 <code>TextBlock</code>-ot):</p> <pre><code>private void UpdateBikeUI(Bike bike)\n{\n    // El\u0151fordulhat, hogy az UpdateBikeUI olyan kor\u00e1n h\u00edv\u00f3dik, hogy a\n    // bikeTextBlocks m\u00e9g nincs felt\u00f6ltve, ilyenkor m\u00e9g nem tudjuk friss\u00edteni\n    // a fel\u00fcletet, t\u00e9rj\u00fcnk vissza.\n    if (bikeTextBlocks.Count != game.Bikes.Count)\n        return;\n\n    int marginAdjustmentForWheel = 8;\n\n    // Biciklihez tartoz\u00f3 TextBlock kikeres\u00e9se (azonos t\u00f6mbindex alapj\u00e1n).\n    var tbBike = bikeTextBlocks[game.Bikes.IndexOf(bike)];\n\n    // Akkor m\u00e9g ne \u00e1ll\u00edtsuk a bicikli poz\u00edci\u00f3j\u00e1t, amikor a m\u00e9rete a layout sor\u00e1n nem\n    // ker\u00fclt meghat\u00e1roz\u00e1sra (k\u00fcl\u00f6nben ugr\u00e1lna a bicikli, hiszen al\u00e1bb, a marg\u00f3 be\u00e1ll\u00edt\u00e1sakor\n    // \"\u00e9rv\u00e9nytelen\" 0 sz\u00e9less\u00e9g\u00e9rt\u00e9kkel sz\u00e1moln\u00e1nk.\n    if (tbBike.ActualWidth == 0)\n        return;\n\n    // Az ablak 0,0 pontja az orig\u00f3, ehhez k\u00e9pest n\u00e9zz\u00fck a start/dep\u00f3/finish vonalat.\n    // A gomb jobb sz\u00e9l\u00e9n van a ker\u00e9k, de ezt a gomb bal oldal\u00e1ra kell mozgatni: ActualWidth-et ki kell vonni.\n    tbBike.Margin = new Thickness(bike.Position - tbBike.ActualWidth + marginAdjustmentForWheel, 0, 0, 0);\n\n    if (bike.IsWinner)\n        tbBike.Text = \"%\"; // display a cup\n}\n</code></pre> <p>Fontos</p> <p>A fenti l\u00e9p\u00e9sek/elvek megfelel\u0151 k\u00f6vet\u00e9se eset\u00e9n is fenn\u00e1ll, hogy megold\u00e1s m\u00e9g nem m\u0171k\u00f6d\u0151k\u00e9pes. Ha elind\u00edtjuk a versenyt, az al\u00e1bbi kiv\u00e9tel dob\u00f3dik az <code>UpdateBikeUI</code> f\u00fcggv\u00e9nyben a biciklihez tartoz\u00f3 <code>TextBlock</code> hozz\u00e1f\u00e9r\u00e9s sor\u00e1n: <code>System.Runtime.InteropServices.COMException: 'The application called an interface that was marshalled for a different thread. (0x8001010E (RPC_E_WRONG_THREAD))</code></p> <p>Mi ennek a hib\u00e1nak az oka? Miel\u0151tt az al\u00e1bbi eml\u00e9keztet\u0151t kinyitod, pr\u00f3b\u00e1lj magadt\u00f3l r\u00e1j\u00f6nni az el\u0151ad\u00e1son/laboron tanultak alapj\u00e1n.</p> Eml\u00e9keztet\u0151 <p>Egy WinUI fel\u00fcletelemhez/vez\u00e9rl\u0151h\u00f6z csak abb\u00f3l a sz\u00e1lb\u00f3l lehet hozz\u00e1f\u00e9rni, mely az adott fel\u00fcletelemet l\u00e9trehozta, ugyanis ezek a fel\u00fcletelemek nem sz\u00e1lbiztosak, \u00e9s kiv\u00e9tel dob\u00e1s\u00e1val jelzik, ha m\u00e9gis \u201erosszul\u201d pr\u00f3b\u00e1ljuk \u0151ket haszn\u00e1lni.</p> <p>A megold\u00e1st a k\u00f6vetkez\u0151 r\u00e9szfeladatban dolgozzuk ki.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#a-dispatcherqueue-alkalmazasa","title":"A DispatcherQueue alkalmaz\u00e1sa","text":"<p>Eset\u00fcnkben a konkr\u00e9t probl\u00e9m\u00e1t az okozza, hogy amikor a <code>Game</code> \u00e1llapota megv\u00e1ltozik, akkor <code>Game</code> oszt\u00e1lyban a v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u0151 delegate h\u00edv\u00e1sa a biciklikhez tartoz\u00f3 munkasz\u00e1lakon t\u00f6rt\u00e9nik, \u00edgy a beregisztr\u00e1lt <code>MainWindow.UpdateBikeUI</code> kezel\u0151f\u00fcggv\u00e9ny is ezekr\u0151l a sz\u00e1lakr\u00f3l h\u00edv\u00f3dik. Az <code>UpdateBikeUI</code> f\u00fcggv\u00e9nyben hozz\u00e1f\u00e9r\u00fcnk a fel\u00fcletelemekhez (biciklihez tartoz\u00f3 <code>TextBlock</code>- hoz). De ezeket a fel\u00fcletelemeket a f\u0151sz\u00e1lb\u00f3l hoztuk l\u00e9tre: \u00edgy csak a f\u0151 sz\u00e1lb\u00f3l szabad(na) hozz\u00e1juk f\u00e9rni.</p> <p> A probl\u00e9m\u00e1ra a <code>DispatcherQueue</code> alkalmaz\u00e1sa jelent megold\u00e1st, mellyel a munkasz\u00e1lakb\u00f3l a h\u00edv\u00e1st \"\u00e1t tudjuk j\u00e1tszani\" a f\u0151sz\u00e1lba, melyb\u0151l m\u00e1r hozz\u00e1 tudunk f\u00e9rni a vez\u00e9rl\u0151kh\u00f6z. A <code>DispatcherQueue</code> alkalmaz\u00e1sa el\u0151ad\u00e1son \u00e9s a kapcsol\u00f3d\u00f3 laboron is r\u00e9szletesen ismertet\u00e9sre ker\u00fclt.</p> <p>Feladat: m\u00f3dos\u00edtsd \u00fagy a <code>MainWindow.UpdateBikeUI</code> f\u00fcggv\u00e9nyt, hogy a <code>DispatcherQueue</code> alkalmaz\u00e1s\u00e1val a megfelel\u0151 sz\u00e1lb\u00f3l t\u00f6rt\u00e9njen a fel\u00fcletelemekhez t\u00f6rt\u00e9n\u0151 hozz\u00e1f\u00e9r\u00e9s (\u00e9s \u00edgy a mostani kiv\u00e9telt el tudd ker\u00fclni).</p> <p>BEADAND\u00d3</p> <p>Miel\u0151tt tov\u00e1bbmenn\u00e9l a k\u00f6vetkez\u0151 feladatra, egy k\u00e9perny\u0151ment\u00e9st kell k\u00e9sz\u00edtened.</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat6.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>MainWindow.xaml.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>MainWindow</code> oszt\u00e1ly <code>UpdateBikeUI</code> f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul> <p>Hasonl\u00f3 j\u00e1t\u00e9k megval\u00f3s\u00edt\u00e1sa a gyakorlatban</p> <p>L\u00e9nyeges, hogy egy hasonl\u00f3 \"j\u00e1t\u00e9k\" megval\u00f3s\u00edt\u00e1s\u00e1ra nem szoktunk sz\u00e1lakat ind\u00edtani: a biciklik l\u00e9ptet\u00e9s\u00e9re egy timer sokkal praktikusabb lenne, mert az eg\u00e9sz j\u00e1t\u00e9k egysz\u00e1l\u00fa maradhatna, \u00e9s elker\u00fclhetn\u00e9nk sz\u00e1mos, a t\u00f6bbsz\u00e1l\u00fas\u00e1gb\u00f3l ad\u00f3d\u00f3 neh\u00e9zs\u00e9get (jelen feladat keret\u00e9ben a c\u00e9lunk \u00e9rtelemszer\u0171en pont a t\u00f6bbsz\u00e1l\u00fas\u00e1g t\u00e9mak\u00f6r\u00e9nek gyakorl\u00e1sa volt).</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#opcionalis-feladat-2-imsc-pontert","title":"Opcion\u00e1lis feladat \u2013 2 IMSc pont\u00e9rt","text":""},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#feladat","title":"Feladat","text":"<p>Tedd lehet\u0151v\u00e9 a biciklik gombkattint\u00e1sra t\u00f6rt\u00e9n\u0151 meg\u00e1ll\u00edt\u00e1s\u00e1t:</p> <ul> <li>Helyezz el egy gombot jobbra a t\u00f6bbit\u0151l, Stop Race felirattal.</li> <li>A Stop Race gombra kattint\u00e1s \u00e1ll\u00edtsa meg az \u00f6sszes biciklit, \u00e9s \u00e1ll\u00edtsa le a bicikliket futtat\u00f3 sz\u00e1lakat is. Ehhez vezess be egy <code>StopRace</code> publikus f\u00fcggv\u00e9nyt a <code>Game</code> oszt\u00e1lyba.</li> <li>A verseny ak\u00e1r az elind\u00edt\u00e1sa el\u0151tt is le\u00e1ll\u00edthat\u00f3 legyen.</li> <li>A <code>StopRace</code> m\u0171velet sz\u00e1lak le\u00e1ll\u00edt\u00e1sa ut\u00e1n v\u00e1rja meg, m\u00edg valamennyi sz\u00e1l val\u00f3ban be is fejezi a fut\u00e1s\u00e1t.</li> <li>A verseny le\u00e1ll\u00edt\u00e1sa ut\u00e1n (Stop Race kattint\u00e1s) semelyik gombra ne lehessen kattintani (minden gomb legyen letiltva, <code>IsEnabled</code> tulajdons\u00e1gukat \u00e1ll\u00edtsuk hamisba).</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/#megoldas","title":"Megold\u00e1s","text":"<p>A k\u00f6vetkez\u0151kben megadjuk a feladat megold\u00e1s\u00e1nak n\u00e9h\u00e1ny fontos elem\u00e9t:</p> <ul> <li>Tegy\u00e9l fel egy Stop Race gombot a fel\u00fcletre, k\u00e9sz\u00edts hozz\u00e1 kezel\u0151f\u00fcggv\u00e9nyt, \u00e9s ebb\u0151l meg kell h\u00edvni az \u00fajonnan bevezetend\u0151 <code>Game.StopRace</code> f\u00fcggv\u00e9nyt.</li> <li>A meg\u00e1ll\u00edt\u00e1shoz sz\u00fcks\u00e9g lesz egy jelz\u00e9sre a bicikliket futtat\u00f3 sz\u00e1l fel\u00e9. Ez legyen egy <code>bool</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3, amelyet a bicikliket futtat\u00f3 sz\u00e1l ciklusa figyel. Vedd fel ezt <code>raceEnded</code> n\u00e9ven, \u00e9s m\u00f3dos\u00edtsd a sz\u00e1lf\u00fcggv\u00e9nyt, hogy ha ennek \u00e9rt\u00e9ke igaz lesz, a sz\u00e1l fejezze be a fut\u00e1s\u00e1t (t\u00e9rjen vissza).</li> <li>Az el\u0151bb bevezetett bool v\u00e1ltoz\u00f3 \u00f6nmag\u00e1ban nem lesz el\u00e9g. Hiszen, amikor a bicikli a startvonaln\u00e1l vagy a dep\u00f3ban v\u00e1r, akkor a sz\u00e1la blokkolt \u00e1llapotban van (esem\u00e9ny jelz\u00e9sre v\u00e1r), ekkor nem tudja a <code>raceEnded</code>bool v\u00e1ltoz\u00f3t vizsg\u00e1lni. Emiatt be kell vezetni fel egy \u00faj <code>ManualResetEvent</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3t, amely a le\u00e1ll\u00edt\u00e1s esem\u00e9nyt fogja jelezni (\u00e9s v\u00e1rakozni is lehet r\u00e1).</li> <li>Ezt az esem\u00e9nyt a <code>bool</code> v\u00e1ltoz\u00f3val egy\u00fctt a Stop Race gombra val\u00f3 kattint\u00e1s sor\u00e1n kell jelzettbe \u00e1ll\u00edtani (a <code>Game.StopRace</code>-ben).</li> <li>A bicikliket mozgat\u00f3 sz\u00e1lf\u00fcggv\u00e9nyben kommentezd ki (ne t\u00f6r\u00f6ld!) az eddigi v\u00e1rakoz\u00e1st megval\u00f3s\u00edt\u00f3 k\u00f3dr\u00e9szeket, \u00e9s k\u00e9sz\u00edts egy \u00faj megold\u00e1st az el\u0151bb felvett le\u00e1ll\u00edt\u00e1st jelz\u0151 <code>ManualResetEvent</code> seg\u00edts\u00e9g\u00e9vel. A v\u00e1rakoz\u00e1sokra tov\u00e1bbra is sz\u00fcks\u00e9g lesz, azonban a v\u00e1rakoz\u00f3 \u00e1llapotb\u00f3l akkor is ki kell l\u00e9pni, ha a le\u00e1ll\u00edt\u00e1st jelz\u0151 <code>ManualResetEvent</code> esem\u00e9ny lesz jelzett.</li> <li>Ha le\u00e1ll\u00edt\u00e1s t\u00f6rt\u00e9nt, a sz\u00e1l fut\u00e1s\u00e1t be kell fejezni (a sz\u00e1lf\u00fcggv\u00e9nyb\u0151l ki kell l\u00e9pni, pl. egy <code>return</code> utas\u00edt\u00e1ssal).</li> <li>A <code>Game.StopRace</code> m\u0171velet\u00e9ben a sz\u00e1laknak t\u00f6rt\u00e9n\u0151 jelz\u00e9s ut\u00e1n meg kell v\u00e1rni, m\u00edg a sz\u00e1lak val\u00f3ban ki is l\u00e9pnek. Ehhez az egyes biciklikhez tartoz\u00f3 sz\u00e1l objektumokra kell sorban <code>Join()</code>-t h\u00edvni. Ahhoz, hogy ez megtehet\u0151 legyen, a sz\u00e1lak ind\u00edt\u00e1sakor a sz\u00e1l objektumokat el kell t\u00e1rolni egy tagv\u00e1ltoz\u00f3ban (pl. egy <code>List&lt;Thread&gt;</code> -ben)</li> </ul> <p>Megjegyz\u00e9s: sz\u00e1lak kil\u00e9ptet\u00e9s\u00e9re alternat\u00edv megold\u00e1s lett volna a bool \u00e9s <code>ManualResetEvent</code> bevezet\u00e9se helyett a sz\u00e1lakra <code>Interrupt</code> m\u0171velet h\u00edv\u00e1sa, \u00e9s a sz\u00e1lf\u00fcggv\u00e9nyekben az ennek hat\u00e1s\u00e1ra kiv\u00e1lt\u00f3d\u00f3 <code>ThreadInterruptedException</code> elkap\u00e1sa. Ez a t\u00e9mak\u00f6r el\u0151ad\u00e1son ker\u00fclt ismertet\u00e9sre.</p> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>Feladat_IMSc.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Game.cs</code> megnyitva,</li> <li>VS-ben zoomolj \u00fagy, hogy a <code>Game</code> oszt\u00e1ly sz\u00e1lf\u00fcggv\u00e9nye f\u00fcggv\u00e9nye l\u00e1that\u00f3 legyen, az el\u0151t\u00e9rben pedig az alkalmaz\u00e1sod ablaka.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/","title":"4<sup>th</sup> Homework \u2013 Developing multithreaded applications","text":""},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#introduction","title":"Introduction","text":"<p>This independent homework builds upon the content covered in the lectures on concurrent/multithreaded application development. Its practical background is based on the lab session: Lab 4 \u2013 Developing multithreaded applications.</p> <p>With this foundation, the tasks in this assignment can be completed using the short guidelines following each task description. The purpose of this homework is to deepen your understanding of the following concepts:</p> <ul> <li>Starting and stopping threads, thread functions</li> <li>Signaling and waiting for signals (<code>ManualResetEvent</code>, <code>AutoResetEvent</code>)</li> <li>Mutual exclusion using <code>lock</code></li> <li>Accessing WinUI UI elements from worker threads</li> <li>Practicing the use of delegates (<code>Action&lt;T&gt;</code>)</li> <li>Practicing UI design: using timers, manipulating UI elements from code-behind (not directly related to threading)</li> </ul> <p>The required development environment is the usual one, described here \u2014 including the required Windows App SDK.</p> <p>Checker Information</p> <p>There is no functional automatic pre-checker for this homework: although a check runs after each push, it only verifies that neptun.txt is filled out and that there are no compile errors. The actual evaluation will be carried out by the lab instructors after the deadline.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#submission-process","title":"Submission process","text":"<ul> <li>The process is similar to previous homework assignments. Use GitHub Classroom to create your repository. The invitation link is available on Teams and Aut portal on the course homepage. Make sure to use the correct invitation link for this specific assignment (each homework has a different URL). Clone the repository that is created \u2014 it will contain the expected structure for your solution. After completing the tasks, commit and push your work.</li> <li>Fill in your Neptun code in the neptun.txt file!</li> <li>Open and work in the provided <code>MultiThreadedApp.sln</code> file from the cloned folder.</li> <li> Some tasks require you to submit screenshots showing parts of your solution. These screenshots serve as proof that the work is your own. The exact content expected in each screenshot is described in the task instructions. Screenshots must be included in your submission and placed in the root folder of your repository (next to neptun.txt). These will be uploaded to GitHub along with the rest of the repository. Since your repository is private, only instructors will have access to it. If a screenshot contains any information you do not wish to share, you may blur or redact that part before uploading.</li> </ul> <p>Task 0 \u2013 Overview of the starter solution</p> <p>In this assignment, you'll be developing an application that simulates a bicycle race. A core design principle of the implementation is the separation of application logic and UI: The application logic must not depend on the UI in any way. The UI, naturally, does depend on the application logic, as it reflects its current state.</p> <p>The provided starter solution already includes some logic related to both the application and the UI. Let\u2019s run the application and take a look at its interface:</p> <p></p> <p>-The top section of the window displays the race track. On the left, bicycles are lined up. The start line, a mid-race checkpoint (depot), and the finish line are shown further to the right.  - The bottom section contains buttons for controlling the race. These buttons are not yet functional, but the following behavior will be implemented:     - <code>Prepare Race</code>: Prepares the race by creating bicycle objects and lining them up at the start line.     - <code>Start Race</code>: Starts the race, causing bicycles to compete and advance toward the depot, where they will wait.     - <code>Start Next Bike From Depot</code>: Releases one bicycle from the depot toward the finish line. This button can be pressed multiple times\u2014each press allows one more bicycle to continue.</p> <p>The following animation illustrates what the final working simulation should look like:</p> <p></p> <p>Simulation mechanics work as folloes (not yet implemented): - Each bicycle will be associated with its own separate thread. - The race simulation is structured into iterations: in each iteration, a thread (if not waiting at the starting gate or in the depot) will advance its bicycle forward by a random value. This continues until the bicycle reaches the finish line.</p> <p>You can toggle between light and dark themes using the keyboard shortcut ++Ctrl+T++. This function is already implemented.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#application-logic","title":"Application logic","text":"<p>In the starter framework, the application logic classes are only partially implemented. These classes are located in the <code>AppLogic</code> folder/namespace. Here's an overview of their structure and current functionality:</p> <ul> <li><code>Bike</code>: Represents a single bicycle in the race, with the following properties: start number, current position on the track, an a flag that indicates whether this bike won the race. The <code>Step</code> method is implemented to step the bike by a random distance during the race.</li> <li><code>Game</code>: Handles the core logic for controlling the game (this could be split into smaller parts, but for simplicity, we will primarily work in this class).<ul> <li>Constants defining the positions of the race track elements: <code>StartLinePosition</code>,  <code>DepoPosition</code>, <code>FinishLinePosition</code></li> <li>A list of bicycles in the race: <code>Bikes</code></li> <li><code>PrepareRace</code> method: Prepares the race by creating the bikes. Currently uses a helper method CreateBike() to create 3 bikes. This method will also be responsible for lining the bikes up at the start line.</li> <li><code>StartBikes</code> method: Not yet implemented. Starts the race. Each bike thread competes to reach the depot, where they will then wait.</li> <li><code>StartNextBikeFromDepo</code>: Not yet implemented. Starts one bike from the depot toward the finish line. Only a single bike is started per button click.</li> </ul> </li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#display","title":"Display","text":"<p>The UI layer in the starter project is already well-prepared, though you\u2019ll still be making adjustments and enhancements.</p> <p>The UI is defined in <code>MainWindow.xaml</code>, following these key principles:</p> <ul> <li>The main layout uses a standard <code>Grid</code> with two rows. The first row (with <code>*</code> height) contains the race track and bikes. The second row (with <code>Auto</code> height) contains a <code>StackPanel</code> holding the control buttons.</li> <li>The race track is composed of <code>Rectangle</code> objects (background, start line, depot, finish line), and text labels use <code>TextBlock</code> elements \u2014 some of which are rotated.</li> <li>All bicycles are placed inside a vertical <code>StackPanel</code>, with each bike represented by a <code>TextBlock</code> (Font: <code>Webdings</code>, character: <code>b</code>). (A FontIcon could have been used, but TextBlock was chosen for simplicity and familiarity.)</li> <li>All UI elements (track and bikes container) are positioned in row 0 of the Grid. Drawing order follows the declaration order in XAML. Elements are positioned using alignment and margins. The bike positions will be updated by setting the left margin on each <code>TextBlock</code>. An alternative layout approach would have been to use a <code>Canvas</code>, positioning elements using Left, Top, Width, and Height \u2014 but the current solution uses margin-based layout.</li> </ul> <p>Check the MainWindow.cs code-behind file as well. Key members and methods:</p> <ul> <li><code>game</code> field: A reference to the Game object, which holds the simulation state.</li> <li><code>bikeTextBlocks</code> field: A list for storing the <code>TextBlock</code> objects representing the bikes. Initially empty \u2014 you will manage this list as part of the implementation.</li> <li>Constructor: Sets the X positions of the start line, depot, and finish line using constants from the Game class. This is done by adjusting the left margin (<code>Margin</code>) of each rectangle (since the elements are left-aligned within their container). Registers the ++Ctrl+t++ keyboard shortcut via the <code>AddKeyboardAcceleratorToChangeTheme()</code> helper method to toggle between light and dark themes.</li> <li><code>PrepareRaceButton_Click</code>,  <code>StartRaceButton_Click</code>,  <code>StartNextFromDepoButton_Click</code>:  these are wired to the respective control buttons in the UI.</li> <li><code>UpdateUI</code> method: This method is crucial: it updates the UI based on the current state of the game. Iterates through all bikes and updates the TextBlock positions based on the bikes\u2019 Position values. This is done by adjusting the left margin of each bike's <code>TextBlock</code>. This method is not yet called anywhere, so the UI currently does not update during the simulation \u2014 you'll need to invoke this method later to reflect changes on screen.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-1-updating-the-ui","title":"Task 1 \u2013 Updating the UI","text":"<p>Right now, even if the game state changes during execution, the UI doesn't reflect it. The three bicycles are hardcoded in <code>MainWindow.xaml</code>, and the <code>UpdateUI()</code> method is never called. Before implementing the game logic, let\u2019s modify the UI logic so it can dynamically reflect the game's current state.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#dynamically-handling-any-number-of-bicycles","title":"Dynamically handling any number of bicycles","text":"<p>Currently, the XAML has three hardcoded <code>TextBlock</code> elements for bikes. This only allows three racers, which is limiting. Let\u2019s refactor the UI to support any number of bicycles. As a first step, remove the three hardcoded TextBlock definitions for the bicycles from <code>MainWindow.xaml</code> (comment out the three lines). After that, in the code-behind file, in the <code>PrepareRaceButton_Click</code> event handler, after preparing the race (the <code>game.PrepareRace()</code> call):</p> <ol> <li>Dynamically create a corresponding <code>TextBlock</code> object for each bicycle in the game object (<code>game.Bikes</code> property). The properties of the created TextBlock should exactly match those that were removed from the XAML file (<code>FontFamily</code>, <code>FontSize</code>, <code>Margin</code>, <code>Text</code>).</li> <li>Add the created <code>TextBlock</code> objects as children of the <code>StackPanel</code> named <code>bikesPanel</code> (the <code>TextBlock</code>s you commented out in the XAML were also children of this panel \u2014 check this!). Use <code>bikesPanel.Children.Add</code> to add them.</li> <li>Also add the created <code>TextBlock</code> objects to the <code>bikeTextBlocks</code> list. This is important \u2014 as seen in the code \u2014 because the <code>UpdateUI</code> method uses the <code>bikeTextBlocks</code> list to locate the <code>TextBlock</code> corresponding to each bike (it matches them by array index).</li> </ol> <p>The application's behavior will change slightly (this is intentional): no bicycles will appear at startup \u2014 they will only be displayed after clicking the <code>Prepare Race</code> button.</p> <p>Try to implement the solution yourself by following the steps above, then verify that your implementation generally matches the solution described.</p> Solution <pre><code>foreach (var bike in game.Bikes)\n{\n    var bikeTextBlock = new TextBlock()\n    {\n        Text = \"b\",\n        FontFamily = new FontFamily(\"Webdings\"),\n        FontSize = 64,\n        Margin = new Thickness(10, 0, 0, 0)\n    };\n\n    bikesPanel.Children.Add(bikeTextBlock);\n    bikeTextBlocks.Add(bikeTextBlock);\n}\n</code></pre>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#implementing-ui-refresh","title":"Implementing UI refresh","text":"<p>Now we have exactly as many <code>TextBlock</code> elements as there are bikes in the game object. And we can refresh the display at any time using the <code>UpdateUI</code> method \u2014 to reflect the current state of <code>game</code>. The key question now is: when should we call this function? In other words, when should we update the UI? There are several possible strategies:</p> <ul> <li>a) Every time the <code>Game</code> state changes.</li> <li>b) At regular intervals (e.g., every 100 ms), using a timer to update the UI \"continuously.\"</li> </ul> <p>Both approaches have their pros and cons. Option b) is often simpler \u2014 you don\u2019t need to track exactly when the <code>Game</code> state changes. However, it may trigger unnecessary updates if nothing changed. On the other hand, it's more efficient in cases where changes are frequent \u2014 we don\u2019t need to refresh the UI for every little update; just refresh periodically, which is good enough visually. For simplicity, we'll go with option b) \u2014 periodic updates using a timer.</p> <p>In WinUI 3, for handling periodic events (especially when UI elements need to be accessed from the timer), it is recommended to use the <code>DispatcherTimer</code> class.</p> <p>Add a field to <code>MainWindow</code>:</p> <pre><code>    private DispatcherTimer timer;\n</code></pre> <p>Next, in the constructor of MainWindow, instantiate the timer, assign an event handler to its <code>Tick</code> event (this will be called periodically), set the interval to 100 milliseconds using the <code>Interval</code> property, and start the timer:</p> <pre><code>public MainWindow()\n{\n    ...\n\n    timer = new DispatcherTimer();\n    timer.Tick += Timer_Tick;\n    timer.Interval = TimeSpan.FromMilliseconds(100);\n    timer.Start();\n}\n\nprivate void Timer_Tick(object sender, object e)\n{\n    UpdateUI();\n}\n</code></pre> <p>As you can see, the UI is refreshed in the timer\u2019s event handler by calling <code>UpdateUI</code>.</p> <p>The question is: how can we test whether our solution is working correctly \u2014 specifically, whether the <code>Timer_Tick</code> event handler is actually being called every 100 ms? To verify this, temporarily trace the current time (formatted appropriately) to the Visual Studio Output window from within the event handler:</p> <pre><code>private void Timer_Tick(object sender, object e)\n{\n    System.Diagnostics.Trace.WriteLine($\"Time: {DateTime.Now.ToString(\"hh:mm:ss.fff\")}\");\n\n    UpdateUI();\n}\n</code></pre> <p>The <code>Trace.WriteLine</code> method writes a line to the Visual Studio Output window, and <code>DateTime.Now</code> is used to get the current time. We format it into a readable string using the <code>ToString</code> method. Run the application (make sure to run it in debug mode, i.e. by pressing ++F5++), and check the Visual Studio Output window to confirm that a new line appears every 100 ms. If everything works correctly, comment out the trace line.</p> <p>Precision of DispatcherTimer</p> <p>You may observe that the <code>DispatcherTimer</code> is not particularly precise, but it is perfectly suitable for our needs. One important characteristic is that it runs on the UI thread (its <code>Tick</code> event is raised there), which means we can access and modify UI elements directly from within the handler (<code>Timer_Tick</code>).</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#main-window-header","title":"Main window header","text":"<p> The title of the main window must be \"Tour de France - [YOUR NEPTUN CODE]\". For example, if your Neptun code is ABCDEF, the full title should be: Tour de France - ABCDEF. To do this, set the <code>Title</code> property in the <code>MainWindow.xaml</code> file to that string.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-2-preparing-the-race","title":"Task 2 \u2013 Preparing the race","text":"<p>Now that the display logic is complete, we shift our focus to application logic and thread management. From here on, we will primarily work in the <code>Game</code> class.</p> <p>Reminder:</p> <ul> <li>Each bicycle will have its own separate thread.</li> <li>The game/simulation runs in iterations: in each iteration, the thread: step the bike by a random distance (if not waiting at start or in depot), an continues until it reaches the finish line.</li> </ul> <p>Steps to implement:</p> <ol> <li>At the end of the <code>CreateBike</code> method in the <code>Game</code> class, start a new thread for the newly created bike.</li> <li>The thread function should be defined in the <code>Game</code> class.</li> <li>The <code>CreateBike</code> method should pass the bike object as a parameter to the thread function \u2014 this is the bike the thread will control.</li> <li>Ensure that threads do not prevent the application from closing. This means threads must be marked as background threads, so they don\u2019t block the process from exiting when the window is closed.</li> <li> <p>The thread function, for now, should implement the following loop:</p> <p>In each iteration:</p> <pre><code>- Move the bike using a random step by calling its `Step()` method.\n- Sleep the thread for 100 milliseconds.\n</code></pre> <p>This motion should continue until the bike reaches the start line, i.e., its position is equal to or greater than <code>StartLinePosition</code>.</p> </li> </ol> <p>Try to implement the above steps on your own based on what you learned in the lectures and lab sessions. You can test your solution using the debugger, or simply by running the application and clicking the <code>Prepare Race</code> button: if everything is working correctly, the bikes should gradually roll forward until they reach the start line.</p> <p>We will provide a solution for these steps as well, but you will learn much more if you try to solve it yourself first \u2014 use the provided solution only for verification purposes.</p> Solution <p>The thread method in the <code>Game</code> class:</p> <pre><code>void BikeThreadFunction(object bikeAsObject)\n{\n    Bike bike = (Bike)bikeAsObject;\n    while (bike.Position &lt;= StartLinePosition)\n    {\n        bike.Step();\n\n        Thread.Sleep(100);\n    }\n}\n</code></pre> <p>As you can see, for the thread function, we used the overload that takes an object parameter, not the parameterless version. This is because the thread function needs to receive the bike instance it will control.</p> <p>Starting the thread at the end of the <code>CreateBike</code> method:</p> <pre><code>private void CreateBike()\n{\n    ...\n\n    var thread = new Thread(BikeThreadFunction);\n    thread.IsBackground = true; // The thread must not block exiting the process\n    thread.Start(bike); // Giving the bike object as a parameter\n}\n</code></pre> <p>TO BE SUBMITTED</p> <p>Before moving on to the next task, you need to take a screenshot.</p> <p>Create a screenshot named <code>Task1.png</code> with the following setup:</p> <ul> <li>Start the application. If necessary, resize the window so it doesn\u2019t take up too much space on the screen.</li> <li>In the background, Visual Studio should be open with <code>Game.cs</code> visible.</li> <li>In Visual Studio, zoom so that both the <code>CreateBike</code> and <code>BikeThreadFunction</code> methods of the <code>Game</code> class are visible. In the foreground, your application window should be shown.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-2-starting-the-race","title":"Task 2 \u2013 Starting the race","text":"<p>Implement the race start from the start line and let it run until the bikes reach the depot, following these guidelines:</p> <ul> <li>The race should be started by the <code>StartBikes</code> method in the <code>Game</code> class, which is already called when the <code>Start Race</code> button is clicked.</li> <li>It is important that <code>StartBikes</code> does not start new threads. Instead, existing threads should be waiting, and they should resume execution as a result of the <code>StartBikes</code> method being called.</li> <li>If the user clicks the <code>Start Race</code> button before the bikes have reached the start line, the bikes do not need to stop at the start line anymore (but it is also acceptable if the application simply ignores the button press in such a case).</li> <li>The bikes should move all the way to the depot (until their position reaches the value defined by the <code>DepoPosition</code> field).</li> <li>Make your changes in the <code>Game</code> class.</li> </ul> <p>Hint for the solution</p> <p>Since all racers should start at the same time after waiting, it is recommended to use a <code>ManualResetEvent</code> object to handle the wait and starting mechanism.</p> <p>TO BE SUBMITTED</p> <p>Before moving on to the next task, you need to take a screenshot.</p> <p>Create a screenshot named <code>Task2.png</code> with the following setup:</p> <ul> <li>Start the application. If necessary, resize the window so it doesn\u2019t take up too much space on the screen.</li> <li>In the background, Visual Studio should be open with <code>Game.cs</code> visible.</li> <li>In Visual Studio, zoom so that the <code>BikeThreadFunction</code> method of the <code>Game</code> class is visible. In the foreground, your application window should be shown.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-3-releasing-racers-from-the-depot","title":"Task 3 \u2013 Releasing racers from the depot","text":"<p>Implement the logic for releasing racers from the depot and allowing them to race to the finish line, following these guidelines:</p> <ul> <li>Each racer should be released from the depot by the <code>StartNextBikeFromDepo</code> method in the <code>Game</code> class, which is already called when the <code>Start Next Bike From Depo</code> button is clicked.</li> <li>Each button click should allow only one racer to leave the depot.</li> <li>It is important that <code>StartNextBikeFromDepo</code> does not create new threads. Instead, existing threads should wait, and resume execution as a result of calling <code>StartNextBikeFromDepo</code>.</li> <li>If the user clicks the <code>Start Next Bike From Depo</code> button before any bikes have reached the depot, then a bike may continue as soon as it arrives (but it's also perfectly acceptable if the app simply ignores the button click in such cases).</li> <li>The bikes should move all the way to the finish line (until their position reaches the value defined by <code>FinishLinePosition</code>). Once a bike reaches the finish line, its associated thread should terminate.</li> <li>Make your changes in the <code>Game</code> class.</li> </ul> <p>Hint for the solution</p> <p>The solution is similar to the previous task, but this time, instead of using a <code>ManualResetEvent</code>, you should use a different (but similar) type of synchronization object...</p> <p>TO BE SUBMITTED</p> <p>Before moving on to the next task, you need to take a screenshot.</p> <p>Create a screenshot named <code>Task3.png</code> with the following setup:</p> <ul> <li>Start the application. If necessary, resize the window so it doesn\u2019t take up too much space on the screen.</li> <li>In the background, Visual Studio should be open with <code>Game.cs</code> visible.</li> <li>In Visual Studio, zoom so that the <code>BikeThreadFunction</code> method of the <code>Game</code> class is visible. In the foreground, your application window should be shown.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-4-implementing-the-winning-bicycle","title":"Task 4 \u2013 Implementing the winning bicycle","text":"<p>Implement the logic for determining and displaying the winning bicycle according to the following guidelines:</p> <ul> <li>The winner is the first bike to reach the finish line (its position first reaches the value defined by the <code>FinishLinePosition</code> field).</li> <li>In your solution, use the fact that the <code>Bike</code> class already contains a <code>isWinner</code> field, which is initially false. It can be set to true using the <code>SetAsWinner</code> method, and its value can be queried using the <code>IsWinner</code> property.</li> <li>The decision as to whether a bike is the winner should be made within the thread function associated with that bike in the <code>Game</code> class \u2014 place the winner selection logic there.</li> <li> It is critical that only one winner exists. If more than one bike is marked as the winner (i.e., <code>SetAsWinner</code> is called for multiple bikes), this is a serious error.</li> <li>Work in the <code>Game</code> class.</li> </ul> <p>Before implementing the logic, we\u2019ll improve the display slightly to make the winning bike visually distinct. In the <code>UpdateUI</code> method of the <code>MainWindow</code> class, add a small extra logic: If the given bike is a winner, change its display to a trophy icon. To do this, set the Text property of the corresponding <code>TextBlock</code> to \"%\":</p> <pre><code>private void UpdateUI()\n{\n    for (int i = 0; i &lt; game.Bikes.Count;i++)\n    {\n        ...\n\n        if (bike.IsWinner)\n            tbBike.Text = \"%\";\n    }\n}\n</code></pre> <p>Implement the logic yourself based on the following guidelines and tips.</p> <p>Guidelines and tips for the solution</p> <ul> <li>To determine whether a winner has already been declared, add a helper variable <code>bool hasWinner</code> in the <code>Game</code> class (this should indicate whether a winner has already been assigned).</li> <li>A very similar example was shown during the lecture in the topic \"Using lock\", with a detailed explanation.</li> <li>Your solution must still function correctly \u2014 meaning only one winner \u2014 even if a long artificial delay is introduced between checking <code>hasWinner</code> and setting it to true. This simulates a scenario where the thread unluckily loses execution time right at that point, and bikes are released from the depot almost simultaneously, reaching the finish line close together.</li> <li>For testing, insert a line like <code>Thread.Sleep(2000)</code> between the check and the assignment to <code>hasWinner</code>. After testing, comment this line out. During testing, release bikes from the depot as close to each other as possible (e.g., rapid button clicks) so they arrive at the finish nearly at the same time. If more than one bike becomes a winner (i.e., turns into a trophy), then your solution is incorrect and not properly synchronized.</li> </ul> <p>TO BE SUBMITTED</p> <p>Before moving on to the next task, you need to take a screenshot.</p> <p>Create a screenshot named <code>Task4.png</code> with the following setup:</p> <ul> <li>Start the application. If necessary, resize the window so it doesn\u2019t take up too much space on the screen.</li> <li>In the background, Visual Studio should be open with <code>Game.cs</code> visible.</li> <li>In Visual Studio, zoom so that the <code>BikeThreadFunction</code> method of the <code>Game</code> class is visible. </li> <li>In the foreground, your application window should be shown.</li> </ul>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-5-mutual-exclusion-and-volatile","title":"Task 5 \u2013 Mutual exclusion and volatile","text":"<p>In the previous task, we saw that checking and setting <code>hasWinner</code> needed to be made atomic, meaning we had to ensure mutual exclusion during this process. Now, the question is: are there any other parts of the application where mutual exclusion should have been applied to maintain consistency? To answer this, we need to examine which variables are accessed from multiple threads (i.e., written by one and read by another). The following variables are involved:</p> <ul> <li>The <code>position</code> field in the <code>Bike</code> class. This is modified by the bike\u2019s thread using the <code>+=</code> operator, and read by the main thread via the <code>Position</code> property during rendering. The question is: could this cause any inconsistency? Reading and writing int variables with the <code>=</code> operator is atomic \u2014 so that would be fine. However, the <code>+=</code> operator is not atomic \u2014 it consists of multiple steps: read, increment, write. (If it\u2019s unclear why this is a problem, be sure to review the lecture slides on this topic.) If multiple threads used <code>+=</code> on the same variable at the same time, that could cause inconsistency. But let\u2019s think carefully: in our case, only one thread at a time uses <code>+=</code>, and the other thread only reads position. This means the reading thread may get either the before or after value of the increment, but that's acceptable. Conclusion: No need to implement mutual exclusion here.</li> <li>The <code>isWinner</code> field in the <code>Bike</code> class: It is set by the bike\u2019s thread using <code>SetAsWinner</code>, and read by the main thread using the <code>IsWinner</code> property during rendering. Its type is <code>bool</code>, and reading/writing a bool is atomic, so no need for mutual exclusion.</li> <li>The <code>hasWinner</code> field in the <code>Game</code> class: Also a bool, so its read/write operations are atomic. However, we had an additional requirement: only one bike can win. Because of that, mutual exclusion was necessary, and we implemented it in the previous task using lock.</li> </ul> <p>You might now think all is fine \u2014 but it's not case. Even when atomicity is guaranteed, a thread may not see the updated value of a shared variable due to caching (e.g., in a CPU register). This means a thread might still see an old value even after the variable has been changed by another thread. To prevent this, such shared variables should be marked as <code>volatile</code>. This keyword ensures the variable is always read from and written to main memory, not a cached copy. (The behavior of volatile is a bit more complex, and it's explained in more detail in the lectures.) Important Note: there is no need to use <code>volatile</code> if the variable is only accessed within <code>lock</code> blocks or if it's modified via the <code>Interlocked</code> class. Therefore, mark the following fields as volatile: <code>position</code> and <code>isWinner</code>.</p> <pre><code>class Bike\n{\n    private volatile int position = 65;\n    private volatile bool isWinner;\n</code></pre>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-5-step-logging-non-thread-safe-net-collections","title":"Task 5 \u2013 Step logging (non-thread-safe .NET collections)","text":"<p>Implement logging of every single step taken by the bikes during the race. In the <code>Game</code> class, store these steps in a single shared <code>List&lt;int&gt;</code> variable (common for all bikes). You don't need to do anything with the logged values (e.g., no need to display them). Use the fact that the <code>Step</code> method in the <code>Bike</code> class returns the step size as an int \u2014 this is the value that should be logged (just add it to the list).</p> Hint for the solution <p>The <code>List&lt;T&gt;</code> class is not thread-safe, and since it will be written to from multiple threads, you must ensure mutual exclusion when accessing it. Use the <code>lock</code> statement to safely add to the list.</p> <p>Thread-safe collections in System.Collections.Concurrent</p> <p>If you used a suitable collection from the <code>System.Collections.Concurrent</code> namespace (e.g., <code>ConcurrentQueue</code> instead of <code>List&lt;T&gt;</code>), then explicit locking would not be necessary. This namespace contains collection types designed to be thread-safe.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#task-6-refreshing-the-ui-on-every-change-accessing-ui-elements-from-worker-threads","title":"Task 6 \u2013 Refreshing the UI on every change (Accessing UI elements from worker threads)","text":"<p>In the current implementation, the UI is refreshed periodically at fixed intervals using a timer. Now, we will replace this solution. Refactor your implementation so that the UI is updated immediately whenever the state of the <code>Game</code> changes. The timer-based updates should no longer be used.</p> <p>The next section will present an overview of possible solutions and select one of them. But before reading on, try to think about it yourself \u2014 what kind of approach would be most appropriate here? A key requirement is that no solution is acceptable if it introduces a dependency from the application logic (<code>Game</code> class) to the UI. Remember our core principle: the application logic must not depend in any way on the presentation logic (the UI).</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#implementing-ui-notification","title":"Implementing UI notification","text":"<p>Alternatives:</p> <ol> <li>We could apply the Observer design pattern. This will be covered later in the semester, although it's worth noting that C# events are based on the core concepts of the Observer pattern.</li> <li>A straightforward solution would be to introduce a C# event (e.g., <code>BikeStateChanged</code>), raised by the Game class whenever a bike\u2019s state changes, passing the Bike object as a parameter. This would be a clean, general-purpose solution: any class could subscribe to the event at any time. Following Microsoft\u2019s recommendations, this would require defining a custom <code>EventArgs</code> subclass and a new delegate type (or using the built-in <code>EventHandler&lt;TEventArgs&gt;</code> generic delegate).</li> <li> <p>While the C# event-based approach in the previous paragraph is fully \"correct\", our needs are more specific \u2014 we don\u2019t necessarily want arbitrary classes to subscribe to the event. Therefore, we\u2019ll implement a more targeted solution (and this is the approach we'll use). This approach still uses a delegate, but it does not introduce a C# event, and is designed to notify only a single object \u2014 the <code>MainWindow</code>, which is responsible for updating the UI whenever a bike\u2019s state changes. This approach consists of the following components:</p> <ul> <li><code>Game</code> class as the \"notifier\":<ul> <li>The function (delegate object) that the <code>Game</code> class will invoke when a bike\u2019s state changes is passed to it as a parameter to the <code>PrepareRace</code> method. The <code>Game</code> class stores it in a member variable.</li> <li>This parameter and field should be of type <code>Action&lt;Bike&gt;</code> (we\u2019ve already learned about <code>Action</code> and <code>Action&lt;T&gt;</code>).</li> <li>Whenever a bike\u2019s state changes (position or winner status inside the thread function), the <code>Game</code> class invokes the stored delegate \u2014 but only if it is not null (use <code>?.Invoke</code>) \u2014 passing the updated Bike object as a parameter. This is how it notifies the subscriber.</li> </ul> </li> <li><code>MainWindow</code> as the \"subscriber\":<ul> <li>In the <code>MainWindow</code> class, implement a method called <code>UpdateBikeUI(Bike bike)</code>, and pass this method as a delegate when calling <code>Game.PrepareRace</code>. In <code>UpdateBikeUI</code>, make sure the <code>TextBlock</code> corresponding to the given bike object is updated accordingly.</li> <li>This is why we use an <code>Action&lt;Bike&gt;</code> delegate rather than just <code>Action</code>: it allows the Game to specify which bike changed, so that <code>MainWindow.UpdateBikeUI</code> can update only that bike\u2019s display.</li> </ul> </li> <li>Comment out the timer startup (<code>timer.Start()</code> in the <code>MainWindow</code> constructor) \u2014 because now UI updates are handled using the delegate-based notification (<code>Action&lt;Bike&gt;</code>), and we no longer need periodic updates.</li> </ul> </li> </ol> <p>Implement the notification mechanism described in point 3 above! Below, we'll provide the implementation of <code>MainWindow.UpdateBikeUI</code>, which updates the <code>TextBlock</code> display for the given <code>Bike</code> object:</p> <pre><code>private void UpdateBikeUI(Bike bike)\n{\n    // It may happen that UpdateBikeUI is called so early that\n    // bikeTextBlocks has not yet been populated \u2014 in that case,\n    // we can\u2019t update the UI yet, so just return.\n    if (bikeTextBlocks.Count != game.Bikes.Count)\n        return;\n\n    int marginAdjustmentForWheel = 8;\n\n    // Find the TextBlock corresponding to the bike (by using the same index).\n    var tbBike = bikeTextBlocks[game.Bikes.IndexOf(bike)];\n\n    // Do not set the bike's position yet if its size has not been\n    // determined by the layout system (otherwise the bike would \"jump,\"\n    // since in the margin calculation below, we'd use an invalid width of 0).\n    if (tbBike.ActualWidth == 0)\n        return;\n\n    // The window\u2019s (0,0) point is the origin \u2014 positions like start/depot/finish are\n    // measured relative to this.  \n    // The right side of the icon is the wheel, but we want to align that with the left edge,\n    // so we need to subtract ActualWidth.\n    tbBike.Margin = new Thickness(bike.Position - tbBike.ActualWidth + marginAdjustmentForWheel, 0, 0, 0);\n\n    if (bike.IsWinner)\n        tbBike.Text = \"%\"; // display a cup\n}\n</code></pre> <p>Important</p> <p>Even if you follow the above steps/principles correctly, your solution may still not work as expected. When starting the race, the following exception may be thrown in the <code>UpdateBikeUI</code> method when accessing the <code>TextBlock</code> associated with the bike: <code>System.Runtime.InteropServices.COMException: 'The application called an interface that was marshalled for a different thread. (0x8001010E (RPC_E_WRONG_THREAD))'</code></p> <p>What is the reason for this error? Before opening the reminder below, try to figure it out yourself based on what you've learned in lectures/labs.</p> Reminder <p>In WinUI, you may only access a UI element/control from the same thread that created it \u2014 UI elements are not thread-safe, and they will throw exceptions if you attempt to access them \"incorrectly\" from another thread.</p> <p>The solution will be developed in the next subtask.</p>"},{"location":"hazi/4-tobbszalu-alkalmazasok-fejlesztese/index_eng/#using-the-dispatcherqueue","title":"Using the DispatcherQueue","text":"<p>In our case, the specific issue is caused by the fact that when the Game's state changes, the notification delegate in the <code>Game</code> class is called from the worker threads associated with the bikes. As a result, the registered handler <code>MainWindow.UpdateBikeUI</code> is also called from these worker threads. However, inside <code>UpdateBikeUI</code>, we access UI elements (such as the <code>TextBlock</code> representing a bike), which were created on the main (UI) thread \u2014 and therefore should only be accessed from the main thread.</p> <p> The solution is to use the <code>DispatcherQueue</code>, which allows us to \"forward\" a method call from a background thread to the main UI thread, where UI elements can safely be accessed. The use of <code>DispatcherQueue</code> has been covered in detail during lectures and in the corresponding lab.</p> <p>Task: Modify the <code>MainWindow.UpdateBikeUI</code> method so that UI element access is done from the correct thread using <code>DispatcherQueue</code>. This will prevent the exception you've been encountering.</p> <p>TO BE SUBMITTED</p> <p>Before proceeding to the next task, you must take a screenshot.</p> <p>Create a screenshot named <code>Task6.png</code> as follows:</p> <ul> <li>Start the application. If needed, resize the window to take up less screen space.</li> <li>In the background, Visual Studio should be open with MainWindow.xaml.cs visible.</li> <li>Zoom in so that the <code>UpdateBikeUI</code> method of the <code>MainWindow</code> class is visible. In the foreground, the application window should be shown.</li> </ul> <p>Implementing a similar game in real-world scenarios</p> <p>In practice, we would not use threads to implement a game like this. Using a timer to update bike positions would be much more practical, allowing the whole game to remain single-threaded, thus avoiding many of the challenges introduced by multithreading. (In this assignment, however, our goal is specifically to practice multithreading techniques.)</p>"},{"location":"hazi/5-mvvm/","title":"5. HF - Az MVVM minta \u00e9s az MVVM Toolkit alkalmaz\u00e1sa","text":""},{"location":"hazi/5-mvvm/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A h\u00e1zi feladatban a 3. XAML laboron megval\u00f3s\u00edtott szem\u00e9ly regisztr\u00e1ci\u00f3s alkalmaz\u00e1st alak\u00edtjuk \u00e1t olyan m\u00f3don, hogy az MVVM mint\u00e1ra \u00e9p\u00fclj\u00f6n, valamint megismerked\u00fcnk az MVVM Toolkit alkalmaz\u00e1s\u00e1val.</p> <p>Az \u00f6n\u00e1ll\u00f3 feladat a WinUI el\u0151ad\u00e1ssorozat v\u00e9g\u00e9n elhangzott MVVM t\u00e9mak\u00f6rre \u00e9p\u00edt. A feladatok gyakorlati h\u00e1tter\u00e9\u00fcl a 5. labor \u2013 MVVM laborgyakorlat szolg\u00e1l.</p> <p>Az kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sanyag feldolgoz\u00e1s\u00e1val, jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel (n\u00e9ha alap\u00e9rtelmezetten \u00f6sszecsukva) \u00f6n\u00e1ll\u00f3an elv\u00e9gezhet\u0151k.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>Az MVVM minta haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>NuGet referenci\u00e1k alkalmaz\u00e1sa</li> <li>Az MVVM Toolkit alapjaival val\u00f3 ismerked\u00e9s</li> <li>XAML technik\u00e1k gyakorl\u00e1sa</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s, megegyezik a 3. h\u00e1zi feladat\u00e9val (XAML alapok).</p>"},{"location":"hazi/5-mvvm/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li>A kikl\u00f3nozott f\u00e1jlok k\u00f6z\u00f6tt a <code>HelloXaml.sln</code>-t megnyitva kell dolgozni.</li> <li> A feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi. A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, a repository-d gy\u00f6k\u00e9rmapp\u00e1j\u00e1ba tedd (a neptun.txt mell\u00e9). A k\u00e9perny\u0151k\u00e9pek \u00edgy felker\u00fclnek GitHub-ra a git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</li> <li> Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</li> </ul>"},{"location":"hazi/5-mvvm/#kikotesek","title":"Kik\u00f6t\u00e9sek","text":"<p> MVVM minta k\u00f6telez\u0151 alkalmaz\u00e1sa!   Jelen h\u00e1zi feladatban az MVVM mint\u00e1t gyakoroljuk, \u00edgy a feladatok megold\u00e1s\u00e1ban k\u00f6telez\u0151 az MVVM minta alkalmaz\u00e1sa. Az ett\u0151l val\u00f3 elt\u00e9r\u00e9s a feladatok \u00e9rt\u00e9kel\u00e9s\u00e9nek elutas\u00edt\u00e1s\u00e1t vonja maga ut\u00e1n.</p>"},{"location":"hazi/5-mvvm/#feladat-0-kiindulo-allapot-attekintese","title":"Feladat 0 - Kiindul\u00f3 \u00e1llapot \u00e1ttekint\u00e9se","text":"<p>A kiindul\u00f3 \u00e1llapot alapvet\u0151en megegyezik a 3. A felhaszn\u00e1l\u00f3i fel\u00fclet kialak\u00edt\u00e1sa v\u00e9g\u00e1llapot\u00e1val. Vagyis egy olyan alkalmaz\u00e1s, melyben egy list\u00e1ban szem\u00e9lyek adatait lehet r\u00f6gz\u00edteni.  A labor v\u00e9g\u00e1llapot\u00e1hoz k\u00e9pest egy kisebb v\u00e1ltoz\u00e1st tartalmaz. Laboron a fel\u00fclet teljes le\u00edr\u00e1s\u00e1t a <code>MainWindow.xaml</code> (\u00e9s a kapcsol\u00f3d\u00f3 code-behind f\u00e1jl) tartalmazta. Jelen kiindul\u00f3 megold\u00e1sban az a k\u00fcl\u00f6nbs\u00e9g, hogy ez \u00e1t lett mozgatva a <code>Views</code> mapp\u00e1ban lev\u0151 <code>PersonListPage.xaml</code> (\u00e9s code behind) f\u00e1jlba. A <code>PersonListPage</code> nem egy <code>Window</code>, hanem egy <code>Page</code> lesz\u00e1rmazott oszt\u00e1ly (ellen\u0151rizz\u00fck ezt a code behind f\u00e1jlban). De semmi m\u00e1s v\u00e1ltoz\u00e1s nincs! Mint a neve is utal r\u00e1, a <code>Page</code> egy \"oldalt\" reprezent\u00e1l az alkalmaz\u00e1sban: \u00f6nmag\u00e1ban nem tud megjelenni, hanem pl. egy ablakon kell elhelyezni. El\u0151nye, hogy az ablakon - megfelel\u0151 navig\u00e1ci\u00f3 kialak\u00edt\u00e1s\u00e1val - lehet\u0151s\u00e9g van oldalak (k\u00fcl\u00f6nb\u00f6z\u0151 <code>Page</code> lesz\u00e1rmazottak) k\u00f6z\u00f6tt navig\u00e1lni. Ezt mi nem fogjuk kihaszn\u00e1lni, egyetlen oldalunk lesz csak. Az oldal bevezet\u00e9s\u00e9vel a c\u00e9lunk mind\u00f6ssze az volt, hogy szeml\u00e9ltess\u00fck: az MVVM architekt\u00far\u00e1ban a n\u00e9zeteket nem csak <code>Window</code> (teljes ablak), hanem pl. <code>Page</code> objektumokkal is meg lehet val\u00f3s\u00edtani. </p> <p>Mivel mindent \u00e1tmozgattunk a <code>MainWindow</code>-b\u00f3l a <code>PersonListPage</code>-be, a <code>MainWindow.xaml</code>-ban m\u00e1r semmi m\u00e1s nincs, mint egy ilyen <code>PersonListPage</code> objektum p\u00e9ld\u00e1nyos\u00edt\u00e1sa:</p> <pre><code>&lt;views:PersonListPage/&gt;\n</code></pre> <p>Ellen\u0151rizd a k\u00f3dban, hogy val\u00f3ban ez a helyzet!</p>"},{"location":"hazi/5-mvvm/#foablak-fejlece","title":"F\u0151ablak fejl\u00e9ce","text":"<p> A f\u0151ablak fejl\u00e9ce az \"MVVM\" sz\u00f6veg legyen, hozz\u00e1f\u0171zve a saj\u00e1t Neptun k\u00f3dod: (pl. \"ABCDEF\" Neptun k\u00f3d eset\u00e9n \"MVVM - ABCDEF\"), fontos, hogy ez legyen a sz\u00f6veg! Ehhez a f\u0151ablakunk <code>Title</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtsuk be erre a sz\u00f6vegre a <code>MainWindow.xaml</code> f\u00e1jlban.</p>"},{"location":"hazi/5-mvvm/#feladat-1-mvvm-toolkit-alkalmazasa","title":"Feladat 1 - MVVM Toolkit alkalmaz\u00e1sa","text":"<p>A megl\u00e9v\u0151 alkalmaz\u00e1sban a <code>Models</code> mapp\u00e1ban lev\u0151 <code>Person</code> oszt\u00e1ly m\u00e1r implement\u00e1lja az <code>INotifyPropertyChanged</code> (becenev\u00e9n INPC) interf\u00e9szt (\u00edgy rendelkezik egy <code>PropertyChanged</code> esem\u00e9nnyel), valamint a <code>Name</code> \u00e9s az <code>Age</code> setter\u00e9ben jelzi is a tulajdons\u00e1g v\u00e1ltoz\u00e1s\u00e1t a <code>PropertyChanged</code> esem\u00e9ny els\u00fct\u00e9s\u00e9vel (n\u00e9zd meg ezt alaposan a <code>Person.cs</code> f\u00e1jlban).</p> <p>Bemeleg\u00edt\u00e9sk\u00e9ppen/ism\u00e9tl\u00e9sk\u00e9ppen - a k\u00f3dot (<code>PersonListPage.xaml</code> \u00e9s <code>PersonListPage.xaml.cs</code>) alaposan \u00e1tn\u00e9zve \u00e9s az alkalmaz\u00e1st futtatva - fogalmazd meg magadban, mi\u00e9rt is volt erre az alkalmaz\u00e1sban sz\u00fcks\u00e9g!</p> A v\u00e1lasz (ism\u00e9tl\u00e9s) <p>Az alkalmaz\u00e1sban a <code>PersonListPage.xaml</code>-ben a <code>TextBox</code>-ok <code>Text</code> tulajdons\u00e1ga (ez a c\u00e9l tulajdons\u00e1g) hozz\u00e1 vannak k\u00f6tve a code behindban lev\u0151 <code>Person</code> t\u00edpus\u00fa <code>NewPerson</code> tag <code>Age</code> \u00e9s <code>Name</code> tulajdons\u00e1gaihoz (ezek a forr\u00e1sok a k\u00e9t adatk\u00f6t\u00e9sben). N\u00e9zz\u00fck meg a k\u00f3dban, hogy a <code>NewPerson.Name</code> \u00e9s <code>NewPerson.Age</code> forr\u00e1s tulajdons\u00e1gokat v\u00e1ltoztatjuk is a k\u00f3dban: a vez\u00e9rl\u0151 csak akkor tud ezekr\u0151l \u00e9rtes\u00fclni (\u00e9s \u00edgy szinkronban maradni a forr\u00e1ssal), ha ezekr\u0151l a <code>Name</code> \u00e9s <code>Age</code> v\u00e1ltoz\u00e1sokr\u00f3l \u00e9rtes\u00edt\u00e9st kap. Emiatt az <code>Age</code> \u00e9s <code>Name</code> tulajdons\u00e1gokat tartalmaz\u00f3 oszt\u00e1lynak, vagyis a <code>Person</code>-nek meg kell val\u00f3s\u00edtania az <code>INotifyPropertyChanged</code> interf\u00e9szt, \u00e9s a tulajdons\u00e1gok v\u00e1ltoz\u00e1sakor el kell s\u00fctnie a <code>PropertyChanged</code> esem\u00e9nyt megfelel\u0151en param\u00e9terezve.</p> <p>Az alkalmaz\u00e1st futtatva ellen\u0151rizd, hogy a '+' \u00e9s '-' gombok hat\u00e1s\u00e1ra eszk\u00f6z\u00f6lt <code>NewPerson.Age</code> v\u00e1ltoz\u00e1sok val\u00f3ban \u00e9rv\u00e9nyre jutnak az \u00e9letkort megjelen\u00edt\u0151 <code>TextBox</code>-ban. </p> <p>A <code>Person</code> oszt\u00e1lyban l\u00e1tszik, hogy az <code>INotifyPropertyChanged</code> megval\u00f3s\u00edt\u00e1sa \u00e9s a kapcsol\u00f3d\u00f3 k\u00f3d igencsak terjeng\u0151s. N\u00e9zd meg az el\u0151ad\u00e1sanyagban, milyen alternat\u00edv\u00e1k vannak az interf\u00e9sz megval\u00f3s\u00edt\u00e1s\u00e1ra (az \"INPC p\u00e9lda 1\" c\u00edm\u0171 di\u00e1t\u00f3l kezd\u0151d\u0151en kb. n\u00e9gy dia a n\u00e9gy lehet\u0151s\u00e9g illusztr\u00e1l\u00e1s\u00e1ra)! A legt\u00f6m\u00f6rebb legold\u00e1st az MVVM Toolkit alkalmaz\u00e1sa jelenti. A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben jelen terjeng\u0151sebb \"manu\u00e1lis\" INPC megval\u00f3s\u00edt\u00e1st \u00e1talak\u00edtjuk MVVM toolkit alap\u00fara.</p>"},{"location":"hazi/5-mvvm/#feladat-1a-mvvm-toolkit-nuget-referencia-felvetele","title":"Feladat 1/a - MVVM Toolkit NuGet referencia felv\u00e9tele","text":"<p>Els\u0151 l\u00e9p\u00e9sben NuGet referenci\u00e1t kell tenni az MVVM Toolkitre annak \u00e9rdek\u00e9ben, hogy haszn\u00e1lni lehessen a projektben. </p> <p>Feladat: Vegy\u00e9l fel egy NuGet referenci\u00e1t a projektben a \"CommunityToolkit.Mvvm\" NuGet csomagra. Ez a Visual Studio oldal \u00edrja le, hogyan lehet egy NuGet referenci\u00e1t a projektbe felvenni NuGet Package Manager. Az el\u0151z\u0151 link az oldalon bel\u00fcl a \"NuGet Package Manager\" fejezetre ugrik, az itt megadott n\u00e9gy l\u00e9p\u00e9st kell k\u00f6vetni (term\u00e9szetesen azzal a k\u00fcl\u00f6nbs\u00e9ggel, hogy nem a \"Newtonsoft.Json\" hanem a \"CommunityToolkit.Mvvm\" csomagra kell a referenci\u00e1t felvenni).</p> <p>Most, hogy a projekt\u00fcnkbe felvett\u00fck ezt a NuGet referenci\u00e1t, a k\u00f6vetkez\u0151 build sor\u00e1n (mivel annak r\u00e9szek\u00e9nt lefut egy NuGet restore l\u00e9p\u00e9s!) let\u00f6lt\u0151dik a NuGet csomag, kicsomagol\u00f3dnak a benne lev\u0151 DLL-ek a kimeneti mapp\u00e1ba, \u00edgy azok m\u00e1r szerves r\u00e9sz\u00e9t k\u00e9pezik az alkalmaz\u00e1snak (egy NuGet csomag tulajdonk\u00e9ppen egy zip \u00e1llom\u00e1ny). Fontos megeml\u00edteni, hogy Git-be sem a NuGet zip, sem a benne lev\u0151 dll-ek nem ker\u00fclnek fel, a solution gy\u00f6ker\u00e9ben lev\u0151 <code>.gitignore</code> f\u00e1jl ezeket kisz\u0171ri. Pont ez a NuGet koncepci\u00f3 l\u00e9nyege: a repository kicsi maradhat, mert a projektf\u00e1jl csak hivatkoz\u00e1sokat tartalmazza a NuGet csomagokra, \u00e9s amikor valaki egy frissen clone-ozott solution-t buildel, csak ekkor t\u00f6lt\u0151dnek le az online NuGet forr\u00e1sokb\u00f3l a hivatkozott NuGet csomagok.</p> <p> A fenti NuGet-re vonatkoz\u00f3 koncepci\u00f3k ismerete fontos, a tananyag fontos r\u00e9sz\u00e9t k\u00e9pezik!</p> <p>Egy NuGet referencia tulajdonk\u00e9ppen csak egy sor a <code>.csproj</code> projektle\u00edr\u00f3 f\u00e1jlban. A Solution Explorerben a \"HelloXaml\" projekt csom\u00f3pontra kattintva nyisd meg a <code>.csproj</code> projektf\u00e1jlt, \u00e9s ellen\u0151rizd, benne van ez a sor (a verzi\u00f3 lehet m\u00e1s lesz):</p> <pre><code>    &lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" /&gt;\n</code></pre> <p>A <code>csproj</code> f\u00e1jl megnyit\u00e1sa n\u00e9lk\u00fcl is ellen\u0151rizd a NuGet referenci\u00e1nkat: Solution Explorerben nyisd le a \"HelloXaml\"/\"Dependencies\"/\"Packages\" csom\u00f3pontot: ha minden rendben van, alatta l\u00e1that\u00f3 egy \"CommunityToolkit.Mvvm (verzi\u00f3)\" csom\u00f3pont.</p>"},{"location":"hazi/5-mvvm/#feladat-1b-inpc-megvalositas-mvvm-toolkit-alapokon","title":"Feladat 1/b - INPC megval\u00f3s\u00edt\u00e1s MVVM Toolkit alapokon","text":"<p>Most m\u00e1r tudjuk haszn\u00e1lni az MVVM Toolkit NuGet package-ben lev\u0151 oszt\u00e1lyokat, interf\u00e9szeket, attrib\u00fatumokat stb., \u00edgy \u00e1t tudunk t\u00e9rni az MVVM Toolkit alap\u00fa INPC megval\u00f3s\u00edt\u00e1sra.</p> <ul> <li>Kommentezd ki a <code>Person</code> oszt\u00e1lyt teljes eg\u00e9sz\u00e9ben. </li> <li>A kikommentezett r\u00e9sz felett vedd fel az oszt\u00e1lyt \u00fajonnan, de MVVM Toolkit alap\u00fa INPC megval\u00f3s\u00edt\u00e1ssal.<ul> <li>A megval\u00f3s\u00edt\u00e1sban a \"INPC p\u00e9lda 4 - MVVM Toolkittel\" el\u0151ad\u00e1sdia seg\u00edt.</li> <li>Partial class kell legyen (vagyis az oszt\u00e1ly r\u00e9szei t\u00f6bb f\u00e1jlban is defini\u00e1lhat\u00f3k).</li> <li>A Toolkit-beli <code>ObservableObject</code>-b\u0151l sz\u00e1rmazzon: ez az \u0151s val\u00f3s\u00edtja meg az <code>INotifyPropertyChanged</code> interf\u00e9szt, \u00edgy nek\u00fcnk m\u00e1r nem kell.</li> <li><code>Name</code> \u00e9s <code>Age</code> tulajdons\u00e1gok helyett <code>name</code> \u00e9s <code>age</code> tagv\u00e1ltoz\u00f3kat vezess\u00fcnk be, <code>ObservableProperty</code> attrib\u00fatummal ell\u00e1tva.</li> </ul> </li> </ul> <p>Meg is vagyunk.</p> A megold\u00e1s ellen\u0151rz\u00e9se <pre><code>public partial class Person : ObservableObject\n{\n    [ObservableProperty]\n    private string name;\n\n    [ObservableProperty]\n    private int age;\n}\n</code></pre> <p>Ez a k\u00f3d, egy ford\u00edt\u00e1st k\u00f6vet\u0151en, alapjaiban ugyanazt a megold\u00e1st eredm\u00e9nyezi, mint a kor\u00e1bbi, sokkal terjeng\u0151sebb, imm\u00e1r kikommentezett forma. Vagyis (m\u00e9g ha nem is l\u00e1tjuk egyel\u0151re) sz\u00fcletik <code>Name</code> \u00e9s <code>Age</code> tulajdons\u00e1g, megfelel\u0151 <code>PropertyChanged</code> esem\u00e9ny els\u00fct\u00e9sekkel. Hogyan lehets\u00e9ges ez? </p> <ul> <li>Egyr\u00e9szt az <code>ObservableObject</code> \u0151s m\u00e1r megval\u00f3s\u00edtja az <code>INotifyPropertyChanged</code> interf\u00e9szt, \u00edgy a <code>PropertyChanged</code> esem\u00e9ny tagot is tartalmazza, ezt a sz\u00e1rmaztat\u00e1s r\u00e9v\u00e9n \"meg\u00f6r\u00f6kli\" az oszt\u00e1lyunk.</li> <li>A ford\u00edt\u00e1s sor\u00e1n lefut az MVVM Toolkit k\u00f3dgener\u00e1tora, mely minden <code>ObservableProperty</code> attrib\u00fatummal ell\u00e1tott tagv\u00e1ltoz\u00f3hoz gener\u00e1l egy ugyanolyan nev\u0171, de nagybet\u0171vel kezd\u0151d\u0151 tulajdons\u00e1got az oszt\u00e1lyba, mely tulajdons\u00e1g settere els\u00fcti megfelel\u0151 felt\u00e9telek mellett \u00e9s megfelel\u0151 param\u00e9terekkel a <code>PropertyChanged</code> esem\u00e9nyt. Hurr\u00e1, ezt a k\u00f3dot akkor nem nek\u00fcnk kell meg\u00edrni.</li> <li>K\u00e9rd\u00e9s, hol keletkezik ez a k\u00f3d. Az oszt\u00e1lyunk egy m\u00e1sik \"partial\" r\u00e9sz\u00e9ben. Egy ford\u00edt\u00e1st k\u00f6vet\u0151en Visual Studio-ban jobb gombbal kattintsunk a <code>Person</code> oszt\u00e1ly nev\u00e9n, majd a felugr\u00f3 men\u00fcben \"Go to Definition\". Ekkor egy als\u00f3 ablakban k\u00e9t tal\u00e1latot is kapunk: az egyik az \u00e1ltalunk \u00edrt fenti k\u00f3d, a m\u00e1sik (\"public class Person\") a gener\u00e1lt r\u00e9szre ugrik egy duplakatt hat\u00e1s\u00e1ra: l\u00e1tszik, hogy viszonylag terjeng\u0151s k\u00f3dot gener\u00e1lt a k\u00f3dgener\u00e1tor, de ami nek\u00fcnk fontos, hogy itt tal\u00e1lhat\u00f3 a <code>Name</code> \u00e9s <code>Age</code> tulajdons\u00e1g, benne - t\u00f6bbek k\u00f6z\u00f6tt - a <code>OnPropertyChanged</code> els\u00fct\u00e9s\u00e9vel.</li> </ul> <p> A k\u00f3dgener\u00e1tor szok\u00e1sosan az oszt\u00e1lyunk m\u00e1sik \"partial\" fel\u00e9be dolgozik, annak \u00e9rdek\u00e9ben, hogy ne keveredjen az \u00e1ltalunk \u00edrt \u00e9s a gener\u00e1lt k\u00f3d! A partial classokat leggyakrabban a k\u00e9zzel \u00edrt \u00e9s a gener\u00e1lt k\u00f3d \"k\u00fcl\u00f6nv\u00e1laszt\u00e1s\u00e1ra\" haszn\u00e1ljuk.</p> <p>Mivel sokkal kevesebb k\u00f3dot kell \u00edrni, a gyakorlatban az MVVM Toolkit alap\u00fa megold\u00e1st szoktuk haszn\u00e1lni (de a manu\u00e1lis megold\u00e1st is tudni kell, ez alapj\u00e1n \u00e9rthet\u0151, mi is t\u00f6rt\u00e9nik a sz\u00ednfalak m\u00f6g\u00f6tt).</p> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>f1b.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>Person.cs</code> megnyitva.</li> </ul>"},{"location":"hazi/5-mvvm/#feladat-2-atteres-mvvm-alapu-megoldasra","title":"Feladat 2 - \u00c1tt\u00e9r\u00e9s MVVM alap\u00fa megold\u00e1sra","text":"<p>Az el\u0151z\u0151 l\u00e9p\u00e9sben, b\u00e1r az MVVM Toolkitet haszn\u00e1ltuk, m\u00e9g nem t\u00e9rt\u00fcnk \u00e1t MVVM alap\u00fa megold\u00e1ra (a toolkitet csak az INPC egyszer\u0171bb megval\u00f3s\u00edt\u00e1s\u00e1ra haszn\u00e1ltuk). </p> <p>A k\u00f6vetkez\u0151kben \u00e1talak\u00edtjuk az alkalmaz\u00e1sunk architekt\u00far\u00e1j\u00e1t, hogy az MVVM koncepci\u00f3j\u00e1t k\u00f6vesse. Az egyszer\u0171bb megval\u00f3s\u00edt\u00e1s \u00e9rdek\u00e9ben \u00e9p\u00edt\u00fcnk az MVVM Toolkitre.</p> <p>Feladat: Dolgozd fel a kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sanyagot (WinUI anyagr\u00e9sz v\u00e9g\u00e9n tal\u00e1lhat\u00f3):</p> <ul> <li>\u00c9rtsd meg az MVVM minta alapkoncepci\u00f3it.</li> <li>Az el\u0151ad\u00e1sdi\u00e1kon tal\u00e1lhat\u00f3 p\u00e9ld\u00e1k teljes k\u00f3dja el\u00e9rhet\u0151 az El\u0151ad\u00e1s GitHub repository \"04-05 WinUI\\DancerProfiles\" mapp\u00e1ban (\"RelaxedMVVM\" \u00e9s \"StrictMVVM\"), ezek seg\u00edthetnek a meg\u00e9rt\u00e9sben \u00e9s a k\u00e9s\u0151bbi feladatok megold\u00e1s\u00e1ban. </li> </ul> <p>Mit is jelent az MVVM minta a p\u00e9ld\u00e1nkra vet\u00edtve:</p> <ul> <li>A model oszt\u00e1ly a <code>Models</code> mapp\u00e1ban lev\u0151 <code>Person</code> oszt\u00e1ly, egy szem\u00e9ly adatait reprezent\u00e1lja (UI logik\u00e1t NEM tartalmaz, f\u00fcggetlen mindenf\u00e9le megjelen\u00edt\u00e9st\u0151l).</li> <li>Jelen pillanatban minden,  megjelen\u00edt\u00e9shez kapcsol\u00f3d\u00f3 le\u00edr\u00e1s/logika a <code>PersonListPage</code>-ben van.  A mostani <code>PersonListPage</code>-et kett\u00e9v\u00e1gjuk:<ul> <li>A <code>PersonListPage.xaml</code> \u00e9s a code behindja lesz a View.</li> <li>Bevezet\u00fcnk egy a <code>PersonListPage</code>-hez tartoz\u00f3 ViewModel-t <code>PersonListPageViewModel</code> n\u00e9ven.<ul> <li> Kulcsfontoss\u00e1g\u00fa: a <code>PersonListPage</code> code behindb\u00f3l minden megjelen\u00edt\u00e9si logik\u00e1t \u00e1tmozgatunk a <code>PersonListPageViewModel</code>-be. A minta l\u00e9nyege az, hogy a View csak tiszt\u00e1n a fel\u00fclet le\u00edr\u00e1s\u00e1t tartalmazza, a megjelen\u00edt\u00e9si logik\u00e1nak a ViewModelben van a helye. </li> </ul> </li> </ul> </li> <li>A minta m\u00e1sik alappill\u00e9re: a View-nk tartalmaz egy hivatkoz\u00e1st a ViewModelj\u00e9re (m\u00e9gpedig egy tulajdons\u00e1g form\u00e1j\u00e1ban).<ul> <li>A p\u00e9ld\u00e1nkban azt jelenti, hogy a <code>PersonListPage</code>-nek kell legyen egy <code>PersonListPageViewModel</code> tulajdons\u00e1ga. </li> <li> Ez az\u00e9rt kulcsfontoss\u00e1g\u00fa, mert <code>PersonListPage</code> xaml f\u00e1jlunkban ezen tulajdons\u00e1gon kereszt\u00fcl tudunk adatk\u00f6t\u00e9st megval\u00f3s\u00edtani a ViewModel-be \u00e1tmozgatott tulajdons\u00e1gokra \u00e9s esem\u00e9nykezel\u0151kre! </li> </ul> </li> <li>A <code>PersonListPageViewModel</code> \"dolgozik\" a modellel \u00e9s kezeli a felhaszn\u00e1l\u00f3i interakci\u00f3kat (esem\u00e9nykezel\u0151k).</li> <li>Mivel a Relaxed, \u00e9s nem a Strict MVVM mint\u00e1t haszn\u00e1ljuk, a <code>Person</code> modelloszt\u00e1lyunk k\u00f6r\u00e9 m\u00e1r nem vezet\u00fcnk be egy <code>PersonViewModel</code> csomagol\u00f3t.</li> </ul> <p>Feladat: alak\u00edtsd \u00e1t a megl\u00e9v\u0151 logik\u00e1t \u00edgy, hogy a fenti elveket k\u00f6vet\u0151 MVVM mint\u00e1t k\u00f6vesse. A <code>PersonListPageViewModel</code> oszt\u00e1lyt egy \u00fajonnan l\u00e9trehozott <code>ViewModels</code> mapp\u00e1ba tedd. Pr\u00f3b\u00e1ld magad kidolgozni a megold\u00e1st a fenti seg\u00edts\u00e9g alapj\u00e1n! Ehhez egy el\u0151zetes tippet adunk, mert erre nehezebb r\u00e1j\u00f6nni: Az esem\u00e9nyekhez az esem\u00e9nykezel\u0151 m\u0171veleteket adatk\u00f6t\u00e9ssel is meg lehet adni: l\u00e1sd el\u0151ad\u00e1s dia \"Esem\u00e9nyek \u00e9s funkci\u00f3k k\u00f6t\u00e9se\" c\u00edmmel (az \u00e1talak\u00edt\u00e1s ut\u00e1n az esem\u00e9nykezel\u0151ket csak \u00edgy tudjuk megadni). Az is fontos, hogy adatk\u00f6tni csak publikus tulajdons\u00e1ghoz/m\u0171velethez lehet, ennek kapcs\u00e1n is lesz \u00e1talak\u00edtand\u00f3!</p> Tippek / megold\u00e1s visszaellen\u0151rz\u00e9se <ol> <li><code>PersonListPage.xaml.cs</code> code-behind f\u00e1jlb\u00f3l szinte mindent (kiv\u00e9ve <code>this.InitializeComponent()</code> h\u00edv\u00e1s a konstruktorban) \u00e1t kell mozgatni az \u00fajonnan bevezetett <code>PersonListPageViewModel</code>-be, mert ez mind UI logika.</li> <li>A <code>PersonListPageViewModel</code> publikus oszt\u00e1ly legyen.</li> <li>A <code>PersonListPage</code> code behindba fel kell venni egy ViewModel nev\u0171, <code>PersonListPageViewModel</code> t\u00edpus\u00fa, csak getterrel rendelkez\u0151 auto implement\u00e1lt tulajdons\u00e1got, \u00e9s ezt egy \u00faj objektumra inicializ\u00e1lni is kell. Vagyis a view hozza l\u00e9tre \u00e9s tartalmazza a ViewModel-t!</li> <li>A <code>PersonListPage.xaml</code>-ben a k\u00e9t <code>TextBox</code> adatk\u00f6t\u00e9s\u00e9t megfelel\u0151en igaz\u00edtani kell (a <code>NewPerson.Name</code> \u00e9s <code>NewPerson.Age</code> m\u00e1r egy szinttel m\u00e9lyebben, a code behind ViewModel tulajdons\u00e1g\u00e1n kereszt\u00fcl \u00e9rhet\u0151 el).</li> <li>A <code>PersonListPage.xaml</code>-ben az esem\u00e9nykezel\u0151k (<code>Click</code>) igaz\u00edt\u00e1sa h\u00e1rom helyen. Ezt tr\u00fckk\u00f6sebb. Esem\u00e9nykezel\u0151 f\u00fcggv\u00e9ny az eddig alkalmazott szintaktik\u00e1val nem adhat\u00f3 m\u00e1r meg, mert az esem\u00e9nykezel\u0151k nem a code behindban tal\u00e1lhat\u00f3k (\u00e1tker\u00fcltek a ViewModel-be). <ul> <li>Az esem\u00e9nyekhez az esem\u00e9nykezel\u0151 m\u0171veleteket adatk\u00f6t\u00e9ssel is meg lehet adni! L\u00e1sd el\u0151ad\u00e1s dia \"Esem\u00e9nyek \u00e9s funkci\u00f3k k\u00f6t\u00e9se\" c\u00edmmel. Ez nek\u00fcnk az\u00e9rt j\u00f3, mert a code behind ViewModel tulajdons\u00e1g\u00e1ban ott a <code>PersonListPageViewModel</code> objektum, melyben ott vannak az esem\u00e9nykezel\u0151k (<code>AddButton_Click</code>, <code>IncreaseButton_Click</code>, <code>DecreaseButton_Click</code>), ezeket kell k\u00f6t\u00f6tt tulajdons\u00e1gk\u00e9nt megadni az adatk\u00f6t\u00e9sben (pl. <code>ViewModel.AddButton_Click</code> stb.).</li> <li>Fontos, hogy az esem\u00e9nykezel\u0151 f\u00fcggv\u00e9nyek legyenek publikusak, m\u00e1sk\u00fcl\u00f6nben nem m\u0171k\u00f6dik az adatk\u00f6t\u00e9s (\u00e1t kell alak\u00edtani priv\u00e1tr\u00f3l).</li> </ul> </li> </ol> <p>Tov\u00e1bbi l\u00e9nyeges \u00e1talak\u00edtand\u00f3k:</p> <ul> <li>A ViewModel-ben jelenleg a <code>Click</code> esem\u00e9nykezel\u0151k nevei: <code>AddButton_Click</code>, <code>IncreaseButton_Click</code> \u00e9s <code>DecreaseButton_Click</code>. Ez nem szerencs\u00e9s. A ViewModel-ben \"szemantikailag\" nem esem\u00e9nykezel\u0151kben gondolkodunk. Helyette m\u00f3dos\u00edt\u00f3 m\u0171veletekben, melyek m\u00f3dos\u00edtj\u00e1k a ViewModel \u00e1llapot\u00e1t. A fentiek helyett ennek megfelel\u0151en sokkal jobban passzol\u00f3 \u00e9s kifejez\u0151 nevek az <code>AddPersonToList</code>, <code>IncreaseAge</code> \u00e9s <code>DecreaseAge</code>. Nevezd \u00e1t a f\u00fcggv\u00e9nyeket ennek megfelel\u0151en! Persze a tov\u00e1bbiakban is adatk\u00f6t\u00e9ssel ezeket kell k\u00f6tni a XAML f\u00e1jlban a <code>Click</code> esem\u00e9nyekhez.</li> <li>A fenti f\u00fcggv\u00e9nyek param\u00e9terlist\u00e1ja egyel\u0151re az \"<code>object sender, RoutedEventArgs e</code>\". Ugyanakkor ezeket a param\u00e9tereket nem haszn\u00e1ljuk semmire. Szerencs\u00e9re a x:Bind esem\u00e9ny adatk\u00f6t\u00e9s rugalmas annyira, hogy param\u00e9ter n\u00e9lk\u00fcli m\u0171velet is megadhat\u00f3, azzal is j\u00f3l m\u0171k\u00f6dik. Ennek tudat\u00e1ban t\u00e1vol\u00edtsd el a fenti felesleges param\u00e9tereket a ViewModel\u00fcnk h\u00e1rom f\u00fcggv\u00e9ny\u00e9b\u0151l. \u00cdgy egy letisztultabb megold\u00e1st kapunk.</li> </ul> <p>Ellen\u0151rizd, hogy az \u00e1talak\u00edt\u00e1sok ut\u00e1n is pontosan ugyan\u00fagy m\u0171k\u00f6dik az alkalmaz\u00e1s, mint el\u0151tte!</p> <p>Mit nyert\u00fcnk azzal, hogy kor\u00e1bbi megold\u00e1sunkat MVVM alap\u00fara alak\u00edtottuk \u00e1t? A v\u00e1laszt az el\u0151ad\u00e1sanyag adja meg! P\u00e1r dolog kiemelve:</p> <ul> <li>Sz\u00e9pen k\u00fcl\u00f6nv\u00e1lnak (nem keverednek) a k\u00fcl\u00f6nb\u00f6z\u0151 felel\u0151ss\u00e9g\u0171 r\u00e9szek, \u00edgy jobban meg\u00e9rthet\u0151:<ul> <li>UI f\u00fcggetlen logika (model \u00e9s kapcsol\u00f3d\u00f3 oszt\u00e1lyok).</li> <li>UI logika (ViewModel)</li> <li>UI puszta megjelen\u00e9s (View)</li> </ul> </li> <li>Mivel a UI logika k\u00fcl\u00f6n van, lehet(ne) hozz\u00e1 unit teszteket \u00edrni</li> </ul> <p>Min\u00e9l komplexebb egy alkalmaz\u00e1s, ann\u00e1l ink\u00e1bb igazak ezek.</p> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>f2.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>PersonListPageViewModel.cs</code> megnyitva.</li> </ul>"},{"location":"hazi/5-mvvm/#feladat-3-vezerlok-tiltasaengedelyezese","title":"Feladat 3 - Vez\u00e9rl\u0151k tilt\u00e1sa/enged\u00e9lyez\u00e9se","text":"<p>Jelen \u00e1llapotban kiss\u00e9 furcs\u00e1n viselkedik az alkalmaz\u00e1s: a \"-\" gombbal negat\u00edv tartom\u00e1nyba is vihet\u0151 egy \u00e9letkor, vagy a \"+\"-szal 150 f\u00f6l\u00e9, illetve a \"+Add\" gombbal olyan szem\u00e9ly is felvehet\u0151, mely \u00e9rtelmetlen tulajdons\u00e1gokkal rendelkezik. Ezeket a gombokat le kellene tiltani, amikor az \u00e1ltaluk kiv\u00e1ltott m\u0171veletnek nincs \u00e9rtelme, illetve enged\u00e9lyezni, amikor van.</p> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben val\u00f3s\u00edtsuk meg a \"-\" gomb tilt\u00e1s\u00e1t/enged\u00e9lyez\u00e9s\u00e9t ennek megfelel\u0151en. A gomb akkor legyen csak enged\u00e9lyezett, ha a szem\u00e9ly \u00e9letkora 0-n\u00e1l nagyobb.</p> <p>Pr\u00f3b\u00e1ld ezt els\u0151 k\u00f6rben magadt\u00f3l megval\u00f3s\u00edtani, legal\u00e1bbis az alapjait lefektetni! Mindenk\u00e9ppen adatk\u00f6t\u00e9s alap\u00fa megold\u00e1sban gondolkozz, csak ez fogadhat\u00f3 el! Ha elakadsz, a megold\u00e1sod nem \"akar\" m\u0171k\u00f6dni, akkor gondold \u00e1t, mi lehet az oka, a megold\u00e1st pedig az al\u00e1bbiaknak megfelel\u0151en alak\u00edtsd ki.</p> <p>A probl\u00e9m\u00e1ra t\u00f6bbf\u00e9le megold\u00e1s is kidolgozhat\u00f3. Mindben k\u00f6z\u00f6s, hogy a \"-\" gomb <code>IsEnabled</code> tulajdons\u00e1g\u00e1t k\u00f6tj\u00fck valamilyen m\u00f3don. Az \u00e1ltalunk v\u00e1lasztott megold\u00e1sban egy a <code>PersonListPageViewModel</code>-ben \u00fajonnan bevezetett bool tulajdons\u00e1ghoz k\u00f6ss\u00fck. </p> PersonListPageViewModel.cs<pre><code>    public bool IsDecrementEnabled\n    {\n        get { return NewPerson.Age &gt; 0; }\n    }\n</code></pre> PersonListPage.xaml-be a '-' gombhoz<pre><code>    IsEnabled=\"{x:Bind ViewModel.IsDecrementEnabled, Mode=OneWay}\"\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki! Sajnos nem m\u0171k\u00f6dik, a \"-\" gomb nem tilt\u00f3dik le, amikor 0 vagy kisebb \u00e9rt\u00e9k\u0171 lesz az \u00e9letkor (pl. a gomb sokszori kattint\u00e1s\u00e1val). Ha t\u00f6r\u00e9spontot tesz\u00fcnk az <code>IsDecrementEnabled</code> belsej\u00e9be, \u00e9s \u00edgy ind\u00edtjuk az alkalmaz\u00e1st, azt tapasztaljuk, hogy a tulajdons\u00e1g \u00e9rt\u00e9k\u00e9t csak egyszer k\u00e9rdezi le a k\u00f6t\u00f6tt vez\u00e9rl\u0151, az alkalmaz\u00e1s indul\u00e1sakor: ut\u00e1na hi\u00e1ba kattintunk pl. a \"-\" gombon, t\u00f6bbsz\u00f6r nem. Pr\u00f3b\u00e1ld is ki!</p> <p>Gondold \u00e1t, mi okozza ezt, \u00e9s csak ut\u00e1na haladj tov\u00e1bb az \u00fatmutat\u00f3val!</p> Indokl\u00e1s <p>A kor\u00e1bban tanultaknak megfelel\u0151en az adatk\u00f6t\u00e9s csak akkor k\u00e9rdezi le a forr\u00e1stulajdons\u00e1g (eset\u00fcnkben <code>IsDecrementEnabled</code>) \u00e9rt\u00e9k\u00e9t, ha annak v\u00e1ltoz\u00e1s\u00e1r\u00f3l az <code>INotifyPropertyChanged</code> seg\u00edts\u00e9g\u00e9vel \u00e9rtes\u00edt\u00e9st kap! M\u00e1rpedig, jelen megold\u00e1sunkban hi\u00e1ba v\u00e1ltozik a <code>NewPerson</code> objektum <code>Age</code> tulajdons\u00e1ga, ennek megt\u00f6rt\u00e9ntekor a semmif\u00e9le \u00e9rtes\u00edt\u00e9s nincs az erre \u00e9p\u00fcl\u0151 <code>IsDecrementEnabled</code> tulajdons\u00e1g megv\u00e1ltoz\u00e1s\u00e1r\u00f3l!</p> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben val\u00f3s\u00edtsd meg a kapcsol\u00f3d\u00f3 v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st a <code>PersonListPageViewModel</code> oszt\u00e1lyban:</p> <ul> <li>MVVM Toolkit \"alapokon\" val\u00f3s\u00edtsd meg az <code>INotifyPropertyChanged</code> interf\u00e9szt<ul> <li><code>ObservableObject</code> sz\u00e1rmaztat\u00e1st haszn\u00e1lj.</li> <li>Az <code>IsDecrementEnabled</code> tulajdons\u00e1g maradhat a mostani form\u00e1j\u00e1ban (egy getter only property), nem sz\u00fcks\u00e9ges <code>[ObservableProperty]</code> alap\u00fara \u00e1t\u00edrni (de az is j\u00f3 megold\u00e1s, \u00e9s a h\u00e1zi feladat tekintet\u00e9ben is teljesen elfogadhat\u00f3, csak kicsit m\u00e1sk\u00e9nt kell dolgozni a k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben).</li> </ul> </li> <li>Pr\u00f3b\u00e1ld magadt\u00f3l megval\u00f3s\u00edtani a k\u00f6vetkez\u0151t a ViewModel oszt\u00e1lyban (a <code>Person</code> oszt\u00e1ly marad v\u00e1ltozatlan): amikor a <code>NewPerson.Age</code> v\u00e1ltozik, akkor az <code>ObservableObject</code> \u0151sb\u0151l \u00f6r\u00f6k\u00f6lt <code>OnPropertyChanged</code> h\u00edv\u00e1s\u00e1val jelezz\u00fck a <code>IsDecrementEnabled</code> tulajdons\u00e1g v\u00e1ltoz\u00e1s\u00e1t. Tipp: a <code>Person</code> oszt\u00e1ly m\u00e1r rendelkezik <code>PropertyChanged</code> esem\u00e9nnyel, hiszen maga is megval\u00f3s\u00edtja az <code>INotifyPropertyChanged</code> interf\u00e9szt, erre az esem\u00e9nyre fel lehet iratkozni! Az egyszer\u0171s\u00e9g \u00e9rdek\u00e9ben az nem zavar minket, ha az <code>IsDecrementEnabled</code> v\u00e1ltoz\u00e1s\u00e1t esetleg akkor is jelezz\u00fck, ha tulajdonk\u00e9pen \"logikailag\" esetleg nem is v\u00e1ltozik.</li> <li>A fentieket k\u00fcl\u00f6n esem\u00e9nykezel\u0151 f\u00fcggv\u00e9ny bevezet\u00e9se n\u00e9lk\u00fcl is meg lehet oldani (tipp: esem\u00e9nykezel\u0151 megad\u00e1sa lambda kifejez\u00e9ssel).</li> </ul> <p>Teszteld is a megold\u00e1sod! Ha j\u00f3l dolgozt\u00e1l, a gombnak akkor is le kell tilt\u00f3dnia, ha a TextBoxba k\u00e9zzel \u00edrsz be negat\u00edv \u00e9letkor \u00e9rt\u00e9ket (\u00e9s ut\u00e1na kikattintasz a TextBoxb\u00f3l). Gondold \u00e1t, mi\u00e9rt van ez \u00edgy!</p> <p>A \"+\" gombra \u00e9s a \"+Add\" gombra is dolgozz ki hasonl\u00f3 megold\u00e1st!</p> <ul> <li>Az \u00e9letkor maxim\u00e1lis \"elfogadhat\u00f3\" \u00e9rt\u00e9ke 150 legyen.</li> <li>A n\u00e9v csak akkor elfogadhat\u00f3, ha van benne legal\u00e1bb egy nem whitespace karakter (ez ut\u00f3bbi ellen\u0151rz\u00e9s\u00e9re a string oszt\u00e1ly <code>IsNullOrWhiteSpace</code> statikus m\u0171velet\u00e9t haszn\u00e1ld).</li> <li>Azzal az esettel nem kell foglalkozni, hogy ha a felhaszn\u00e1l\u00f3 az \u00e9letkor TextBox-ba nem \u00e9rv\u00e9nyes sz\u00e1mot \u00edr be (ezt jelen megold\u00e1ssal nem is lehet kezelni).</li> </ul> <p>A tesztel\u00e9s sor\u00e1n azt tapasztaljuk, hogy ha pl. kit\u00f6r\u00f6lj\u00fck a nevet a n\u00e9v TextBox-ban, a \"+Add\" gomb \u00e1llapota nem azonnal v\u00e1ltozik, hanem csak ha elhagyjuk a TextBox-ot? Mi\u00e9rt van ez? M\u00f3dos\u00edtsd a megold\u00e1sod, hogy ez minden sz\u00f6veg v\u00e1ltoz\u00e1skor, a TextBox elhagy\u00e1sa n\u00e9lk\u00fcl is megt\u00f6rt\u00e9njen. Tipp: l\u00e1sd el\u0151ad\u00e1sanyag \"x:Bind mikor friss\u00fcl az adat?\" c\u00edm\u0171 dia.</p> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>f3.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>az \u00e9letkor legyen 0-ra lecs\u00f6kkentve az alkalmaz\u00e1sban,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>PersonListPageViewModel.cs</code> megnyitva.</li> </ul>"},{"location":"hazi/5-mvvm/#feladat-4-command-hasznalata","title":"Feladat 4 - Command haszn\u00e1lata","text":"<p>Jelen pillanatban a \"-\" gomb vonatkoz\u00e1s\u00e1ban eset\u00e9ben k\u00e9t feladatunk van:</p> <ul> <li>A <code>Click</code> eset\u00e9n az esem\u00e9nykezel\u0151 m\u0171velet futtat\u00e1sa</li> <li>A gomb tilt\u00e1sa/enged\u00e9lyez\u00e9se az <code>IsEnabled</code> tulajdons\u00e1g seg\u00edts\u00e9g\u00e9vel</li> </ul> <p>Bizonyos vez\u00e9rl\u0151k - ilyen a gomb is - t\u00e1mogatj\u00e1k, hogy ezt a kett\u0151t, a Command mint\u00e1ra \u00e9p\u00edtve, egy parancs objektum seg\u00edts\u00e9g\u00e9vel adhassuk meg. A  Command tervez\u00e9si minta koncepci\u00f3j\u00e1val a \"Tervez\u00e9si mint\u00e1k 3\" el\u0151ad\u00e1s alapj\u00e1n lehet r\u00e9sztelesebben megismerkedni (b\u00e1r ott csak az alap Command mint\u00e1val ismerkedt\u00fcnk meg, mely a parancs futtat\u00e1s\u00e1t t\u00e1mogatja, tilt\u00e1s\u00e1t/enged\u00e9lyez\u00e9s\u00e9t nem). A Command minta MVVM specifikus megval\u00f3s\u00edt\u00e1s\u00e1val a WinUI el\u0151ad\u00e1ssorozat v\u00e9ge fel\u00e9, a \"Command minta\" c\u00edm\u0171 di\u00e1t\u00f3l kezdve lehet megismerkedni.</p> <p>Az alapelv a k\u00f6vetkez\u0151: a gombn\u00e1l a <code>Click</code> \u00e9s <code>IsEnabled</code> \"megad\u00e1sa\" helyett a gomb <code>Command</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtjuk egy <code>ICommand</code> interf\u00e9szt megval\u00f3s\u00edt\u00f3 command objektumra. A futtat\u00e1s, illetve tilt\u00e1s/enged\u00e9lyez\u00e9s m\u00e1r ezen command objektum feladata.</p> <p>Alapesetben egy alkalmaz\u00e1sban minden parancshoz egy k\u00fcl\u00f6n <code>ICommand</code> implement\u00e1ci\u00f3t kellene k\u00e9sz\u00edteni. Ez azonban sok parancs eset\u00e9n sok oszt\u00e1ly bevezet\u00e9s\u00e9t ig\u00e9nyli. Az MVVM Toolkit ebben is a seg\u00edts\u00e9g\u00fcnkre siet. Biztos\u00edt egy <code>RelayCommand</code> oszt\u00e1lyt, mely megval\u00f3s\u00edtja az <code>ICommand</code> interf\u00e9szt. Ez az oszt\u00e1ly b\u00e1rmilyen parancs/k\u00f3d futtat\u00e1s\u00e1ra haszn\u00e1lhat\u00f3, \u00edgy nem kell tov\u00e1bbi command oszt\u00e1lyokat bevezetni. Hogyan lehets\u00e9ges ez? \u00dagy, hogy a <code>RelayCommand</code>-nak konstruktor param\u00e9terekben, k\u00e9t delegate form\u00e1j\u00e1ban tudjuk a v\u00e9grehajt\u00e1shoz \u00e9s a tilt\u00e1shoz/enged\u00e9lyez\u00e9shez tartoz\u00f3k k\u00f3dot:</p> <ul> <li>Els\u0151 param\u00e9terben a parancs futtat\u00e1sakor v\u00e9grehajtand\u00f3 k\u00f3dot adjuk meg.</li> <li>M\u00e1sodik param\u00e9terben (ez opcion\u00e1lis) azt a k\u00f3dot, melyet a command h\u00edv annak ellen\u0151rz\u00e9s\u00e9re, hogy enged\u00e9lyezni/tiltani kell mag\u00e1t (az itt megadott f\u00fcggv\u00e9nynek  bool-lal kell visszat\u00e9rnie, true esetben enged\u00e9lyezett lesz a parancs).</li> </ul> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben a \"-\" gomb kezel\u00e9s\u00e9t alak\u00edtjuk \u00e1t command alap\u00fara. El\u0151sz\u00f6r pr\u00f3b\u00e1ld a nagyj\u00e1t \u00f6n\u00e1ll\u00f3an megval\u00f3s\u00edtani a kapcsol\u00f3d\u00f3 WinUI el\u0151ad\u00e1sanyag alapj\u00e1n. A parancs futtat\u00e1sa egyszer\u0171bb, de a parancs tilt\u00e1s-enged\u00e9lyez\u00e9shez lesz m\u00e9g teend\u0151nk. F\u0151bb l\u00e9p\u00e9sek:</p> <ul> <li>Egy csak getterrel rendelkez\u0151 publikus <code>RelayCommand</code> tulajdons\u00e1g felv\u00e9tele a ViewModel-be, pl. <code>DecreaseAgeCommand</code> n\u00e9ven. Az el\u0151ad\u00e1sanyaggal ellent\u00e9tben eset\u00fcnkben nem kell a <code>RelayCommand</code>-nak generikus param\u00e9tert megadni, mert a parancskezel\u0151 f\u00fcggv\u00e9ny\u00fcnknek (<code>DecreaseAge</code>) nincs param\u00e9tere.</li> <li>Az \u00fajonnan bevezetett tulajdons\u00e1gnak a ViewModel konstruktorban \u00e9rt\u00e9ket adni. A <code>RelayCommand</code> konstruktor param\u00e9tereit add meg megfelel\u0151en.</li> <li>A <code>PersonListPage.xaml</code>-ben a \"-\" gombn\u00e1l a <code>Click</code> \u00e9s <code>IsEnabled</code> adatk\u00f6t\u00e9s\u00e9re nincs m\u00e1r sz\u00fcks\u00e9g, ezek t\u00f6rlend\u0151k. Helyette a gomb <code>Command</code> tulajdons\u00e1g\u00e1t k\u00f6sd a ViewModel-ben az el\u0151z\u0151 l\u00e9p\u00e9sben bevezetett <code>DecreaseAgeCommand</code> tulajdons\u00e1ghoz.</li> </ul> <p>Ha kipr\u00f3b\u00e1ljuk, a parancs futtat\u00e1s m\u0171k\u00f6dik, a tilt\u00e1s/enged\u00e9lyez\u00e9s viszont m\u00e9g nem: ha j\u00f3l megfigyelj\u00fck, a gomb mindig enged\u00e9lyezett marad megjelen\u00e9s\u00e9ben. Ennek, kicsit jobban belegondolva, logikus oka van: a <code>RelayCommand</code> meg tudja ugyan h\u00edvni a m\u00e1sodik konstruktor param\u00e9ter\u00e9ben megadott m\u0171veletet az \u00e1llapot ellen\u0151rz\u00e9s\u00e9hez, de nem tudja, hogy minden <code>NewPerson.Age</code> v\u00e1ltoz\u00e1skor meg kellene ezt tennie! Ezen tudunk seg\u00edteni. A ViewModel-\u00fcnk konstruktor\u00e1ban m\u00e1r feliratkoztunk kor\u00e1bban a <code>NewPerson.PropertyChanged</code> esem\u00e9nyre: erre \u00e9p\u00edtve, amikor v\u00e1ltozik az \u00e9letkor (vagy amikor v\u00e1ltozhat, az nem probl\u00e9ma, ha n\u00e9ha feleslegesen megtessz\u00fck) h\u00edvd meg a <code>DecreaseAgeCommand</code> <code>NotifyCanExecuteChanged</code> m\u0171velet\u00e9t. Ennek a m\u0171veletnek nagyon besz\u00e9des neve van: \u00e9rtes\u00edti a parancsot, hogy megv\u00e1ltoz(hat)ott azon \u00e1llapot, mely alapj\u00e1n a parancs tiltott/enged\u00e9lyezett \u00e1llapota \u00e9p\u00edt. \u00cdgy a parancs friss\u00edteni fogja mag\u00e1t, pontosabban a parancshoz tartoz\u00f3 gomb \u00e1llapot\u00e1t.</p> <p>\u00cdrd \u00e1t \"+\" gomb kezel\u00e9s\u00e9t is hasonl\u00f3an, parancs alap\u00fara! A \"+Add\" gomb kezel\u00e9s\u00e9t ne v\u00e1ltoztasd meg!</p> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>f4.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a n\u00e9v TextBox legyen \u00fcres az alkalmaz\u00e1sban,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>PersonListPageViewModel.cs</code> megnyitva.</li> </ul>"},{"location":"hazi/5-mvvm/#feladat-5-command-hasznalata-mvvm-toolkit-alapu-kodgeneralassal","title":"Feladat 5 - Command haszn\u00e1lata MVVM Toolkit alap\u00fa k\u00f3dgener\u00e1l\u00e1ssal","text":"<p>Az el\u0151z\u0151 feladatban a command tulajdons\u00e1gok bevezet\u00e9s\u00e9t \u00e9s azok p\u00e9ld\u00e1nyos\u00edt\u00e1s\u00e1t \"manu\u00e1lisan\" oldottuk meg. Az MVVM Toolkit ezt le tudja egyszer\u0171s\u00edteni: megfelel\u0151 attrib\u00fatum alkalmaz\u00e1sa eset\u00e9n a tulajdons\u00e1got \u00e9s a p\u00e9ld\u00e1nyos\u00edt\u00e1st automatikusan le tudja gener\u00e1lni.</p> <p>Alak\u00edtsuk \u00e1t a <code>DecreaseAgeCommand</code> kezel\u00e9s\u00e9t (csak ezt, az <code>IncreaseAgeCommand</code> maradjon!) gener\u00e1lt k\u00f3d alap\u00fara:</p> <ol> <li>L\u00e1sd el a <code>PersonListPageViewModel</code> oszt\u00e1lyt a <code>partial</code> kulcssz\u00f3val.</li> <li>T\u00f6r\u00f6ld ki a <code>DecreaseAgeCommand</code> tulajdons\u00e1got \u00e9s ennek p\u00e9ld\u00e1nyos\u00edt\u00e1s\u00e1t a konstruktorb\u00f3l. </li> <li>A <code>DecreaseAge</code> m\u0171veletet l\u00e1sd el ezzel az attrib\u00fatummal: <code>[RelayCommand(CanExecute = nameof(IsDecrementEnabled))]</code>. <ul> <li>Ennek hat\u00e1s\u00e1ra a k\u00f3dgener\u00e1tor bevezet egy <code>RelayCommand</code> tulajdons\u00e1got az oszt\u00e1lyban, melynek neve a m\u0171velet\u00fcnk neve (<code>DecreaseAge</code>), hozz\u00e1f\u0171zve a \"Command\" stringet. Ezzel meg is kapjuk a kor\u00e1bban k\u00e9zzel bevezetett <code>DecreaseAgeCommand</code> nev\u0171 tulajdons\u00e1got.</li> <li>A <code>CanExecute</code> attrib\u00fatum tulajdons\u00e1gban egy string form\u00e1ban annak a boollal visszat\u00e9r\u0151 m\u0171veletnek vagy tulajdons\u00e1gnak a nev\u00e9t lehet megadni, melyet a gener\u00e1lt k\u00f3d a parancs tilt\u00e1s\u00e1nak/enged\u00e9lyez\u00e9s\u00e9nek sor\u00e1n haszn\u00e1l (a RelayCommand konstruktor m\u00e1sodik param\u00e9tere lesz). Nek\u00fcnk m\u00e1r van ilyen tulajdons\u00e1gunk, \"IsDecrementEnabled\" n\u00e9vben. Az\u00e9rt nem egyszer\u0171 string form\u00e1j\u00e1ban adjuk meg, mert ha ut\u00f3lag valaki \u00e1tnevezi az <code>IsDecrementEnabled</code> m\u0171veletet, akkor a mostani \"IsDecrementEnabled\" m\u00e1r nem j\u00f3 m\u0171veletre mutatna. A <code>nameof</code> kifejez\u00e9s haszn\u00e1lat\u00e1val ez a probl\u00e9ma elker\u00fclhet\u0151. A <code>CanExecute</code> megad\u00e1sa \u00e1ltal\u00e1noss\u00e1g\u00e1ban nem k\u00f6telez\u0151 (nem adjuk meg, ha nem akarjuk a parancsot soha tiltani).</li> </ul> </li> <li>Teszteld a megold\u00e1st (\u00e9letkor cs\u00f6kkent\u00e9se), ugyan\u00fagy kell m\u0171k\u00f6dnie, mint kor\u00e1bban. Egyr\u00e9szt cs\u00f6kkentenie kell az \u00e9letkort, m\u00e1sr\u00e9szt 0 el\u00e9r\u00e9sekor le kell tiltania a gombot. Ha ez ut\u00f3bbi nem m\u0171k\u00f6dik, akkor egy lehets\u00e9ges ok, hogy a <code>DecreaseAgeCommand</code>-ra a <code>NotifyCanExecuteChanged</code> h\u00edv\u00e1s\u00e1t t\u00f6r\u00f6lted az \u00e1talak\u00edt\u00e1s sor\u00e1n. Erre most is sz\u00fcks\u00e9g van, hiszen \u00e1talak\u00edt\u00e1sunk csak arr\u00f3l sz\u00f3lt, hogy a <code>DecreaseAgeCommand</code>-ot MVVM toolkit alapokon k\u00f3dgener\u00e1torral, egyszer\u0171bben \u00e1ll\u00edtjuk el\u0151.</li> </ol> <p>BEADAND\u00d3</p> <p>K\u00e9sz\u00edts egy k\u00e9perny\u0151ment\u00e9st <code>f5.png</code> n\u00e9ven az al\u00e1bbiak szerint:</p> <ul> <li>Ind\u00edtsd el az alkalmaz\u00e1st. Ha sz\u00fcks\u00e9ges, m\u00e9retezd \u00e1t kisebbre, hogy ne foglaljon sok helyet a k\u00e9perny\u0151n,</li> <li>a \u201eh\u00e1tt\u00e9rben\u201d a Visual Studio legyen, a <code>PersonListPageViewModel.cs</code> megnyitva.</li> </ul>"},{"location":"hazi/5-mvvm/#feladat-6-strict-mvvm","title":"Feladat 6 - Strict MVVM","text":"<p>Jelen megold\u00e1sunk a Relaxed MVVM megk\u00f6zel\u00edt\u00e9st k\u00f6veti. A k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben \u00e1tgondoljuk, mit is jelent ez pontosan, \u00e9s mit jelentene a Strict MVVM megk\u00f6zel\u00edt\u00e9sre val\u00f3 \u00e1t\u00e1ll\u00e1s (megval\u00f3s\u00edtani nem fogjuk).</p> <p>Jelen megold\u00e1sunk a Relaxed MVVM megk\u00f6zel\u00edt\u00e9st k\u00f6veti, vagyis a View-ban k\u00f6zvetlen\u00fcl a <code>Person</code> modell oszt\u00e1lyhoz adatk\u00f6t\u00fcnk (\u00e9s a <code>PersonPageViewModel</code>-ben is a <code>Person</code> modell oszt\u00e1lyt haszn\u00e1ljuk). Ennek el\u0151nye az egyszer\u0171s\u00e9g. De van egy h\u00e1tr\u00e1nya is: a <code>Person</code> modell oszt\u00e1lyunkban k\u00e9nytelenek voltunk megval\u00f3s\u00edtani az <code>INotifyPropertyChanged</code> interf\u00e9szt (m\u00e9gha az MVVM toolkit seg\u00edts\u00e9g\u00e9vel is), k\u00fcl\u00f6nben nem m\u0171k\u00f6dne j\u00f3l az adatk\u00f6t\u00e9s. Vannak olyan helyzetek, amikor a modell oszt\u00e1lyunkat nem szeretn\u00e9nk ilyen, n\u00e9mik\u00e9ppen m\u00e1r a fel\u00fcletet kiszolg\u00e1l\u00f3 logik\u00e1val \"szennyezni\", hanem a lehet\u0151 legtiszt\u00e1bb form\u00e1ban szeretn\u00e9nk a modell oszt\u00e1lyunkat tartani. Ekkor a Strict MVVM megk\u00f6zel\u00edt\u00e9s jelenti a megold\u00e1st (l\u00e1sd \"Strict MVVM - be\u00e1gyaz\u00e1s\" el\u0151ad\u00e1sdia). Mit jelentene ez a sz\u00e1munkra, mit kellene a k\u00f3don v\u00e1ltoztatni? Gondold \u00e1t az el\u0151ad\u00e1sdia alapj\u00e1n a sz\u00fcks\u00e9ges v\u00e1ltoztat\u00e1sokat! Megval\u00f3s\u00edtani/dokument\u00e1lni nem kell, ez csak egy \u00e1tgondol\u00f3s feladat \ud83d\ude0a!</p> Strict MVVM alap\u00fa megold\u00e1s <ul> <li>A <code>Person</code> modell oszt\u00e1lyban m\u00e1r nem val\u00f3s\u00edtan\u00e1nk meg az <code>INotifyPropertyChanged</code> interf\u00e9szt, az oszt\u00e1ly leegyszer\u0171s\u00f6dik, csak egyszer\u0171 tulajdons\u00e1gokat tartalmazna (ez volt a c\u00e9l).</li> <li>Be kellene vezetni egy <code>PersonViewModel</code> oszt\u00e1lyt (mely egy <code>Person</code> modell objektumot csomagolna be). Ebben:<ul> <li>Be kellene vezetni a <code>Name</code> \u00e9s <code>Age</code> tulajdons\u00e1gokat. </li> <li>Meg kellene val\u00f3s\u00edtani az <code>INotifyPropertyChanged</code> interf\u00e9szt:<ul> <li><code>ObservableObject</code> sz\u00e1rmaztat\u00e1s</li> <li>A tulajdons\u00e1gok setter\u00e9ben a <code>SetProperty</code> \u0151sb\u0151l \u00f6r\u00f6k\u00f6lt seg\u00e9df\u00fcggv\u00e9ny haszn\u00e1lata (hogy kiv\u00e1lt\u00f3djon a <code>PropertyChanged</code> esem\u00e9ny)</li> </ul> </li> </ul> </li> <li>A Viewhoz tartoz\u00f3 <code>PersonPageViewModel</code>-\u00fcnket \u00e1t kellene alak\u00edtani, hogy ne a <code>Person</code> modell, hanem az \u00faj <code>PersonViewModel</code>-t haszn\u00e1lja.</li> </ul>"},{"location":"hazi/5-mvvm/index_eng/","title":"5<sup>th</sup> Homework - MVVM","text":""},{"location":"hazi/5-mvvm/index_eng/#introduction","title":"Introduction","text":"<p>In this homework, you will refactor the person registration application implemented in XAML Lab 3 so that it follows the MVVM pattern, and you will also get introduced to using the MVVM Toolkit.</p> <p>This independent task is based on the MVVM topic covered at the end of the WinUI lecture series. Its practical foundation is provided by Lab 5 \u2013 MVVM.</p> <p>By reviewing the related lecture material, the tasks in this independent exercise can be completed on your own using the brief guidance provided after each task description (some sections may be collapsed by default).</p> <p>Goals of this exercise: * Practice using the MVVM pattern * Learn to use NuGet references * Get familiar with the MVVM Toolkit * Practice advanced XAML techniques</p> <p>Information about the required development environment is available here, and it is the same as for the 3<sup>rd</sup> Homework.</p>"},{"location":"hazi/5-mvvm/index_eng/#submission-process","title":"Submission process","text":"<ul> <li>The submission process is the same as in previous assignments. Use GitHub Classroom to create a personal repository. The invitation URL can be found on Teams or on the AUT portal. It is important to use the correct invitation URL for this specific assignment (each homework has a different URL). Clone the repository that gets created \u2014 it will include the expected folder structure for your solution. After completing the tasks, commit and push your work.</li> <li>Open and work in the <code>HelloXaml.sln</code> solution file from the cloned folder.</li> <li> <p> Many tasks require you to take screenshots of parts of your solution, which serve as proof that you created the solution yourself. The required content of each screenshot is specified clearly within the task descriptions. Save the screenshots as part of your submission \u2014 place them in the root folder of your repository (next to neptun.txt). These screenshots will be uploaded to GitHub along with the rest of your project. Since the repository is private, only the instructors can access it. If a screenshot includes anything you don\u2019t want to upload, you may blur or crop that part before submission.</p> </li> <li> <p> This assignment does not include a functional pre-checker: Although a check will run after each push, it only verifies whether neptun.txt is filled out. The actual evaluation will be performed by the lab instructors after the deadline.</p> </li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#constraints","title":"Constraints","text":"<p> Use of the MVVM Pattern is Mandatory!     This homework is focused on practicing the MVVM pattern, so applying the MVVM architecture is required for all tasks. Any deviation from this requirement will result in rejection of the submission during evaluation.</p>"},{"location":"hazi/5-mvvm/index_eng/#task-0-reviewing-the-initial-state","title":"Task 0 \u2013 Reviewing the initial state","text":"<p>The starting state is essentially the same as the final state of Lab 3 \u2013 The design of the user interface. That is, an application where users can enter personal data into a list. Compared to the lab's final state, there's one small change. In the lab, the entire UI was defined in <code>MainWindow.xaml</code> (and the corresponding code-behind file). In this initial solution, that code has been moved to the <code>PersonListPage.xaml</code> (and its code-behind file) located in the Views folder. <code>PersonListPage</code> is not a <code>Window</code> but rather a class derived from <code>Page</code> (check this in the code-behind file!). Otherwise, nothing else has changed. As its name implies, a <code>Page</code> represents a \"page\" in an application: it cannot display itself alone \u2014 it must be placed inside a window. The advantage of using pages is that it allows navigation between different views (<code>Page</code> objects) inside the same window. We will not use navigation in this assignment \u2014 we will have only one page. The sole purpose of using a <code>Page</code> here is to demonstrate that in an MVVM architecture, views can be implemented using not only <code>Window</code> objects, but also <code>Page</code> objects.</p> <p>Since everything was moved from <code>MainWindow</code> to <code>PersonListPage</code>, the <code>MainWindow.xaml</code> now contains nothing but an instantiation of the <code>PersonListPage</code> object:</p> <pre><code>&lt;views:PersonListPage/&gt;\n</code></pre> <p>Check the code to confirm that this is indeed the case!</p>"},{"location":"hazi/5-mvvm/index_eng/#mainwindow-title","title":"MainWindow title","text":"<p> The title of the main window must be the text \"MVVM - [YOUR NEPTUN CODE]\". For example, if your Neptun code is ABCDEF, the full title should be: MVVM - ABCDEF. To do this, set the <code>Title</code> property in the <code>MainWindow.xaml</code> file.</p>"},{"location":"hazi/5-mvvm/index_eng/#task-1-using-the-mvvm-toolkit","title":"Task 1 \u2013 Using the MVVM Toolkit","text":"<p>In the existing application, the <code>Person</code> class located in the <code>Models</code> folder already implements the <code>INotifyPropertyChanged</code> interface (also known as INPC). This means it exposes a <code>PropertyChanged</code> event, and within the set methods of both <code>Name</code> and <code>Age</code>, it raises the <code>PropertyChanged</code> event to notify about changes. (Examine this carefully in the <code>Person.cs</code> file.)</p> <p>As a warm-up or refresher \u2014 after reviewing the code (<code>PersonListPage.xaml</code> and <code>PersonListPage.xaml.cs</code>) thoroughly and running the application \u2014 try to answer this question for yourself: Why was implementing <code>INotifyPropertyChanged</code> necessary in this application?</p> The Answer (Review) <p>In the application, inside <code>PersonListPage.xaml</code>, the <code>Text</code> properties of the <code>TextBox</code> controls (the targets of the bindings) are bound to the <code>Name</code> and <code>Age</code> properties of the <code>NewPerson</code> object (a <code>Person</code> instance defined in the code-behind \u2014 these are the sources of the bindings). If you look at the code, you'll see that <code>NewPerson.Name</code> and <code>NewPerson.Age</code> are indeed modified programmatically in the code. For the UI controls to reflect these changes (and stay in sync with the data source), they must be notified when the source properties (<code>Name</code>, <code>Age</code>) change. This is why the class that contains those properties \u2014 <code>Person</code> \u2014 needs to implement the <code>INotifyPropertyChanged</code> interface and raise the <code>PropertyChanged</code> event properly whenever those properties are updated.</p> <p>Run the application and check that pressing the '+' and '\u2013' buttons updates <code>NewPerson.Age</code> \u2014 and that these changes are reflected in the age display <code>TextBox</code>.</p> <p>You'll notice that the implementation of <code>INotifyPropertyChanged</code> in the <code>Person</code> class is quite verbose. Review the lecture slides, where slides illustrate the main alternatives for implementing <code>INotifyPropertyChanged</code>. The most concise solution is using the MVVM Toolkit \u2014 in the next step, we will refactor this verbose, manual INPC implementation to use the MVVM Toolkit.</p>"},{"location":"hazi/5-mvvm/index_eng/#task-1a-adding-mvvm-toolkit-via-nuget-reference","title":"Task 1/a - Adding MVVM Toolkit via NuGet Reference","text":"<p>The first step is to add a NuGet reference to the MVVM Toolkit, so it can be used within the project.</p> <p>Task: Add a NuGet reference to the package \"CommunityToolkit.Mvvm\" in your project. This Visual Studio documentation explains how to add a NuGet package using the NuGet Package Manager. The link jumps directly to the \"NuGet Package Manager\" section \u2014 just follow the four steps described there. (Just note that instead of installing \"Newtonsoft.Json\", you should search for and install \"CommunityToolkit.Mvvm\".)</p> <p>Now that we\u2019ve added this NuGet reference to our project, during the next build (which includes a NuGet restore step), the NuGet package will be downloaded, and its contents \u2014 the DLLs \u2014 will be extracted into the output folder. These DLLs now become an integral part of the application (a NuGet package is essentially a zip archive). It\u2019s important to mention that:</p> <ul> <li>Neither the NuGet .nupkg file nor the extracted DLLs are included in Git.</li> <li>The .gitignore file at the root of the solution filters them out.</li> <li>This is the core idea behind NuGet: the repository remains small, because the project file only contains references to the NuGet packages.</li> <li>When someone clones the solution and builds it for the first time, the referenced NuGet packages are automatically downloaded from the online NuGet sources.</li> </ul> <p> Understanding the concepts related to NuGet is important \u2014 they are an essential part of the curriculum!</p> <p>A NuGet reference is essentially just a single line in the <code>.csproj</code> project file. In Solution Explorer, click on the \"HelloXaml\" project node, open the <code>.csproj</code> file, and check that the following line is present (the version number may differ):</p> <pre><code>    &lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" /&gt;\n</code></pre> <p>You can also verify our NuGet reference without opening the <code>.csproj</code> file: In Solution Explorer, expand the \"HelloXaml\"/\"Dependencies\"/\"Packages\" node \u2014 if everything is correct, you should see a \"CommunityToolkit.Mvvm (version)\" node under it.</p>"},{"location":"hazi/5-mvvm/index_eng/#task-1b-inpc-implementation-using-mvvm-toolkit","title":"Task 1/b \u2013 INPC implementation using MVVM Toolkit","text":"<p>Now that we can use the classes, interfaces, and attributes provided by the MVVM Toolkit NuGet package, we can switch to an MVVM Toolkit-based implementation of INotifyPropertyChanged (INPC).</p> <ul> <li>Comment out the entire existing Person class.</li> <li>Then, directly above the commented-out code, reimplement the class using MVVM Toolkit-based INPC.<ul> <li>Refer to the slide explaining INPC from the lecture.</li> <li>The class must be declared as <code>partial</code> (this means the class can be defined across multiple files).</li> <li>Inherit from <code>ObservableObject</code> from the Toolkit \u2014 this base class already implements <code>INotifyPropertyChanged</code>, so you don\u2019t have to.</li> <li>Instead of creating regular properties <code>Name</code> and <code>Age</code>, define backing fields <code>name</code> and <code>age</code> and annotate them with <code>[ObservableProperty]</code> attribute.</li> </ul> </li> </ul> <p>Done!</p> Verifying the Solution <pre><code>public partial class Person : ObservableObject\n{\n    [ObservableProperty]\n    private string name;\n\n    [ObservableProperty]\n    private int age;\n}\n</code></pre> <p>After compilation, this code essentially results in the same solution as the previous, much more verbose version that is now commented out. In other words (even if we don't immediately see it), <code>Name</code> and <code>Age</code> properties are being created, along with the appropriate <code>PropertyChanged</code> event invocations. How is this possible?</p> <ul> <li>First, the <code>ObservableObject</code> base class already implements the <code>INotifyPropertyChanged</code> interface, so it includes the <code>PropertyChanged</code> event, which our class inherits through subclassing.</li> <li>During compilation, the MVVM Toolkit's source generator runs. For every field marked with the <code>[ObservableProperty]</code> attribute, it generates a property in the class with the same name but starting with an uppercase letter. The set accessor of the generated property includes the logic to raise the <code>PropertyChanged</code> event with the appropriate conditions and parameters. So we don\u2019t have to write this boilerplate code ourselves.</li> <li>The question is: where is this generated code? In another partial part of our class. After compiling, right-click on the class name <code>Person</code> in Visual Studio and select \"Go to Definition\". In the bottom panel, you\u2019ll see two entries: one pointing to your original source code, and the other (labeled \"public class Person\") pointing to the generated partial class. Double-clicking that entry shows the generated code, which is quite verbose. But what matters is that this is where the <code>Name</code> and <code>Age</code> properties are defined, including the call to <code>OnPropertyChanged</code>.</li> </ul> <p> The source generator always outputs code into a separate \"partial\" class to keep user-written and generated code separate. Partial classes are commonly used to organize manually written and automatically generated code into separate files.</p> <p>Since much less code needs to be written, in practice we typically use the MVVM Toolkit-based solution (but it's also important to understand the manual implementation, as it helps you understand what\u2019s happening behind the scenes).</p> <p>TO BE SUBMITTED</p> <p>Take a screenshot named f1b.png with the following setup:</p> <ul> <li> <p>Start the application. If necessary, resize the window so it doesn\u2019t take up too much space.</p> </li> <li> <p>In the background, Visual Studio should be open with the <code>Person.cs</code> file visible.</p> </li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#task-2-transitioning-to-an-mvvm-based-solution","title":"Task 2 \u2013 Transitioning to an MVVM-based solution","text":"<p>In the previous step, although we used the MVVM Toolkit, we had not yet transitioned to a full MVVM-based solution \u2014 we only used the toolkit to simplify the implementation of INotifyPropertyChanged.</p> <p>Now, we will refactor our application's architecture to align with the principles of the MVVM pattern. To keep implementation simple, we will continue to use the MVVM Toolkit.</p> <p>Task: Review the related lecture materials:</p> <ul> <li>Understand the core concepts of the MVVM pattern.</li> <li>The complete source code of an example is available in the linked GitHub Repository, under the \"04-05 WinUI\\DancerProfiles\" folder (look for the \"RelaxedMVVM\" and \"StrictMVVM\" examples). These will help you understand the pattern and assist with later tasks.</li> </ul> <p>What does the MVVM pattern mean for our example?</p> <ul> <li>The Model class is the existing <code>Person</code> class in the <code>Models</code> folder \u2014 it represents a person's data. It contains NO UI logic and is completely independent from any form of presentation.</li> <li>Currently, all UI-related declarations and logic are in <code>PersonListPage</code>.  We will now split <code>PersonListPage</code> into two parts:<ul> <li><code>PersonListPage.xaml</code> and its code-behind will become the View.</li> <li>We'll introduce a ViewModel called <code>PersonListPageViewModel</code>.<ul> <li> It is essential that all display logic currently in the code-behind of <code>PersonListPage</code> be moved into <code>PersonListPageViewModel</code>. The core idea of MVVM is that the View should contain only the layout, and the ViewModel should contain all the UI logic.</li> </ul> </li> </ul> </li> <li>Another cornerstone of the MVVM pattern: The View holds a reference to its ViewModel, typically via a property.<ul> <li>In our case, this means <code>PersonListPage</code> must have a property of type <code>PersonListPageViewModel</code>.</li> <li> This is crucial because it allows the <code>PersonListPage.xaml</code> file to bind to properties and event handlers defined in the ViewModel!</li> </ul> </li> <li>The <code>PersonListPageViewModel</code> will work with the model and handle user interactions (event handlers).</li> <li>Since we are using the Relaxed MVVM pattern (not Strict MVVM), we do not need to introduce a wrapper <code>PersonViewModel</code> around the <code>Person</code> model class.</li> </ul> <p>Task: Refactor the existing logic to follow the MVVM (Model-View-ViewModel) pattern as described above. Move the <code>PersonListPageViewModel</code> class into a newly created <code>ViewModels</code> folder. Try to figure out the solution yourself based on the provided hints! Here's a helpful tip in advance (since this part is a bit trickier): for events, you can bind event handler methods using data binding \u2014 see the the lecture. (After the refactor, event handlers must only be specified via bindings.) Also important: You can only bind to public properties or methods, so keep that in mind when refactoring!</p> Tips / solution validation <ol> <li>From <code>PersonListPage.xaml.cs</code>, you should move almost everything (except the <code>this.InitializeComponent()</code> call in the constructor) into the new <code>PersonListPageViewModel</code> class. These are part of the UI logic, which belongs in the ViewModel.</li> <li>The <code>PersonListPageViewModel</code> class must be public.</li> <li>In the <code>PersonListPage.xaml.cs</code> code-behind, add a public <code>ViewModel</code> property of type <code>PersonListPageViewModel</code> with a getter only, and initialize it to a new object. This means the View creates and holds a reference to the ViewModel.</li> <li>In <code>PersonListPage.xaml</code>, update the bindings for the two <code>TextBox</code> objects properly. Since <code>NewPerson.Name</code> and <code>NewPerson.Age</code> are now one level deeper, you need to bind to them through the <code>ViewModel</code> property.</li> <li>In <code>PersonListPage.xaml</code>, you need to adjust the event handlers (<code>Click</code>) in three places. This is trickier:<ul> <li>You can no longer define event handlers using the old syntax (<code>Click=\"SomeHandler\"</code>) because the handlers are no longer in the code-behind \u2014 they have been moved to the ViewModel.</li> <li>Instead, you must bind the handlers using command bindings, as shown in the lecture. This works because the <code>ViewModel</code> property in the code-behind gives access to the <code>PersonListPageViewModel</code> instance, which contains the handler methods (<code>AddButton_Click</code>, <code>IncreaseButton_Click</code>, <code>DecreaseButton_Click</code>).</li> <li>Make sure these handler methods are public, otherwise the bindings won't work \u2014 you must change them from private to public.</li> </ul> </li> </ol> <p>Further essential modifications:</p> <ul> <li>In the ViewModel, the current names of the <code>Click</code> event handlers are: <code>AddButton_Click</code>, <code>IncreaseButton_Click</code>, and <code>DecreaseButton_Click</code>. This is not ideal. In a ViewModel, we don't think in terms of \"event handlers\", but rather in terms of modifier methods that alter the state of the ViewModel. Much better, more expressive names for these methods would be: <code>AddPersonToList</code>, <code>IncreaseAge</code> and <code>DecreaseAge</code>. Rename the functions accordingly! And of course, continue to use data binding to bind these methods to the <code>Click</code> events in the XAML file.</li> <li>These functions currently have the parameter list \"<code>object sender, RoutedEventArgs e</code>\". However, these parameters are not used for anything. Fortunately, the x:Bind event binding is flexible enough to allow methods without parameters \u2014 it will still work just fine. In light of this, remove the unused parameters from the three functions in our ViewModel. This will result in a cleaner and more elegant solution.</li> </ul> <p>Make sure that after these changes, the application still behaves exactly the same as it did before!</p> <p>What did we gain by converting our earlier solution to an MVVM-based one? The answer is given in the lecture material. Here's a quick highlight of the benefits:</p> <ul> <li>Responsibilities are nicely separated, no more mixing of concerns, which makes things easier to understand:<ul> <li>UI-independent logic (Model and related classes)</li> <li>UI logic (ViewModel)</li> <li>Pure UI appearance (View)</li> </ul> </li> <li>Since the UI logic is separate, it can (and should) be unit tested independently.</li> </ul> <p>SUBMISSION REQUIRED</p> <p>Take a screenshot named <code>f2.png</code> as follows:</p> <ul> <li>Launch the application. If needed, resize it to make it smaller so it doesn\u2019t take up too much screen space.</li> <li>In the background, Visual Studio should be open with the <code>PersonListPageViewModel.cs</code> file displayed.</li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#task-3-enablingdisabling-controls","title":"Task 3 - Enabling/disabling Controls","text":"<p>In its current state, the application behaves a bit oddly: you can use the \"\u2013\" button to reduce someone's age into negative values, or the \"+\" to push it beyond 150. Also, the \"+Add\" button allows adding a person with nonsensical properties. We need to disable these buttons when the action doesn\u2019t make sense, and enable them when it does.</p> <p>As the next step, let's implement the disabling/enabling of the \"\u2013\" button appropriately. The button should only be enabled when the person\u2019s age is greater than 0.</p> <p>Try to implement this yourself first, at least lay down the basics! Be sure to use a data binding\u2013based solution, as only this is acceptable. If you get stuck or your solution doesn\u2019t \"want\" to work, rethink what might be the issue, and adjust your implementation according to the following:</p> <p>Multiple valid solutions are possible for this problem. What they all have in common is that the <code>IsEnabled</code> property of the \u201c\u2013\u201d button is bound in some way. In our chosen solution, we bind it to a newly introduced bool property inside <code>PersonListPageViewModel</code>.</p> PersonListPageViewModel.cs<pre><code>    public bool IsDecrementEnabled\n    {\n        get { return NewPerson.Age &gt; 0; }\n    }\n</code></pre> PersonListPage.xaml-be a '-' gombhoz<pre><code>    IsEnabled=\"{x:Bind ViewModel.IsDecrementEnabled, Mode=OneWay}\"\n</code></pre> <p>Let\u2019s try it out! Unfortunately, it doesn\u2019t work: the \"\u2013\" button is not disabled when the age becomes 0 or less (e.g. by clicking the button multiple times). If we place a breakpoint inside the <code>IsDecrementEnabled</code> property and then launch the application, we\u2019ll notice that the property is only queried once by the bound control \u2014 during application startup. Even after repeatedly clicking the \"\u2013\" button, it won\u2019t be queried again. Try it yourself!</p> <p>Think through what\u2019s causing this, and only then continue with the guide.</p> Explanation <p>According to what we\u2019ve learned earlier, data binding only queries a source property\u2019s value when it receives a change notification via <code>INotifyPropertyChanged</code>! In our current solution, even though the <code>Age</code> property of the <code>NewPerson</code> object changes, there\u2019s no notification that the dependent <code>IsDecrementEnabled</code> property has changed as a result.</p> <p>Next step: Implement the corresponding change notification in the <code>PersonListPageViewModel</code> class:</p> <ul> <li>Use MVVM Toolkit foundations to implement the <code>INotifyPropertyChanged</code> interface:<ul> <li>Derive from <code>ObservableObject</code>.</li> <li>The <code>IsDecrementEnabled</code> property can remain as a getter-only property \u2014 it does not need to be based on <code>[ObservableProperty]</code>. (Although rewriting it that way is also a valid and fully acceptable solution for the assignment \u2014 just be aware the next steps work slightly differently in that case.)</li> </ul> </li> <li>Try to implement the following on your own, in the ViewModel class (note: the <code>Person</code> class remains unchanged): when <code>NewPerson.Age</code> changes, trigger a call to <code>OnPropertyChanged</code>, which is inherited from <code>ObservableObject</code>, to notify that <code>IsDecrementEnabled</code> has changed. Hint: the <code>Person</code> class already implements <code>INotifyPropertyChanged</code>, so you can subscribe to its <code>PropertyChanged</code> event! For simplicity, it\u2019s okay if you notify a change to <code>IsDecrementEnabled</code> even when the logical value might not have actually changed.</li> <li>You can achieve all of this without writing a separate handler method \u2014 hint: use a lambda expression to assign the event handler.</li> </ul> <p>Test your solution! If everything is working correctly, the \"\u2013\" button should also become disabled if you manually type a negative age value into the TextBox and then click outside the TextBox. Take a moment to think about why this works!</p> <p>Next, implement a similar solution for both the \"+\" button and the \"+Add\" button.</p> <ul> <li>The maximum acceptable age should be 150.</li> <li>A name is only acceptable if it contains at least one non-whitespace character. (Use the static method <code>string.IsNullOrWhiteSpace</code> for this validation.)</li> <li>You don\u2019t need to handle cases where the user types a non-numeric value into the age TextBox. (This is not manageable with the current implementation anyway.)</li> </ul> <p>During testing, you may notice that if you delete the name in the TextBox, the +Add button\u2019s enabled state does not update immediately. It only changes after leaving (unfocusing) the TextBox. Why is this? This happens because the default binding behavior is to update the bound source only when the TextBox loses focus. Modify your implementation so that the update happens on every keystroke, without needing to leave the TextBox.</p> <p>SUBMISSION REQUIRED</p> <p>Take a screenshot named <code>f3.png</code> as follows:</p> <ul> <li>Start the application. If needed, resize it so it doesn\u2019t take up too much screen space.</li> <li>In the app, reduce the age to 0.</li> <li>In the background, have Visual Studio open with the <code>PersonListPageViewModel.cs</code> file visible.</li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#task-4-using-command","title":"Task 4 \u2013 Using Command","text":"<p>At the moment, handling the \"\u2013\" button requires us to do two things:</p> <ul> <li>Execute an event handler when <code>Click</code> is triggered</li> <li>Enable or disable the button using the <code>IsEnabled</code> property</li> </ul> <p>However, certain controls \u2014 like buttons \u2014 support doing both via a Command-based approach, using a command object. You can learn more about the Command design pattern from the \"Design Patterns 3\" lecture (although that only covers the basic Command pattern, which supports execution but not enabling/disabling). The MVVM-specific implementation of the Command pattern is introduced at the end of the WinUI lecture series.</p> <p>The basic principle: Instead of using <code>Click</code> and <code>IsEnabled</code>, the button\u2019s <code>Command</code> property is set to a command object that implements the <code>ICommand</code> interface. Execution and enabling/disabling are now handled entirely by the command object.</p> <p>Normally, each command would require its own <code>ICommand</code> implementation. But this would mean creating a separate class for each command \u2014 a lot of boilerplate. Thankfully, the MVVM Toolkit helps here. It provides a <code>RelayCommand</code> class that implements <code>ICommand</code>. This class is flexible enough to handle any command via delegates passed to its constructor, so there\u2019s no need to create additional command classes. How does this work? The <code>RelayCommand</code> constructor takes two delegates:</p> <ul> <li>The first parameter is the code to execute when the command is run.</li> <li>The second parameter (optional) is the code that returns a bool indicating whether the command should be enabled. If it returns true, the command is enabled; otherwise, it's disabled.</li> </ul> <p>Your next step: convert the handling of the \"\u2013\" button to use the command pattern. Try to implement most of this on your own, based on the related WinUI lecture slides. Execution is relatively simple, but handling enabling/disabling requires a bit more. Main steps:</p> <ul> <li>In your ViewModel, introduce a public <code>RelayCommand</code> property with only a getter, e.g. named <code>DecreaseAgeCommand</code>. Unlike the lecture slides, in our case the <code>RelayCommand</code> does not need a generic parameter, because our handler method (<code>DecreaseAge</code>) takes no arguments.</li> <li>In the ViewModel constructor, assign a value to this new property. Pass appropriate delegates to the <code>RelayCommand</code> constructor (one for execution, one for <code>CanExecute</code>).</li> <li>In <code>PersonListPage.xaml</code>: remove the current <code>Click</code> and <code>IsEnabled</code> bindings on the \"\u2013\" button. Instead, bind the button\u2019s <code>Command</code> property to the <code>DecreaseAgeCommand</code> you just added in the ViewModel.</li> </ul> <p>If we try it out, the command execution works, but the enable/disable logic doesn\u2019t. If we observe carefully, the button always remains visually enabled. This actually makes sense. While the <code>RelayCommand</code> is capable of calling the function passed as the second constructor parameter (used to determine its enabled state), it has no way of knowing that it should re-evaluate this every time <code>NewPerson.Age</code> changes! But we can fix this: in the ViewModel\u2019s constructor, we already subscribed to <code>NewPerson.PropertyChanged</code>. Based on this, we can do the following: whenever Age changes (or even when it might change \u2014 it\u2019s okay if we notify a bit too often), call the <code>NotifyCanExecuteChanged()</code> method on the <code>DecreaseAgeCommand</code>. This method has a very descriptive name: it notifies the command that the condition determining whether it should be enabled or disabled may have changed. As a result, the command will update itself, or more precisely, it will update the enabled state of the associated button.</p> <p>Refactor the handling of the \"+\" button in the same way, using a command-based approach. Do not modify the handling of the \"+Add\" button.</p> <p>SUBMISSION REQUIRED</p> <p>Take a screenshot named <code>f4.png</code> as follows:</p> <ul> <li>Launch the application. Resize it if needed so it doesn\u2019t take up too much screen space.</li> <li>In the app, make sure the name TextBox is empty.</li> <li>In the background, have Visual Studio open with the <code>PersonListPageViewModel.cs</code> file visible.</li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#task-5-using-command-with-mvvm-toolkit-code-generation","title":"Task 5 - Using Command with MVVM Toolkit code generation","text":"<p>In the previous task, we introduced and instantiated command properties manually. The MVVM Toolkit can simplify this \u2014 with the appropriate attribute, it can automatically generate the property and its instantiation.</p> <p>Let\u2019s now refactor the handling of the <code>DecreaseAgeCommand</code> (and only this one \u2014 leave <code>IncreaseAgeCommand</code> as it is) using generated code.</p> <ol> <li>Mark the <code>PersonListPageViewModel</code> class as <code>partial</code>.</li> <li>Delete the <code>DecreaseAgeCommand</code> property and its instantiation from the constructor.</li> <li>Add the following attribute to the <code>DecreaseAge</code> method: <code>[RelayCommand(CanExecute = nameof(IsDecrementEnabled))]</code>.<ul> <li>This will cause the code generator to create a <code>RelayCommand</code> property named <code>DecreaseAgeCommand</code> \u2014 that's the method name (<code>DecreaseAge</code>) plus the \"Command\" suffix.</li> <li>The <code>CanExecute</code> attribute allows you to specify the name of a method or property (as a string) that returns a bool, which the command uses to determine if it should be enabled or disabled. We already have such a property: <code>IsDecrementEnabled</code>. We don\u2019t use a plain string like \"IsDecrementEnabled\" because if someone later renames the property, it would no longer point to the right member. Using <code>nameof(IsDecrementEnabled)</code> ensures the reference is safe and refactor-friendly. In general, specifying <code>CanExecute</code> is optional \u2014 don\u2019t include it if you want the command to always be enabled.</li> </ul> </li> <li>Test your solution (decreasing age). It should behave exactly like before. Decrease the age. Disable the button when age reaches 0. If disabling the button doesn\u2019t work: A likely cause is that you deleted the call to <code>DecreaseAgeCommand.NotifyCanExecuteChanged()</code> during the refactor. You still need this call! The refactor only changes how the command is declared \u2014 the rest of the logic still applies.</li> </ol> <p>SUBMISSION REQUIRED</p> <p>Take a screenshot named <code>f5.png</code> as follows:</p> <ul> <li>Launch the application. Resize it if necessary so it doesn\u2019t take up too much screen space.</li> <li>In the background, Visual Studio should be open with the <code>PersonListPageViewModel.cs</code> file visible.</li> </ul>"},{"location":"hazi/5-mvvm/index_eng/#task-6-strict-mvvm","title":"Task 6 \u2013 Strict MVVM","text":"<p>Our current solution follows the Relaxed MVVM approach. In the following steps, let\u2019s think through what this actually means, and what it would entail if we were to switch to a Strict MVVM approach (we won\u2019t actually implement it \u2014 this is just a conceptual exercise).</p> <p>In our current solution (Relaxed MVVM), the View binds directly to the <code>Person</code> model class, and the <code>PersonPageViewModel</code> also uses the <code>Person</code> model. This approach has the advantage of simplicity. However, it has a downside: we were forced to implement the <code>INotifyPropertyChanged</code> interface in the <code>Person</code> model class (even if using the MVVM Toolkit) \u2014 otherwise data binding wouldn't work correctly. There are scenarios where we don\u2019t want to \"pollute\" our model class with logic that serves the UI. Instead, we want to keep the model as pure as possible. In such cases, the Strict MVVM approach is the solution. Think it through based on the lecture slides \u2014 you don\u2019t need to implement or document anything!</p> Strict MVVM\u2013based solution <ul> <li>The <code>Person</code> model class would no longer implement the <code>INotifyPropertyChanged</code> interface \u2014 the class would be simplified and contain only basic properties (this is the goal).</li> <li>We would need to introduce a <code>PersonViewModel</code> class (which would wrap a <code>Person</code> model object). Inside this:<ul> <li>Define <code>Name</code> and <code>Age</code> properties.</li> <li>Implement the <code>INotifyPropertyChanged</code> interface:<ul> <li>Inherit from <code>ObservableObject</code></li> <li>Use the 'SetProperty' helper method (inherited from 'ObservableObject') inside the property setters to raise 'PropertyChanged' events.</li> </ul> </li> </ul> </li> </ul> <ul> <li>The <code>PersonPageViewModel</code> (which belongs to the View) would also need to be updated to work with the new <code>PersonViewModel</code> instead of the <code>Person</code> model directly.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/","title":"5. HA - Verwendung der MVVM-Muster und des MVVM-Toolkits","text":""},{"location":"hazi/5-mvvm/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>In dieser Hausaufgabe werden wir die w\u00e4hrend der 3. Labor\u00fcbung (XAML) implementierte Anwendung f\u00fcr Personenregistrierung so ver\u00e4ndern, dass sie auf dem MVVM-Muster basiert, und wir werden das MVVM-Toolkit kennenlernen.</p> <p>Die Hausaufgabe baut auf dem MVVM-Thema auf, das am Ende der WinUI-Vorlesungsreihe behandelt wurde. Die praktische Grundlage f\u00fcr die Aufgaben bildet die 5. Labor\u00fcbung \u2013 MVVM.</p> <p>Durch das Durcharbeiten des zugeh\u00f6rigen Vorlesungsmaterials k\u00f6nnen die Aufgaben dieser eigenst\u00e4ndigen \u00dcbung mit Hilfe der k\u00fcrzeren Leitf\u00e4den, die auf die Aufgabenbeschreibung folgen (manchmal standardm\u00e4\u00dfig eingefaltet), selbst\u00e4ndig bearbeitet werden.</p> <p>Das Ziel der Hausaufgabe:</p> <ul> <li>\u00dcben Sie die Verwendung der MVVM-Muster</li> <li>NuGet-Referenzen verwenden</li> <li>Kennenlernen der Grundlagen des MVVM-Toolkits</li> <li>\u00dcben von XAML-Techniken</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben, identisch mit Hausaufgabe 3 (XAML-Grundlagen).</p>"},{"location":"hazi/5-mvvm/index_ger/#das-verfahren-fur-die-einreichung","title":"Das Verfahren f\u00fcr die Einreichung","text":"<p>Auf das Moodle soll ein ZIP-Archiv hochgeladen werden, das die folgenden Anforderungen entspricht:</p> <ul> <li>Die Aufgaben sind aufeinander basiert, deshalb ist es gen\u00fcgend den resultierenden Quellcode am Ende der letzten Aufgabe hochzuladen (Visual Studio Solution Verzeichnis). Der Name des Verzeichnisses soll \"MVVM_NEPTUN\" sein (wo NEPTUN Ihre Neptun-Code ist).</li> <li>Wir erwarten keine schriftliche Begr\u00fcndung oder Beschreibung, aber die komplexe Codeteile sollen mit Kommentaren versehen werden</li> <li>Das ZIP-Archiv darf die Ausgangsdaten (.exe) und die tempor\u00e4ren Dateien nicht enthalten. Um diese Best\u00e4nde zu l\u00f6schen, Visual Studio soll ge\u00f6ffnet werden und in dem Solution Explorer Rechtsklick an dem \u201eClean Solution\u201d Men\u00fcelement. Das manuelle L\u00f6schen von den \"obj\" und \"bin\" Verzeichnissen kann auch n\u00f6tig sein.</li> <li> In den Aufgaben werden Sie aufgefordert, einen Screenshot von einem Teil Ihrer L\u00f6sung zu machen, da dies beweist, dass Sie Ihre L\u00f6sung selbst erstellt haben. Der erwartete Inhalt der Screenshots ist immer in der Aufgabe angegeben. Die Screenshots sollten als Teil der L\u00f6sung eingegeben, also innerhalb dem ZIP-Archiv auf das Moodle hochgeladen werden. Wenn Sie Inhalte im Screenshot haben, die Sie nicht hochladen m\u00f6chten, k\u00f6nnen Sie diese aus dem Screenshot ausblenden.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/#bedingungen","title":"Bedingungen","text":"<p> Obligatorische Verwendung der MVVM-Muster!   In dieser Hausaufgabe \u00fcben wir das MVVM-Muster, daher ist das MVVM-Muster f\u00fcr die L\u00f6sung der Aufgaben obligatorisch erforderlich. Andernfalls wird die Bewertung der Aufgaben verweigert.</p>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-0-uberblick-uber-den-ausgangszustand","title":"Aufgabe 0 - \u00dcberblick \u00fcber den Ausgangszustand","text":"<p>Der Ausgangszustand ist im Grunde derselbe wie die Endzustand von der Labor\u00fcbung 3. Entwurf der Benutzeroberfl\u00e4che. Also eine solche Anwendung, die die Speicherung der Daten von Personen in einer Liste erm\u00f6glicht. Sie enth\u00e4lt eine kleinere \u00c4nderung im Vergleich zum Endzustand des Labors. Im Labor war die vollst\u00e4ndige Beschreibung der Oberfl\u00e4che in <code>MainWindow.xaml</code> (und die zugeh\u00f6rige Code-Behind-Datei) verf\u00fcgbar. Der Unterschied zu dieser urspr\u00fcnglichen L\u00f6sung besteht darin, dass sie nach <code>PersonListPage.xaml</code> (und in den Code dahinter) im Ordner <code>Views</code> verschoben wurde.  <code>PersonListPage</code> ist keine <code>Window</code>, sondern eine von <code>Page</code> abgeleitete Klasse (siehe den Code hinter der Datei). Aber sonst hat sich nichts ge\u00e4ndert! Wie der Name schon sagt, stellt <code>Page</code> eine \"Seite\" in der Anwendung dar: Sie kann nicht selbst angezeigt werden, sondern muss z. B. in einem Fenster platziert werden. Der Vorteil dieses Fensters ist, dass es m\u00f6glich ist, zwischen den Seiten (verschiedene <code>Page</code> Nachkommen) zu navigieren, indem man die entsprechende Navigation verwendet. Wir werden das nicht ausnutzen, wir werden nur eine Seite haben. Der Zweck der Einf\u00fchrung dieser Seite war nur zu veranschaulichen, dass in der MVVM-Architektur, Ansichten k\u00f6nnen nicht nur mit <code>Window</code> (full window), sondern auch mit Objekten wie <code>Page</code> implementiert werden. </p> <p>Da alles von <code>MainWindow</code> nach <code>PersonListPage</code> verschoben wurde, gibt es auf <code>MainWindow.xaml</code> nichts anderes als eine Kopie eines solchen <code>PersonListPage</code> Objekts:</p> <pre><code>&lt;views:PersonListPage/&gt;\n</code></pre> <p>Pr\u00fcfen Sie im Code, ob dies tats\u00e4chlich der Fall ist!</p>"},{"location":"hazi/5-mvvm/index_ger/#kopfzeile-des-hauptfensters","title":"Kopfzeile des Hauptfensters","text":"<p> Die \u00dcberschrift des Hauptfensters sollte \"MVVM\" sein, angeh\u00e4ngt mit Ihrem Neptun-Code: (z.B.\"MVVM - ABCDEF\" im Falle des Neptun-Codes \"ABCDEF\"), ist es wichtig, dass dies der Text ist! Setzen Sie dazu die Eigenschaft <code>Title</code> Ihres Hauptfensters auf diesen Text in der Datei <code>MainWindow.xaml</code>. </p>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-1-verwendung-des-mvvm-toolkits","title":"Aufgabe 1 - Verwendung des MVVM-Toolkits","text":"<p>In der bestehenden Anwendung implementiert die Klasse <code>Person</code> im Ordner <code>Models</code> bereits die Schnittstelle <code>INotifyPropertyChanged</code> (Spitzname INPC) (sie hat also ein Ereignis <code>PropertyChanged</code> ) und zeigt au\u00dferdem eine Eigenschafts\u00e4nderung in den Settern <code>Name</code> und <code>Age</code> an, indem sie das Ereignis <code>PropertyChanged</code> ausl\u00f6st (siehe <code>Person.cs</code> f\u00fcr eine detaillierte Betrachtung).</p> <p>Zum Aufw\u00e4rmen/Wiederholen - nachdem Sie sich den Code (<code>PersonListPage.xaml</code> und <code>PersonListPage.xaml.cs</code>) genau angesehen und die Anwendung ausgef\u00fchrt haben - sagen Sie sich, warum dies in der Anwendung erforderlich war!</p> Die Antwort (Wiederholung) <p>In der Anwendung ist die Eigenschaft <code>Text</code> von <code>TextBox</code> (dies ist die Zieleigenschaft) in <code>PersonListPage.xaml</code> an die Eigenschaften <code>Age</code> und <code>Name</code> des Members <code>NewPerson</code> mit dem Typ <code>Person</code> im Code-Behind-Datei gebunden (dies sind die Quellen in den beiden Datenverbindungen). Beachten Sie im Code, dass die Quelleneigenschaften <code>NewPerson.Name</code> und <code>NewPerson.Age</code> ebenfalls im Code ge\u00e4ndert werden: Der Controller kann nur \u00fcber diese \u00c4nderungen informiert werden (und somit mit der Quelle synchron bleiben), wenn er \u00fcber diese \u00c4nderungen an <code>Name</code> und <code>Age</code> informiert wird. Aus diesem Grund muss die Klasse, die die Eigenschaften <code>Age</code> und <code>Name</code> enth\u00e4lt, d.h. <code>Person</code>, die Schnittstelle <code>INotifyPropertyChanged</code> implementieren und das Ereignis <code>PropertyChanged</code> ausl\u00f6sen, wenn sich die Eigenschaften \u00e4ndern, wobei das Ereignis entsprechend parametrisiert sein muss.</p> <p>Wenn Sie die Anwendung ausf\u00fchren, \u00fcberpr\u00fcfen Sie, ob die \u00c4nderungen, die Sie auf <code>NewPerson.Age</code> durch Dr\u00fccken der Tasten \"+\" und \"-\" vornehmen, tats\u00e4chlich in der <code>TextBox</code>, die das Alter anzeigt, wiedergegeben werden. </p> <p>In der Klasse <code>Person</code> k\u00f6nnen Sie sehen, dass die Implementierung von <code>INotifyPropertyChanged</code> und der dazugeh\u00f6rige Code recht umfangreich ist. Schauen Sie sich die Vorlesungsunterlagen an, um zu sehen, welche Alternativen es f\u00fcr die Implementierung der Schnittstelle gibt (ausgehend von der Folie \"INPC Beispiel 1\", etwa vier Folien zur Veranschaulichung der vier M\u00f6glichkeiten)! Die kompakteste L\u00f6sung ist das MVVM-Toolkit. Im n\u00e4chsten Schritt werden wir die derzeitige umfangreichere \"manuelle\" INPC-Implementierung in ein MVVM-Toolkit umwandeln.</p>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-1a-aufnahme-des-mvvm-toolkit-nuget-referenzes","title":"Aufgabe 1/a - Aufnahme des MVVM Toolkit NuGet Referenzes","text":"<p>Zun\u00e4chst muss eine NuGet-Referenz auf das MVVM-Toolkit erstellt werden, damit es im Projekt verwendet werden kann. </p> <p>Aufgabe: F\u00fcgen Sie eine NuGet-Referenz f\u00fcr das NuGet-Paket \"CommunityToolkit.Mvvm\" in das Projekt ein. Auf dieser Visual Studio-Seite wird beschrieben, wie eine NuGet-Referenz mit dem NuGet Package Manager zu einem Projekt hinzugef\u00fcgt wird. Der vorhergehende Link auf der Seite f\u00fchrt Sie zum Abschnitt \"NuGet Package Manager\". Folgen Sie den vier hier angegebenen Schritten (mit dem Unterschied, dass Sie auf das Paket \"CommunityToolkit.Mvvm\" statt auf \"Newtonsoft.Json\" verweisen m\u00fcssen).</p> <p>Nachdem wir nun diese NuGet-Referenz zu unserem Projekt hinzugef\u00fcgt haben, wird der n\u00e4chste Build (da er einen  NuGet restore Schritt enth\u00e4lt!) das NuGet-Paket herunterladen, die darin enthaltenen DLLs in den Ausgabeordner entpacken und sie zu einem integralen Bestandteil der Anwendung machen (ein NuGet-Paket ist eigentlich eine Zip-Datei). Es ist wichtig zu beachten, dass weder die NuGet-Zipdatei noch die darin enthaltenen DLLs in Git enthalten sind. Sie werden von der Datei <code>.gitignore</code> im Stammverzeichnis der L\u00f6sung herausgefiltert. Dies ist der eigentliche Kern des NuGet-Konzepts: Das Repository kann klein bleiben, da die Projektdatei nur Verweise auf NuGet-Pakete enth\u00e4lt, und wenn jemand eine frisch geklonte L\u00f6sung erstellt, werden die referenzierten NuGet-Pakete erst dann aus den Online-NuGet-Ressourcen heruntergeladen.</p> <p> Die Kenntnis der oben genannten NuGet-Konzepte ist wichtig, sie sind ein wichtiger Teil des Lehrmaterials!</p> <p>Eine NuGet-Referenz ist eigentlich nur eine Zeile in der Projektbeschreibungsdatei <code>.csproj</code>.  Klicken Sie im Solution Explorer auf den Projektknoten \"HelloXaml\", \u00f6ffnen Sie die Projektdatei <code>.csproj</code> und \u00fcberpr\u00fcfen Sie, ob diese Zeile enthalten ist (die Version kann unterschiedlich sein):</p> <pre><code>    &lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" /&gt;\n</code></pre> <p>Sie k\u00f6nnen unsere NuGet-Referenz \u00fcberpr\u00fcfen, ohne die Datei <code>csproj</code> zu \u00f6ffnen: \u00d6ffnen Sie im Solution Explorer den Knoten \"HelloXaml\"/\"Dependencies\"/\"Packages\": Wenn alles in Ordnung ist, sehen Sie darunter einen Knoten \"CommunityToolkit.Mvvm (Version)\".</p>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-1b-inpc-implementierung-auf-basis-des-mvvm-toolkits","title":"Aufgabe 1/b - INPC-Implementierung auf Basis des MVVM-Toolkits","text":"<p>Jetzt k\u00f6nnen wir die Klassen, Schnittstellen, Attribute usw. im MVVM Toolkit NuGet-Paket verwenden, so dass wir zur MVVM Toolkit-basierten INPC-Implementierung wechseln k\u00f6nnen.</p> <ul> <li>Kommentieren Sie die ganze Klasse <code>Person</code> aus. </li> <li>F\u00fcgen Sie oberhalb des auskommentierten Teils die Klasse als neu hinzu, aber mit einer MVVM-Toolkit-basierten INPC-Implementierung.<ul> <li>Die Pr\u00e4sentation \"INPC Beispiel 4 - MVVM Toolkit\" wird Ihnen bei der Umsetzung helfen.</li> <li>Es muss sich um eine partielle Klasse handeln (d.h. Teile der Klasse k\u00f6nnen in mehreren Dateien definiert sein).</li> <li>Sie stammt von <code>ObservableObject</code> aus dem Toolkit: Dieser Vorg\u00e4nger implementiert die Schnittstelle <code>INotifyPropertyChanged</code>, so dass wir sie nicht mehr ben\u00f6tigen.</li> <li>Ersetzen Sie die Eigenschaften <code>Name</code> und <code>Age</code> mit Mitgliedsvariablen <code>name</code> und <code>age</code>, die auch die Attribute <code>ObservableProperty</code> besitzen. </li> </ul> </li> </ul> <p>Wir sind fertig.</p> \u00dcberpr\u00fcfung der L\u00f6sung <p>```` csharp public partial class Person : ObservableObject {     [ObservableProperty]     private string name;</p> <pre><code>[ObservableProperty]\nprivate int age;\n</code></pre> <p>} ```</p> <p>Dieser Code ergibt nach einer \u00dcbersetzung im Wesentlichen die gleiche L\u00f6sung wie die fr\u00fchere, viel ausf\u00fchrlichere und jetzt auskommentierte L\u00f6sung. Das hei\u00dft (auch wenn wir es noch nicht sehen), es werden die Eigenschaften <code>Name</code> und <code>Age</code> erstellt, mit entsprechenden <code>PropertyChanged</code> Ereignisausl\u00f6sern. Wie ist das m\u00f6glich? </p> <ul> <li>Einerseits implementiert der Vorfahre <code>ObservableObject</code> bereits die Schnittstelle <code>INotifyPropertyChanged</code>, enth\u00e4lt also auch das Ereignis <code>PropertyChanged</code>, das durch Ableitung an unsere Klasse \"vererbt\" wird.</li> <li>W\u00e4hrend der Kompilierung wird der MVVM-Toolkit-Codegenerator ausgef\u00fchrt, der f\u00fcr jede Membervariable mit dem Attribut <code>ObservableProperty</code> in der Klasse eine Eigenschaft mit dem gleichen Namen, aber mit einem Gro\u00dfbuchstaben beginnend, erzeugt, die unter den richtigen Bedingungen und mit den richtigen Parametern das Ereignis <code>PropertyChanged</code> ausl\u00f6st. Hurra, wir m\u00fcssen diesen Code nicht schreiben.</li> <li>Die Frage ist, wo dieser Code generiert wird. In einem anderen \"partiellen\" Teil unserer Klasse. Nach einer \u00dcbersetzung in Visual Studio klicken Sie mit der rechten Maustaste auf den Klassennamen <code>Person</code> und w\u00e4hlen im Popup-Men\u00fc \"Go to Definition\". In einem unteren Fenster erhalten wir zwei Ergebnisse: das eine ist der Code, den wir oben geschrieben haben, das andere (\"public class Person\") springt nach einem Doppelklick zum generierten Teil des Codes: Sie sehen, dass der Code-Generator einen relativ ausf\u00fchrlichen Code generiert hat, aber was f\u00fcr uns wichtig ist, ist, dass die Eigenschaften <code>Name</code> und <code>Age</code> hier stehen, darunter - unter anderem - die Eigenschaft <code>OnPropertyChanged</code>. </li> </ul> <p> Der Code-Generator arbeitet in der Regel in der anderen \"partiellen\" H\u00e4lfte unserer Klasse, um den von uns geschriebenen und den von uns generierten Code nicht zu verwechseln! Teilklassen werden am h\u00e4ufigsten verwendet, um handgeschriebenen Code von generiertem Code zu \"trennen\".</p> <p>Da viel weniger Code geschrieben werden muss, verwenden wir in der Praxis die auf dem MVVM-Toolkit basierende L\u00f6sung (aber Sie m\u00fcssen auch die manuelle L\u00f6sung kennen, damit Sie verstehen k\u00f6nnen, was hinter den Kulissen geschieht).</p> <p>EINGABE</p> <p>Machen Sie einen Screenshot mit dem Namen <code>f1b.png</code> wie folgt:</p> <ul> <li>Starten Sie die App. Verkleinern Sie sie gegebenenfalls, damit sie nicht zu viel Platz auf dem Bildschirm einnimmt,</li> <li>Im \"Hintergrund\" sollte Visual Studio mit \"Person.cs\" ge\u00f6ffnet sein.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-2-umstellung-auf-eine-mvvm-basierte-losung","title":"Aufgabe 2 - Umstellung auf eine MVVM-basierte L\u00f6sung","text":"<p>Im vorherigen Schritt haben wir zwar das MVVM-Toolkit verwendet, sind aber noch nicht zu einer MVVM-basierten L\u00f6sung gewechselt (das Toolkit wurde nur f\u00fcr eine einfachere Implementierung von INPC verwendet). </p> <p>Im Folgenden werden wir die Architektur unserer Anwendung so anpassen, dass sie dem MVVM-Konzept folgt. Wir bauen auf dem MVVM-Toolkit auf, um die Implementierung zu erleichtern.</p> <p>Aufgabe: Arbeiten Sie das entsprechende Vorlesungsmaterial durch (am Ende des WinUI-Abschnitts):</p> <ul> <li>Verstehen Sie der grundlegenden Konzepte des MVVM-Musters.</li> <li>Der vollst\u00e4ndige Code f\u00fcr die Beispiele in den Folien ist im Ordner \"04-05 WinUI\\DancerProfiles\" (\"RelaxedMVVM\" und \"StrictMVVM\") von GitHub Repository verf\u00fcgbar und kann Ihnen helfen, die zu verstehen und die Aufgaben sp\u00e4ter zu l\u00f6sen. </li> </ul> <p>Was bedeutet das MVVM-Muster f\u00fcr unser Beispiel:</p> <ul> <li>Die Modellklasse ist die Klasse <code>Person</code> im Ordner <code>Models</code>, die die Daten einer Person repr\u00e4sentiert (sie enth\u00e4lt KEINE UI-Logik und ist unabh\u00e4ngig von der Anzeige).</li> <li>Im Moment sind alle Beschreibungen/Logiken im Zusammenhang mit der Visualisierung in <code>PersonListPage</code>.  Die aktuelle  <code>PersonListPage</code> wird in zwei Teile aufgeteilt:<ul> <li><code>PersonListPage.xaml</code> und seiner Code-Behind-Datei wird die Ansicht.</li> <li>Wir f\u00fchren ein ViewModel f\u00fcr <code>PersonListPage</code> mit dem Namen <code>PersonListPageViewModel</code> ein.<ul> <li> Sehr wichtig: Die gesamte Anzeigelogik wird von <code>PersonListPage</code> Code-Behind-Datei ins <code>PersonListPageViewModel</code> bewegt. Der Sinn des Musters ist, dass die View nur eine reine Beschreibung der Oberfl\u00e4che enth\u00e4lt, die Anzeigelogik befindet sich im ViewModel. </li> </ul> </li> </ul> </li> <li>Eine weitere S\u00e4ule des Musters: Unsere View enth\u00e4lt einen Verweis auf ihr ViewModel (in Form einer Eigenschaft).<ul> <li>In unserem Beispiel bedeutet dies, dass <code>PersonListPage</code> eine <code>PersonListPageViewModel</code> Eigenschaft haben muss. </li> <li> Dies ist sehr wichtig, da wir in unserer <code>PersonListPage</code> Xaml-Datei diese Eigenschaft verwenden k\u00f6nnen, um die Datenverbindung an Eigenschaften und Ereignishandler zu implementieren, die in das ViewModel verschoben wurden! </li> </ul> </li> <li><code>PersonListPageViewModel</code> \"arbeitet\" mit dem Modell und behandelt die Benutzerinteraktionen (Ereignishandler).</li> <li>Da wir eher das Relaxed- als das Strict-MVVM-Muster verwenden, f\u00fchren wir keinen <code>PersonViewModel</code>-Wrapper noch um unsere <code>Person</code>-Modellklasse herum ein.</li> </ul> <p>Aufgabe: \u00c4ndern Sie die bestehende Logik so, dass sie dem MVVM-Muster folgt und den oben genannten Grunds\u00e4tzen entspricht. Legen Sie die Klasse <code>PersonListPageViewModel</code> in einem neu erstellten Ordner <code>ViewModels</code> ab. Versuchen Sie, die L\u00f6sung anhand der obigen Hilfe selbst zu bearbeiten! Dazu geben wir einen vorherigen Hinweis, da das schwieriger herauszufinden ist: Sie k\u00f6nnen auch Ereignishandler f\u00fcr Ereignisse durch Datenverbindung angeben: siehe die Folie \"Bindung von Ereignissen und Funktionen\" (nach der Modifikation ist dies die einzige M\u00f6glichkeit, Ereignishandler anzugeben). Es ist auch wichtig zu beachten, dass Daten nur an \u00f6ffentliche Eigenschaften/Operationen gebunden werden k\u00f6nnen, so dass auch dies ge\u00e4ndert werden muss!</p> Tipps/Pr\u00fcfung der L\u00f6sung <ol> <li>Aus der <code>PersonListPage.xaml.cs</code> Code-Behind-Datei sollte fast alles (au\u00dfer <code>this.InitializeComponent()</code> Aufruf im Konstruktor) in die neu eingef\u00fchrte <code>PersonListPageViewModel</code> verschoben werden, da es sich um UI-Logik handelt.</li> <li><code>PersonListPageViewModel</code> sollte eine \u00f6ffentliche Klasse sein.</li> <li>In der <code>PersonListPage</code> Code-Behind-Datei m\u00fcssen Sie eine automatisch implementierte Eigenschaft namens ViewModel vom Typ <code>PersonListPageViewModel</code> mit nur Getter einf\u00fcgen und diese auf ein neues Objekt initialisieren. Mit anderen Worten, die Ansicht erstellt und enth\u00e4lt das ViewModel!</li> <li>In <code>PersonListPage.xaml</code> m\u00fcssen die beiden Datenverbindungen der zwei <code>TextBox</code> entsprechend korrigiert werden ( <code>NewPerson.Name</code> und <code>NewPerson.Age</code> sind jetzt eine Ebene tiefer verf\u00fcgbar, \u00fcber die ViewModel-Eigenschaft der Code-Behind-Datei).</li> <li>In <code>PersonListPage.xaml</code> m\u00fcssen die Ereignishandler (<code>Click</code>) an drei Stellen korrigiert werden. Dies ist komplizierter. Die Ereignishandler-Funktion kann nicht mehr mit der bisher verwendeten Syntax angegeben werden, da die Ereignishandler nicht mehr in der Code-Behind-Datei liegen (sie wurden in das ViewModel verschoben). <ul> <li>Ereignishandler k\u00f6nnen f\u00fcr Ereignisse durch Datenverbindung angegeben werden! Siehe Pr\u00e4sentationsfolie \"Binden von Ereignissen und Funktionen\". Das ist gut f\u00fcr uns, denn in der ViewModel-Eigenschaft der Code-Behind-Datei ist das <code>PersonListPageViewModel</code>-Objekt, das die Ereignishandler enth\u00e4lt (<code>AddButton_Click</code>, <code>IncreaseButton_Click</code>, <code>DecreaseButton_Click</code>), und diese m\u00fcssen als gebundene Eigenschaften in der Datenverbindung angegeben werden (z.B. <code>ViewModel.AddButton_Click</code> usw.).</li> <li>Es ist wichtig, dass die Ereignishandler-Funktionen \u00f6ffentlich sind, sonst funktioniert die Datenverbindung nicht (muss von privat konvertiert werden).</li> </ul> </li> </ol> <p>Andere wichtige Modifikationen:</p> <ul> <li>Die aktuellen Namen der Ereignishandler von <code>Click</code> in ViewModel lauten <code>AddButton_Click</code>, <code>IncreaseButton_Click</code> und <code>DecreaseButton_Click</code>. Das ist nicht gl\u00fccklich. Im ViewModel denken wir \"semantisch\" nicht im Sinne von Ereignishandlern. Stattdessen werden im Sinne von Modifizierungsoperationen denken, die den Zustand des ViewModel \u00e4ndern. Also statt dem oberen Namen werden wir die folgenden, sehr viel geignetere und aussagekr\u00e4ftigere Namen verwenden:  <code>AddPersonToList</code>, <code>IncreaseAge</code> und <code>DecreaseAge</code>. Benennen Sie die Funktionen entsprechend um! Nat\u00fcrlich m\u00fcssen Sie diese noch an die <code>Click</code> Ereignisse in der XAML-Datei binden.</li> <li>Die Parameterliste f\u00fcr die oben genannten Funktionen lautet zun\u00e4chst \"<code>object sender, RoutedEventArgs e</code>\". Diese Parameter werden jedoch nicht f\u00fcr irgendetwas verwendet. Gl\u00fccklicherweise ist die x:Bind-Ereignisbindung so flexibel, dass Sie auch eine Operation ohne Parameter angeben k\u00f6nnen, und das funktioniert auch problemlos. Entfernen Sie daher die oben genannten unn\u00f6tigen Parameter aus den drei Funktionen unseres ViewModel. Dies f\u00fchrt zu einer schlankeren L\u00f6sung.</li> </ul> <p>Pr\u00fcfen Sie, ob die Anwendung nach den \u00c4nderungen genauso funktioniert wie vorher!</p> <p>Was haben wir durch die Umstellung unserer bisherigen L\u00f6sung auf eine MVVM-Basis gewonnen? Die Antwort finden Sie in den Vorlesungsmaterial! Ein paar Dinge sind hervorzuheben:</p> <ul> <li>Die verschiedenen Zust\u00e4ndigkeiten sind gut voneinander getrennt (nicht vermischt), so dass es leichter zu verstehen ist:<ul> <li>UI-unabh\u00e4ngige Logik (Modell und zugeh\u00f6rige Klassen).</li> <li>UI-Logik (ViewModel)</li> <li>Nur UI-Erscheinung (View)</li> </ul> </li> <li>Da die UI-Logik separat ist, k\u00f6nn(t)en Sie Unit-Tests f\u00fcr sie schreiben.</li> </ul> <p>Je komplexer eine Anwendung ist, desto mehr sind diese wahr.</p> <p>EINGABE</p> <p>Machen Sie einen Screenshot mit dem Namen <code>f2.png</code> wie folgt:</p> <ul> <li>Starten Sie die App. Verkleinern Sie sie gegebenenfalls, damit sie nicht zu viel Platz auf dem Bildschirm einnimmt,</li> <li>Im \"Hintergrund\" sollte Visual Studio mit <code>PersonListPageViewModel.cs</code> ge\u00f6ffnet sein.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-3-deaktivierenaktivieren-von-controllern","title":"Aufgabe 3 - Deaktivieren/Aktivieren von Controllern","text":"<p>In diesem Stadium verh\u00e4lt sich die Anwendung etwas komisch: Sie k\u00f6nnen die Taste \"-\" verwenden, um ein Alter in den negativen Bereich zu verschieben, oder die Taste \"+\", um es \u00fcber 150 zu verschieben, oder die Taste \"+Add\", um eine Person mit sinnlosen Attributen hinzuzuf\u00fcgen. Diese Tasten sollten deaktiviert werden, wenn die von ihnen ausgel\u00f6ste Aktion keinen Sinn ergibt, und aktiviert werden, wenn sie Sinn hat.</p> <p>Im n\u00e4chsten Schritt deaktivieren/aktivieren Sie die Taset \"-\" entsprechend. Die Taste sollte nur aktiviert werden, wenn das Alter der Person gr\u00f6\u00dfer als 0 ist.</p> <p>Versuchen Sie, es zuerst selbst zu l\u00f6sen, zumindest um die Grundlagen zu schaffen! Denken Sie unbedingt \u00fcber eine L\u00f6sung mit Datenverbindung, nur diese ist akzeptabel! Wenn Sie nicht weiterkommen kann, Ihre L\u00f6sung nicht funktionieren \"will\", \u00fcberdenken Sie, was der Grund daf\u00fcr sein k\u00f6nnte, und konstruiren Sie Ihre L\u00f6sung wie folgt.</p> <p>Es gibt mehrere m\u00f6gliche L\u00f6sungen f\u00fcr dieses Problem. In allen gemeinsam ist, dass die Eigenschaft <code>IsEnabled</code> der Taste \"-\" in irgendeiner Weise gebunden ist. In unserer L\u00f6sung binden wir sie an eine bool-Eigenschaft, die in <code>PersonListPageViewModel</code> neu eingef\u00fchrt wurde. </p> PersonListPageViewModel.cs<pre><code>    public bool IsDecrementEnabled\n    {\n        get { return NewPerson.Age &gt; 0; }\n    }\n</code></pre> In PersonListPage.xaml zu der Taste '-'<pre><code>    IsEnabled=\"{x:Bind ViewModel.IsDecrementEnabled, Mode=OneWay}\"\n</code></pre> <p>Probieren wir es aus! Leider funktioniert es nicht, die \"-\"-Taste wird nicht deaktiviert, wenn das Alter auf 0 oder weniger gesetzt wird (z.B. durch wiederholtes Anklicken der Taste). Wenn Sie einen Haltepunkt in <code>IsDecrementEnabled</code> setzen und die Anwendung auf diese Weise starten, werden Sie feststellen, dass der Wert der Eigenschaft nur einmal vom gebundenen Steuerelement abgefragt wird, wenn die Anwendung startet: Danach k\u00f6nnen Sie auf die Taste \"-\" mehrmals klicken, aber es wird nicht mehr als einmal abgefragt. Probieren Sie es aus!</p> <p>\u00dcberdenken Sie, was die Ursache daf\u00fcr ist, und lesen Sie erst dann der Leitfaden weiter!</p> Begr\u00fcndung <p>Wie wir bereits gelernt haben, ruft die Datenverbindung den Wert der Quelleigenschaft (in diesem Fall <code>IsDecrementEnabled</code>) nur ab, wenn sie \u00fcber <code>INotifyPropertyChanged</code> \u00fcber eine \u00c4nderung informiert wird! Aber in unserer L\u00f6sung gibt es jedoch, selbst wenn sich die Eigenschaft <code>Age</code> des Objekts <code>NewPerson</code> \u00e4ndert, keine Benachrichtigung \u00fcber die \u00c4nderung der darauf basierenden Eigenschaft <code>IsDecrementEnabled</code>!</p> <p>Im n\u00e4chsten Schritt implementieren Sie die entsprechende \u00c4nderungsmeldung in der Klasse <code>PersonListPageViewModel</code>: </p> <ul> <li>Implementieren Sie die <code>INotifyPropertyChanged</code> Schnittstelle auf MVVM Toolkit \"Grundlagen\"!</li> <li>Die Eigenschaft <code>IsDecrementEnabled</code> kann so bleiben, wie sie ist (get only property), sie muss nicht auf <code>[ObservableProperty]</code> umgeschrieben werden (aber das ist auch eine gute L\u00f6sung und f\u00fcr Hausaufgaben durchaus akzeptabel, sie muss nur in den n\u00e4chsten Schritten etwas anders bearbeitet werden).</li> <li>Versuchen Sie, Folgendes in der ViewModel-Klasse selbst zu implementieren (die Klasse <code>Person</code> bleibt unver\u00e4ndert): Wenn sich <code>NewPerson.Age</code> \u00e4ndert, wird die vom Vorg\u00e4nger geerbte Eigenschaft <code>OnPropertyChanged</code> aufgerufen, um die \u00c4nderung der Eigenschaft <code>IsDecrementEnabled</code> anzuzeigen. Hinweis: Die Klasse <code>Person</code> hat bereits ein Ereignis <code>PropertyChanged</code>, da sie selbst die Schnittstelle <code>INotifyPropertyChanged</code> implementiert, k\u00f6nnen Sie dieses Ereignis abonnieren! Wegen der Einfachheit haben wir nichts dagegen, wenn wir eine \u00c4nderung an <code>IsDecrementEnabled</code> melden, auch wenn sie sich nicht wirklich \"logisch\" \u00e4ndert.</li> <li>Die obigen Schritte k\u00f6nnen auch ohne die Implementierung einer separaten Ereignishandler-Funktion durchgef\u00fchrt werden: Dies wird empfohlen, ist aber nicht zwingend erforderlich (Tipp: Geben Sie eine Ereignishandler-Funktion mit einem Lambda-Ausdruck an).</li> </ul> <p>Testen Sie Ihre L\u00f6sung! Wenn Sie richtig gearbeitet haben, sollte die Taste auch dann deaktiviert sein, wenn Sie manuell einen negativen Alterswert in die Textbox eingeben (und dann aus der Textbox herausklicken). Denken Sie dar\u00fcber nach, warum das so ist!</p> <p>Erarbeiten Sie eine \u00e4hnliche L\u00f6sung f\u00fcr die Taste \"+\" und die Taste \"+Add\"!</p> <ul> <li>Das \"akzeptable\" H\u00f6chstalter sollte 150 Jahre sein.</li> <li>Der Name ist nur akzeptabel, wenn er mindestens ein Zeichen enth\u00e4lt, das kein Leerzeichen ist (um letzteres zu pr\u00fcfen, verwenden Sie die statische Operation der String-Klasse <code>IsNullOrWhiteSpace</code>).</li> <li>Der Fall, dass der Benutzer eine ung\u00fcltige Zahl in die Alters-Textbox eingibt (was bei dieser L\u00f6sung nicht m\u00f6glich ist), muss nicht behandelt werden.</li> </ul> <p>Beim Testen haben wir festgestellt, dass sich der Zustand der Taste \"+Add\" nicht sofort \u00e4ndert, wenn wir beispielsweise den Namen in der Textbox \"Name\" l\u00f6schen, sondern erst, wenn wir die Textbox verlassen? Warum ist das so? \u00c4ndern Sie Ihre L\u00f6sung so, dass dies bei jeder Text\u00e4nderung geschieht, ohne die TextBox zu verlassen. Hinweis: siehe die Folie \"x:Bind wann werden die Daten aktualisiert?\" in der Vorlesungsmaterial.</p> <p>EINGABE</p> <p>Machen Sie einen Screenshot mit dem Namen <code>f3.png</code> wie folgt:</p> <ul> <li>Starten Sie die App. Verkleinern Sie sie gegebenenfalls, damit sie nicht zu viel Platz auf dem Bildschirm einnimmt,</li> <li>sollte das Alter in der Anwendung auf 0 reduziert werden,</li> <li>im \"Hintergrund\" sollte Visual Studio mit <code>PersonListPageViewModel.cs</code> ge\u00f6ffnet sein.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-4-command-verwenden","title":"Aufgabe 4 - Command verwenden","text":"<p>Derzeit haben wir zwei Aufgaben f\u00fcr die Taste \"-\":</p> <ul> <li>F\u00fcr <code>Click</code>, die Ausf\u00fchrung der Ereignishandler-Funktion</li> <li>Deaktivieren/Aktivieren der Taste mit der Eigenschaft <code>IsEnabled</code> </li> </ul> <p>Einige Controller, wie z. B. die Taste, unterst\u00fctzen die M\u00f6glichkeit, beide Aufgaben, aufbauend auf dem Command-Muster, mit einem Command-Objekt zu machen. Das Konzept des Command-Entwurfsmusters kann in der Vorlesung \"Design Patterns 3\" ausf\u00fchrlicher behandelt werden (obwohl wir dort nur das grundlegende Command-Muster kennengelernt haben, das die Ausf\u00fchrung von Befehlen unterst\u00fctzt, nicht aber das Verbieten/Erlauben). Die MVVM-spezifische Umsetzung des Command-Patterns finden Sie gegen Ende der WinUI-Vorlesungsreihe, beginnend mit der Folie \"Command-Muster\".</p> <p>Das Grundprinzip ist: Anstatt die \"Angaben\" von <code>Click</code> und <code>IsEnabled</code> f\u00fcr die Taste, setzen wir die Eigenschaft <code>Command</code> der Taste auf ein Befehlsobjekt, das die Schnittstelle <code>ICommand</code> implementiert. Es liegt an diesem Befehlsobjekt, den Befehl auszuf\u00fchren oder zu deaktivieren/aktivieren.</p> <p>Standardm\u00e4\u00dfig sollte eine Anwendung f\u00fcr jeden Befehl eine eigene <code>ICommand</code> Implementierung haben. Dies erfordert jedoch die Einf\u00fchrung vieler Klassen f\u00fcr viele Befehle. Das MVVM-Toolkit ist hier, um zu helfen. Stellt eine Klasse <code>RelayCommand</code> zur Verf\u00fcgung, die die Schnittstelle <code>ICommand</code> implementiert. Diese Klasse kann zur Ausf\u00fchrung beliebiger Befehle/Codes verwendet werden, so dass keine zus\u00e4tzlichen Befehlsklassen eingef\u00fchrt werden m\u00fcssen. Wie ist das m\u00f6glich? So, dass <code>RelayCommand</code> hat den Code f\u00fcr die Ausf\u00fchrung und deaktivieren/aktivieren in Konstruktor-Parameter, in Form von zwei Delegaten:</p> <ul> <li>Der erste Parameter gibt den Code an, der ausgef\u00fchrt werden soll, wenn der Befehl ausgef\u00fchrt wird.</li> <li>Der zweite Parameter (optional) ist der Code, den der Befehl aufruft, um zu pr\u00fcfen, ob er sich selbst zulassen oder verbieten soll (die hier angegebene Funktion muss einen booleschen Wert zur\u00fcckgeben, im wahren Fall wird der Befehl zugelassen).</li> </ul> <p>Der n\u00e4chste Schritt besteht darin, die Behandlung der Taste \"-\" auf command basierende umzustellen. Versuchen Sie zuerst, das meiste davon selbst zu implementieren, basierend auf dem zugeh\u00f6rigen WinUI-Vorlesungen. Das Ausf\u00fchren des Befehls ist einfacher, aber Sie m\u00fcssen etwas Arbeit investieren, um den Befehl zu deaktivieren und zu aktivieren. Die wichtigsten Schritte:</p> <ul> <li>F\u00fcgen Sie eine \u00f6ffentliche <code>RelayCommand</code> Eigenschaft mit nur Getter zum ViewModel hinzu, z.B. <code>DecreaseAgeCommand</code>.  Anders als in den Vorlesungsmaterial brauchen wir in unserem Fall <code>RelayCommand</code> keinen allgemeinen Parameter zu geben, da unsere Befehlsbehandlungsfunktion (<code>DecreaseAge</code>) keinen Parameter hat.</li> <li>Geben Sie der neu eingef\u00fchrten Eigenschaft im ViewModel-Konstruktor einen Wert. Geben Sie die Parameter des <code>RelayCommand</code> Konstruktors entsprechend an.</li> <li>In <code>PersonListPage.xaml</code> muss die Taste \"-\" nicht mehr <code>Click</code> und <code>IsEnabled</code> binden, sie werden gel\u00f6scht. Binden Sie stattdessen die Eigenschaft <code>Command</code> der Taste an die Eigenschaft <code>DecreaseAgeCommand</code>, die im vorherigen Schritt im ViewModel eingef\u00fchrt wurde.</li> </ul> <p>Wenn Sie es ausprobieren, funktioniert die Ausf\u00fchrund des Befehls, aber das Deaktivieren/Aktivieren nicht: Wenn Sie es gut beobachten, bleibt die Taste in ihrem Aussehen immer aktiviert. Es gibt einen logischen Grund daf\u00fcr, wenn man dar\u00fcber nachdenkt: <code>RelayCommand</code> kann die Aktion im zweiten Konstruktorparameter aufrufen, um den Zustand zu \u00fcberpr\u00fcfen, aber es wei\u00df nicht, dass es dies jedes Mal tun sollte, wenn <code>NewPerson.Age</code> sich \u00e4ndert! Wir k\u00f6nnen dabei helfen. In unserem ViewModel-Konstruktor haben wir bereits das <code>NewPerson.PropertyChanged</code> -Ereignis abonniert: Darauf aufbauend rufen wir, wenn sich das Alter \u00e4ndert (oder wenn es sich \u00e4ndern k\u00f6nnte, es ist kein Problem, dies manchmal unn\u00f6tigerweise zu tun), die Method <code>NotifyCanExecuteChanged</code> von <code>DecreaseAgeCommand</code> auf. Diese Operation hat einen sehr aussagekr\u00e4ftigen Namen: Sie teilt dem Befehl mit, dass sich der Zustand, auf dem der verbotene/erlaubte Zustand des Befehls aufgebaut ist, ge\u00e4ndert hat. Auf diese Weise wird der Befehl selbst aktualisiert, genauer gesagt der Zustand der mit dem Befehl verbundenen Taste.</p> <p>\u00c4ndern Sie die Behandlung der \"+\"-Taste auf \u00e4hnliche Weise auf Befehlsbasis! \u00c4ndern Sie nicht die Behandlung der Taste \"+Add\"!</p> <p>EINGABE</p> <p>Machen Sie einen Screenshot mit dem Namen <code>f4.png</code> wie folgt:</p> <ul> <li>Starten Sie die App. Verkleinern Sie sie gegebenenfalls, damit sie nicht zu viel Platz auf dem Bildschirm einnimmt,</li> <li>der Name TextBox sollte in der Anwendung leer sein,</li> <li>im \"Hintergrund\" sollte Visual Studio mit <code>PersonListPageViewModel.cs</code> ge\u00f6ffnet sein.</li> </ul>"},{"location":"hazi/5-mvvm/index_ger/#aufgabe-5-verwendung-von-command-mit-mvvm-toolkit-basierter-codegenerierung","title":"Aufgabe 5 - Verwendung von Command mit MVVM Toolkit-basierter Codegenerierung","text":"<p>In der vorigen Aufgabe wurde die Einf\u00fchrung von Command-Eigenschaften und deren Instanziierung \"manuell\" gemacht. Das MVVM Toolkit kann dies vereinfachen: Wenn das richtige Attribut verwendet wird, k\u00f6nnen die Eigenschaft und die Instanziierung automatisch generiert werden.</p> <p>\u00c4ndern wir die Behandlung von <code>DecreaseAgeCommand</code> (nur dieses, <code>IncreaseAgeCommand</code> soll unver\u00e4ndert bleiben! ) auf eine generierte Codebasis:</p> <ol> <li>Erg\u00e4nzen Sie die Klasse <code>PersonListPageViewModel</code> mit dem Schl\u00fcsselwort <code>partial</code>. </li> <li>Entfernen Sie die Eigenschaft <code>DecreaseAgeCommand</code> und ihre Instanziierung aus dem Konstruktor.</li> <li>Erg\u00e4nzen Sie <code>DecreaseAge</code> mit diesem Attribut: <code>[RelayCommand(CanExecute = nameof(IsDecrementEnabled))]</code>. <ul> <li>Als Ergebnis f\u00fchrt der Codegenerator eine Eigenschaft <code>RelayCommand</code> in die Klasse ein, die mit dem Namen unserer Operation (<code>DecreaseAge</code>) benannt ist und an die die Zeichenfolge \"Command\" angeh\u00e4ngt ist. So erhalten wir die Eigenschaft <code>DecreaseAgeCommand</code>, die wir zuvor manuell eingef\u00fchrt haben.</li> <li>Die Attributeigenschaft <code>CanExecute</code> kann verwendet werden, um in Form einer Zeichenkette den Namen der Operation oder Eigenschaft  mit booleschen R\u00fcckgabewert anzugeben, die der generierte Code verwenden wird, wenn er den Befehl verbietet/erlaubt (er ist der zweite Parameter des Konstruktors RelayCommand). Wir haben bereits eine solche Eigenschaft, die \"IsDecrementEnabled\" hei\u00dft. Sie wird nicht als einfache Zeichenkette angegeben, denn wenn jemand die Operation <code>IsDecrementEnabled</code> nachtr\u00e4glich umbenennt, w\u00fcrde die aktuelle \"IsDecrementEnabled\" nicht auf die richtige Operation verweisen. Die Verwendung des Ausdrucks <code>nameof</code> vermeidet dieses Problem. Die Angabe von <code>CanExecute</code> ist im Allgemeinen optional (geben Sie es nicht an, wenn Sie den Befehl niemals deaktivieren wollen).</li> </ul> </li> </ol> <p>Testen Sie die L\u00f6sung (Verkleinerung des Alters), sie sollte genauso funktionieren wie zuvor.</p> <p>EINGABE</p> <p>Machen Sie einen Screenshot mit dem Namen <code>f5.png</code> wie folgt:</p> <ul> <li>Starten Sie die App. Verkleinern Sie sie gegebenenfalls, damit sie nicht zu viel Platz auf dem Bildschirm einnimmt,</li> <li>im \"Hintergrund\" sollte Visual Studio mit <code>PersonListPageViewModel.cs</code> ge\u00f6ffnet sein.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/","title":"6. HF - Tervez\u00e9si mint\u00e1k (kiterjeszthet\u0151s\u00e9g)","text":"<p>A h\u00e1zi feladatban a kapcsol\u00f3d\u00f3 laboron (6. labor \u2013 Tervez\u00e9si mint\u00e1k (kiterjeszthet\u0151s\u00e9g)) elkezdett adatfeldolgoz\u00f3/anonimiz\u00e1l\u00f3 alkalmaz\u00e1st fogjuk tov\u00e1bbfejleszteni.</p> <p>Az \u00f6n\u00e1ll\u00f3 feladat az tervez\u00e9si mint\u00e1k el\u0151ad\u00e1sokon elhangzottakra \u00e9p\u00edt: - \"El\u0151ad\u00e1s 08 - Tervez\u00e9si mint\u00e1k 1\" el\u0151ad\u00e1s: \"B\u0151v\u00edthet\u0151s\u00e9ghez, kiterjeszthet\u0151s\u00e9ghez kapcsol\u00f3d\u00f3 alap tervez\u00e9si mint\u00e1k\" nagyfejezet: bevezet\u0151 p\u00e9lda, Template Method, Strategy, Open/Closed elv, SRP elv, egy\u00e9b technik\u00e1k (met\u00f3dusreferencia/lambda) - \"El\u0151ad\u00e1s 09 - Tervez\u00e9si mint\u00e1k 1\" el\u0151ad\u00e1s: Dependency Injection minta</p> <p>A feladatok gyakorlati h\u00e1tter\u00e9\u00fcl a 6. labor \u2013 Tervez\u00e9si mint\u00e1k (kiterjeszthet\u0151s\u00e9g) laborgyakorlat szolg\u00e1l.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>Kapcsol\u00f3d\u00f3 tervez\u00e9si mint\u00e1k \u00e9s egy\u00e9b kiterjeszthet\u0151s\u00e9gi technik\u00e1k alkalmaz\u00e1sa</li> <li>Integr\u00e1ci\u00f3s \u00e9s egys\u00e9gtesztek koncepci\u00f3inak gyakorl\u00e1sa</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s. Enn\u00e9l a h\u00e1zi feladatn\u00e1l nincs sz\u00fcks\u00e9g WinUI-ra (egy konzol alap\u00fa alkalmaz\u00e1s kontextus\u00e1ban kell dolgozni), \u00edgy pl. Linux/MacOS k\u00f6rnyezetben is elv\u00e9gezhet\u0151.</p>"},{"location":"hazi/6-tervezesi-mintak/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li>A kikl\u00f3nozott f\u00e1jlok k\u00f6z\u00f6tt a <code>Patterns-Extensibility.sln</code>-t megnyitva kell dolgozni.</li> <li> A feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi. A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, a repository-d gy\u00f6k\u00e9rmapp\u00e1j\u00e1ba tedd (a neptun.txt mell\u00e9). A k\u00e9perny\u0151k\u00e9pek \u00edgy felker\u00fclnek GitHub-ra a git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</li> <li> Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#1-feladat","title":"1. Feladat","text":"<p>A h\u00e1zi feladat megold\u00e1s\u00e1nak alapja a k\u00f6vetkez\u0151:</p> <ul> <li>A Strategy \u00e9s a kapcsol\u00f3d\u00f3 Dependency Injection (DI) tervez\u00e9si minta ismerete</li> <li>Ezen mint\u00e1k alkalmaz\u00e1s\u00e1nak pontos meg\u00e9rt\u00e9se a labor feladat\u00e1nak a kontextus\u00e1ban (anonimiz\u00e1l\u00f3)</li> </ul> <p>A h\u00e1zi feladat kiindul\u00f3 \u00e1llapota megfelel a 6. labor v\u00e9g\u00e1llapot\u00e1nak: ez a h\u00e1zi feladat solutionj\u00e9ben a \"Strategy-DI\" projekt. Futtat\u00e1shoz/debuggol\u00e1shoz be kell \u00e1ll\u00edtani, hogy ez legyen a startup projekt (jobb katt, \"Set as Startup Project\"). Ennek forr\u00e1sk\u00f3dj\u00e1t alaposan n\u00e9zd \u00e1t \u00e9s \u00e9rtsd meg.</p> <ul> <li>A <code>Program.cs</code> f\u00e1jlban tal\u00e1lhat\u00f3 h\u00e1rom <code>Anonymizer</code>, elt\u00e9r\u0151 strategy implement\u00e1ci\u00f3kkal param\u00e9terezve. R\u00e1hangol\u00f3d\u00e1sk\u00e9ppen \u00e9rdemes ezeket egyes\u00e9vel kipr\u00f3b\u00e1lni/futtatni, \u00e9s megn\u00e9zni, hogy val\u00f3ban a v\u00e1lasztott strategy implement\u00e1ci\u00f3knak megfelel\u0151en t\u00f6rt\u00e9nik az anonimiz\u00e1l\u00e1s \u00e9s a progress kezel\u00e9s (eml\u00e9keztet\u0151 laborr\u00f3l: az anonimiz\u00e1l\u00f3 bemenete \"bin\\Debug\\net8.0\" mapp\u00e1ban lev\u0151 us-500.csv, kimenete az ugyanitt tal\u00e1lhat\u00f3 \"us-500.processed.txt\").</li> <li>Szint\u00e9n \u00e9rdemes a <code>Program.cs</code> f\u00e1jlban kiindulva, t\u00f6r\u00e9spontokat elhelyezve v\u00e9gig l\u00e9pkedni a k\u00f3don (ez is seg\u00edtheti az ism\u00e9tl\u00e9st/teljes meg\u00e9rt\u00e9st). </li> </ul> <p>Dependency Injection (manu\u00e1lis) vs. Dependency Injection Container</p> <p>A labor sor\u00e1n, \u00e9s jelen h\u00e1zi feladatban a Dependency Injection egyszer\u0171, manu\u00e1lis v\u00e1ltozat\u00e1t haszn\u00e1ljuk (el\u0151ad\u00e1son is ez szerepel). Ez esetben az oszt\u00e1ly f\u00fcgg\u0151s\u00e9geit manu\u00e1lisan p\u00e9ld\u00e1nyos\u00edtjuk \u00e9s adjuk \u00e1t az oszt\u00e1ly konstruktor\u00e1ban. Alternat\u00edv \u00e9s komplexebb alkalmaz\u00e1sok eset\u00e9ben gyakran haszn\u00e1lt alternat\u00edva egy Dependency Injection Container alkalmaz\u00e1sa, melybe beregisztr\u00e1lhatjuk, hogy az egyes interf\u00e9sz t\u00edpusokhoz milyen implement\u00e1ci\u00f3t k\u00edv\u00e1nunk haszn\u00e1lni. A DI kont\u00e9nerek alkalmaz\u00e1sa a t\u00e1rgy keret\u00e9ben nem szerepelt, nem tananyag. A manu\u00e1lis v\u00e1ltozata viszont az, \u00e9s kiemelt fontoss\u00e1g\u00fa, hiszen en\u00e9lk\u00fcl nincs \u00e9rtelme a Strategy minta alkalmaz\u00e1s\u00e1nak.</p> <p> Saj\u00e1t szavaiddal megfogalmazva adj r\u00f6vid v\u00e1laszt a Feladatok mapp\u00e1ban tal\u00e1lthat\u00f3 <code>readme.md</code> f\u00e1jlban az al\u00e1bbi k\u00e9rd\u00e9sekre:</p> <ul> <li>Mit biztos\u00edt a Strategy a DI mint\u00e1val kombin\u00e1lva a labor p\u00e9lda keret\u00e9ben, mik az egy\u00fcttes alkalmaz\u00e1suk el\u0151nyei?</li> <li>Mit jelent az, hogy a Strategy minta alkalmaz\u00e1s\u00e1val az Open/Closed elv megval\u00f3sul a megold\u00e1sban? (az Open/Closed elvr\u0151l az el\u0151ad\u00e1s \u00e9s laboranyagban is olvashatsz).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#2-feladat-null-strategy","title":"2. Feladat - Null Strategy","text":"<p>Az <code>Anonymizer</code> konstruktor param\u00e9tereit megvizsg\u00e1lva azt l\u00e1tjuk, hogy progress strat\u00e9gi\u00e1nak <code>null</code> is megadhat\u00f3. Ez logikus, hiszen lehet, hogy az <code>Anonymizer</code> felhaszn\u00e1l\u00f3ja nem k\u00edv\u00e1ncsi semmif\u00e9le progress inform\u00e1ci\u00f3ra. Ennek a megk\u00f6zel\u00edt\u00e9snek van egy h\u00e1tr\u00e1nya is. Ez esetben az oszt\u00e1lyban a <code>_progress</code> tagv\u00e1ltoz\u00f3 null lesz, \u00e9s \u00edgy az alkalmaz\u00e1sa sor\u00e1n sz\u00fcks\u00e9g van a null vizsg\u00e1latra. Ellen\u0151rizz\u00fck, hogy a <code>_progess</code> haszn\u00e1latakor val\u00f3ban van null vizsg\u00e1lat a <code>?.</code> oper\u00e1tor alkalmaz\u00e1s\u00e1val. De ez egy vesz\u00e9lyes j\u00e1t\u00e9k, mert komplexebb esetben hacsak egyetlen helyen is lefelejt\u0151dik a null vizsg\u00e1lat, akkor fut\u00e1s k\u00f6zben <code>NullReferenceException</code>-t kapunk. Az ehhez hasonl\u00f3 null hivatkoz\u00e1s hib\u00e1k a leggyakoribbak k\u00f6z\u00e9 tartoznak.</p> <p>Feladat: Dolgozz ki egy olyan megold\u00e1st, mely a fent v\u00e1zolt hibalehet\u0151s\u00e9get kiz\u00e1rja. Tipp: olyan megold\u00e1sra van sz\u00fcks\u00e9g, melyn\u00e9l a <code>_progress</code> tag soha nem lehet null. A megold\u00e1sra el\u0151sz\u00f6r magadt\u00f3l pr\u00f3b\u00e1lj r\u00e1j\u00f6nni.</p> Megold\u00e1s alapelve <p>A megold\u00e1s \"tr\u00fckkje\" a k\u00f6vetkez\u0151. Egy olyan <code>IProgress</code> strategy implement\u00e1ci\u00f3t kell k\u00e9sz\u00edteni (pl. <code>NullProgress</code> n\u00e9ven), melyet akkor haszn\u00e1lunk, amikor nincs sz\u00fcks\u00e9g progress inform\u00e1ci\u00f3ra. Ez az implement\u00e1ci\u00f3 a progress \"sor\u00e1n\" nem csin\u00e1l semmit, a f\u00fcggv\u00e9ny t\u00f6rzse \u00fcres. Amikor az <code>Anonymizer</code> konstruktor\u00e1ban null-t ad meg az oszt\u00e1ly p\u00e9ld\u00e1nyos\u00edt\u00f3ja progressk\u00e9nt, akkor egy <code>NullProgress</code> objektumot hozzunk l\u00e9tre a konstruktorban, \u00e9s a <code>_progress</code> tagot \u00e1ll\u00edtsuk erre. Most m\u00e1r a <code>_progress</code> soha nem lehet null, a null vizsg\u00e1latot vegy\u00fck is ki a k\u00f3db\u00f3l.</p> <p>Ennek a technik\u00e1nak is van neve, Null Object n\u00e9ven szok\u00e1s r\u00e1 hivatkozni.</p>"},{"location":"hazi/6-tervezesi-mintak/#3-feladat-tesztelhetoseg","title":"3. Feladat - Tesztelhet\u0151s\u00e9g","text":"<p>Vegy\u00fck \u00e9szre, hogy az <code>Anonymizer</code> oszt\u00e1ly m\u0171k\u00f6d\u00e9s\u00e9nek van m\u00e9g sz\u00e1mos aspektusa, melyeket valamelyik megold\u00e1sunkkal kiterjeszthet\u0151v\u00e9 lehetne tenni. T\u00f6bbek k\u00f6z\u00f6tt ilyen a:</p> <ul> <li>Bemenet kezel\u00e9se: Most csak f\u00e1jl alap\u00fa, adott CSV form\u00e1tumot t\u00e1mogatunk.</li> <li>Kimenet kezel\u00e9se: Most csak f\u00e1jl alap\u00fa, adott CSV form\u00e1tumot t\u00e1mogatunk.</li> </ul> <p>Ezeket az SRP elve miatt illene az oszt\u00e1lyr\u00f3l lev\u00e1lasztani, m\u00e1s oszt\u00e1lyba tenni (ism\u00e9teld \u00e1t, mit jelent az SRP elv). A lev\u00e1laszt\u00e1st nem felt\u00e9telen kiterjeszthet\u0151 m\u00f3don kellene megtenni, hiszen nem mer\u00fclt fel ig\u00e9ny arra, hogy k\u00fcl\u00f6nb\u00f6z\u0151 bemenetekkel \u00e9s kimenetekkel kellene tudni dolgozni. \u00cdgy a lev\u00e1laszt\u00e1s sor\u00e1n nem alkalmazn\u00e1nk a Strategy mint\u00e1t.</p> <p>Ugyanakkor van m\u00e9g egy kritikus szempont, melyr\u0151l nem besz\u00e9lt\u00fcnk (\u00e9s a r\u00e9gebbi, klasszikus design pattern irodalmak sem felt\u00e9tlen emlegetik). Ez az egys\u00e9gtesztelhet\u0151s\u00e9g.</p> <p>Jelen pillanatban az <code>Anonymizer</code> oszt\u00e1lyunkhoz automata integr\u00e1ci\u00f3s teszteket tudunk \u00edrni, automata egys\u00e9gteszteket nem:</p> <ul> <li>Az integr\u00e1ci\u00f3s tesztek a teljes m\u0171k\u00f6d\u00e9st egyben vizsg\u00e1lj\u00e1k: ebben benne van a bemenet feldolgoz\u00e1sa, adatfeldolgoz\u00e1s, kimenet el\u0151\u00e1ll\u00edt\u00e1sa. Ez p\u00e9ld\u00e1nkban egyszer\u0171: el\u00e1ll\u00edtunk bizonyos bemeneti CVS \u00e1llom\u00e1nyokat, \u00e9s megn\u00e9zz\u00fck, a v\u00e1rt kimeneti \u00e1llom\u00e1ny \u00e1ll\u00edt\u00f3dik-e el\u0151.</li> <li>Az integr\u00e1ci\u00f3s tesztek nagyon lass\u00faak tudnak lenni: sokszor f\u00e1jlokb\u00f3l, adatb\u00e1zisokb\u00f3l, felh\u0151 alap\u00fa szolg\u00e1ltat\u00e1sokb\u00f3l veszik a bemenetet, illetve ezek szolg\u00e1lnak kimenetk\u00e9nt. Egy nagyobb term\u00e9k eset\u00e9ben - mikor sok ezer teszt van - ez a lass\u00fas\u00e1g korl\u00e1toz\u00f3 t\u00e9nyez\u0151, ritk\u00e1bban tudjuk futtatni \u00e9s/vagy nem tudunk j\u00f3 tesztlefedetts\u00e9get el\u00e9rni.</li> </ul> <p>A fentiek miatt sokszor nagyobb k\u00f3dlefedetts\u00e9get nem a lassabb integr\u00e1ci\u00f3s, hanem nagyon gyorsan fut\u00f3 egys\u00e9gtesztekkel szoktunk/tudunk el\u00e9rni. Ezek mindenf\u00e9le lass\u00fa f\u00e1jl/adatb\u00e1zis/h\u00e1l\u00f3zat/felh\u0151 el\u00e9r\u00e9s n\u00e9lk\u00fcl \u00f6nmag\u00e1ban egy-egy logikai egys\u00e9get tesztelnek a k\u00f3dban, ezt viszont \u00edgy m\u00e1r vill\u00e1mgyorsan. \u00cdgy sokat tudunk futtatni adott id\u0151 alatt, j\u00f3 tesztlefedetts\u00e9ggel.</p> <p>Tesztpiramis</p> <p>Ezt egy tesztpiramissal szok\u00e1s szeml\u00e9ltetni, melynek t\u00f6bb form\u00e1ja terjedt el az irodalomban. Egy egyszer\u0171 vari\u00e1ns a k\u00f6vetkez\u0151:</p> <p></p> <p>Min\u00e9l fentebb vagyunk a piramis r\u00e9tegeiben, ann\u00e1l \u00e1tfog\u00f3bbak ugyan a tesztek, de ann\u00e1l lassabbak \u00e9s k\u00f6lts\u00e9gesebben is futtathat\u00f3k. \u00cdgy ezekb\u0151l \u00e1ltal\u00e1ban kevesebbet is k\u00e9sz\u00edt\u00fcnk (ez\u00e1ltal kisebb k\u00f3dlefedetts\u00e9get is \u00e9r\u00fcnk el vel\u00fck). A piramis cs\u00facs\u00e1n az automata E2E (End-to-end) vagy GUI tesztek vannak. Alatta vannak t\u00f6bb egys\u00e9get/modult egyben tesztel\u0151 integr\u00e1ci\u00f3s tesztek. A piramis talapzat\u00e1ban az egys\u00e9gtesztek vannak, ezekb\u0151l k\u00e9sz\u00edt\u00fcnk a legt\u00f6bbet (a piramis talapzata a legsz\u00e9lesebb).</p> <p>Fun fact: Amikor egy term\u00e9k fejleszt\u00e9se sor\u00e1n hossz\u00fa ideig elhanyagolj\u00e1k az egys\u00e9gtesztek k\u00e9sz\u00edt\u00e9s\u00e9t, akkor - mivel a k\u00f3d szerkezete nem t\u00e1mogatja - m\u00e1r nagyon neh\u00e9z egys\u00e9gteszteket ut\u00f3lag k\u00e9sz\u00edteni. \u00cdgy ezekb\u0151l csak nagyon kev\u00e9s lesz, n\u00e9mi integr\u00e1ci\u00f3s tesztekkel kieg\u00e9sz\u00edtve, \u00e9s jobb h\u00edj\u00e1n tesztel\u0151csapatok \u00e1ltal elk\u00e9sz\u00edtett sok-sok end-to-end/GUI teszttel (de ezzel sokszor nem lehet j\u00f3 tesztlefedetts\u00e9get el\u00e9rni egy komplex term\u00e9kben). Egy piramissal szemben ennek fagyit\u00f6lcs\u00e9r form\u00e1ja van, csak p\u00e1r gomb\u00f3cot kell a tetej\u00e9re k\u00e9pzelni. Szok\u00e1s ezt fagyi \"mint\u00e1nak\" is nevezni (\u00e9s ez nem az a fagyi, amit szeret\u00fcnk). Azt az\u00e9rt \u00e9rdemes megjegyezni, hogy mindent a hely\u00e9n kell kezelni: vannak kiv\u00e9telek (olyan alkalmaz\u00e1sok, ahol az egyes r\u00e9szekben alig van logika, az eg\u00e9sz alkalmaz\u00e1sban az egyes nagyon egyszer\u0171 r\u00e9szek integr\u00e1ci\u00f3ja a hangs\u00falyos: ilyen esetben term\u00e9szetszer\u0171en az integr\u00e1ci\u00f3s tesztek t\u00fals\u00falyosak).</p> <p>Az oszt\u00e1lyok k\u00f3dja alapesetben sokszor nem egys\u00e9gtesztelhet\u0151. Jelen form\u00e1j\u00e1ban ilyen az <code>Anonymizer</code> is. Ebbe be van \u00e9getve, hogy csak a lass\u00fa, f\u00e1jl alap\u00fa bemenettel tud dolgozni. De amikor mi pl. a <code>Run</code> m\u0171velet logik\u00e1j\u00e1t szeretn\u00e9nk egys\u00e9gtesztelni, teljesen mindegy, hogy f\u00e1jlb\u00f3l j\u00f6nnek-e az adatok (lassan), vagy egyszer\u0171en k\u00f3db\u00f3l a <code>new</code> oper\u00e1torral el\u0151\u00e1ll\u00edtunk n\u00e9h\u00e1ny <code>Person</code> objektumot a tesztel\u00e9shez (t\u00f6bb nagys\u00e1grenddel gyorsabban).</p> <p>A megold\u00e1s - a k\u00f3dunk egys\u00e9gtesztelhet\u0151v\u00e9 t\u00e9tel\u00e9hez - egyszer\u0171:</p> <ul> <li> A Strategy (+DI) minta (vagy delegate-ek) alkalmaz\u00e1ssal v\u00e1lasszuk le az egys\u00e9gtesztelni k\u00edv\u00e1nt oszt\u00e1lyr\u00f3l a tesztel\u00e9st akad\u00e1lyoz\u00f3 vagy lass\u00edt\u00f3 (pl. bemenet/kimenet kezel\u00e9s) logik\u00e1kat. Ezeknek k\u00e9sz\u00edt\u00fcnk a val\u00f3di logik\u00e1t megval\u00f3s\u00edt\u00f3 implement\u00e1ci\u00f3it, illetve tesztel\u00e9st seg\u00edt\u0151, \u00fan. mock implement\u00e1ci\u00f3it.</li> </ul> <ul> <li> Ennek megfelel\u0151en a Strategy mint\u00e1t sokszor nem az\u00e9rt haszn\u00e1ljuk, mert az \u00fcgyf\u00e9lig\u00e9nyek miatt t\u00f6bbf\u00e9le viselked\u00e9st kell benevezni, hanem az\u00e9rt, hogy a k\u00f3dunk egys\u00e9gtesztelhet\u0151 legyen.</li> </ul> <p>Ennek megfelel\u0151en elk\u00e9sz\u00edtj\u00fck a megold\u00e1sunk egys\u00e9gtesztel\u00e9sre is el\u0151k\u00e9sz\u00edtett v\u00e1ltozat\u00e1t, melyben a bemenet \u00e9s kimenet kezel\u00e9se is le van v\u00e1lasztva a Strategy minta alkalmaz\u00e1s\u00e1val.</p> <p>Feladat: Alak\u00edtsd \u00e1t a Strategy-DI projektben tal\u00e1lhat\u00f3 megold\u00e1st olyan m\u00f3don, hogy az oszt\u00e1ly egys\u00e9g tesztelhet\u0151 legyen, m\u00e9gpedig a Strategy minta seg\u00edts\u00e9g\u00e9vel. R\u00e9szletesebben:</p> <ul> <li>Vezess be egy <code>InputReaders</code> mapp\u00e1t, melyben vezess be egy bemenet feldolgoz\u00f3 strategy interf\u00e9szt <code>IInputReader</code> n\u00e9ven (egyetlen, <code>List&lt;Person&gt; Read()</code> m\u0171velettel), \u00e9s az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l a Strategy mint\u00e1t k\u00f6vetve szervezd ki a bemenet feldolgoz\u00e1st egy <code>CsvInputReader</code> nev\u0171 strategy implement\u00e1ci\u00f3ba. Ez az oszt\u00e1ly konstruktor param\u00e9terben kapja meg a f\u00e1jl \u00fatvonal\u00e1t, melyb\u0151l a bemenet\u00e9t olvassa.</li> <li>Vezess be egy <code>ResultWriters</code> mapp\u00e1t, melyben vezess be egy eredm\u00e9ny ki\u00edr\u00f3 strategy interf\u00e9szt <code>IResultWriter</code> n\u00e9ven (egyetlen, <code>void Write(List&lt;Person&gt; persons)</code> m\u0171velettel), \u00e9s az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l a Strategy mint\u00e1t k\u00f6vetve szervezd ki a kimenet \u00edr\u00e1s\u00e1t egy <code>CsvResultWriter</code> nev\u0171 strategy implement\u00e1ci\u00f3ba. Ez az oszt\u00e1ly konstruktor param\u00e9terben kapja meg a f\u00e1jl \u00fatvonal\u00e1t, melybe a kimenetet bele kell \u00edrja.</li> <li>B\u0151v\u00edtsd ki a <code>Anonymizer</code> oszt\u00e1lyt, bele\u00e9rtve annak konstruktor\u00e1t (Strategy + DI minta), hogy b\u00e1rmilyen <code>IInputReader</code> \u00e9s <code>IResultWriter</code> implement\u00e1ci\u00f3val haszn\u00e1lhat\u00f3 legyen.</li> <li>A <code>Program.cs</code> f\u00e1jlban alak\u00edtsd \u00e1t az <code>Anonymizer</code> oszt\u00e1ly haszn\u00e1lat\u00e1t, hogy az \u00fajonnan bevezetett <code>CsvInputReader</code> \u00e9s <code>CsvResultWriter</code> oszt\u00e1lyok is \u00e1t legyenek param\u00e9terk\u00e9nt \u00e1tadva.</li> </ul> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9s egys\u00e9gtesztek k\u00e9sz\u00edt\u00e9se (lenne) az <code>Anonymizer</code> oszt\u00e1lyhoz. Ehhez olyan, \u00fan. mock strategy implement\u00e1ci\u00f3kat kell bevezetni, melyek nemcsak tesztadatokat szolg\u00e1ltatnak (term\u00e9szetesen gyorsan, f\u00e1jlkezel\u00e9s n\u00e9lk\u00fcl), hanem ellen\u0151rz\u00e9seket is v\u00e9geznek (adott logikai egys\u00e9g val\u00f3ban j\u00f3l m\u0171k\u00f6dik-e). Ez most bonyolultnak hangzik, de szerencs\u00e9re a legt\u00f6bb modern keretrendszerben van r\u00e1 k\u00f6nyvt\u00e1r t\u00e1mogat\u00e1s (.NET-ben a moq). Ennek alkalmaz\u00e1sa t\u00falmutat a t\u00e1rgy keretein, \u00edgy a feladatunk egys\u00e9gtesztelhet\u0151s\u00e9ghez kapcsol\u00f3d\u00f3 vonulat\u00e1t ebben a pontban lez\u00e1rjuk.</p> <p>A feladat v\u00e9gezt\u00e9vel, a kimeneti f\u00e1jl tartalm\u00e1nak ellen\u0151rz\u00e9s\u00e9vel mindenk\u00e9ppen gy\u0151z\u0151dj meg arr\u00f3l, hogy az anonimiz\u00e1l\u00e1s val\u00f3ban lefut!</p> <p>3. feladat BEADAND\u00d3</p> <ul> <li>Illessz be egy k\u00e9perny\u0151k\u00e9pet, melyen az <code>Anonymizer</code> oszt\u00e1ly konstruktora \u00e9s a <code>Run</code> f\u00fcggv\u00e9ny implement\u00e1ci\u00f3ja l\u00e1tszik (<code>f3.1.png</code>).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#4-feladat-delegate-ek-alkalmazasa","title":"4. Feladat - Delegate-ek alkalmaz\u00e1sa","text":"<p>Napjainkban rohamosan terjed a kor\u00e1bban szigor\u00faan objektumorient\u00e1lt nyelvekben is a funkcion\u00e1lis programoz\u00e1st t\u00e1mogat\u00f3 eszk\u00f6z\u00f6k megjelen\u00e9se, \u00e9s az alkalmaz\u00e1sfejleszt\u0151k is egyre nagyobb szeretettel alkalmazz\u00e1k ezeket (merthogy sokszor jelent\u0151sen r\u00f6videbb k\u00f3ddal, kisebb \"cerem\u00f3ni\u00e1val\" lehet ugyanazt seg\u00edts\u00e9g\u00fckkel megval\u00f3s\u00edtani). Egy ilyen eszk\u00f6z C# nyelven a delegate, \u00e9s ehhez kapcsol\u00f3d\u00f3an a lambda kifejez\u00e9s.</p> <p>Mint a f\u00e9l\u00e9v sor\u00e1n kor\u00e1bban l\u00e1ttuk, delegate-ek seg\u00edts\u00e9g\u00e9vel olyan k\u00f3dot tudunk \u00edrni, melybe bizonyos logik\u00e1k/viselked\u00e9sek nincsenek be\u00e9getve, ezeket \"k\u00edv\u00fclr\u0151l\" kap meg a k\u00f3d. Pl. egy sorrendez\u0151 f\u00fcggv\u00e9nynek delegate form\u00e1j\u00e1ban adjuk \u00e1t param\u00e9terk\u00e9nt, hogyan kell k\u00e9t elemet \u00f6sszehasonl\u00edtani, vagy mely mez\u0151je/tulajdons\u00e1ga szerint kell az \u00f6sszehasonl\u00edt\u00e1st elv\u00e9gezni (\u00edgy v\u00e9gs\u0151 soron meghat\u00e1rozni a k\u00edv\u00e1nt sorrendet).</p> <p>Ennek megfelel\u0151en a delegate-ek alkalmaz\u00e1sa egy \u00fajabb alternat\u00edva (a Template Method \u00e9s a Strategy mellett) a k\u00f3d \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1/kiterjeszthet\u0151v\u00e9 t\u00e9tel\u00e9re, kiterjeszt\u00e9si pontok bevezet\u00e9s\u00e9re.</p> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben a kor\u00e1bban Strategy mint\u00e1val megval\u00f3s\u00edtott progress kezel\u00e9st alak\u00edtjuk \u00e1t delegate alap\u00fara (\u00faj funkci\u00f3t nem vezet\u00fcnk be, ez egy puszt\u00e1n \"technikai\" \u00e1talak\u00edt\u00e1s lesz).</p> <p>Feladat: Alak\u00edtsd \u00e1t a Strategy-DI projektben tal\u00e1lhat\u00f3 megold\u00e1st olyan m\u00f3don, hogy a progress kezel\u00e9s Strategy helyett delegate alapon legyen megval\u00f3s\u00edtva. R\u00e9szletesebben:</p> <ul> <li>Ne vezess be saj\u00e1t delegate t\u00edpust (haszn\u00e1ld a .NET \u00e1ltal biztos\u00edtott <code>Action</code> t\u00edpust).</li> <li>A megl\u00e9v\u0151 <code>SimpleProgress</code> \u00e9s <code>PercentProgress</code> oszt\u00e1lyokat ne haszn\u00e1ld a megold\u00e1sodban(de ne is t\u00f6r\u00f6ld ezeket!).</li> <li>Legyen lehet\u0151s\u00e9ge az <code>Anonymizer</code> haszn\u00e1l\u00f3j\u00e1nak tov\u00e1bbiakban is <code>null</code>-t megadni a konstruktorban, ha nem k\u00edv\u00e1n semmif\u00e9le progress kezel\u00e9st haszn\u00e1lni.</li> <li>A <code>Program.cs</code> f\u00e1jlban kommentezd ki az eddigi <code>Anonymizer</code> haszn\u00e1latokat. Ugyanitt vezess be egy \u00faj p\u00e9ld\u00e1t az <code>Anonymizer</code> olyan haszn\u00e1lat\u00e1ra, melyben a progress kezel\u00e9s lambda kifejez\u00e9s form\u00e1j\u00e1ban van megadva, \u00e9s a lambda kifejez\u00e9s pontosan a kor\u00e1bbi \"simple progress\" logik\u00e1j\u00e1t val\u00f3s\u00edtja meg. A \"percent progress\"-re nem kell hasonl\u00f3t megval\u00f3s\u00edtani, azt ebben a megold\u00e1sban nem kell t\u00e1mogatni (a k\u00f6vetkez\u0151 feladatban t\u00e9r\u00fcnk vissza r\u00e1).</li> </ul> <p>Tippek</p> <ul> <li>A delegate alap\u00fa megold\u00e1s alapelve nagyon hasonl\u00edt a Strategy-hez: csak nem strategy-ket kap \u00e9s t\u00e1rol az oszt\u00e1ly tagv\u00e1ltoz\u00f3kban (interf\u00e9sz hivatkoz\u00e1sokon kereszt\u00fcl), hanem delegate-eket, \u00e9s az ezek \u00e1ltal hivatkozott f\u00fcggv\u00e9nyeket h\u00edvja a kiterjeszt\u00e9si pontokban.</li> <li>Ehhez hasonl\u00f3t m\u00e1r csin\u00e1lt\u00e1l is a 2. h\u00e1zi feladatban a ReportPrinter r\u00e9szben ;).</li> </ul> <p>4. feladat BEADAND\u00d3</p> <ul> <li>Illessz be egy k\u00e9perny\u0151k\u00e9pet, melyen az <code>Anonymizer</code> oszt\u00e1ly konstruktora \u00e9s a <code>Run</code> f\u00fcggv\u00e9ny implement\u00e1ci\u00f3ja l\u00e1tszik (<code>f4.1.png</code>).</li> <li>Illessz be egy k\u00e9perny\u0151k\u00e9pet, melyen a <code>Program.cs</code> f\u00e1jl tartalma (k\u00fcl\u00f6n\u00f6sen az \u00faj r\u00e9szek) l\u00e1tszik (<code>f4.2.png</code>).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#5-feladat-delegate-ek-alkalmazasa-ujrafelhasznalhato-logikaval","title":"5. Feladat - Delegate-ek alkalmaz\u00e1sa \u00fajrafelhaszn\u00e1lhat\u00f3 logik\u00e1val","text":"<p>Az el\u0151z\u0151 feladatban feltett\u00fck, hogy a \"simple progress\" \u00e9s a \"percent progress\" logik\u00e1j\u00e1t csak egyszer haszn\u00e1ltuk, \u00edgy nem kellett \u00fajrafelhaszn\u00e9lhat\u00f3v\u00e1 tenni. Ennek megfelel\u0151en pl. a \"simple progress\" logik\u00e1j\u00e1t a lehet\u0151 legegyszer\u0171bb form\u00e1ban, egy lambda kifejez\u00e9ssel adtuk meg (nem kellett k\u00fcl\u00f6n f\u00fcggv\u00e9nyt bevezetni r\u00e1). Amennyiben az <code>Anonymizer</code> l\u00e9trehoz\u00e1sakor a delegate-nek mindig m\u00e1s \u00e9s m\u00e1s implement\u00e1ci\u00f3t adunk meg, akkor ez a lambda alap\u00fa megold\u00e1s t\u00f6k\u00e9letes.</p> <p>Viszont mi a helyzet akkor, ha a fenti p\u00e9ld\u00e1ban szerepl\u0151 \"simple progress\" logik\u00e1t t\u00f6bb helyen, t\u00f6bb <code>Anonymizer</code> objektumn\u00e1l is fel szeretn\u00e9nk haszn\u00e1lni? S\u00falyos hiba lenne a lambda kifejez\u00e9st copy-paste-tel \"szapor\u00edtani\", k\u00f3dduplik\u00e1ci\u00f3hoz vezetne (ellentmondana a \"Do Not Repeat Yourself\", r\u00f6viden DRY elvnek).</p> <p>K\u00e9rd\u00e9s: van-e megold\u00e1s arra, hogy delegate-ek eset\u00e9ben is \u00fajrafelhaszn\u00e1lhat\u00f3 k\u00f3dot adjunk meg? Term\u00e9szetesen igen, hiszen delegate-ek eset\u00e9ben nem k\u00f6telez\u0151 a lambda kifejez\u00e9sek haszn\u00e1lata, lehet vel\u00fck k\u00f6z\u00f6ns\u00e9ges m\u0171veletekre (ak\u00e1r statikus, ak\u00e1r nem statikusakra is), mint azt kor\u00e1bban a f\u00e9l\u00e9v sor\u00e1n l\u00e1ttuk, \u00e9s sz\u00e1mos esetben alkalmaztuk is.</p> <p>Amennyiben a \"simple progress\" \u00e9s/vagy \"percent progress\" logik\u00e1t/logik\u00e1kat \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1 szeretn\u00e9nk tenni delegate-ek alkalmaz\u00e1sakor, tegy\u00fck ezeket egy k\u00fcl\u00f6n f\u00fcggv\u00e9nyekbe valamilyen, az adott esetben legink\u00e1bb passzol\u00f3 oszt\u00e1lyba/oszt\u00e1lyokba, \u00e9s egy ilyen m\u0171veletet adjuk meg az <code>Anonymizer</code> konstruktornak param\u00e9terk\u00e9nt.</p> <p>Feladat: B\u0151v\u00edtsd ki a kor\u00e1bbi megold\u00e1st \u00fagy, hogy a \"simple progress\" \u00e9s \"percent progress\" logik\u00e1ja \u00fajrafelhaszn\u00e1lhat\u00f3 legyen. R\u00e9szletesebben:</p> <ul> <li>A \"simple progress\" \u00e9s \"percent progress\" logik\u00e1kat egy \u00fajonnan bevezetett <code>AllProgresses</code> nev\u0171 statikus oszt\u00e1ly k\u00e9t statikus m\u0171velet\u00e9ben val\u00f3s\u00edtsd meg (az oszt\u00e1ly a projekt gy\u00f6ker\u00e9be ker\u00fclj\u00f6n).</li> <li>Vezess be k\u00e9t olyan \u00faj <code>Anonymizer</code> haszn\u00e1latot a <code>Program.cs</code> f\u00e1jlban a megl\u00e9v\u0151k mell\u00e9, melyek az <code>AllProgresses</code> k\u00e9t m\u0171velet\u00e9t haszn\u00e1lj\u00e1k (itt ne haszn\u00e1lj lambda kifejez\u00e9st).</li> <li>A megl\u00e9v\u0151 <code>IProgress</code> interf\u00e9szt \u00e9s ennek implement\u00e1ci\u00f3i t\u00f6r\u00f6lhet\u0151k lenn\u00e9nek (hiszen ezek m\u00e1r nincsenek haszn\u00e1latban). De NE t\u00f6r\u00f6ld \u0151ket annak \u00e9rdek\u00e9ben, hogy a kor\u00e1bbi megold\u00e1sodhoz tartoz\u00f3 progress logika is ellen\u0151rizhet\u0151 legyen.</li> </ul> <p>Elk\u00e9sz\u00fclt\u00fcnk, \u00e9rt\u00e9kelj\u00fck a megold\u00e1st:</p> <ul> <li>Kijelenthet\u0151, hogy a delegate alap\u00fa megold\u00e1s a Strategy-n\u00e9l kisebb cerem\u00f3ni\u00e1val j\u00e1rt: nem kellett interf\u00e9szt \u00e9s implement\u00e1ci\u00f3s oszt\u00e1lyokat bevezetni (a be\u00e9p\u00edtett <code>Action</code> \u00e9s <code>Func</code> generikus delegate t\u00edpusokat tudtuk haszn\u00e1lni).</li> <li>A teljesen \"eseti\" logik\u00e1t lambda kifejez\u00e9s form\u00e1j\u00e1ban legegyszer\u0171bb megadni. Ha \u00fajrafelhaszn\u00e1lhat\u00f3 logik\u00e1ra van sz\u00fcks\u00e9g, akkor viszont vezess\u00fcnk be \"hagyom\u00e1nyos\", \u00fajrafelhaszn\u00e1lhat\u00f3 f\u00fcggv\u00e9nyeket.</li> </ul> <p>5. feladat BEADAND\u00d3</p> <ul> <li>Illessz be egy k\u00e9perny\u0151k\u00e9pet, melyen az <code>AllProgresses.cs</code> f\u00e1jl tartalma l\u00e1tszik (<code>f5.1.png</code>).</li> <li>Illessz be egy k\u00e9perny\u0151k\u00e9pet, melyen a <code>Program.cs</code> f\u00e1jl tartalma (k\u00fcl\u00f6n\u00f6sen az \u00faj r\u00e9szek) l\u00e1tszik (<code>f5.2.png</code>).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#refaktoralas-refactoring-fogalma","title":"Refaktor\u00e1l\u00e1s (Refactoring) fogalma","text":"<p>A labor \u00e9s a h\u00e1zi feladat megval\u00f3s\u00edt\u00e1sa sor\u00e1n sz\u00e1mos olyan l\u00e9p\u00e9s volt, mely sor\u00e1n a k\u00f3dot \u00fagy alak\u00edtottuk \u00e1t, hogy az alkalmaz\u00e1s k\u00fcls\u0151 viselked\u00e9se nem v\u00e1ltozott, csak a bels\u0151 fel\u00e9p\u00edt\u00e9se. M\u00e9gpedig annak \u00e9rdek\u00e9ben, hogy valamilyen szempontb\u00f3l jobb k\u00f3dmin\u0151s\u00e9gi jellemz\u0151kkel rendelkezzen. Ezt a k\u00f3d <code>refaktor\u00e1l\u00e1s\u00e1nak</code> (angolul <code>refactoring</code>) nevezz\u00fck. Ez egy nagyon fontos fogalom, a mindennapi munka sor\u00e1n nagyon gyakran haszn\u00e1ljuk. K\u00fcl\u00f6n irodalma van, a fontosabb technik\u00e1kkal a k\u00e9s\u0151bbiekben \u00e9rdemes megismerkedni. A komolyabb fejleszt\u0151eszk\u00f6z\u00f6k be\u00e9p\u00edtetten t\u00e1mogatnak bizonyos refaktor\u00e1l\u00e1si m\u0171veleteket: a Visual Studio ebben nem a leger\u0151sebb, de az\u00e9rt p\u00e1r alapm\u0171veletet t\u00e1mogat (pl. Extract Method, Extract base class stb.). Manu\u00e1lisan gyakoroltuk, ennek kapcs\u00e1n k\u00fcl\u00f6n feladatunk nem lesz, de a Refaktor\u00e1l\u00e1s fogalm\u00e1t ismerni kell.</p>"},{"location":"hazi/6-tervezesi-mintak/#6-opcionalis-feladat-integracios-teszt-keszitese","title":"6. Opcion\u00e1lis feladat - Integr\u00e1ci\u00f3s teszt k\u00e9sz\u00edt\u00e9se","text":"<p>A feladat megold\u00e1s\u00e1val +1 IMSc pont szerezhet\u0151.</p> <p>A kor\u00e1bbi, 3. feladat sor\u00e1n ismertet\u00e9sre ker\u00fclt az integr\u00e1ci\u00f3s teszt fogalma. Jelen opcion\u00e1lis feladat c\u00e9lja ennek gyakorl\u00e1sa, jobb meg\u00e9rt\u00e9se egy egyszer\u0171 feladaton kereszt\u00fcl. </p> <p>K\u00e9sz\u00edts egy integr\u00e1ci\u00f3s tesztet az <code>Anonymizer</code> oszt\u00e1lyhoz, a k\u00f6vetkez\u0151k szerint:</p> <ol> <li>A Solutionben a <code>Test</code> mapp\u00e1ban el\u0151k\u00e9sz\u00edtett <code>IntegrationTest</code> projektben dolgozz. Ez egy NUnit teszt projekt.</li> <li>Ebben a projektben m\u00e1r el\u0151re felvett\u00fcnk egy projekt referenci\u00e1t a <code>Strategy-DI</code> projektre, \u00edgy l\u00e1tjuk a <code>Strategy-DI</code> projektben lev\u0151 (publikus) oszt\u00e1lyokat. \u00c9rtelemszer\u0171en ez el\u0151felt\u00e9tele annak, hogy tudjuk tesztelni \u0151ket. Ellen\u0151rizd a projekt referencia megl\u00e9t\u00e9t (Solution Explorerben a projekt alatt a Dependencies/Projects csom\u00f3pont).</li> <li>Az <code>AnonymizerIntegrationTest</code> oszt\u00e1lyban m\u00e1r van egy <code>Anonymize_CleanInput_MaskNames_Test</code> nev\u0171 tesztel\u00e9st v\u00e9gz\u0151 m\u0171velet (a teszt m\u0171veleteket <code>[Test]</code> attrib\u00fatummal kell ell\u00e1tni, ez erre a m\u0171veletre m\u00e1r el\u0151 van k\u00e9sz\u00edtve). A m\u0171velet t\u00f6rzse egyel\u0151re \u00fcres, ebben kell dolgozni a k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben.<ol> <li>Hozz l\u00e9tre egy <code>Anonymizer</code> objektumot, mely<ul> <li>a <code>@\"TestFiles\\us-500-01-clean.input.csv\"</code> bemenettel dolgozik (ez megtal\u00e1lhat\u00f3 a projekt TestFiles mapp\u00e1j\u00e1ban, n\u00e9zd meg a tartalm\u00e1t),</li> <li>a kimente legyen a <code>@\"us-500-01-maskedname.processed.txt\"</code> f\u00e1jl,</li> <li>\"***\" param\u00e9ter\u0171 <code>NameMaskingAnonymizerAlgorithm</code>-t haszn\u00e1l.</li> </ul> </li> <li>Futtasd az anonimiz\u00e1l\u00f3t a <code>Run</code> m\u0171velet\u00e9nek h\u00edv\u00e1s\u00e1val, hogy \u00e1lljon el\u0151 a kimenti \u00e1llom\u00e1ny.</li> <li>Az <code>Assert.AreEqual</code> h\u00edv\u00e1ssal ellen\u0151rizd, hogy az anonimiz\u00e1l\u00e1s sor\u00e1n el\u0151\u00e1llt kimeneti \u00e1llom\u00e1ny tartalma megegyezik-e a v\u00e1rt tartalommal. A v\u00e1rt tartalom a <code>@\"TestFiles\\us-500-01-maskedname.processed-expected.txt\"</code> f\u00e1jlban \u00e9rhet\u0151 el (ez megtal\u00e1lhat\u00f3 a projekt <code>TestFiles</code> mapp\u00e1j\u00e1ban, n\u00e9zd meg a tartalm\u00e1t).  Tipp: egy f\u00e1jl tartalm\u00e1t pl. a <code>File.ReadAllBytes</code> statikus m\u0171velettel egy l\u00e9p\u00e9sben be lehet olvasni.</li> </ol> </li> <li>Ellen\u0151rizd, hogy az integr\u00e1ci\u00f3s teszt hiba n\u00e9lk\u00fcl lefut.<ol> <li>Buildeld meg a projektet</li> <li>Nyisd meg a Test Explorert (Test/Test Explorer men\u00fc)</li> <li>A teszt futtat\u00e1s\u00e1ra a Test Explorer n\u00e9zet tetej\u00e9n tal\u00e1lhat\u00f3 eszk\u00f6zs\u00e1von lev\u0151 gombokkal van lehet\u0151s\u00e9g. De a teszt debuggol\u00e1s\u00e1ra is van lehet\u0151s\u00e9g, jobb gombbal a tesztre kattintva \u00e9s a Debug men\u00fc kiv\u00e1laszt\u00e1s\u00e1val: ez nagyon hasznos tud lenni, ha a teszt\u00fcnk hib\u00e1san fut, \u00e9s szeretn\u00e9nk t\u00f6r\u00e9spontok seg\u00edts\u00e9g\u00e9vel a k\u00f3don l\u00e9pkedni, illetve a v\u00e1ltoz\u00f3k \u00e9rt\u00e9k\u00e9t megn\u00e9zni.</li> <li>Ha a teszt hiba n\u00e9lk\u00fcl fut le, a teszthez tartoz\u00f3 ikon z\u00f6ld lesz. Ha hib\u00e1val, akkor piros, \u00e9s a hiba\u00fczenetr\u0151l a tesztet kiv\u00e1lasztva Test Explorer n\u00e9zet alj\u00e1n kapunk b\u0151vebb inform\u00e1ci\u00f3t.</li> </ol> </li> </ol>"},{"location":"hazi/6-tervezesi-mintak/#7-opcionalis-feladat-unit-teszt-keszitese","title":"7. Opcion\u00e1lis feladat - Unit teszt k\u00e9sz\u00edt\u00e9se","text":"<p>A feladat megold\u00e1s\u00e1val +2 IMSc pont szerezhet\u0151.</p> <p>A kor\u00e1bbi, 3. feladat sor\u00e1n ismertet\u00e9sre ker\u00fclt az egys\u00e9gteszt fogalma. Jelen opcion\u00e1lis feladat c\u00e9lja ennek gyakorl\u00e1sa, jobb meg\u00e9rt\u00e9se egy feladaton kereszt\u00fcl.</p> <p>El\u0151k\u00e9sz\u00edt\u00e9s:</p> <ol> <li>Vegy\u00e9l fel a solution-be egy \u00faj \"NUnit Test Project\" t\u00edpus\u00fa projektet \"UnitTest\" n\u00e9ven (jobb katt a Solution-\u00f6n a Solution Explorerben/Add/New Project).</li> <li>Ebben az \u00faj projektben vegy\u00e9l fel projekt referenci\u00e1t a <code>Strategy-DI</code> projektre, hogy a projektben el\u00e9rhet\u0151k legyenek a <code>Strategy-DI</code>-ben defini\u00e1lt t\u00edpusok (jobb katt a Unit Test projekt Dependencies csom\u00f3pontj\u00e1n/Add Project Reference, a megjelen\u0151 ablakban pipa a <code>Strategy-DI</code> projekten, \"OK\").</li> <li>A projektben sz\u00fcletik egy <code>UnitTest1.cs</code> \u00e1llom\u00e1ny, benne egy <code>Test</code> oszt\u00e1ly. Ezeket c\u00e9lszer\u0171 <code>AnonymizerTest</code>-re nevezni. </li> </ol> <p>K\u00e9sz\u00edts egy egys\u00e9gtesztet az <code>Anonymizer</code> oszt\u00e1lyhoz, mely ellen\u0151rzi, hogy a <code>Run</code> m\u0171velete pontosan azokkal a szem\u00e9ly adatokkal h\u00edvja meg sorrendhelyesen az anonimiz\u00e1l\u00f3 algoritmust, melyeket az <code>Anonymizer</code> a bemenet\u00e9n beolvas (amennyiben nincsenek trimmelend\u0151 v\u00e1rosnevek). </p> <ul> <li>A tesztf\u00fcggv\u00e9ny neve legyen <code>RunShouldCallAlgorithmForEachInput</code>.</li> <li> Alapvet\u0151 fontoss\u00e1g\u00fa, hogy nagyon gyors egys\u00e9gtesztet kell \u00edrni, nem integr\u00e1ci\u00f3s tesztet: teh\u00e1t csak a <code>Run</code> logik\u00e1j\u00e1t akarjuk \u00f6nmag\u00e1ban tesztelni, mindenf\u00e9le f\u00e1jlfeldolgoz\u00e1s n\u00e9lk\u00fcl. A megold\u00e1sban semmif\u00e9le f\u00e1jlkezel\u00e9s nem lehet!</li> <li>Tipp: Mem\u00f3ri\u00e1ban hozz l\u00e9tre 2-3 <code>Person</code> objektumot, ezekkel dolgozz bemenetk\u00e9nt.</li> <li>Tipp: Olyan bemen\u0151 szem\u00e9lyadatokkal dolgozz, melyekre a <code>TrimCityNames</code> f\u00fcggv\u00e9nynek nincs hat\u00e1sa (vagyis nincsenek benne \u00e1lt\u00e1vol\u00edtand\u00f3 adatok), ez egyszer\u0171bb\u00e9 teszi a tesztel\u00e9st.</li> <li>Tipp: Olyan <code>IInputReader</code>, <code>IAnonymizerAlgorithm</code> implement\u00e1ci\u00f3kat hozz l\u00e9tre (\u00e9s az <code>Anonymizert</code> ezekkel haszn\u00e1ld), melyek megfelel\u0151 tesztadatokat biztos\u00edtanak, \u00e9s/vagy fut\u00e1s k\u00f6zben adatokat gy\u0171jtenek annak \u00e9rdek\u00e9ben, hogy a fut\u00e1s ut\u00e1n ellen\u0151rizni tudd ezen adatok alapj\u00e1n, hogy a tesztelend\u0151 felt\u00e9telek teljes\u00fclnek. Ezeket a strategy implement\u00e1ci\u00f3kat mindenk\u00e9ppen a teszt projektben vedd fel, mert csak a tesztel\u00e9st szolg\u00e1lj\u00e1k.</li> </ul> <p>Tov\u00e1bbi gyakorl\u00e1sk\u00e9ppen k\u00e9sz\u00edthetsz egy olyan m\u00e1sik egys\u00e9gtesztet, mely azt ellen\u0151rzi, hogy minden bemeneti szem\u00e9lyadat eljut-e a kimenetre is. </p>"},{"location":"hazi/6-tervezesi-mintak/#osszegzes","title":"\u00d6sszegz\u00e9s","text":"<p>T\u00f6bb feladat nem lesz \ud83d\ude0a. De ha k\u00edv\u00e1ncsi vagy pl. arra, hogy jelen megold\u00e1s mennyire tekinthet\u0151 \"t\u00f6k\u00e9letesnek\"/hi\u00e1nyosnak, illetve mikor \u00e9rdemes Template Methoddal, Strategyvel, vagy ink\u00e1bb delegate-ekkel dolgozni, akkor \u00e9rdemes elolvasnod az al\u00e1bbiakat, melyben \u00e9rt\u00e9kelj\u00fck a laboron elkezdett \u00e9s a h\u00e1zi feladat keret\u00e9ben befejezett megold\u00e1st.</p>"},{"location":"hazi/6-tervezesi-mintak/#a-munkafolyamatunk-attekintese","title":"A munkafolyamatunk \u00e1ttekint\u00e9se","text":"<ul> <li>A v\u00e1ltoz\u00f3 ig\u00e9nyek sor\u00e1n organikusan jelentek meg tervez\u00e9si mint\u00e1k, \u00e9s vezett\u00fcnk be egy\u00e9b technik\u00e1kat a refaktor\u00e1l\u00e1sok sor\u00e1n. Ez teljesen term\u00e9szetes, a gyakorlatban is sokszor \u00edgy dolgozunk.</li> <li>Egy komplexebb feladat eset\u00e9ben egy\u00e9bk\u00e9nt is sokszor - k\u00fcl\u00f6n\u00f6sen ha nem rendelkez\u00fcnk sok\u00e9ves tapasztalattal - egy egyszer\u0171bb implement\u00e1ci\u00f3val indulunk (ezt l\u00e1tjuk \u00e1t els\u0151re), \u00e9s alak\u00edtjuk \u00e1t olyanra, hogy az adott kontextusban k\u00edv\u00e1nt kiterjeszthet\u0151s\u00e9gi/\u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1gi param\u00e9terekkel rendelkezzen.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#ujrafelhasznalhatosagi-es-kiterjeszthetoseg-szintjei-az-egyes-megoldasokban","title":"\u00dajrafelhaszn\u00e1lhat\u00f3s\u00e1gi \u00e9s kiterjeszthet\u0151s\u00e9g szintjei az egyes megold\u00e1sokban","text":"<p>Megpr\u00f3b\u00e1lhatjuk \u00e1br\u00e1ba \u00f6nteni, hogy v\u00e1lt a megold\u00e1sunk az egyes iter\u00e1ci\u00f3kkal egyre ink\u00e1bb \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1 \u00e9s kiterjeszthet\u0151v\u00e9:</p> <p></p> <p>Term\u00e9szetesen a % szinteket nem szabad t\u00fal komolyan venni. Mindenesetre a fejl\u0151d\u00e9s j\u00f3l megfigyelhet\u0151.</p> Mi\u00e9rt \"csak\" 70%-os a v\u00e9gs\u0151 megold\u00e1sn\u00e1l mutat\u00f3nk? <p>Felmer\u00fclhet a k\u00e9rd\u00e9s, mi\u00e9rt adunk jelem megold\u00e1sra kb. 70%-ot? T\u00f6bbek k\u00f6z\u00f6tt:</p> <ul> <li>Az <code>Anonymizer</code> oszt\u00e1lyba az adattiszt\u00edt\u00e1s m\u00f3dja mereven be van \u00e9getve (trimmel\u00e9s adott oszlopra adott m\u00f3don).</li> <li>Nem k\u00f6vett\u00fcnk egy nagyon fontos \u00e1ltal\u00e1nos alapelvet: a UI \u00e9s a logika k\u00fcl\u00f6nv\u00e1laszt\u00e1s\u00e1t. A k\u00f3dunk t\u00f6bb pontban konzolra \u00edr, \u00edgy p\u00e9ld\u00e1ul egy grafikus fel\u00fclettel nem haszn\u00e1lhat\u00f3!</li> <li>Bizonyos az anonimiz\u00e1l\u00f3 algoritmusaink nagyon specifikusak. Lehetne olyan \u00e1ltal\u00e1nosabb algoritmusokat k\u00e9sz\u00edteni, melyek tetsz\u0151leges mez\u0151ket kicsillagoznak (nem csak a nevet be\u00e9getetten), illetve tetsz\u0151leges mez\u0151ket s\u00e1vos\u00edtanak (nem csak az \u00e9letkort).</li> <li>Jelen megold\u00e1s csak <code>Person</code> objektumokkal tud m\u0171k\u00f6dni.</li> <li>Nem lehet egyszerre alkalmazni kombin\u00e1lni k\u00fcl\u00f6nb\u00f6z\u0151 anonimiz\u00e1l\u00f3 algoritmusokat.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/#kiterjesztesi-technikak-attekintese","title":"Kiterjeszt\u00e9si technik\u00e1k \u00e1ttekint\u00e9se","text":"<ul> <li>Template Method: Egyszer\u0171 esetben, ha a viselked\u00e9sek k\u00fcl\u00f6nb\u00f6z\u0151 aspektusainak nem kell sok keresztkombin\u00e1ci\u00f3j\u00e1t t\u00e1mogatni, nagyon k\u00e9nyelmes \u00e9s egyszer\u0171 megold\u00e1st ad, k\u00fcl\u00f6n\u00f6sen, ha egy\u00e9bk\u00e9nt is kell haszn\u00e1ljuk a sz\u00e1rmaztat\u00e1st. De nem, vagy csak nehezen egys\u00e9gtesztelhet\u0151 alaposzt\u00e1lyt eredm\u00e9nyez.</li> <li>Strategy: Nagyon rugalmas megold\u00e1st biztos\u00edt, \u00e9s nem vezet kombinatorikus robban\u00e1shoz, ha t\u00f6bb aspektus ment\u00e9n kell az oszt\u00e1lyt kiterjeszteni, \u00e9s t\u00f6bb keresztkombin\u00e1ci\u00f3ban is szeretn\u00e9nk ezeket haszn\u00e1lni. Sok esetben csak az\u00e9rt alkalmazzuk, hogy az oszt\u00e1lyunkr\u00f3l interf\u00e9szek seg\u00edts\u00e9g\u00e9vel lev\u00e1lasszuk a f\u00fcgg\u0151s\u00e9geit, \u00e9s \u00edgy egys\u00e9gtesztelhet\u0151v\u00e9 tegy\u00fck az oszt\u00e1lyunkat.</li> <li>Delegate/lambda: Ez a megk\u00f6zel\u00edt\u00e9s kisebb cerem\u00f3ni\u00e1val j\u00e1r, mint a Strategy alkalmaz\u00e1sa, ugyanis nincs sz\u00fcks\u00e9g interf\u00e9szek \u00e9s implement\u00e1ci\u00f3s oszt\u00e1lyok bevezet\u00e9s\u00e9re, emiatt egyre ink\u00e1bb (rohamosan) terjed a haszn\u00e1lata a modern objektumorient\u00e1lt nyelvekben is. K\u00fcl\u00f6n\u00f6sen akkor j\u00f6nnek ki az el\u0151nyei, ha a viselked\u00e9seket nem akarjuk \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1 tenni (mert ekkor csak egy-egy lambda kifejez\u00e9ssel megadjuk ezeket, mindenf\u00e9le \u00faj oszt\u00e1lyok/k\u00fcl\u00f6n f\u00fcggv\u00e9nyek bevezet\u00e9se n\u00e9lk\u00fcl). </li> </ul> <p>\u00c9rdemes \u00f6sszeszedni, hogy a Strategy-nek mikor lehet/van van el\u0151nye a delegate-ekkel szemben:</p> <ul> <li>Ha kiterjesztend\u0151 oszt\u00e1ly adott aspektus\u00e1hoz t\u00f6bb (min\u00e9l t\u00f6bb, ann\u00e1l ink\u00e1bb) m\u0171velet tartozik. Ilyenkor a strategy interf\u00e9sz ezeket \"mag\u00e1t\u00f3l\" sz\u00e9pen \u00f6sszefogja, csoportos\u00edtja (mint a p\u00e9ld\u00e1nkban az <code>IAnonymizerAlgorithm</code> interf\u00e9sz az <code>Anonymize</code> \u00e9s <code>GetAnonymizerDescription</code> m\u0171veleteket). Ezek \u00e9rtelemszer\u0171en az interf\u00e9sz implement\u00e1ci\u00f3kban is egy\u00fctt jelennek meg (delegate-ek eset\u00e9ben nincs ilyen csoportos\u00edt\u00e1s). Ez \u00e1tl\u00e1that\u00f3bb\u00e1 teheti, sok m\u0171velet eset\u00e9n egy\u00e9rtelm\u0171en azz\u00e1 is teszi a megold\u00e1st.</li> <li>Az adott nyelv puszt\u00e1n objektumorient\u00e1lt, nem t\u00e1mogatja a delegate/lambda alkalmaz\u00e1s\u00e1t. De ma m\u00e1r a legt\u00f6bb modern OO nyelv szerencs\u00e9re t\u00e1mogatja valamilyen form\u00e1ban (Java \u00e9s C++ is).</li> <li> <p>A strategy implement\u00e1ci\u00f3k a tagv\u00e1ltoz\u00f3ikban \u00e1llapotot is tudnak t\u00e1rolni, melyet l\u00e9trehoz\u00e1sukkor meg tudunk adni. Ezt haszn\u00e1ltuk is (a <code>NameMaskingAnonymizerAlgorithm</code> eset\u00e9ben ilyen volt a <code>_mask</code>, a <code>AgeAnonymizerAlgorithm</code> eset\u00e9ben a <code>_rangeSize</code>). Ez nem azt jelenti, hogy ilyen esetben egy\u00e1ltal\u00e1n nem tudunk delegate-eket haszn\u00e1lni, hiszen:</p> <ul> <li>ezeket az adatokat ak\u00e1r \u00fajonnan bevezetett f\u00fcggv\u00e9ny param\u00e9terben is \u00e1tadhatjuk az egyes delegate h\u00edv\u00e1sok sor\u00e1n,</li> <li>illetve, lambda haszn\u00e1lata eset\u00e9n a \"variable capture\" mechanizmus seg\u00edts\u00e9g\u00e9vel a lambda f\u00fcggv\u00e9nyek tudnak \u00e1llapotot \u00e1tvenni k\u00f6rnyezet\u00fckb\u0151l.</li> </ul> <p>De ezek a megold\u00e1sok nem mindig alkalmazhat\u00f3k, vagy legal\u00e1bbis k\u00f6r\u00fclm\u00e9nyes lehet az alkalmaz\u00e1suk.</p> </li> </ul> <p>Mindenk\u00e9ppen meg kell eml\u00edteni, hogy nem csak jelen gyakorlatban eml\u00edtett n\u00e9h\u00e1ny minta szolg\u00e1lja a kiterjeszthet\u0151s\u00e9get \u00e9s \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got, hanem gyakorlatilag az \u00f6sszes. Most kiemelt\u00fcnk p\u00e1rat, melyek (m\u00e9g p. az Observert/Iteratort/Adaptert ide sorolva) tal\u00e1n a leggyakrabban, legsz\u00e9lesebb k\u00f6rben alkalmazhat\u00f3k \u00e9s bukkannak is fel keretrendszerekben.</p> <p>Ha id\u00e1ig olvastad, mindenk\u00e9ppen j\u00e1r egy extra thumbs up \ud83d\udc4d!</p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/","title":"6. HF - Entwurfsmuster (Erweiterbarkeit)","text":"<p>In der Hausaufgabe werden wir die Datenverarbeitungs-/Anonymisierungsanwendung entwickeln, die im zugeh\u00f6rigen Labor(Labor 6 - Entwurfsmuster (Erweiterbarkeit)) begonnen wurde.</p> <p>Die eigenst\u00e4ndige Aufgabe baut auf den in den Vorlesungen vorgestellten Entwurfsmustern auf: - \"Vorlesung 08 - Entwurfsmuster 1\" Vortrag: gro\u00dfes Kapitel \"Grundlegende Entwurfsmuster in Bezug auf Erweiterbarkeit und Ausdehnung\": Einf\u00fchrungsbeispiel, Template-Methode, Strategie, Open/Closed-Prinzip, SRP-Prinzip, andere Techniken (Methodenreferenz/Lambda) - \"Vorlesung 09 - Entwurfsmuster 1\" Vortrag: Dependency Injection Muster</p> <p>\u00dcbung 6 - Entwurfsmuster (Erweiterbarkeit) liefert den praktischen Hintergrund f\u00fcr die \u00dcbungen.</p> <p>Das Ziel der unabh\u00e4ngigen \u00dcbung:</p> <ul> <li>Verwendung von verwandten Entwurfsmustern und anderen Erweiterbarkeitstechniken</li> <li>\u00dcbung der Konzepte von Integrations- und Einheitstests</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben. Diese Hausaufgabe erfordert keine WinUI (sie muss im Kontext einer konsolenbasierten Anwendung durchgef\u00fchrt werden), kann also in einer Linux/MacOS-Umgebung erledigt werden.</p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#das-verfahren-fur-die-einreichung","title":"Das Verfahren f\u00fcr die Einreichung","text":"<ul> <li>Der grundlegende Prozess ist derselbe wie zuvor. Erstellen Sie mit GitHub Classroom ein Repository f\u00fcr sich selbst. Sie finden die Einladungs-URL in Moodle (Sie k\u00f6nnen sie sehen, indem Sie auf den Link*\"GitHub classroom links for homework*\" auf der Startseite des Fachs klicken). Es ist wichtig, dass Sie die richtige Einladungs-URL f\u00fcr diese Hausaufgabe verwenden (jede Hausaufgabe hat eine andere URL). Klonen Sie das resultierende Repository. Dazu geh\u00f6rt auch die erwartete Struktur der L\u00f6sung. Nachdem Sie die Aufgaben erledigt haben, \u00fcbergeben Sie Ihre L\u00f6sung alt und dr\u00fccken Sie sie alt.</li> <li>Um mit den geklonten Dateien zu arbeiten, \u00f6ffnen Sie <code>Patterns-Extensibility.sln</code>.</li> <li>:Ausruf: In den \u00dcbungen werden Sie aufgefordert, einen Screenshot von einem Teil Ihrer L\u00f6sung zu machen, da dies beweist, dass Sie Ihre L\u00f6sung selbst erstellt haben. **Der erwartete Inhalt der Screenshots ist immer in der Aufgabe angegeben. **Die Screenshots sollten als Teil der L\u00f6sung eingereicht werden, legen Sie sie in den Stammordner Ihres Repositorys (neben neptun.txt). Die Screenshots werden dann zusammen mit dem Inhalt des Git-Repositorys auf GitHub hochgeladen. Da das Repository privat ist, ist es f\u00fcr niemanden au\u00dfer den Ausbildern sichtbar. Wenn Sie Inhalte im Screenshot haben, die Sie nicht hochladen m\u00f6chten, k\u00f6nnen Sie diese aus dem Screenshot ausblenden.</li> <li>:Ausruf: Diese Aufgabe enth\u00e4lt keinen sinnvollen Pre-Checker: Sie wird nach jedem Push ausgef\u00fchrt, pr\u00fcft aber nur, ob neptun.txt gef\u00fcllt ist. Die inhaltliche \u00dcberpr\u00fcfung wird von den Laborleitern nach Ablauf der Frist durchgef\u00fchrt.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#1-verfasst-am","title":"1. Verfasst am","text":"<p>Die Hausaufgaben basieren auf den folgenden Punkten:</p> <ul> <li>Kenntnisse der Strategie und des zugeh\u00f6rigen Entwurfsmusters Dependency Injection (DI)</li> <li>Genaues Verst\u00e4ndnis der Anwendung dieser Proben im Kontext der Aufgabe des Labors (Anonymisierung)</li> </ul> <p>Der Ausgangszustand der Hausaufgabe entspricht dem Endzustand von Labor 6: Diese Hausaufgabenl\u00f6sung ist das Projekt \"Strategie-DI\". Um zu starten/booten, m\u00fcssen Sie dieses Projekt als Startprojekt festlegen (Rechtsklick,\"Als Startprojekt festlegen\"). Sehen Sie sich den Quellcode genau an und verstehen Sie ihn.</p> <ul> <li>Die Datei <code>Program.cs</code> enth\u00e4lt drei <code>Anonymizer</code>, die mit verschiedenen Strategieimplementierungen parametrisiert sind. Um sich daran zu gew\u00f6hnen, lohnt es sich, sie nacheinander auszuprobieren/auszuf\u00fchren und zu sehen, ob die Anonymisierung und Fortschrittsbehandlung tats\u00e4chlich gem\u00e4\u00df der gew\u00e4hlten Strategieimplementierung erfolgt (zur Erinnerung aus dem Labor: die Anonymisierungseingabe ist us-500.csv im Ordner \"binDebugnet8.0\", die Ausgabe ist \"us-500.processed.txt\" im selben Ordner).</li> <li>Es lohnt sich auch, den Code ab <code>Program.cs</code> zu durchlaufen und Haltepunkte zu setzen (dies kann auch zur Wiederholung und zum Verst\u00e4ndnis beitragen). </li> </ul> <p>Dependency Injection (manuell) vs. Dependency Injection Container</p> <p>Im Labor und in dieser Hausaufgabe werden wir eine einfache, manuelle Version von Dependency Injection verwenden (die auch in der Vorlesung verwendet wurde). In diesem Fall werden die Klassenabh\u00e4ngigkeiten manuell instanziiert und im Klassenkonstruktor \u00fcbergeben. F\u00fcr alternative und komplexere Anwendungen wird h\u00e4ufig ein Dependency Injection Container verwendet, in dem Sie f\u00fcr jeden Schnittstellentyp registrieren k\u00f6nnen, welche Implementierung Sie verwenden m\u00f6chten. Wir haben diese Technik \"zuf\u00e4llig\" im MVVM-Labor verwendet, aber die Verwendung von DI-Containern ist nicht Teil des Lehrplans. Die manuelle Version ist jedoch von entscheidender Bedeutung, denn ohne sie ist die Verwendung des Strategiemusters sinnlos.</p> <p> Beantworten Sie in eigenen Worten die folgenden Fragen in der Datei <code>readme.md</code> im Ordner \" Aufgaben\":</p> <ul> <li>Was bietet die Strategie in Kombination mit der DI-Probe im Laborbeispiel, welche Vorteile ergeben sich aus ihrer gemeinsamen Verwendung?</li> <li>Was bedeutet es, dass durch die Verwendung des Strategiemusters das Open/Closed-Prinzip in der L\u00f6sung umgesetzt wird? (Sie k\u00f6nnen \u00fcber das Open/Closed-Prinzip in den Vorlesungs- und \u00dcbungsunterlagen lesen).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#2-aufgabe-null-strategie","title":"2. Aufgabe - Null-Strategie","text":"<p>Die Untersuchung der Parameter des Konstruktors <code>Anonymizer</code> zeigt, dass <code>null</code> als Fortschrittsstrategie angegeben werden kann. Das ist logisch, denn der Nutzer von <code>Anonymizer</code> ist m\u00f6glicherweise nicht an einer Fortschrittsanzeige interessiert. Dieser Ansatz hat einen Nachteil. In diesem Fall ist die Member-Variable <code>_progress</code> in der Klasse null, so dass die Null-Pr\u00fcfung erforderlich ist, wenn sie angewendet wird. \u00dcberpr\u00fcfen Sie, ob bei der Verwendung von <code>_progess</code> mit dem Operator <code>?.</code> tats\u00e4chlich ein Null-Scan durchgef\u00fchrt wird. Aber das ist ein gef\u00e4hrliches Spiel, denn wenn in komplexeren F\u00e4llen auch nur eine einzige Nullpr\u00fcfung \u00fcbersehen wird, erh\u00e4lt man zur Laufzeit <code>NullReferenceException</code>. Nullreferenzfehler wie dieser geh\u00f6ren zu den h\u00e4ufigsten.</p> <p>Aufgabe: Erarbeiten Sie eine L\u00f6sung, die die oben erw\u00e4hnte M\u00f6glichkeit des Scheiterns ausschlie\u00dft. Hinweis: Sie ben\u00f6tigen eine L\u00f6sung, bei der das Tag <code>_progress</code> niemals Null sein kann. Versuchen Sie zun\u00e4chst, die L\u00f6sung selbst zu finden.</p> L\u00f6sungsprinzip <p>Der \"Trick\" zur L\u00f6sung ist folgender. Es sollte eine Implementierung der Strategie <code>IProgress</code> (z. B. <code>NullProgress</code> ) erstellt werden, die verwendet wird, wenn keine Fortschrittsinformationen ben\u00f6tigt werden. Diese Implementierung tut nichts w\u00e4hrend des \"Fortschritts\", der Funktionsk\u00f6rper ist leer. Wenn der Konstruktor von <code>Anonymizer</code> null als Klasseninstanzfortschritt angibt, erstellen Sie ein Objekt <code>NullProgress</code> im Konstruktor und setzen Sie das Mitglied <code>_progress</code> auf dieses. Jetzt kann <code>_progress</code> niemals null sein, und die Nullpr\u00fcfung sollte aus dem Code entfernt werden.</p> <p>Diese Technik hat auch einen Namen: Null-Objekt.</p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#3-aufgabe-prufbarkeit","title":"3. Aufgabe - Pr\u00fcfbarkeit","text":"<p>Beachten Sie, dass es noch viele Aspekte der Klasse <code>Anonymizer</code> gibt, die durch eine unserer L\u00f6sungen erweitert werden k\u00f6nnten. Dazu geh\u00f6ren unter anderem:</p> <ul> <li>Verwaltung der Eingaben: Jetzt wird nur noch das dateibasierte, spezifische CSV-Format unterst\u00fctzt.</li> <li>Output-Management: Jetzt wird nur noch das dateibasierte, spezifische CSV-Format unterst\u00fctzt.</li> </ul> <p>Sie sollten aufgrund des SRP-Prinzips von der Klasse getrennt und in eine andere Klasse versetzt werden (lesen Sie, was das SRP-Prinzip bedeutet). Die Entkopplung sollte nicht bedingungslos erweiterbar sein, da es nicht notwendig ist, mit verschiedenen Ein- und Ausg\u00e4ngen arbeiten zu k\u00f6nnen. Daher w\u00fcrde die Strategieprobe nicht f\u00fcr die Trennung verwendet werden.</p> <p>Es gibt jedoch noch einen weiteren kritischen Aspekt, der nicht diskutiert wurde (und in der \u00e4lteren, klassischen Entwurfsmusterliteratur nicht unbedingt erw\u00e4hnt wird). Dies ist die Testbarkeit von Einheiten.</p> <p>Im Moment k\u00f6nnen wir automatische Integrationstests f\u00fcr unsere Klasse <code>Anonymizer</code> schreiben, aber keine automatischen Unit-Tests:</p> <ul> <li>Die Integrationstests testen den gesamten Vorgang in einem: Sie umfassen die Eingabeverarbeitung, die Datenverarbeitung und die Ausgabeerzeugung. In unserem Beispiel ist es ganz einfach: Halten Sie einige CVS-Eingabedateien an und pr\u00fcfen Sie, ob die erwartete Ausgabedatei erzeugt wird.</li> <li>Integrationstests k\u00f6nnen sehr langsam sein: Sie nehmen h\u00e4ufig Eingaben aus Dateien, Datenbanken oder Cloud-basierten Diensten entgegen oder dienen als Ausgabe. Bei einem gr\u00f6\u00dferen Produkt - wenn es viele Tausende von Tests gibt - ist diese Langsamkeit ein begrenzender Faktor, wir k\u00f6nnen weniger oft testen und/oder wir k\u00f6nnen keine gute Testabdeckung erreichen.</li> </ul> <p>Aus diesem Grund erreichen wir eine h\u00f6here Codeabdeckung oft nicht mit langsameren Integrationstests, sondern mit sehr schnellen Unit-Tests. Sie testen eine einzelne logische Einheit im Code ohne langsamen Datei-/Datenbank-/Netzwerk-/Cloud-Zugriff, aber dies ist blitzschnell. So k\u00f6nnen wir in einer bestimmten Zeit eine Menge mit guter Testabdeckung durchf\u00fchren.</p> <p>Testpyramide</p> <p>Dies wird in der Regel durch eine Testpyramide veranschaulicht, von der in der Literatur verschiedene Formen verwendet wurden. Eine einfache Variante ist:</p> <p></p> <p>Je h\u00f6her man in der Pyramide steht, desto umfassender sind die Tests, aber desto langsamer und teurer sind sie auch. Wir neigen also dazu, weniger davon zu machen (und damit eine geringere Codeabdeckung zu erreichen). An der Spitze der Pyramide stehen automatisierte E2E- (End-to-End) oder GUI-Tests. Im Folgenden finden Sie Integrationstests, die mehrere Einheiten/Module in einem testen. An der Basis der Pyramide befinden sich die Unit-Tests, von denen wir die meisten durchf\u00fchren (die Basis der Pyramide ist die breiteste).</p> <p>Lustige Tatsache: Wenn Unit-Tests w\u00e4hrend der Entwicklung eines Produkts lange Zeit vernachl\u00e4ssigt werden, ist es sehr schwierig, Unit-Tests im Nachhinein durchzuf\u00fchren, da die Codestruktur dies nicht unterst\u00fctzt. Es wird also nur sehr wenige dieser Tests geben, erg\u00e4nzt durch einige Integrationstests und bestenfalls viele, viele End-to-End-/GUI-Tests durch Testteams (was aber bei einem komplexen Produkt oft keine gute Testabdeckung ergibt). Im Gegensatz zu einer Pyramide hat diese die Form einer Eist\u00fcte, stellen Sie sich einfach ein paar Kugeln oben drauf vor. Es ist auch als Eiscreme-\"Probe\" bekannt (und es ist nicht die Eiscreme, die wir m\u00f6gen). Es sei jedoch darauf hingewiesen, dass alles an seinem Platz behandelt werden sollte: es gibt Ausnahmen (Anwendungen, bei denen die Logik der einzelnen Teile gering ist, die gesamte Anwendung wird von der Integration sehr einfacher Teile beherrscht: in solchen F\u00e4llen sind Integrationstests nat\u00fcrlich \u00fcbergewichtig).</p> <p>Klassencode ist oft nicht standardm\u00e4\u00dfig unit-testbar. In seiner jetzigen Form ist <code>Anonymizer</code> eine davon. Es ist eingebaut, dass es nur mit langsamen, dateibasierten Eingaben arbeiten kann. Wenn wir aber beispielsweise die Logik der Operation <code>Run</code> testen wollen, spielt es keine Rolle, ob die Daten aus einer Datei kommen (langsam) oder ob wir einfach den <code>new</code> Operator verwenden, um einige <code>Person</code> Objekte aus dem Code f\u00fcr den Test zu generieren (um Gr\u00f6\u00dfenordnungen schneller).</p> <p>Die L\u00f6sung - unseren Code unit-testbar zu machen - ist einfach:</p> <ul> <li> Trennen Sie unter Verwendung des Strategy (+DI) Patterns (oder Delegates) jegliche Logik (z.B. Input/Output Handling), die das Testen behindert oder verlangsamt, von der zu testenden Klasse.* Wir erstellen Implementierungen, die die tats\u00e4chliche Logik implementieren, und Scheinimplementierungen, die das Testen erleichtern.*</li> </ul> <ul> <li> Dementsprechend verwenden wir das Strategy-Muster oft nicht, weil wir mehrere Verhaltensweisen f\u00fcr die Bed\u00fcrfnisse des Kunden einschlie\u00dfen m\u00fcssen, sondern um unseren Code unit-testbar zu machen.</li> </ul> <p>Dementsprechend werden wir eine einheitlich getestete Version unserer L\u00f6sung vorbereiten, in der die Eingabe- und Ausgabeverarbeitung mit Hilfe des Strategiemusters entkoppelt ist.</p> <p>Aufgabe: Passen Sie die L\u00f6sung im Strategy-DI-Projekt so an, dass die Klasseneinheit nach dem Strategy-Muster getestet werden kann. Weitere Einzelheiten:</p> <ul> <li>Legen Sie einen Ordner <code>InputReaders</code> an, in dem Sie eine Schnittstelle f\u00fcr die Eingabeverarbeitungsstrategie namens <code>IInputReader</code> (mit einer einzigen Operation <code>List&lt;Person&gt; Read()</code> ) einf\u00fchren und von der Klasse <code>Anonymizer</code> aus, dem Strategiemuster folgend, die Eingabeverarbeitung in einer Strategieimplementierung namens <code>CsvInputReader</code> organisieren. Diese Klasse erh\u00e4lt den Pfad zur Datei im Konstruktorparameter, aus dem sie ihre Eingabe liest.</li> <li>F\u00fchren Sie einen Ordner <code>ResultWriters</code> ein, in dem Sie eine Strategie-Schnittstelle einf\u00fchren, um ein Ergebnis namens <code>IResultWriter</code> (mit einer einzigen Operation <code>void Write(List&lt;Person&gt; persons)</code> ) auszugeben, und organisieren Sie von der Klasse <code>Anonymizer</code> aus, dem Strategie-Muster folgend, die Ausgabe, die in eine Strategie-Implementierung namens <code>CsvResultWriter</code> geschrieben werden soll. Diese Klasse erh\u00e4lt in einem Konstruktorparameter den Pfad zu der Datei, in die die Ausgabe geschrieben werden soll.</li> <li>Erweitern Sie die Klasse <code>Anonymizer</code>, einschlie\u00dflich ihres Konstruktors (Strategie + DI-Muster), so dass sie mit jeder <code>IInputReader</code> und <code>IResultWriter</code> Implementierung verwendet werden kann.</li> <li>\u00c4ndern Sie in der Datei <code>Program.cs</code> die Verwendung der Klasse <code>Anonymizer</code>, um die neu eingef\u00fchrten Klassen <code>CsvInputReader</code> und <code>CsvResultWriter</code> als Parameter zu \u00fcbergeben.</li> </ul> <p>Der n\u00e4chste Schritt ist (w\u00e4re), Unit-Tests f\u00fcr die Klasse <code>Anonymizer</code> zu erstellen. Dies erfordert die Einf\u00fchrung so genannter Mock-Strategie-Implementierungen, die nicht nur Testdaten liefern (nat\u00fcrlich schnell und ohne Dateibehandlung), sondern auch Pr\u00fcfungen durchf\u00fchren (ob eine bestimmte logische Einheit tats\u00e4chlich korrekt funktioniert). Das h\u00f6rt sich kompliziert an, aber gl\u00fccklicherweise haben die meisten modernen Frameworks Bibliotheksunterst\u00fctzung daf\u00fcr (.NET hat moq). Ihre Anwendung w\u00fcrde den Rahmen dieses Themas sprengen, so dass der Teil \"Testbarkeit der Einheiten\" unserer \u00dcbung an dieser Stelle abgeschlossen ist.</p> <p>\u00dcbung 3 KUNDE</p> <ul> <li>F\u00fcgen Sie ein Bildschirmfoto ein, das den Konstruktor der Klasse <code>Anonymizer</code> und die Implementierung der Funktion <code>Run</code> (<code>f3.1.png</code>) zeigt.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#4-aufgabe-einstellung-von-delegierten","title":"4. Aufgabe - Einstellung von Delegierten","text":"<p>Heutzutage verbreiten sich Werkzeuge, die die funktionale Programmierung in ehemals streng objektorientierten Sprachen unterst\u00fctzen, rasant, und Anwendungsentwickler setzen sie zunehmend ein (weil sie oft das Gleiche mit deutlich weniger Code und weniger \"Zeremonien\" erreichen k\u00f6nnen). Ein solches Werkzeug in C# ist der Delegat und der damit verbundene Lambda-Ausdruck.</p> <p>Wie wir zu Beginn des Semesters gesehen haben, erm\u00f6glichen es uns Delegierte, Code zu schreiben, der nicht \u00fcber bestimmte Logik/Verhaltensweisen verf\u00fcgt, sondern \"von au\u00dfen\" empfangen wird. So kann beispielsweise eine Ordnungsfunktion als Delegierter \u00fcbergeben werden, um anzugeben, wie zwei Elemente verglichen werden sollen oder nach welchem Feld/welcher Eigenschaft der Vergleich durchgef\u00fchrt werden soll (und damit letztlich die gew\u00fcnschte Reihenfolge zu bestimmen).</p> <p>Dementsprechend ist die Verwendung von Delegaten eine weitere Alternative (neben Template Method und Strategy), um Code wiederverwendbar/erweiterbar zu machen und Erweiterungspunkte einzuf\u00fchren.</p> <p>Im n\u00e4chsten Schritt werden wir die bisher mit dem Strategy-Pattern implementierte Fortschrittsbehandlung auf eine Delegatenbasis umstellen (es wird keine neue Funktionalit\u00e4t eingef\u00fchrt, dies ist eine rein \"technische\" Umstellung).</p> <p>Aufgabe: \u00c4ndern Sie die L\u00f6sung im Projekt Strategy-DI so, dass die Fortschrittsverwaltung auf der Basis von Delegierten anstelle von Strategy implementiert wird. Weitere Einzelheiten:</p> <ul> <li>Implementieren Sie keinen eigenen Delegatentyp (verwenden Sie den von .NET bereitgestellten Typ <code>Action</code> ).</li> <li>Verwenden Sie die bestehenden Klassen <code>SimpleProgress</code> und <code>PercentProgress</code> nicht in Ihrer L\u00f6sung (l\u00f6schen Sie sie aber auch nicht!).</li> <li>Der Benutzer von <code>Anonymizer</code> sollte weiterhin <code>null</code>im Konstruktor angeben k\u00f6nnen, wenn er keine Progress-Handler verwenden m\u00f6chte.</li> <li>Kommentieren Sie in der Datei <code>Program.cs</code> die bisherige Verwendung von <code>Anonymizer</code> aus. F\u00fchren Sie an gleicher Stelle ein neues Beispiel f\u00fcr die Verwendung von <code>Anonymizer</code> ein, bei dem der Progress-Handler als Lambda-Ausdruck angegeben wird, und der Lambda-Ausdruck genau die Logik des vorherigen \"einfachen Fortschritts\" implementiert. Der \"prozentuale Fortschritt\" ben\u00f6tigt keine \u00e4hnliche Implementierung, er wird in dieser L\u00f6sung nicht unterst\u00fctzt (wir werden in der n\u00e4chsten \u00dcbung darauf zur\u00fcckkommen).</li> </ul> <p>Tipps</p> <ul> <li>Das Prinzip einer delegatenbasierten L\u00f6sung ist dem der Strategie sehr \u00e4hnlich: nur statt Strategien in den Membervariablen der Klasse zu empfangen und zu speichern (\u00fcber Schnittstellenreferenzen), empf\u00e4ngt und speichert sie Delegaten und ruft die Funktionen, auf die sie sich beziehen, in den Erweiterungspunkten auf.</li> <li>Sie haben etwas \u00c4hnliches bereits in Hausaufgabe 2 im Abschnitt ReportPrinter gemacht ;).</li> </ul> <p>\u00dcbung 4 KUNDE</p> <ul> <li>F\u00fcgen Sie ein Bildschirmfoto ein, das den Konstruktor der Klasse <code>Anonymizer</code> und die Implementierung der Funktion <code>Run</code> zeigt (<code>f4.1.png</code>).</li> <li>F\u00fcgen Sie ein Bildschirmfoto ein, das den Inhalt der Datei <code>Program.cs</code> zeigt (insbesondere die neuen Teile) (<code>f4.2.png</code>).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#5-aufgabe-verwendung-von-delegaten-mit-wiederverwendbarer-logik","title":"5. Aufgabe - Verwendung von Delegaten mit wiederverwendbarer Logik","text":"<p>In der vorangegangenen \u00dcbung sind wir davon ausgegangen, dass die Logik des \"einfachen Fortschritts\" und des \"prozentualen Fortschritts\" nur einmal verwendet wurde, so dass sie nicht wiederverwendet werden musste. Dementsprechend wurde die Logik z. B. des \"einfachen Fortschritts\" in der einfachsten Form, n\u00e4mlich als Lambda-Ausdruck, angegeben (es musste keine separate Funktion eingef\u00fchrt werden). Wenn Sie dem Delegaten jedes Mal, wenn Sie <code>Anonymizer</code> erstellen, eine andere Implementierung geben, ist diese lambda-basierte L\u00f6sung perfekt.</p> <p>Was aber, wenn wir die \"einfache Fortschrittslogik\" aus dem obigen Beispiel f\u00fcr mehrere <code>Anonymizer</code> Objekte an verschiedenen Orten verwenden wollen? Es w\u00e4re ein schwerwiegender Fehler, den Lambda-Ausdruck mit Copy-Paste zu \"vervielf\u00e4ltigen\", da dies zu einer Verdoppelung des Codes f\u00fchren w\u00fcrde (dies w\u00fcrde dem DRY-Prinzip (\"Do Not Repeat Yourself\") widersprechen).</p> <p>Frage: Gibt es eine M\u00f6glichkeit, wiederverwendbaren Code f\u00fcr Delegierte bereitzustellen? Ja, nat\u00fcrlich, da Delegierte keine Lambda-Ausdr\u00fccke verwenden m\u00fcssen, k\u00f6nnen sie f\u00fcr gew\u00f6hnliche Operationen (statisch oder nicht statisch) verwendet werden, wie wir bereits fr\u00fcher im Semester gesehen und in vielen F\u00e4llen verwendet haben.</p> <p>Wenn Sie die Logik des \"einfachen Fortschritts\" und/oder des \"prozentualen Fortschritts\" bei der Verwendung von Delegaten wiederverwendbar machen wollen, f\u00fcgen Sie sie in eine separate Funktion in einer Klasse/Klassen ein, die am besten zu diesem Fall passt, und \u00fcbergeben Sie eine solche Aktion als Parameter an den <code>Anonymizer</code> -Konstruktor.</p> <p>Aufgabe: Erweitern Sie die bisherige L\u00f6sung, so dass die Logik des \"einfachen Fortschritts\" und des \"prozentualen Fortschritts\" wiederverwendet werden kann. Weitere Einzelheiten:</p> <ul> <li>Implementieren Sie die Logik des \"einfachen Fortschritts\" und des \"prozentualen Fortschritts\" in zwei statischen Operationen einer neu eingef\u00fchrten statischen Klasse <code>AllProgresses</code> (die Klasse sollte im Stammverzeichnis des Projekts abgelegt werden).</li> <li>F\u00fchren Sie zwei neue <code>Anonymizer</code> Verwendungen in <code>Program.cs</code> zus\u00e4tzlich zu den bestehenden ein, die die beiden <code>AllProgresses</code> Operationen verwenden (verwenden Sie hier kein Lambda).</li> <li>Die bestehende Schnittstelle <code>IProgress</code> und ihre Implementierungen k\u00f6nnten gel\u00f6scht werden (da sie nicht mehr verwendet werden). L\u00f6schen Sie diese jedoch NICHT, um die Fortschrittslogik Ihrer bisherigen L\u00f6sung zu \u00fcberpr\u00fcfen.</li> </ul> <p>Wir sind bereit, wir pr\u00fcfen die L\u00f6sung:</p> <ul> <li>Es kann darauf hingewiesen werden, dass die delegatenbasierte L\u00f6sung weniger feierlich war als die Strategie: Es mussten keine Schnittstellen- und Implementierungsklassen eingef\u00fchrt werden (wir konnten die eingebauten generischen Delegatetypen <code>Action</code> und <code>Func</code> verwenden).</li> <li>Die einfachste Art, die v\u00f6llig \"ad hoc\"-Logik auszudr\u00fccken, ist in Lambda-Ausdr\u00fccken. Wenn jedoch wiederverwendbare Logik ben\u00f6tigt wird, sollten Sie \"traditionelle\" wiederverwendbare Funktionen einf\u00fchren.</li> </ul> <p>\u00dcbung 5 - SUBMIT</p> <ul> <li>F\u00fcgen Sie ein Bildschirmfoto ein, das den Inhalt der Datei <code>AllProgresses.cs</code> zeigt (<code>f5.1.png</code>).</li> <li>F\u00fcgen Sie ein Bildschirmfoto ein, das den Inhalt der Datei <code>Program.cs</code> zeigt (insbesondere die neuen Teile) (<code>f5.2.png</code>).</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#das-konzept-des-refactoring","title":"Das Konzept des Refactoring","text":"<p>W\u00e4hrend des Praktikums und der Hausaufgaben gab es mehrere Schritte, in denen der Code so ver\u00e4ndert wurde, dass sich das \u00e4u\u00dfere Verhalten der Anwendung nicht \u00e4nderte, sondern nur ihre interne Struktur. Damit soll eine bessere Codequalit\u00e4t in gewisser Hinsicht erreicht werden. Dieser Code hei\u00dft <code>refaktor\u00e1l\u00e1s\u00e1nak</code> ( <code>refactoring</code> auf Englisch). Dies ist ein sehr wichtiges Konzept, das wir in unserer t\u00e4glichen Arbeit sehr h\u00e4ufig verwenden. Es gibt eine eigene Literatur, und die wichtigsten Techniken werden sp\u00e4ter n\u00e4her erl\u00e4utert. Die seri\u00f6seren Entwicklungswerkzeuge verf\u00fcgen \u00fcber integrierte Unterst\u00fctzung f\u00fcr bestimmte Refactoring-Operationen: Visual Studio ist in dieser Hinsicht nicht das st\u00e4rkste Programm, aber es unterst\u00fctzt einige grundlegende Operationen (z. B. Methode extrahieren, Basisklasse extrahieren usw.). Wir haben dies manuell ge\u00fcbt, daher wird es keine spezielle \u00dcbung geben, aber Sie sollten mit dem Konzept des Refactoring vertraut sein.</p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#6-optionale-aufgabe-erstellen-eines-integrationstests","title":"6. Optionale Aufgabe - Erstellen eines Integrationstests","text":"<p>Durch das L\u00f6sen dieser Aufgabe k\u00f6nnen Sie +1 IMSc-Punkt verdienen.</p> <p>Das Konzept des Integrationstests wurde in der vorangegangenen \u00dcbung 3 vorgestellt. Das Ziel dieser optionalen \u00dcbung ist es, dies anhand einer einfachen Aufgabe zu \u00fcben und besser zu verstehen. </p> <p>Erstellen Sie einen Integrationstest f\u00fcr die Klasse <code>Anonymizer</code>, wie folgt:</p> <ol> <li>In Solution arbeiten Sie mit dem Projekt <code>IntegrationTest</code>, das im Ordner <code>Test</code> vorbereitet wurde. Dies ist ein NUnit-Testprojekt.</li> <li>In diesem Projekt haben wir bereits einen Projektverweis auf das Projekt <code>Strategy-DI</code> hinzugef\u00fcgt, so dass wir die (\u00f6ffentlichen) Klassen im Projekt <code>Strategy-DI</code> sehen k\u00f6nnen. Dies ist nat\u00fcrlich eine Voraussetzung daf\u00fcr, dass wir sie testen k\u00f6nnen. Pr\u00fcfen Sie, ob der Projektverweis existiert (im Solution Explorer unter dem Projekt im Knoten Abh\u00e4ngigkeiten/Projekte).</li> <li>In der Klasse <code>AnonymizerIntegrationTest</code> gibt es bereits einen Testvorgang namens <code>Anonymize_CleanInput_MaskNames_Test</code> (Testvorg\u00e4nge sollten das Attribut <code>[Test]</code> haben, es ist bereits f\u00fcr diesen Vorgang vorbereitet). Der Stamm der Operation ist im Moment noch leer, daran m\u00fcssen wir in den n\u00e4chsten Schritten arbeiten.<ol> <li>Erstellen Sie ein Objekt <code>Anonymizer</code>, das<ul> <li>arbeitet mit der Eingabe <code>@\"TestFilesus-500-01-clean.input.csv\"</code> (sie befindet sich im Ordner TestFiles des Projekts, siehe Inhalt),</li> <li>die Ausgabe sollte die Datei <code>@\"us-500-01-maskedname.processed.txt\"</code> sein,</li> <li>verwendet <code>NameMaskingAnonymizerAlgorithm</code>mit dem Parameter \"***\".</li> </ul> </li> <li>F\u00fchren Sie den Anonymisierer aus, indem Sie die Operation <code>Run</code> aufrufen, um die Speicherdatei zu erstellen.</li> <li>Rufen Sie <code>Assert.AreEqual</code> auf, um zu \u00fcberpr\u00fcfen, ob die vom Anonymisierungsprozess erzeugte Ausgabedatei dem erwarteten Inhalt entspricht. Der erwartete Inhalt steht in der Datei <code>@\"TestFilesus-500-01-maskedname.processed-expected.txt\"</code> zur Verf\u00fcgung (sie befindet sich im Projektordner <code>TestFiles</code>, siehe Inhalt).  Hinweis: Der Inhalt einer Datei kann z.B. mit der statischen Operation <code>File.ReadAllBytes</code> in einem Schritt gelesen werden.</li> </ol> </li> <li>Pr\u00fcfen Sie, ob der Integrationstest fehlerfrei l\u00e4uft.<ol> <li>Erstellen Sie Ihr Projekt</li> <li>Test Explorer \u00f6ffnen (Men\u00fc Test/Test Explorer)</li> <li>Der Test kann \u00fcber die Schaltfl\u00e4chen in der Symbolleiste oben in der Test-Explorer-Ansicht ausgef\u00fchrt werden. Es ist aber auch m\u00f6glich, den Test zu debuggen, indem Sie mit der rechten Maustaste auf den Test klicken und das Men\u00fc Debuggen ausw\u00e4hlen: Dies kann sehr n\u00fctzlich sein, wenn Ihr Test fehlerhaft l\u00e4uft und Sie den Code mithilfe von Haltepunkten durchgehen oder den Wert von Variablen \u00fcberpr\u00fcfen m\u00f6chten.</li> <li>Wenn der Test fehlerfrei verl\u00e4uft, wird das Symbol f\u00fcr den Test gr\u00fcn angezeigt. Wenn ein Fehler auftritt, wird er rot angezeigt, und Sie k\u00f6nnen weitere Informationen \u00fcber die Fehlermeldung erhalten, indem Sie den Test unten in der Test-Explorer-Ansicht ausw\u00e4hlen.</li> </ol> </li> </ol>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#7-optionale-aufgabe-erstellen-eines-einheitstests","title":"7. Optionale Aufgabe - Erstellen eines Einheitstests","text":"<p>Durch L\u00f6sen dieser Aufgabe k\u00f6nnen +2 IMSc-Punkte erzielt werden.</p> <p>Das Konzept der Einheitstests wurde in der vorherigen \u00dcbung 3 eingef\u00fchrt. Der Zweck dieser optionalen \u00dcbung ist es, dies anhand einer Aufgabe zu \u00fcben und besser zu verstehen.</p> <p>Vorbereitung:</p> <ol> <li>F\u00fcgen Sie der Projektmappe ein neues Projekt vom Typ \"NUnit Test Project\" mit dem Namen \"UnitTest\" hinzu (Rechtsklick auf Projektmappe im Projektmappen-Explorer/Hinzuf\u00fcgen/Neues Projekt).</li> <li>F\u00fcgen Sie in diesem neuen Projekt eine Projektreferenz zum Projekt <code>Strategy-DI</code> hinzu, damit die in <code>Strategy-DI</code>definierten Typen im Projekt verf\u00fcgbar sind (klicken Sie mit der rechten Maustaste auf den Knoten Abh\u00e4ngigkeiten des Unit-Test-Projekts/Projektreferenz hinzuf\u00fcgen, markieren Sie im angezeigten Fenster das Projekt <code>Strategy-DI</code>, \"OK\").</li> <li>Das Projekt erstellt eine Datei <code>UnitTest1.cs</code>, die eine Klasse <code>Test</code> enth\u00e4lt. Diese sollten <code>AnonymizerTest</code>genannt werden. </li> </ol> <p>Erstellen Sie einen Einheitstest f\u00fcr die Klasse <code>Anonymizer</code>, der pr\u00fcft, ob die Operation <code>Run</code> den Anonymisierungsalgorithmus mit genau denselben Personendaten aufruft, die <code>Anonymizer</code> in seiner Eingabe liest (wenn es keine zu bereinigenden St\u00e4dtenamen gibt). </p> <ul> <li>Die Testfunktion sollte den Namen <code>RunShouldCallAlgorithmForEachInput</code>tragen.</li> <li>:Ausruf: Es ist wichtig, einen sehr schnellen Unit-Test zu schreiben, keinen Integrationstest: Wir wollen also nur die Logik von <code>Run</code> selbst testen, ohne jegliche Dateiverarbeitung. Die L\u00f6sung darf keine Dateiverwaltung haben!</li> <li>Tipp: Erstellen Sie 2-3 <code>Person</code> Objekte im Speicher und verwenden Sie sie als Eingabe.</li> <li>Tipp: Arbeiten Sie mit personenbezogenen Eingabedaten, die von der Funktion <code>TrimCityNames</code> nicht betroffen sind (d. h. keine Daten, die entfernt werden m\u00fcssen), das erleichtert die Tests.</li> <li>Tipp: Erstellen Sie Implementierungen von <code>IInputReader</code>, <code>IAnonymizerAlgorithm</code> (und verwenden Sie <code>Anonymizert</code> mit ihnen), die geeignete Testdaten bereitstellen und/oder zur Laufzeit Daten sammeln, so dass Sie nach der Laufzeit pr\u00fcfen k\u00f6nnen, ob die zu testenden Bedingungen erf\u00fcllt sind. Achten Sie darauf, dass diese Strategieimplementierungen in das Testprojekt aufgenommen werden, da sie nur zu Testzwecken dienen.</li> </ul> <p>Als weitere \u00dcbung k\u00f6nnen Sie einen weiteren Einheitstest erstellen, um zu pr\u00fcfen, ob alle Eingabedaten die Ausgabe erreichen. </p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#zusammenfassung","title":"Zusammenfassung","text":"<p>Keine Aufgaben mehr \ud83d\ude0a. Wenn Sie aber zum Beispiel wissen wollen, wie \"perfekt\"/defekt diese L\u00f6sung ist oder wann Sie mit der Schablonenmethode, der Strategie oder den Delegierten arbeiten sollten, sollten Sie den folgenden Abschnitt lesen, in dem wir die im Labor begonnene und in der Hausaufgabe abgeschlossene L\u00f6sung bewerten.</p>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#uberblick-uber-unseren-arbeitsablauf","title":"\u00dcberblick \u00fcber unseren Arbeitsablauf","text":"<ul> <li>Als sich die Anforderungen \u00e4nderten, entwickelten sich die Entwurfsmuster organisch und andere Techniken wurden w\u00e4hrend des Refactorings eingef\u00fchrt. Das ist ganz nat\u00fcrlich, wir arbeiten in der Praxis oft so.</li> <li>In jedem Fall beginnt man bei einer komplexeren Aufgabe, vor allem, wenn man nicht \u00fcber langj\u00e4hrige Erfahrung verf\u00fcgt, oft mit einer einfacheren Implementierung (das ist das, was man zuerst sieht) und passt sie so an, dass sie die Parameter f\u00fcr die Erweiterbarkeit/Wiederverwendbarkeit aufweist, die man im jeweiligen Kontext w\u00fcnscht.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#grad-der-wiederverwendbarkeit-und-erweiterbarkeit-in-jeder-losung","title":"Grad der Wiederverwendbarkeit und Erweiterbarkeit in jeder L\u00f6sung","text":"<p>Wir k\u00f6nnen versuchen, uns vorzustellen, wie unsere L\u00f6sung mit jeder Iteration zunehmend wiederverwendbar und erweiterbar wird:</p> <p></p> <p>Nat\u00fcrlich sollten die Prozentzahlen nicht zu ernst genommen werden. In jedem Fall sind die Fortschritte deutlich sichtbar.</p> Warum geben wir \"nur\" 70 % f\u00fcr die endg\u00fcltige L\u00f6sung? <p>Es stellt sich die Frage, warum wir etwa 70 % f\u00fcr meine L\u00f6sung geben? Unter anderem:</p> <ul> <li>In der Klasse \"Anonymizer\" ist die Art der Datenbereinigung fest eingebrannt (Trimmen f\u00fcr eine bestimmte Spalte auf eine bestimmte Weise).</li> <li>Wir haben einen sehr wichtigen allgemeinen Grundsatz nicht beachtet: die Trennung von Benutzeroberfl\u00e4che und Logik. Unser Code schreibt an mehreren Stellen in eine Konsole, so dass er z. B. nicht mit einer grafischen Oberfl\u00e4che verwendet werden kann!</li> <li>Einige unserer Anonymisierungsalgorithmen sind sehr spezifisch. Es k\u00f6nnten allgemeinere Algorithmen entwickelt werden, die beliebige Felder hochstellen (nicht nur den eingebrannten Namen) oder beliebige Felder verbinden (nicht nur das Alter).</li> <li>Diese L\u00f6sung kann nur mit <code>Person</code>-Objekten funktionieren.</li> <li>Es ist nicht m\u00f6glich, verschiedene Anonymisierungsalgorithmen gleichzeitig zu kombinieren.</li> </ul>"},{"location":"hazi/6-tervezesi-mintak/index_ger/#uberblick-uber-die-erweiterungstechniken","title":"\u00dcberblick \u00fcber die Erweiterungstechniken","text":"<ul> <li>Vorlage Methode: In einem einfachen Fall, in dem man nicht viele Kreuzkombinationen verschiedener Verhaltensaspekte unterst\u00fctzen muss, stellt dies eine sehr bequeme und einfache L\u00f6sung dar, insbesondere wenn man ohnehin Ableitungen verwenden muss. Aber es erzeugt nicht oder nur schwer eine unit-testbare Basisklasse.</li> <li>Strategie: Sie bietet eine sehr flexible L\u00f6sung und f\u00fchrt nicht zu einer kombinatorischen Explosion, wenn Sie die Klasse um mehrere Aspekte erweitern und in mehreren Kreuzkombinationen verwenden wollen. In vielen F\u00e4llen verwenden wir es nur, um Abh\u00e4ngigkeiten von unserer Klasse \u00fcber Schnittstellen zu l\u00f6sen und so unsere Klasse unit-testbar zu machen.</li> <li>Delegierter/Lambda: Dieser Ansatz ist weniger feierlich als die Verwendung von Strategy, da er die Einf\u00fchrung von Schnittstellen und Implementierungsklassen nicht erfordert, und wird daher in modernen objektorientierten Sprachen zunehmend (schnell) verwendet. Dies hat insbesondere dann Vorteile, wenn Sie die Verhaltensweisen nicht wiederverwendbar machen wollen (weil Sie sie dann nur mit einem einzigen Lambda-Ausdruck bereitstellen, ohne neue Klassen/Spezialfunktionen einzuf\u00fchren). </li> </ul> <p>Es lohnt sich, zu kompilieren, wenn die Strategie einen Vorteil gegen\u00fcber den Delegierten hat/haben kann:</p> <ul> <li>Wenn ein bestimmter Aspekt der zu erweiternden Klasse mehr als eine (je mehr, desto besser) Operation hat. In diesem Fall werden sie von der Strategie-Schnittstelle \"automatisch\" zusammengefasst (wie die Schnittstelle <code>IAnonymizerAlgorithm</code> in unserem Beispiel, die die Vorg\u00e4nge <code>Anonymize</code> und <code>GetAnonymizerDescription</code> zusammenfasst). Sie sind auch in Schnittstellenimplementierungen gruppiert (keine solche Gruppierung f\u00fcr Delegierte). Dies kann die L\u00f6sung transparenter machen, und f\u00fcr viele Vorg\u00e4nge ist dies eindeutig der Fall.</li> <li>Die Sprache ist rein objektorientiert und unterst\u00fctzt keine Delegate/Lambda. Heutzutage unterst\u00fctzen die meisten modernen OO-Sprachen dies jedoch gl\u00fccklicherweise in irgendeiner Form (auch Java und C++).</li> <li> <p>Strategieimplementierungen k\u00f6nnen ihren Zustand auch in ihren Mitgliedsvariablen speichern, die bei ihrer Erstellung angegeben werden k\u00f6nnen. Diese wurde verwendet (f\u00fcr <code>NameMaskingAnonymizerAlgorithm</code> war es <code>_mask</code>, f\u00fcr <code>AgeAnonymizerAlgorithm</code> war es <code>_rangeSize</code>). Das bedeutet nicht, dass wir in einem solchen Fall \u00fcberhaupt keine Delegierten verwenden k\u00f6nnen, denn:</p> <ul> <li>k\u00f6nnen diese Daten bei jedem Delegatenaufruf in einem neu eingef\u00fchrten Funktionsparameter \u00fcbergeben werden,</li> <li>oder, wenn Lambda verwendet wird, der \"Variablenerfassungs\"-Mechanismus, der es Lambda-Funktionen erm\u00f6glicht, Zust\u00e4nde aus ihrer Umgebung zu \u00fcbernehmen.</li> </ul> <p>Diese L\u00f6sungen sind jedoch nicht immer anwendbar oder zumindest schwerf\u00e4llig in der Umsetzung.</p> </li> </ul> <p>In jedem Fall sollte erw\u00e4hnt werden, dass nicht nur einige der in dieser \u00dcbung erw\u00e4hnten Muster der Erweiterbarkeit und Wiederverwendbarkeit dienen, sondern praktisch alle von ihnen. Wir haben nun einige hervorgehoben, die (auch einschlie\u00dflich Observer/Iterator/Adapter) vielleicht am h\u00e4ufigsten und am weitesten verbreitet sind und immer noch in Frameworks auftauchen.</p> <p>Wenn du bis hierher gelesen hast, verdienst du auf jeden Fall einen extra Daumen hoch \ud83d\udc4d!</p>"},{"location":"hazi/beadas-ellenorzes/","title":"H\u00e1zi feladat bead\u00e1sa sor\u00e1n ellen\u0151rizend\u0151k","text":"<ul> <li>A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>A GitHub-r\u00f3l let\u00f6lt\u00f6tt kiindul\u00f3 solutionben/projektekben kell dolgozni, nem \u00fajonnan l\u00e9trehozottban.</li> <li>Am\u00edg nem vagy rutinos a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00e9l-e.</li> <li>A GitHub fel\u00fclet\u00e9n ellen\u0151rizd a push-t k\u00f6vet\u0151en, hogy a GitHub Action alap\u00fa el\u0151ellen\u0151rz\u0151 hiba n\u00e9lk\u00fcl lefutott-e.</li> <li>L\u00e9nyeges, hogy a feladatok csak akkor ker\u00fclnek elfogad\u00e1sra, ha teljesen elk\u00e9sz\u00fclnek, \u00e9s minden tekintetben teljes\u00edtik a k\u00f6vetelm\u00e9nyeket. Nem fordul\u00f3 k\u00f3d, illetve r\u00e9szleges megold\u00e1s elfogad\u00e1s\u00e1ban nem \u00e9rdemes b\u00edzni.</li> <li>Term\u00e9szetesen saj\u00e1t munk\u00e1t kell beadni (hiszen \u00e9rt\u00e9kel\u00e9sre ker\u00fcl).</li> </ul>"},{"location":"hazi/beadas-ellenorzes/index_eng/","title":"Checklist for submitting homework","text":"<ul> <li>Enter your Neptun code in the neptun.txt file located in the root directory of the repository. The code should be in uppercase letters only, and the file should contain only these six characters\u2014nothing else.</li> <li>Work within the solution/projects downloaded from GitHub, not in a newly created project.</li> <li>If you are not yet experienced in using Visual Studio's Git features, after pushing your changes (or at the latest when you consider your homework submitted), it is advisable to check the repository on GitHub's web interface to ensure that all changes have been successfully uploaded.</li> <li>After pushing, check on GitHub to see if the GitHub Action-based pre-check has run without errors.</li> <li>Assignments will only be accepted if they are fully completed and meet all the requirements. Do not expect acceptance of non-compiling code or partial solutions.</li> <li>Naturally, you must submit your own work, as it will be evaluated.</li> </ul>"},{"location":"hazi/beadas-ellenorzes/index_ger/","title":"Bei der Abgabe von Hausaufgaben sollten Sie Folgendes \u00fcberpr\u00fcfen","text":"<ul> <li>Geben Sie in der Datei neptun.txt im Stammverzeichnis des Repositorys Ihren Neptun-Code in Gro\u00dfbuchstaben ein. Die Datei sollte nur diese sechs Zeichen enthalten und nichts anderes.</li> <li>Sie sollten in den urspr\u00fcnglichen L\u00f6sungen/Projekten arbeiten, die Sie von GitHub heruntergeladen haben, und nicht in neu erstellten Projekten.</li> <li>Solange Sie nicht mit Visual Studio Git vertraut sind, sollten Sie nach dem Push (sp\u00e4testens wenn die Hausarbeit als eingereicht gilt) \u00fcberpr\u00fcfen, ob Sie alle \u00c4nderungen hochgeladen haben, indem Sie sich die Dateien im Repository auf der GitHub-Weboberfl\u00e4che ansehen.</li> <li>\u00dcberpr\u00fcfen Sie in der GitHub-Schnittstelle nach dem Push, ob der GitHub Action-basierte Pre-Validator fehlerfrei gelaufen ist.</li> <li>Es ist wichtig, dass Aufgaben nur angenommen werden, wenn sie vollst\u00e4ndig abgeschlossen sind und den Anforderungen in jeder Hinsicht entsprechen. Nicht rotierenden Codes oder Teill\u00f6sungen sollte man nicht trauen.</li> <li>Nat\u00fcrlich m\u00fcssen Sie Ihre eigene Arbeit einreichen (da sie bewertet wird).</li> </ul>"},{"location":"hazi/eloellenorzes-ertekeles/","title":"A h\u00e1zi feladat el\u0151ellen\u0151rz\u00e9se \u00e9s hivatalos \u00e9rt\u00e9kel\u00e9se","text":"<p>Minden egyes alkalommal, miut\u00e1n a GitHub-ra push-olt\u00e1l k\u00f3dot, a GitHub-on automatikusan lefut a felt\u00f6lt\u00f6tt k\u00f3d (el\u0151)ellen\u0151rz\u00e9se, \u00e9s meg lehet n\u00e9zni a kimenet\u00e9t! Az ellen\u0151rz\u0151t maga a GitHub futtatja. A push-t k\u00f6vet\u0151en a feladat egy v\u00e1rakoz\u00e1si sorba ker\u00fcl, majd adott id\u0151 ut\u00e1n lefutnak az ellen\u0151rz\u0151 tesztek. Azt nem lehet tudni, mennyi ez az id\u0151, a GitHub-on m\u00falik. Amikor csak egy-k\u00e9t feladat van a sorban a szervezetre (ez n\u00e1lunk a t\u00e1rgy), akkor a tapasztalatok alapj\u00e1n az ellen\u0151rz\u00e9s 1-2 percen bel\u00fcl elindul. De ha a t\u00e1rgy alatt egyszerre sokan kezdik majd felt\u00f6lteni a megold\u00e1st, akkor ez j\u00f3 es\u00e9llyel belassul. Nem \u00e9rdemes ez\u00e9rt sem az utols\u00f3 pillanatra hagyni a bead\u00e1st: lehet, hogy ekkor a k\u00e9sleltet\u00e9sek miatt m\u00e1r nem kapsz esetleg id\u0151ben visszajelz\u00e9st.</p> <p> Hivatalosan a feladat azon \u00e1llapota ker\u00fcl \u00e9rt\u00e9kel\u00e9sre, amely a hat\u00e1rid\u0151 lej\u00e1rtakor GitHub-on fent van. A hivatalos ellen\u0151rz\u00e9st szok\u00e1sos m\u00f3don, saj\u00e1t, oktat\u00f3i k\u00f6rnyezetben v\u00e9gezz\u00fck \u00e9s az eredm\u00e9nyt Moodleben publik\u00e1ljuk a sz\u00e1monk\u00e9r\u00e9sn\u00e9l. Vagyis a hivatalos eredm\u00e9ny tekintet\u00e9ben teljesen mindegy, hogy a GitHub-on a hat\u00e1rid\u0151 lej\u00e1rta lefutott-e m\u00e1r b\u00e1rmif\u00e9le (el\u0151)ellen\u0151rz\u00e9s, vagy hogy az ellen\u0151rz\u00e9s esetleg csak k\u00e9s\u0151bb tudott elindulni. A GitHub \u00e1ltali ellen\u0151rz\u00e9s csak azt a c\u00e9lt szolg\u00e1lja, hogy m\u00e9g a hat\u00e1rid\u0151 lej\u00e1rta el\u0151tt visszajelz\u00e9st kaphasson mindenki. A hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1ni hivatalos ellen\u0151rz\u00e9s tartalmaz m\u00e9g plusz l\u00e9p\u00e9seket a GitHub alap\u00fa el\u0151ellen\u0151rz\u00e9shez k\u00e9pest, az el\u0151ellen\u0151rz\u00e9s ilyen \u00e9rtelemben r\u00e9szleges, de az\u00e9rt sok probl\u00e9m\u00e1t seg\u00edthet megfogni!</p> <p> Arra k\u00e9r\u00fcnk, hogy ne apr\u00e1nk\u00e9nt push-olj, csak a k\u00e9sz, \u00e1tn\u00e9zett, fordul\u00f3 megold\u00e1st tedd fel! Ez nem a legszerencs\u00e9sebb, de a GitHub korl\u00e1tozott id\u0151t biztos\u00edt az ellen\u0151rz\u0151k futtat\u00e1s\u00e1ra: ha elfogy a havi keret, akkor m\u00e1r nem fogsz visszajelz\u00e9st kapni, csak a hat\u00e1rid\u0151 ut\u00e1ni hivatalos ellen\u0151rz\u00e9s kimenet\u00e9t kapja meg mindenki.</p> <p>A (f\u00e9l)automata ellen\u0151rz\u0151, most m\u00e9g egy r\u00e9szben k\u00eds\u00e9rleti projekt. Ha valaki az \u00fatmutat\u00f3ban inkonzisztenci\u00e1t tal\u00e1l, vagy az ellen\u0151rz\u0151 adott helyzetet nem kezel \u00e9s indokolatlanul panaszkodik, Benedek Zolt\u00e1n felel\u0151s oktat\u00f3 fel\u00e9 legyen sz\u00edves jelezni! Ugyanakkor ezeket nagy t\u00f6megben nem fogjuk tudni kezelni. Ha j\u00f3 a megold\u00e1sod, \u00e9s az ellen\u0151rz\u0151 indokolatlanul panaszkodik, a hivatalos ellen\u0151rz\u00e9s sor\u00e1n term\u00e9szetesen el fogjuk fogadni.</p> <p>Az el\u0151ellen\u0151rz\u0151 \u2013 k\u00fcl\u00f6n\u00f6sen az els\u0151 h\u00e1zi feladat eset\u00e9ben \u2013 sokszor el\u00e9gg\u00e9 \"g\u00e9pk\u00f6zeli megfogalmaz\u00e1sban\" jelzi az esetleges probl\u00e9m\u00e1kat. Ha semmik\u00e9ppen nem tudod \u00e9rtelmezni, \u00edrj Benedek Zolt\u00e1nnak Teams-ben, a hiba\u00fczenet megad\u00e1s\u00e1val, illetve egy linkkel a GitHub repository-dra  (m\u00e1sk\u00fcl\u00f6nben nem tudjuk, hol tal\u00e1lhat\u00f3 a k\u00f3dod).</p> <p>Az, hogy az el\u0151ellen\u0151rz\u0151 milyen m\u00e9lys\u00e9gben ellen\u0151rzi a megold\u00e1st, a h\u00e1zi feladatt\u00f3l f\u00fcgg. Az 1-3 feladat eset\u00e9ben el\u00e9g alapos, m\u00edg a 4-5 feladat eset\u00e9n csak a Neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi, \u00e9s azt, van-e ford\u00edt\u00e1si hiba (az \u00e9rdemi \u00e9rt\u00e9kel\u00e9s ut\u00f3lag t\u00f6rt\u00e9nik).</p>"},{"location":"hazi/eloellenorzes-ertekeles/#a-github-altal-futtatott-ellenorzesek-megtekintese","title":"A GitHub \u00e1ltal futtatott ellen\u0151rz\u00e9sek megtekint\u00e9se","text":"<ol> <li>GitHub-on a navig\u00e1l\u00e1s a repository-hoz</li> <li>Actions tabf\u00fclre v\u00e1lt\u00e1s</li> <li>Itt megjelenik egy t\u00e1bl\u00e1zat, minden push \u00e1ltal futtatott ellen\u0151rz\u00e9shez egy k\u00fcl\u00f6n sor, a tetej\u00e9n van legfrissebb. A sor elej\u00e9n lev\u0151 ikon jelzi a st\u00e1tuszt: v\u00e1r, fut, sikeres, sikertelen lehet. A sor sz\u00f6vege a Git commit neve.</li> <li> <p>Egy sorban a commit nev\u00e9n kattintva jelenik meg egy \u00e1tfog\u00f3 oldal az ellen\u0151rz\u0151 fut\u00e1s\u00e1r\u00f3l, ez sok inform\u00e1ci\u00f3t nem tartalmaz. Ezen az oldalon baloldalt kell a \"build\" vagy \"build-and-check\" (vagy hasonl\u00f3 nev\u0171) linken  kattintani, ez \u00e1tnavig\u00e1l az ellen\u0151rz\u00e9s r\u00e9szletes n\u00e9zet\u00e9re. Ez egy \u201e\u00e9l\u0151\u201d n\u00e9zet, ha fut a teszt, folyamatosan friss\u00fcl. Ha v\u00e9gzett, a csom\u00f3pontokat lenyitva lehet megn\u00e9zni az adott l\u00e9p\u00e9s kimenet\u00e9t.  Ha minden siker\u00fclt, egy ehhez hasonl\u00f3 n\u00e9zet l\u00e1that\u00f3:</p> <p></p> </li> <li> <p>Itt a legfontosabb tal\u00e1n a \"Run tests\" l\u00e9p\u00e9s. Ha valamelyik l\u00e9p\u00e9s sikertelen, pipa helyett piros x van a csom\u00f3pont elej\u00e9n, \u00e9s a csom\u00f3pontot kibontva a teszt kimenete utal a hiba ok\u00e1ra. Az els\u0151 h\u00e1zi feladat eset\u00e9ben az \"Error Message\"-re, ill. az \"Assert\"-re \u00e9rdemes sz\u00f6vegesen (control+F) keresni a kimenetben, ennek a k\u00f6rny\u00e9k\u00e9n szokott lenni hivatkoz\u00e1s a hiba ok\u00e1ra. A hiba\u00fczenetek angolul jelennek meg.</p> </li> </ol>"},{"location":"hazi/eloellenorzes-ertekeles/index_eng/","title":"Homework pre-check and official evaluation","text":"<p>Each time you push code to GitHub, an automatic pre-check runs on the uploaded code, and you can view the output! The verification is executed by GitHub itself. After pushing, the task enters a queue and, after a certain time, the verification tests run. The exact waiting time is unknown and depends on GitHub. When only a few tasks are in the queue, verification typically starts within 1-2 minutes. However, if many students start uploading solutions simultaneously, the process may slow down. Therefore, it is advisable not to leave submission to the last minute, as delays might prevent you from receiving feedback in time.</p> <p> Officially, the state of the task at the deadline on GitHub will be evaluated. The official evaluation is conducted in the instructor's environment and published on Aut webpage. This means that for the official result, it does not matter whether any pre-checks have already run before the deadline or if they started only later. The GitHub pre-check is solely intended to provide feedback before the deadline. The official post-deadline evaluation includes additional steps beyond GitHub's pre-check, making the pre-check partial, though it can still help catch many issues.</p> <p> Please do not push in small increments\u2014only upload the completed, reviewed, and compilable solution! The reason is that GitHub provides limited time for running verification tests; if the monthly quota runs out, you will not receive any feedback except for the official post-deadline evaluation.</p> <p>The (semi-)automated pre-check is still a partially experimental project. If you find inconsistencies in the guide or encounter a situation that the checker does not handle and unjustifiably complains about, please report it to (Benedek Zolt\u00e1n)[https://www.aut.bme.hu/staff/bzolka]! However, we may not be able to handle such reports in large volumes. If your solution is correct but the pre-check falsely reports an issue, the official evaluation will accept it.</p> <p>Especially for the first homework, the pre-check messages may be quite \"machine-like\" in wording. If you cannot understand them, message Benedek Zolt\u00e1n on Teams with the error message and a link to your GitHub repository  (otherwise, we cannot find your code).</p> <p>The depth of verification performed by the pre-check depends on the homework task. For tasks 1-3, it is quite thorough, while for tasks 4-5, it only checks if the Neptun.txt file is filled out and whether there are compilation errors (the substantive evaluation happens later).</p>"},{"location":"hazi/eloellenorzes-ertekeles/index_eng/#viewing-githubs-verification-results","title":"Viewing GitHub's verification results","text":"<ol> <li>Navigate to the repository on GitHub.</li> <li>Switch to the Actions tab.</li> <li>A table appears showing a row for each verification triggered by a push, with the latest at the top. The icon at the beginning of each row indicates the status: pending, running, successful, or failed. The row text shows the Git commit name.</li> <li> <p>Clicking on a row\u2019s commit name opens an overview page of the verification process. This page does not contain much information. On the left side of this page, click on the \"build\" or \"build-and-check\" (or similar) link, which navigates to the detailed verification view. This is a \"live\" view, updating continuously while tests run. When completed, expand the nodes to review the output of each step. If everything is successful, you should see a view like this:</p> <p></p> </li> <li> <p>The most crucial step here is \"Run tests\".    If a step fails, a red X appears instead of a checkmark, and expanding the node reveals the test output with details about the failure. For the first homework, it is useful to search (Ctrl+F) for \"Error Message\" or \"Assert\" in the output, as these usually indicate the cause of the failure.</p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/","title":"Fejleszt\u0151k\u00f6rnyezet h\u00e1zi feladatokhoz","text":""},{"location":"hazi/fejlesztokornyezet/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A f\u00e9l\u00e9v sor\u00e1n a h\u00e1zi feladatok megold\u00e1s\u00e1hoz a Visual Studio 2022 fejleszt\u0151k\u00f6rnyezetet kell haszn\u00e1lni (a Visual Studio for Mac nem alkalmas). Ennek futtat\u00e1s\u00e1hoz Windows oper\u00e1ci\u00f3s rendszerre van sz\u00fcks\u00e9g.  Ha telep\u00edtve van m\u00e1r a g\u00e9p\u00fcnkre a Visual Studio 2022, akkor a Start men\u00fcb\u0151l ind\u00edtsuk el a \u201eVisual Studio Installer\u201d-t. Ez indul\u00e1skor ellen\u0151rzi, \u00e9rhet\u0151-e el Visual Studio-b\u00f3l \u00fajabb v\u00e1ltozat online, \u00e9s ha igen, az Update gombra kattintva ind\u00edtsuk is el a legfrissebb verzi\u00f3 telep\u00edt\u00e9s\u00e9t.</p> Mi\u00e9rt is van sz\u00fcks\u00e9g Visual Studiora \u00e9s Windowsra? <p>VS Code, illetve a Visual Studio for Mac a k\u00f6vetkez\u0151k miatt nem haszn\u00e1lhat\u00f3k:</p> <ul> <li>Nem t\u00e1mogatj\u00e1k az UML (szer\u0171) modellez\u00e9st, melyre az els\u0151 h\u00e1zi feladatn\u00e1l sz\u00fcks\u00e9g van.</li> <li>\u00c9rdemben nem t\u00e1mogatj\u00e1k a WinUI3 felhaszn\u00e1l\u00f3i fel\u00fclettel rendelkez\u0151 .NET alkalmaz\u00e1sok fejleszt\u00e9s\u00e9t (erre a 3. h\u00e1zi feladatt\u00f3l kezd\u0151d\u0151en \u00e9p\u00edtenek bizonyos h\u00e1zi feladatok).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/#visual-studio-edition-ok","title":"Visual Studio edition-\u00f6k","text":"<p>A Visual Studionak t\u00f6bb kiad\u00e1sa l\u00e9tezik:</p> <ul> <li>A t\u00e1rgy teljes\u00edt\u00e9s\u00e9hez megfelel a Microsoft honlapj\u00e1r\u00f3l let\u00f6lthet\u0151 \u00e9s ingyenesen haszn\u00e1lhat\u00f3 Community edition.</li> <li>Term\u00e9szetesen a Professional \u00e9s Enterprise v\u00e1ltozatok is haszn\u00e1lhat\u00f3k, a t\u00e1rgy vonatkoz\u00e1s\u00e1ban ugyanakkor ezek \u00e9rdemi pluszt nem adnak. Ezek az egy\u00e9bk\u00e9nt fizet\u0151s v\u00e1ltozatok az egyetem hallgat\u00f3i sz\u00e1m\u00e1ra ingyenesen el\u00e9rhet\u0151k (a https://azureforeducation.microsoft.com/devtools honlapon, az Azure Dev Tools for Teaching program keret\u00e9ben).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/#telepitendo-komponensek","title":"Telep\u00edtend\u0151 komponensek","text":"<p>A t\u00e1rgy els\u0151 el\u0151ad\u00e1sa r\u00f6viden kit\u00e9r a .NET k\u00fcl\u00f6nb\u00f6z\u0151 v\u00e1ltozataira (.NET Framework, .NET Core, .NET 5-8 \u00e9s  stb.). A feladatok megold\u00e1s\u00e1hoz a .NET 8-et haszn\u00e1ljuk a f\u00e9l\u00e9v sor\u00e1n. A Visual Studio ezt telep\u00edti, de sz\u00fcks\u00e9g van a \".NET desktop development\" Visual Studio Workload telep\u00edt\u00e9s\u00e9re:</p> <ol> <li>Visual Studio telep\u00edt\u0151 ind\u00edt\u00e1sa (pl. a Windows Start men\u00fcben a \u201eVisual Studio Installer\u201d beg\u00e9pel\u00e9s\u00e9vel).</li> <li>Modify gombra kattint\u00e1s</li> <li>A megjelen\u0151 ablakban ellen\u0151rizz\u00fck, hogy a \".NET desktop development\" k\u00e1rtya ki van-e pip\u00e1lva.</li> <li>Ha nincs, pip\u00e1ljuk ki, majd a jobb als\u00f3 sarokban a Modify gombra kattintva telep\u00edts\u00fck.</li> </ol>"},{"location":"hazi/fejlesztokornyezet/#class-diagram-tamogatas","title":"Class diagram t\u00e1mogat\u00e1s","text":"<p>Bizonyos h\u00e1zi feladatok eset\u00e9n (m\u00e1r az els\u0151n\u00e9l is) sz\u00fcks\u00e9g van Visual Studio Class Diagram t\u00e1mogat\u00e1sra. Ezt a k\u00f6vetkez\u0151k\u00e9ppen tudjuk ut\u00f3lag telep\u00edteni a Visual Studio al\u00e1:</p> <ol> <li>Visual Studio telep\u00edt\u0151 ind\u00edt\u00e1sa (pl. a Windows Start men\u00fcben a \u201eVisual Studio Installer\u201d beg\u00e9pel\u00e9s\u00e9vel).</li> <li>Modify gombra kattint\u00e1s</li> <li>A megjelen\u0151 ablakban \"Individual components\" f\u00fcl kiv\u00e1laszt\u00e1sa</li> <li>A keres\u0151mez\u0151be \"class designer\" beg\u00e9pel\u00e9se, majd gy\u0151z\u0151dj\u00fcnk meg, hogy a sz\u0171rt list\u00e1ban a \"Class Designer\" elem ki van pip\u00e1lva.</li> <li> <p>Ha nincs, pip\u00e1ljuk ki, majd a jobb als\u00f3 sarokban a Modify gombra kattintva telep\u00edts\u00fck.</p> <p></p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/#winui-tamogatas","title":"WinUI t\u00e1mogat\u00e1s","text":"<p>XAML/WinUI technol\u00f3gi\u00e1khoz kapcsol\u00f3d\u00f3 feladatok eset\u00e9n (3. h\u00e1zi feladatt\u00f3l kezd\u0151d\u0151en) sz\u00fcks\u00e9g van Windows App SDK el\u0151zetes telep\u00edt\u00e9s\u00e9re \u00e9s bizonyos speci\u00e1lis g\u00e9pi szint\u0171 be\u00e1ll\u00edt\u00e1sok m\u00f3dos\u00edt\u00e1s\u00e1ra.</p> <ol> <li> <p>A sz\u00e1m\u00edt\u00f3g\u00e9pen enged\u00e9lyezni kell a \"Developer mode\" (\"Fejleszt\u0151i m\u00f3d\")-ot. A Windows Start men\u00fcben a \"Developer settings\"/\"Fejleszt\u0151i funkci\u00f3k\"-ra \u00e9rdemes keresni (annak f\u00fcggv\u00e9ny\u00e9ben hogy angol vagy magyar Windowst haszn\u00e1lunk).</p> </li> <li> <p>A Visual Studio telep\u00edt\u0151ben gy\u0151z\u0151dj\u00fcnk meg, hogy a \".NET Desktop Development\" workload telep\u00edtve van (ha nincs, pip\u00e1ljuk \u00e9s telep\u00edts\u00fck)</p> </li> <li> <p>\"Windows App SDK C# templates\" Visual Studio komponens telep\u00edt\u00e9se.</p> <p>A Visual Studio telep\u00edt\u0151ben v\u00e1lasszuk ki a \".NET Desktop Development\" workload-ot, jobb oldalt az \"Installation details\" panelen alul pip\u00e1ljuk a \"Windows App SDK C# Templates\" komponenst, majd jobb als\u00f3 sarokban \"Modify\" gomb. </p> </li> <li> <p>Windows App SDK telep\u00edt\u00e9se</p> <p>A f\u00e9l\u00e9v sor\u00e1n laborokon \u00e9s a h\u00e1zikban az \"1.6.4 (1.6.250108002)\" verzi\u00f3t haszn\u00e1ljuk, \u00e9rdemes ezt telep\u00edteni akkor is, ha \u00fajabb verzi\u00f3 j\u00f6nne ki, mely innen \u00e9rhet\u0151 el: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/downloads. R\u00e9gebbi verzi\u00f3k itt el\u00e9rhet\u0151ek, ha az \u00fajabbak k\u00f6z\u00f6tt kor\u00e1bban nem szereplne: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/older-downloads. Egy modern g\u00e9pre az x64-es verzi\u00f3t kell telep\u00edteni.</p> </li> <li> <p>Ha a fentiek telep\u00edt\u00e9se ut\u00e1n Windows 11-en nem akarna m\u0171k\u00f6dni, akkor fel kell tenni a Visual Studio telep\u00edt\u0151ben a Windows 10 SDK-b\u00f3l a 10.0.19041-et, vagy \u00fajabbat (az Idividual Comopnents alatt tal\u00e1lhat\u00f3)</p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/#macbook-es-linux-hasznalok-szamara-informaciok","title":"MacBook \u00e9s Linux haszn\u00e1l\u00f3k sz\u00e1m\u00e1ra inform\u00e1ci\u00f3k","text":"<p>A t\u00e1rgy felel\u0151s oktat\u00f3j\u00e1t\u00f3l (Benedek Zolt\u00e1n) BME Cloud hozz\u00e1f\u00e9r\u00e9s ig\u00e9nylelhet\u0151 e-mailben.</p>"},{"location":"hazi/fejlesztokornyezet/index_eng/","title":"Development environment for homework tasks","text":""},{"location":"hazi/fejlesztokornyezet/index_eng/#introduction","title":"Introduction","text":"<p>During the semester, Visual Studio 2022 must be used to complete the homework tasks (Visual Studio for Mac is not suitable). To run it, you need the Windows operating system. If Visual Studio 2022 is already installed on your machine, you can launch the \"Visual Studio Installer\" from the Start menu. Upon launching, it will check if a newer version of Visual Studio is available online, and if so, click the \"Update\" button to install the latest version.</p> Why do we need Visual Studio and Windows? <p>VS Code and Visual Studio for Mac are not usable due to the following reasons:</p> <ul> <li>They do not support UML (similar) modeling, that is required for the first homework task.</li> <li>They do not properly support the development of .NET applications with a WinUI3 user interface (starting from the 3<sup>rd</sup> homework task, certain tasks will build on this feature).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/index_eng/#visual-studio-editions","title":"Visual Studio editions","text":"<p>There are several editions of Visual Studio:</p> <ul> <li>For the course, the free Community edition is sufficient, that can be downloaded from the Microsoft website.</li> <li>Of course, the Professional and Enterprise editions can also be used, but they do not provide significant additional benefits for the course. These paid versions are available for free to university students (through the Azure Dev Tools for Teaching program on https://azureforeducation.microsoft.com/devtools).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/index_eng/#components-to-be-installed","title":"Components to be Installed","text":"<p>The first lecture of the course briefly covers the different versions of .NET (.NET Framework, .NET Core, .NET 5-8, etc.). .NET 8 will be used for the tasks during the semester. Visual Studio will install this version, but you also need to install the \".NET desktop development\" Visual Studio Workload:</p> <ol> <li>Launch the Visual Studio Installer (e.g., type \"Visual Studio Installer\" in the Windows Start menu).</li> <li>Click on the Modify button.</li> <li>In the window that appears, check if the \".NET desktop development\" card is checked.</li> <li>If not, check it, and then click Modify in the bottom-right corner to install it.</li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_eng/#class-diagram-support","title":"Class Diagram support","text":"<p>For certain homework tasks (including the first one), Visual Studio Class Diagram support is required. You can install it as follows:</p> <ol> <li>Launch the Visual Studio installer (e.g., type \"Visual Studio Installer\" in the Windows Start menu).</li> <li>Click the Modify button.</li> <li>In the window that appears, select the \"Individual components\" tab.</li> <li>In the search box, type \"class designer\", and ensure that the \"Class Designer\" item is checked in the filtered list.</li> <li> <p>If not, check it and then click Modify in the bottom-right corner to install it.</p> <p></p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_eng/#winui-support","title":"WinUI support","text":"<p>For tasks related to XAML/WinUI technologies (starting from the 3<sup>rd</sup> homework task), you will need to pre-install the Windows App SDK and modify certain low-level system settings.</p> <ol> <li> <p>Enable \"Developer mode\" on the computer. You should search for \"Developer settings\".</p> </li> <li> <p>In the Visual Studio installer, make sure that the \".NET Desktop Development\" workload is installed (if not, check and install it).</p> </li> <li> <p>Install the \"Windows App SDK C# templates\" Visual Studio component.</p> <p>In the Visual Studio installer, select the \".NET Desktop Development\" workload, then in the \"Installation details\" panel on the right, scroll down and check the \"Windows App SDK C# Templates\" component, then click \"Modify\" in the bottom-right corner.</p> </li> <li> <p>Install the Windows App SDK</p> <p>The latest version can be downloaded from here: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/downloads. However, during the semester, we will use the \"1.6.4 (1.6.250108002)\" version for labs and homework, so it is recommended to install this version, even if a newer version is released. It can be found here: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/older-downloads. You should install the x64 version for a modern machine.</p> </li> <li> <p>If Windows 11 does not work after these steps, you may need to install version 10.0.19041 or later of the Windows 10 SDK (found under Individual Components in the Visual Studio installer).</p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_eng/#information-for-macbook-and-linux-users","title":"Information for MacBook and Linux Users","text":"<p>The lecturer (Dr. Mohammad Saleem, msaleem@aut.bme.hu) can be contacted via email to request BME Cloud access.</p>"},{"location":"hazi/fejlesztokornyezet/index_ger/","title":"Entwicklungsumgebung f\u00fcr Hausaufgaben","text":""},{"location":"hazi/fejlesztokornyezet/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>F\u00fcr die Hausaufgaben w\u00e4hrend des Semesters muss die Entwicklungsumgebung Visual Studio 2022 verwendet werden (Visual Studio f\u00fcr Mac ist nicht geeignet). Zum Ausf\u00fchren ben\u00f6tigen Sie ein Windows-Betriebssystem.  Wenn Sie Visual Studio 2022 bereits auf Ihrem Computer installiert haben, starten Sie den \"Visual Studio Installer\" \u00fcber das Startmen\u00fc. Dadurch wird beim Start gepr\u00fcft, ob eine neuere Version von Visual Studio online verf\u00fcgbar ist. Ist dies der Fall, klicken Sie auf Aktualisieren, um die Installation der neuesten Version zu starten.</p> Warum brauche ich Visual Studio und Windows? <p>VS Code oder Visual Studio f\u00fcr Mac kann aus folgenden Gr\u00fcnden nicht verwendet werden:</p> <ul> <li>Sie unterst\u00fctzen keine UML-\u00e4hnliche Modellierung, die f\u00fcr die erste Hausaufgabe ben\u00f6tigt wird.</li> <li>Sie unterst\u00fctzen nicht die Entwicklung von .NET-Anwendungen mit der Benutzeroberfl\u00e4che WinUI3 (einige Hausaufgaben ab Hausaufgabe 3 bauen darauf auf).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/index_ger/#visual-studio-ausgabe-ok","title":"Visual Studio Ausgabe-\u00f6k","text":"<p>Es gibt verschiedene Editionen von Visual Studio:</p> <ul> <li>Um den Kurs zu absolvieren, k\u00f6nnen Sie die kostenlose Community-Edition von der Microsoft-Website herunterladen.</li> <li>Die Professional- und Enterprise-Versionen k\u00f6nnen nat\u00fcrlich auch verwendet werden, bieten aber keinen inhaltlichen Mehrwert. Diese kostenpflichtigen Versionen sind f\u00fcr Universit\u00e4tsstudenten kostenlos erh\u00e4ltlich (unter https://azureforeducation.microsoft.com/devtools, als Teil des Azure Dev Tools for Teaching Programms).</li> </ul>"},{"location":"hazi/fejlesztokornyezet/index_ger/#zu-installierende-komponenten","title":"Zu installierende Komponenten","text":"<p>In der ersten Vorlesung des Kurses werden kurz die verschiedenen Versionen von .NET (.NET Framework, .NET Core, .NET 5-8 usw.) behandelt. Wir werden .NET 8 verwenden, um die Probleme w\u00e4hrend des Semesters zu l\u00f6sen. Visual Studio installiert dies, aber Sie m\u00fcssen den \".NET Desktop Development\" Visual Studio Workload installieren:</p> <ol> <li>Starten Sie das Visual Studio-Installationsprogramm (z. B. durch Eingabe von \"Visual Studio Installer\" im Windows-Startmen\u00fc).</li> <li>Klicken Sie auf die Schaltfl\u00e4che \u00c4ndern</li> <li>Vergewissern Sie sich in dem nun erscheinenden Fenster, dass die Karte \".NET-Desktop-Entwicklung\" aktiviert ist.</li> <li>Wenn nicht, entfernen Sie das H\u00e4kchen und klicken Sie unten rechts auf \u00c4ndern, um es zu installieren.</li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_ger/#unterstutzung-von-klassendiagrammen","title":"Unterst\u00fctzung von Klassendiagrammen","text":"<p>F\u00fcr bestimmte Hausaufgaben (sogar f\u00fcr die erste) ben\u00f6tigen Sie die Unterst\u00fctzung von Visual Studio Class Diagram. Diese kann unter Visual Studio wie folgt installiert werden:</p> <ol> <li>Starten Sie das Visual Studio-Installationsprogramm (z. B. durch Eingabe von \"Visual Studio Installer\" im Windows-Startmen\u00fc).</li> <li>Klicken Sie auf die Schaltfl\u00e4che \u00c4ndern</li> <li>W\u00e4hlen Sie in dem nun erscheinenden Fenster die Registerkarte \"Einzelne Komponenten\"</li> <li>Geben Sie in das Suchfeld \"Klassendesigner\" ein und vergewissern Sie sich, dass \"Klassendesigner\" in der gefilterten Liste nicht angekreuzt ist.</li> <li> <p>Wenn nicht, entfernen Sie das H\u00e4kchen und klicken Sie unten rechts auf \u00c4ndern, um es zu installieren.</p> <p></p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_ger/#winui-unterstutzung","title":"WinUI-Unterst\u00fctzung","text":"<p>F\u00fcr Aufgaben, die sich auf XAML/WinUI-Technologien beziehen (ab Hausaufgabe 3), ist es notwendig, das Windows App SDK vorzuinstallieren und einige spezifische Einstellungen auf Maschinenebene zu \u00e4ndern.</p> <ol> <li> <p>Der \"Entwicklermodus\" muss auf dem Computer aktiviert sein. Suchen Sie im Windows-Startmen\u00fc nach \"Entwicklereinstellungen\" (je nachdem, ob Sie ein englisches oder ungarisches Windows verwenden).</p> </li> <li> <p>Vergewissern Sie sich im Visual Studio-Installationsprogramm, dass der \".NET Desktop Development\"-Workload installiert ist (falls nicht, entfernen Sie die Markierung und installieren Sie ihn)</p> </li> <li> <p>installation der Visual Studio Komponente \"Windows App SDK C# Templates\".</p> <p>W\u00e4hlen Sie im Visual Studio-Installationsprogramm den Workload \".NET Desktop Development\", markieren Sie die Komponente \"Windows App SDK C# Templates\" im Bereich \"Installationsdetails\" auf der rechten Seite und klicken Sie dann auf die Schaltfl\u00e4che \"\u00c4ndern\" in der rechten unteren Ecke. </p> </li> <li> <p>Windows-SDK installieren</p> <p>Es kann installiert werden von: https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/downloads. W\u00e4hrend des Semesters werden wir \"1.6.4 (1.6.250108002)\" in \u00dcbungen und Tutorien verwenden. Es wird empfohlen, diese Version zu installieren, auch wenn eine neuere Version ver\u00f6ffentlicht wird.</p> </li> </ol>"},{"location":"hazi/fejlesztokornyezet/index_ger/#informationen-fur-macbook-und-linux-benutzer","title":"Informationen f\u00fcr MacBook- und Linux-Benutzer","text":"<p>Sie k\u00f6nnen den Zugang zur BME-Cloud beim zust\u00e4ndigen Dozenten (Zolt\u00e1n Benedek) per E-Mail anfordern.</p>"},{"location":"hazi/git-github-github-classroom/","title":"Git, GitHub, GitHub Classroom","text":"<p>A t\u00e1rgy keret\u00e9ben nem c\u00e9lunk a Git \u00e9s GitHub r\u00e9szletes megismer\u00e9se, csak a legsz\u00fcks\u00e9gesebb l\u00e9p\u00e9sekre szor\u00edtkozunk, valamint a legfontosabb parancsokat haszn\u00e1ljuk ahhoz, hogy a h\u00e1zi feladat(ok) kiindul\u00e1si programv\u00e1z\u00e1t hallgat\u00f3k\u00e9nt egy dedik\u00e1lt GitHub repository-b\u00f3l le tudjuk t\u00f6lteni, illetve a k\u00e9sz munk\u00e1t GitHubra fel tudjuk t\u00f6lteni.</p>"},{"location":"hazi/git-github-github-classroom/#git","title":"Git","text":"<p>A Git egy sok szolg\u00e1ltat\u00e1ssal rendelkez\u0151, rendk\u00edv\u00fcl n\u00e9pszer\u0171 \u00e9s elterjedt, ingyenesen let\u00f6lthet\u0151 \u00e9s telep\u00edthet\u0151, elosztottan is haszn\u00e1lhat\u00f3 verzi\u00f3kezel\u0151 rendszer. A k\u00f6zpontos\u00edtott rendszerekhez k\u00e9pest (TFS, CVS, SVN) a GIT eset\u00e9ben nem egyetlen k\u00f6zponti repository-ba dolgoznak a fejleszt\u0151k, hanem mindenki egy saj\u00e1t lok\u00e1lis repository p\u00e9ld\u00e1nnyal rendelkezik.</p> <p>Egy Git repository (becenev\u00e9n rep\u00f3) nem m\u00e1s, mint egy k\u00f6z\u00f6ns\u00e9ges k\u00f6nyvt\u00e1r a f\u00e1jlrendszerben, benne \u00e1llom\u00e1nyokkal (pl. forr\u00e1sk\u00f3d) \u00e9s alk\u00f6nyvt\u00e1rakkal, illetve egy \".git\" alk\u00f6nyvt\u00e1rral, melyben minden, a verzi\u00f3kezel\u00e9shez kapcsol\u00f3d\u00f3 extra inform\u00e1ci\u00f3 megtal\u00e1lhat\u00f3.</p> <p>A Git alap\u00fa munkafolyamat legfontosabb l\u00e9p\u00e9sei - n\u00e9mi egyszer\u0171s\u00edt\u00e9ssel - a k\u00f6vetkez\u0151k (felt\u00e9ve, hogy l\u00e9tezik egy k\u00f6zponti repository, ahol a verzi\u00f3kezelt k\u00f3d adott v\u00e1ltozata m\u00e1r el\u00e9rhet\u0151):</p> <ol> <li>A fejleszt\u0151 kl\u00f3nozza (<code>clone</code>) az adott k\u00f6zponti repository-t, melynek sor\u00e1n egy azzal megegyez\u0151 helyi repository j\u00f6n l\u00e9tre a saj\u00e1t sz\u00e1m\u00edt\u00f3g\u00e9p\u00e9n. Ezt a m\u0171veletet el\u00e9g egyszer elv\u00e9gezni.</li> <li>A fejleszt\u0151 a helyi repository-hoz tartoz\u00f3 munkak\u00f6nyvt\u00e1rban (working directory) v\u00e1ltoztat\u00e1sokat v\u00e9gez a k\u00f3don: \u00faj f\u00e1jlokat vesz fel, megl\u00e9v\u0151ket m\u00f3dos\u00edt \u00e9s t\u00f6r\u00f6l.</li> <li>Ha elk\u00e9sz\u00fcl egy \u00e9rdemi r\u00e9szfeladat, akkor a fejleszt\u0151 a v\u00e1ltoztat\u00e1sokat <code>commit</code>-olja a sz\u00e1m\u00edt\u00f3g\u00e9p\u00e9n lev\u0151 helyi repository-ba. Ennek sor\u00e1n a commit-ot c\u00e9lszer\u0171 egy a v\u00e1ltoztat\u00e1sok jelleg\u00e9t j\u00f3l \u00f6sszefoglal\u00f3 megjegyz\u00e9ssel ell\u00e1tni.</li> <li>A helyi repository-b\u00f3l egy <code>push</code> m\u0171velettel a fejleszt\u0151 fel\u00f6lti a v\u00e1ltoz\u00e1sokat a k\u00f6zponti repository-ba, ahol \u00edgy v\u00e1ltoztat\u00e1sai m\u00e1sok sz\u00e1m\u00e1ra is l\u00e1that\u00f3v\u00e1 v\u00e1lnak.</li> </ol> <p>Minden egyes commit tulajdonk\u00e9ppen egy id\u0151b\u00e9lyeggel, a fejleszt\u0151 felhaszn\u00e1l\u00f3nev\u00e9vel \u00e9s e-mail c\u00edm\u00e9vel ell\u00e1tott k\u00f3dot \u00e9rint\u0151 v\u00e1ltoz\u00e1shalmaz. A repositoryban ezek \"egym\u00e1sut\u00e1nis\u00e1g\u00e1b\u00f3l\" \u00e1ll \u00f6ssze a teljes verzi\u00f3t\u00f6rt\u00e9net. Mivel a legt\u00f6bb esetben a fejleszt\u0151k csapatban dolgoznak, id\u0151nk\u00e9nt sz\u00fcks\u00e9g van arra, hogy m\u00e1sok \u00e1ltal a k\u00f6zponti repository-ba <code>push</code>-olt v\u00e1ltoztat\u00e1sokat a fejleszt\u0151k a saj\u00e1t lok\u00e1lis repository-jukba let\u00f6lts\u00e9k \u00e9s belemerge-elj\u00e9k: erre szolg\u00e1l a <code>pull</code> m\u0171velet. Fontos szab\u00e1ly, hogy <code>push</code>-olni csak akkor lehet a k\u00f6zponti repository-ba (a Git csak akkor engedi), ha el\u0151tte m\u00e1sok v\u00e1ltoztat\u00e1sait a saj\u00e1t lok\u00e1lis repository-nkba egy <code>pull</code> m\u0171velettel el\u0151tte belemerge-elt\u00fck. A Szoftvertechnik\u00e1k t\u00e1rgy keret\u00e9ben a <code>pull</code> m\u0171veletet nem kell haszn\u00e1lni, mert mindenki \u00f6n\u00e1ll\u00f3an, saj\u00e1t repository-ba dolgozik. Megjegyz\u00e9s: ha esetleg a GitHub fel\u00fclet\u00e9n k\u00f6zvetlen v\u00e1ltoztatunk f\u00e1jlokon (vagy t\u00f6bb clone-ban is dolgozunk), akkor sz\u00fcks\u00e9g van a <code>pull</code> haszn\u00e1lat\u00e1ra ez esetben is. A fentieken t\u00falmen\u0151en a Git sz\u00e1mos tov\u00e1bbi szolg\u00e1ltat\u00e1st biztos\u00edt (pl. teljes verzi\u00f3t\u00f6rt\u00e9net megtekint\u00e9se minden f\u00e1jlra, commit t\u00f6rt\u00e9net megtekint\u00e9se, tetsz\u0151leges m\u00faltbeli verzi\u00f3ra vissza\u00e1ll\u00e1s, \u00e1gak kezel\u00e9se stb.).</p>"},{"location":"hazi/git-github-github-classroom/#github","title":"GitHub","text":"<p>A GitHub egy online el\u00e9rhet\u0151 website \u00e9s szolg\u00e1ltat\u00e1s (https://github.com), mely teljes k\u00f6r\u0171 Git szolg\u00e1ltat\u00e1st biztos\u00edt. Mindezt r\u00e1ad\u00e1sul \u2013 legal\u00e1bbis publikus, vagyis mindenki sz\u00e1m\u00e1ra hozz\u00e1f\u00e9rhet\u0151 repositoryk vonatkoz\u00e1s\u00e1ban \u2013 teljesen ingyenesen biztos\u00edtja. Napjainkra a GitHub v\u00e1lt a k\u00f6z\u00f6ss\u00e9gi k\u00f3d (verzi\u00f3kezelt) t\u00e1rol\u00e1s\u00e1nak els\u0151 sz\u00e1m\u00fa platformj\u00e1v\u00e1, a legt\u00f6bb ny\u00edlt forr\u00e1sk\u00f3d\u00fa projekt \u201eotthon\u00e1v\u00e1\u201d.</p>"},{"location":"hazi/git-github-github-classroom/#github-classroom","title":"GitHub Classroom","text":"<p>A GitHub Classroom egy ingyenesen el\u00e9rhet\u0151 GitHub-bal integr\u00e1lt szolg\u00e1ltat\u00e1s, mely t\u00f6bbek k\u00f6z\u00f6tt oktat\u00e1si int\u00e9zm\u00e9nyek sz\u00e1m\u00e1ra lehet\u0151v\u00e9 teszi \u00f6n\u00e1ll\u00f3 tanul\u00f3i feladatokhoz tartoz\u00f3, tanul\u00f3nk\u00e9nt egyedi GitHub repository-k l\u00e9trehoz\u00e1s\u00e1t, ez\u00e1ltal a kiindul\u00e1si k\u00f3d tanul\u00f3k sz\u00e1m\u00e1ra t\u00f6rt\u00e9n\u0151 \u201ekioszt\u00e1s\u00e1t\u201d, valamint az elk\u00e9sz\u00fclt feladatok \u201ebeszed\u00e9s\u00e9t\u201d.</p>"},{"location":"hazi/git-github-github-classroom/#git-github-es-github-classroom-a-targy-kontextusaban","title":"Git, GitHub \u00e9s GitHub Classroom a t\u00e1rgy kontextus\u00e1ban","text":"<p>A t\u00e1rgy keret\u00e9ben a GitHub Classroom seg\u00edts\u00e9g\u00e9vel kap minden hallgat\u00f3 minden h\u00e1zi feladat\u00e1hoz egy dedik\u00e1lt, a GitHub-on hostolt repository-t, mely a megfelel\u0151 kiindul\u00e1si k\u00f6rnyezettel (kiindul\u00f3 Visual Studio solution-\u00f6k) inicializ\u00e1l\u00e1sra ker\u00fcl. Mindenkinek a sz\u00e1m\u00e1ra dedik\u00e1lt repository-t kell a saj\u00e1t g\u00e9p\u00e9re <code>clone</code>-oznia, ebbe a v\u00e1ltoztat\u00e1sait <code>commit</code>-olni, \u00e9s a hat\u00e1rid\u0151ig az elk\u00e9sz\u00fclt megold\u00e1s\u00e1t <code>push</code>-olni (hogy GitHub-on is el\u00e9rhet\u0151 legyen a megold\u00e1s). A pontos l\u00e9p\u00e9sekre r\u00f6videsen visszat\u00e9r\u00fcnk.</p>"},{"location":"hazi/git-github-github-classroom/#visual-studio-es-a-git","title":"Visual Studio \u00e9s a Git","text":"<p>A Git egy elosztott verzi\u00f3kezel\u0151 rendszer. Ahhoz, hogy a saj\u00e1t g\u00e9p\u00fcnk\u00f6n dolgozni tudjunk vele, a Git-nek telep\u00edtve kell lennie. K\u00e9tf\u00e9le m\u00f3don tudjuk haszn\u00e1lni:</p> <ul> <li>A Git \u00f6nmag\u00e1ban is telep\u00edthet\u0151, \u00e9s parancssorb\u00f3l is ki tudjuk adni a sz\u00fcks\u00e9ges <code>clone</code>, <code>commit</code>, <code>push</code> stb. parancsokat.</li> <li>Haszn\u00e1lhatunk a parancsok kiad\u00e1s\u00e1ra egy grafikus fel\u00fclettel rendelkez\u0151 eszk\u00f6zt. Ilyenek pl. a GitHub Desktop, a GitExtensions, vagy maga a Visual Studio is (mely integr\u00e1lt grafikus Git szolg\u00e1ltat\u00e1sokat is biztos\u00edt).</li> </ul> <p>A k\u00e9t megk\u00f6zel\u00edt\u00e9st a mindennapokban kombin\u00e1ltan szoktuk haszn\u00e1lni. Egy repo lekl\u00f3noz\u00e1sa sokszor parancssorb\u00f3l a legegyszer\u0171bb/leggyorsabb. A v\u00e1ltoz\u00e1sok commit-ol\u00e1s\u00e1ra, a k\u00f6zponti repositoryval val\u00f3 szinkroniz\u00e1ci\u00f3ra (push, pull), a verzi\u00f3t\u00f6rt\u00e9nek megjelen\u00edt\u00e9s\u00e9re m\u00e1r c\u00e9lszer\u0171bb egy grafikus eszk\u00f6zt haszn\u00e1lni, k\u00fcl\u00f6n\u00f6sen akkor, ha m\u00e9g kev\u00e9sb\u00e9 vagyunk rutinosak. A t\u00e1rgy keret\u00e9ben a kl\u00f3noz\u00e1sra a parancssor vagy a Visual Studio, az egy\u00e9b parancsok kiad\u00e1s\u00e1ra a Visual Studio javasolt. A git haszn\u00e1latr\u00f3l (a h\u00e1zi feladatok kontextus\u00e1ban) itt tal\u00e1lhat\u00f3 b\u0151vebb le\u00edr\u00e1s.</p>"},{"location":"hazi/git-github-github-classroom/#git-telepitese","title":"Git telep\u00edt\u00e9se","text":"<p>Amennyiben a sz\u00e1m\u00edt\u00f3g\u00e9p\u00fcnkre nincs m\u00e9g a Git telep\u00edtve, \u00e9s szeretn\u00e9nk azt parancssorb\u00f3l is haszn\u00e1lni, akkor innen telep\u00edthet\u0151 Windows oper\u00e1ci\u00f3s rendszerre: https://git-scm.com/download/win. Egy\u00e9b oper\u00e1ci\u00f3s rendszerek eset\u00e9n pedig innen \u00e9rdemes indulni: https://git-scm.com/downloads.</p> <p>Git Credential Manager telep\u00edt\u00e9se</p> <p>A GitHub m\u00e1r egy ideje nem t\u00e1mogatja az egyszer\u0171 felhaszn\u00e1l\u00f3n\u00e9v/jelsz\u00f3 alap\u00fa hiteles\u00edt\u00e9st. Ha git parancssorban a login sor\u00e1n \"Support for password authentication was removed.\" hiba\u00fczenetet kapunk, ez az oka. K\u00e9t megold\u00e1s is l\u00e9tezik a probl\u00e9ma megold\u00e1s\u00e1ra: </p> <ul> <li>A legegyszer\u0171bb megold\u00e1s a \"Git Credential Manager\" telep\u00edt\u00e9se. Ezt fel lehet telep\u00edten a git telep\u00edt\u00e9se sor\u00e1n (csak be kell pip\u00e1lni a telep\u00edt\u0151ben), de k\u00fcl\u00f6n is telep\u00edthet\u0151 innen. A telep\u00edt\u00e9st k\u00f6vet\u0151en nincs teend\u0151nk vele, a git automatikusan haszn\u00e1lni fogja, \u00e9s egy b\u00f6ng\u00e9sz\u0151 alap\u00fa (\u00fan. OAuth) hiteles\u00edt\u00e9si folyamaton vezeti v\u00e9gig a felhaszn\u00e1l\u00f3t, ill. plusz k\u00e9nyelmi funkci\u00f3k\u00e9nt meg is jegyzi a hiteles\u00edt\u00e9si adatokat.</li> <li>A m\u00e1sik megold\u00e1s a PAT (Personal Access Token) haszn\u00e1lata, err\u0151l pl. itt lehet olvasni.</li> </ul>"},{"location":"hazi/git-github-github-classroom/index_eng/","title":"Git, GitHub, GitHub Classroom","text":"<p>In this course, our goal is not to learn Git and GitHub in detail, but to focus on the most essential steps and use the most important commands to allow students to download the starting framework of their assignments from a dedicated GitHub repository and upload their completed work to GitHub.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#git","title":"Git","text":"<p>Git is a widely used, feature-rich, freely downloadable, and installable distributed version control system. Unlike centralized systems (TFS, CVS, SVN), in Git, developers do not work in a single central repository but each has their own local repository instance.</p> <p>A Git repository (repo) is essentially a regular directory in the file system containing files (such as source code) and subdirectories, along with a \".git\" subdirectory that stores all additional information related to version control.</p> <p>The essential steps in a Git-based workflow\u2014simplified\u2014are as follows (assuming there is a central repository where the version-controlled code is available):</p> <ol> <li>The developer clones (<code>clone</code>) the central repository, creating a local copy on their computer. This step only needs to be done once.</li> <li>The developer makes changes to the code in their local repository\u2019s working directory: adding new files, modifying, and deleting existing ones.</li> <li>Once a meaningful task is completed, the developer commits (<code>commit</code>) the changes to their local repository. It is advisable to include a descriptive message summarizing the nature of the changes.</li> <li>The developer then pushes (<code>push</code>) the changes from the local repository to the central repository, making them visible to others.</li> </ol> <p>Each commit is essentially a set of code changes with a timestamp, the developer's username, and email address. The repository's version history is formed by the sequence of these commits.</p> <p>Since developers usually work in teams, they need to periodically download and merge others' changes from the central repository into their local repository. This is done using the <code>pull</code> command. A key rule is that pushing (<code>push</code>) to the central repository is only possible if all prior changes from others have been merged via <code>pull</code>.</p> <p>In this course, the <code>pull</code> command is not required because each student works independently in their own repository. However, if changes are made directly on GitHub or in multiple clones, then <code>pull</code> is necessary.</p> <p>Beyond these basics, Git offers many additional features, such as viewing the complete version history for each file, reviewing commit history, reverting to past versions, and managing branches.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#github","title":"GitHub","text":"<p>GitHub is an online service and platform (https://github.com) that provides comprehensive Git support. For public repositories (accessible to everyone), it is completely free. Over time, GitHub has become the leading platform for version-controlled code storage and the home of most open-source projects.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#github-classroom","title":"GitHub Classroom","text":"<p>GitHub Classroom is a free, GitHub-integrated service that enables educational institutions to create unique GitHub repositories for each student for individual assignments. It facilitates the distribution of starter code and the collection of completed assignments.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#git-github-and-github-classroom-in-the-course-context","title":"Git, GitHub, and GitHub Classroom in the Course Context","text":"<p>For this course, each student receives a dedicated GitHub-hosted repository for each assignment via GitHub Classroom. These repositories are initialized with the necessary starting environment (such as Visual Studio solutions). Each student must clone their dedicated repository, commit their changes, and push the completed solution before the deadline so that it is available on GitHub. The specific steps will be detailed shortly.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#visual-studio-and-git","title":"Visual Studio and Git","text":"<p>Git is a distributed version control system. To use it on a local computer, Git must be installed. There are two ways to use Git:</p> <ul> <li>Git can be installed as a standalone tool, and commands like <code>clone</code>, <code>commit</code>, and <code>push</code> can be executed via the command line.</li> <li>A graphical interface tool can be used for executing these commands. Examples include GitHub Desktop, GitExtensions, or Visual Studio (which provides integrated graphical Git support).</li> </ul> <p>In practice, both approaches are often combined. Cloning a repository is often quickest via the command line, while committing changes, synchronizing with the central repository (push, pull), and viewing version history are easier with a graphical tool, especially for beginners. In this course, cloning is recommended via the command line or Visual Studio, while other commands should be executed using Visual Studio. More information on using Git in the context of assignments can be found here.</p>"},{"location":"hazi/git-github-github-classroom/index_eng/#installing-git","title":"Installing Git","text":"<p>If Git is not yet installed on your computer and you want to use it from the command line, you can download it for Windows from: https://git-scm.com/download/win. For other operating systems, visit: https://git-scm.com/downloads.</p> <p>Installing Git Credential Manager</p> <p>GitHub no longer supports simple username/password authentication. If you receive the error message \"Support for password authentication was removed\" when logging in via the command line, this is the reason. There are two ways to resolve this issue:</p> <ul> <li>The simplest solution is to install \"Git Credential Manager.\" It can be selected during Git installation by checking the appropriate box, or it can be installed separately from here. After installation, no additional configuration is needed; Git will automatically use it and guide the user through a browser-based (OAuth) authentication process, also storing credentials for convenience.</li> <li>Alternatively, you can use a PAT (Personal Access Token). More information is available here.</li> </ul>"},{"location":"hazi/hf-folyamat/","title":"H\u00e1zi feladat munkafolyamat \u00e9s a Git/GitHub haszn\u00e1lata","text":"<p>Ha m\u00e9g nem olvastad, c\u00e9lszer\u0171 itt kezdeni: Git, GitHub, GitHub Classroom</p>"},{"location":"hazi/hf-folyamat/#lepesek","title":"L\u00e9p\u00e9sek","text":"<p>Az egyes h\u00e1zi feladatok kiindul\u00f3 keret\u00e9t GitHub/GitHub Classroom seg\u00edts\u00e9g\u00e9vel publik\u00e1ljuk. Az \u00edgy publik\u00e1lt h\u00e1zi feladatok kiindul\u00f3 k\u00f6rnyezet let\u00f6lt\u00e9s\u00e9nek \u00e9s a megold\u00e1s bead\u00e1s\u00e1nak l\u00e9p\u00e9sei a k\u00f6vetkez\u0151k:</p> <ol> <li> Az elindul\u00e1ssal ne v\u00e1rd meg a hat\u00e1rid\u0151 k\u00f6zeledt\u00e9t, legal\u00e1bb a saj\u00e1t repository l\u00e9trehoz\u00e1s\u00e1ig juss el miel\u0151bb. \u00cdgy, ha b\u00e1rmi elakad\u00e1s lenne, m\u00e9g id\u0151ben tudunk seg\u00edteni.</li> <li>Regisztr\u00e1lj egy GitHub accountot (https://github.com/), ha m\u00e9g nem regisztr\u00e1lt\u00e1l, \u00e9s l\u00e9pj be vele GitHub-ra.</li> <li>A feladathoz tartoz\u00f3 linket nyisd meg. Ez minden feladathoz m\u00e1s lesz, Moodle-ben ker\u00fclnek meghirdet\u00e9sre fokozatosan a f\u00e9l\u00e9v folyam\u00e1n. A form\u00e1tuma a k\u00f6vetkez\u0151h\u00f6z hasonl\u00f3: https://classroom.github.com/abcdefgh. Ha a hivatkoz\u00e1sra kattintva hib\u00e1t kapsz (\"There was a problem authenticating with GitHub, please try again.\"), copy-paste-tel m\u00e1sold be k\u00f6zvetlen\u00fcl a b\u00f6ng\u00e9sz\u0151 c\u00edmsor\u00e1ba a c\u00edmet.</li> <li>Ha k\u00e9ri, adj enged\u00e9lyt a GitHub Classroom alkalmaz\u00e1snak, hogy haszn\u00e1lja az account adataidat.</li> <li>L\u00e1tni fogsz egy oldalt, ahol elfogadhatod a feladatot (\"Accept this assignment\"). Kattints a gombra.</li> <li>V\u00e1rd meg, am\u00edg elk\u00e9sz\u00fcl a repository. A GitHub nem mindig friss\u00edti az oldalt mag\u00e1t\u00f3l, c\u00e9lszer\u0171 az oldal id\u0151nk\u00e9nti k\u00e9zi friss\u00edt\u00e9s\u00e9vel pr\u00f3b\u00e1lkozni (pl. F5 billenty\u0171). Ha elk\u00e9sz\u00fclt a repository, az oldal ki\u00edrja az \u00faj repository url-j\u00e9t, amin kattintva a repository-ra lehet navig\u00e1lni (ehhez hasonl\u00f3: https://github.com/bmeviauab00/hazi1-2024-username).  De nem is felt\u00e9tlen sz\u00fcks\u00e9ges az url elment\u00e9se, a GitHub nyit\u00f3oldal\u00e1n (https://github.com/) baloldalt a saj\u00e1t repository-k k\u00f6zt b\u00e1rmikor meg lehet k\u00e9s\u0151bb is tal\u00e1lni.</li> <li>Kl\u00f3nozd le a repository-t (ennek mik\u00e9ntj\u00e9re r\u00f6videsen visszat\u00e9r\u00fcnk). Ebben tal\u00e1lni fogsz egy keretet, vagy kiindul\u00f3 k\u00f3dot. Ezen dolgozz, ezt v\u00e1ltoztasd. Az alap\u00e9rtelmezett git \u00e1gon/branchen dolgozz (ha ez nem mond semmit, nem baj: ez csak azoknak sz\u00f3l, akik a git haszn\u00e1lat\u00e1ban j\u00e1rtasak \u00e9s t\u00f6bb \u00e1gon szoktak dolgozni).</li> <li> A kiindul\u00f3 projektben van egy .github/workflows mappa, ennek tartalm\u00e1t tilos megv\u00e1ltoztatni, t\u00f6r\u00f6lni stb.</li> <li> A munka sor\u00e1n a kiindul\u00e1si rep\u00f3ban lev\u0151 solutionben/projektben kell dolgozni, \u00faj projektet/solutiont ne hozz l\u00e9tre.</li> <li> A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>Oldd meg a feladatot. Pushold a hat\u00e1rid\u0151ig. Az alap\u00e9rtelmezett \"Main\" \u00e1gon kell dolgozni k\u00f6zvetlen\u00fcl, nincsenek pull requestek. Ak\u00e1rh\u00e1ny commitod lehet, a legutols\u00f3 \u00e1llapotot fogjuk n\u00e9zni.</li> <li>Az eredm\u00e9nyek Moodle-ben ker\u00fclnek meghirdet\u00e9sre (a nyit\u00f3oldalon kapcsol\u00f3d\u00f3 h\u00e1zi feladat oldal\u00e1t Moodle-ben megnyitva az oldal alj\u00e1n a \"Visszajelz\u00e9s\" szekci\u00f3ban l\u00e1that\u00f3). Eredm\u00e9nyek az adott feladatra vonatkoz\u00f3 hat\u00e1rid\u0151t k\u00f6vet\u0151 p\u00e1r napon bel\u00fcl v\u00e1rhat\u00f3k.</li> <li>A h\u00e1zi feladatot k\u00fcl\u00f6n explicit beadni nem kell, csak legyen fent GitHub-on hat\u00e1rid\u0151re a megold\u00e1s.</li> <li> Amikor a h\u00e1zi feladatod beadottnak tekinted,  c\u00e9lszer\u0171 ellen\u0151rizni a b\u00f6ng\u00e9sz\u0151ben a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st push-olt\u00e1l-e, \u00e9s hogy a neptun.txt val\u00f3ban ki van-e t\u00f6ltve.</li> </ol> <p>A fenti l\u00e9p\u00e9sek kapcs\u00e1n k\u00e9t k\u00e9rd\u00e9s v\u00e1r m\u00e9g megv\u00e1laszol\u00e1sra:</p> <ul> <li>Hogyan kl\u00f3nozzuk (clone) a rep\u00f3nkat (mely a h\u00e1zi feladat kiindul\u00f3 keret\u00e9t tartalmazza)?</li> <li>Hogyan commit-\u00e1ljunk \u00e9s push-oljunk GitHub-ra?</li> </ul> <p>Ezek nagy r\u00e9sz\u00e9t Szoftvertechnol\u00f3gia t\u00e1rgyb\u00f3l m\u00e1r tanultad a k\u00e9pz\u00e9s sor\u00e1n. De ha esetleg nem eml\u00e9kszel ennek minden r\u00e9szleteire, vagy ha szeretn\u00e9l megismerkedni azzal, hogyan tudod ezeket nem csak parancssorb\u00f3l, hanem Visual Studio-b\u00f3l haszn\u00e1lni, akkor mindenk\u00e9ppen olvasd el az al\u00e1bbiakat. R\u00f6viden mindenre kit\u00e9r\u00fcnk a git haszn\u00e1lata kapcs\u00e1n, amire a h\u00e1zi feladatok megold\u00e1sa sor\u00e1n sz\u00fcks\u00e9g lehet (m\u00e9g azok is meg tudj\u00e1k oldani a h\u00e1zi feladatot, akik git-et nem tanultak, \u00e9s \u00edgy kapcsol\u00f3dnak be a t\u00e1rgyba).</p> <p>Amennyiben a git login sor\u00e1n \"Support for password authentication was removed\" hiba\u00fczenetet kapsz, a git telep\u00edt\u00e9s\u00e9t ismertet\u0151 oldal alj\u00e1n a Git Credential Manager-r\u0151l sz\u00f3l\u00f3 szakaszt \u00e9rdemes elolvasni.</p>"},{"location":"hazi/hf-folyamat/#github-repository-klonozasa","title":"GitHub repository kl\u00f3noz\u00e1sa","text":"<p>K\u00e9t lehet\u0151s\u00e9get n\u00e9z\u00fcnk meg al\u00e1bb:</p> <ul> <li>Kl\u00f3noz\u00e1s a GitHub webes fel\u00fclet\u00e9r\u0151l indulva Visual Studioban (vagy ak\u00e1r egyb\u0151l Visual Studio-b\u00f3l indulva)</li> <li>Kl\u00f3noz\u00e1s parancssorb\u00f3l</li> </ul>"},{"location":"hazi/hf-folyamat/#clone-a-github-webes-feluleterol-indulva-visual-studio-ban","title":"Clone a GitHub webes fel\u00fclet\u00e9r\u0151l indulva Visual Studio-ban","text":"<p>Egy (h\u00e1zi feladathoz tartoz\u00f3) repository kl\u00f3noz\u00e1sra sz\u00e1mos m\u00f3d van, egy lehet\u0151s\u00e9g a k\u00f6vetkez\u0151. Nyissuk meg az elk\u00e9sz\u00fclt repository online oldal\u00e1t, melyre t\u00f6bb m\u00f3don eljuthatunk. Lehet\u0151s\u00e9gek pl.:</p> <ul> <li>A repo l\u00e9trehoz\u00e1sakor megjelenik a GitHub fel\u00fcleten az url, csak kattintani kell rajta.</li> <li>A GitHub nyit\u00f3oldalon (https://github.com) - ha be vagyunk l\u00e9pve - list\u00e1z\u00f3dnak baloldalt azon repository-k, melyekhez van hozz\u00e1f\u00e9r\u00e9s\u00fcnk, csak kattintsunk a megfelel\u0151n.</li> <li>Amikor elk\u00e9sz\u00fcl a rep\u00f3nk (a GitHub classroom feladat elfogad\u00e1sa sor\u00e1n), e-mail \u00e9rtes\u00edt\u00e9st is kapunk r\u00f3la, ebben is megtal\u00e1lhat\u00f3 a link.</li> </ul> <p>Az oldal k\u00e9pe nagyj\u00e1b\u00f3l megfelel a k\u00f6vetkez\u0151nek (az mindenk\u00e9ppen k\u00fcl\u00f6nbs\u00e9g, hogy a rep\u00f3 url v\u00e9g\u00e9n mindenkin\u00e9l a saj\u00e1t felhaszn\u00e1l\u00f3neve szerepel):</p> <p></p> <p>Kattintsunk a z\u00f6ld sz\u00edn\u0171 Code gombon, majd a leny\u00edl\u00f3 men\u00fcben az \"Open in Visual Studio\" linkre:</p> <p></p> <p>A b\u00f6ng\u00e9sz\u0151nk ekkor j\u00f3 es\u00e9llyel feldob egy ablakot (pl. a Chrome/Edge eset\u00e9ben a c\u00edmsor alatt) melyben egy k\u00fcl\u00f6n gombkattint\u00e1ssal (Open\u2026) tudjuk ind\u00edtani a Visual Studio-t. A felk\u00edn\u00e1lt lehet\u0151s\u00e9gnek lehet, kiss\u00e9 fura a neve, ha \"Microsoft Visual Studio Web Protocol Handler Selector\" n\u00e9ven hivatkozik r\u00e1, v\u00e1lasszuk/enged\u00e9lyezz\u00fck ki b\u00e1tran. Illetve, itt c\u00e9lszer\u0171 az \"Always allow github.com to open links ...\" vagy hasonl\u00f3 sz\u00f6veg\u0171 jel\u00f6l\u0151n\u00e9gyzetet is pip\u00e1lni. Ha minden j\u00f3l megy, a Visual Studio elindul, \u00e9s indul\u00e1s ut\u00e1n feldob egy ablakot, melyben a \"Repository location\" ki is van t\u00f6ltve a repository-nk URL-j\u00e9vel. A Path alatt adjuk meg, hogy hova szeretn\u00e9nk a h\u00e1tt\u00e9rt\u00e1runkon clone-ozni, majd kattintsunk a Clone gombra:</p> <p></p> <p>Alternat\u00edv kl\u00f3noz\u00e1si lehet\u0151s\u00e9g Visual Studioban</p> <p>Ha nem m\u0171k\u00f6dik a b\u00f6ng\u00e9sz\u0151ablakban az \"Open in Visual Studio\" vagy \"Microsoft Visual Studio Web Protocol Handler Selector\" hivatkoz\u00e1s, akkor indulhatunk egyb\u0151l a Visual Studio-b\u00f3l is. Csak ind\u00edtsuk el a Visual Studio-t, \u00e9s a startup ablakban v\u00e1lasszuk jobboldalt a \"Clone Repository\" gombot (vagy a startup ablakot \u00e1tugorva v\u00e1lasszuk ki a \"Git/Clone Repository men\u00fct\" a VS f\u0151ablak\u00e1ban), melynek hat\u00e1s\u00e1ra a fenti ablak jelenik meg, a Repository URL-be pedig \u00edrjuk be a rep\u00f3nk URL-j\u00e9t. A Clone-ra kattintva n\u00e9h\u00e1ny m\u00e1sodperc alatt a repository a megadott c\u00e9lmapp\u00e1ba kl\u00f3noz\u00f3dik.</p> <p>A kl\u00f3noz\u00e1st k\u00f6vet\u0151en pl. Windows Explorer-ben meg tudjuk tekinteni a l\u00e9trehozott mapp\u00e1kat \u00e9s f\u00e1jlokat:</p> <p></p> <p>Ebb\u0151l j\u00f3l l\u00e1that\u00f3, hogy egy Git repository nem m\u00e1s, mint mapp\u00e1k \u00e9s f\u00e1jlok gy\u0171jtem\u00e9nye, valamint egy a gy\u00f6k\u00e9rben tal\u00e1lhat\u00f3 .git mappa, mely (n\u00e9mi egyszer\u0171s\u00edt\u00e9ssel \u00e9lve) az egyes f\u00e1jlok verzi\u00f3t\u00f6rt\u00e9net\u00e9t tartalmazza. A munka megkezd\u00e9s\u00e9hez csak meg kell nyissuk az adott h\u00e1zi feladathoz tartoz\u00f3 .sln kiterjeszt\u00e9s\u0171 solution f\u00e1jlt (pl. duplakatt Windows Explorerben).</p> <p>Az els\u0151 h\u00e1zi feladat speci\u00e1lis (k\u00e9t solution is van)!</p> <p>Az els\u0151 h\u00e1zi feladat kiv\u00e9telesen k\u00e9t f\u0151 r\u00e9szb\u0151l \u00e1ll, melyekhez elt\u00e9r\u0151 solution tartozik. Az els\u0151h\u00f6z a Feladat1 mapp\u00e1ban tal\u00e1lhat\u00f3 MusicApp.sln f\u00e1jlt, a m\u00e1sodikhoz a Feladat2-ben tal\u00e1lhat\u00f3 Shapes.sln-t kell megnyitni. A megnyit\u00e1st megtehetj\u00fck Explorerb\u0151l, az adott .sln f\u00e1jlon dupl\u00e1n kattintva. Ugyanakkor van erre m\u00e1s m\u00f3d is: amennyiben Visual Studio-ban a Git gy\u00f6k\u00e9rmapp\u00e1t nyitottuk meg (a Clone-t k\u00f6vet\u0151en is ez a helyzet \u00e1llt el\u0151) a Solution Explorer n\u00e9zet fejl\u00e9c\u00e9ben \"Switch View\" gombot lenyomva a Solution Explorer list\u00e1zza a Git gy\u00f6k\u00e9rmappa alatti solution-\u00f6ket, \u00e9s ezek b\u00e1rmelyik\u00e9n dupl\u00e1n kattintva az adott solution megny\u00edlik:</p> <p></p>"},{"location":"hazi/hf-folyamat/#clone-parancssorbol","title":"Clone parancssorb\u00f3l","text":"<p>Alternat\u00edv lehet\u0151s\u00e9g a parancssor haszn\u00e1lata. Parancssorban navig\u00e1ljunk abba a mapp\u00e1ba, ahov\u00e1 a forr\u00e1sk\u00f3dot ki szeretn\u00e9nk clone-ozni, \u00e9s itt adjuk ki a k\u00f6vetkez\u0151 parancsot: <code>git clone &lt;repo url&gt;</code> , ahol a <code>&lt;repo url&gt;</code> a repositorynk c\u00edme (pl. b\u00f6ng\u00e9sz\u0151 c\u00edms\u00e1vj\u00e1b\u00f3l bem\u00e1solva, ehhez hasonl\u00f3: https://github.com/bmeviauab00/hazi1-2024-myusername). A parancs lefut\u00e1sa ut\u00e1n egy a repository nev\u00e9nek megfelel\u0151 alk\u00f6nyvt\u00e1rban tal\u00e1ljuk az \u00faj helyi rep\u00f3nkat.</p> <p>Parancssori git</p> <p>Ne f\u00e9lj\u00fcnk a parancssori git-et haszn\u00e1lni, egy repository clone-oz\u00e1s\u00e1nak tulajdonk\u00e9ppen ez a legegyszer\u0171bb m\u00f3dja.</p> <p>Amennyiben a parancs futtat\u00e1sa sor\u00e1n azt tapasztaljuk, hogy a git parancsot nem ismeri fel a k\u00f6rnyezet, annak oka val\u00f3sz\u00edn\u0171leg az, hogy nem telep\u00edtett\u00fcnk m\u00e9g a parancssori gitet a g\u00e9p\u00fcnkre. Err\u0151l b\u0151vebben itt.</p>"},{"location":"hazi/hf-folyamat/#napi-git-munka-visual-studio-segitsegevel-commit-push","title":"Napi Git munka Visual Studio seg\u00edts\u00e9g\u00e9vel (commit, push)","text":"<p>Miut\u00e1n lekl\u00f3noztuk az adott h\u00e1zi feladathoz tartoz\u00f3 GitHub repository-t a sz\u00e1m\u00edt\u00f3g\u00e9p\u00fcnkre, \u00e9s ennek sor\u00e1n l\u00e9trej\u00f6tt a lok\u00e1lis Git repository-nk, a benne lev\u0151 .sln f\u00e1jlokat Visual Studioban megnyitva pont \u00fagy dolgozunk \u2013 vesz\u00fcnk fel \u00faj f\u00e1jlokat, m\u00f3dos\u00edtunk/t\u00f6rl\u00fcnk megl\u00e9v\u0151ket \u2013 mintha a f\u00e1jlok nem is tartozn\u00e1nak semmif\u00e9le Git rep\u00f3hoz. Ugyanakkor, legk\u00e9s\u0151bb a feladat bead\u00e1sakor a v\u00e1ltoztat\u00e1sainkat commit-olni kell, majd push-olni GitHub-ra. A munka sor\u00e1n ak\u00e1rh\u00e1nyszor commit-\u00e1lhatjuk/push-olhatjuk az el\u0151z\u0151 commit \u00f3ta eszk\u00f6z\u00f6lt m\u00f3dos\u00edt\u00e1sainkat: a h\u00e1zi feladat ellen\u0151rz\u00e9sekor a hat\u00e1rid\u0151 pillanat\u00e1ban a GitHub-on tal\u00e1lhat\u00f3 \u00e1llapot ker\u00fcl elb\u00edr\u00e1l\u00e1sra, teljesen mindegy, h\u00e1ny commit tartozik hozz\u00e1. A commit \u00e9s push m\u0171veletek v\u00e9grehajt\u00e1s\u00e1hoz a Visual Studio \"Git\" men\u00fcj\u00e9ben lev\u0151 parancsokat haszn\u00e1ljuk.</p>"},{"location":"hazi/hf-folyamat/#commit","title":"Commit","text":"<p>Az el\u0151z\u0151 commit \u00f3ta eszk\u00f6z\u00f6lt v\u00e1ltoztat\u00e1sok megtekint\u00e9s\u00e9hez v\u00e1lasszuk ki a \"View\\Git Changes\" men\u00fct. Ennek hat\u00e1s\u00e1ra megjelenik a \"Git Changes\" n\u00e9zet a v\u00e1ltoz\u00e1sok list\u00e1j\u00e1val:</p> <p></p> <p>A v\u00e1ltoztat\u00e1sok commit-\u00e1l\u00e1s\u00e1hoz \u00edrjunk a fenti sz\u00f6vegmez\u0151be egy a v\u00e1ltoztat\u00e1sokra jellemz\u0151 egy-k\u00e9t soros le\u00edr\u00e1st (pl. \"V\u00e9gs\u0151 megold\u00e1s\", \"Az xyz hiba jav\u00edt\u00e1sa\" stb.). A lehet\u0151s\u00e9geink ezt k\u00f6vet\u0151en a k\u00f6vetkez\u0151k:</p> <ul> <li>\"Commit All\" gomb: Csak helyben commit-olja a v\u00e1ltoztat\u00e1sokat (a k\u00f6zponti Git rep\u00f3ban mindaddig nem jelenik meg a commit, am\u00edg egy k\u00fcl\u00f6n Push paranccsal fel nem \"toljuk\").</li> <li>\"Commit All and Push\", mely a \"Commit All\" gomb melletti ny\u00edl lenyit\u00e1s\u00e1val \u00e9rhet\u0151 el. Hat\u00e1sa: commit, majd ut\u00e1na push. Ha a v\u00e1ltoztat\u00e1sainkat egyb\u0151l publik\u00e1lni is szeretn\u00e9nk a GitHub-on lev\u0151 k\u00f6zponti rep\u00f3ba, akkor haszn\u00e1ljuk b\u00e1tran parancsot. A h\u00e1zi feladatok tekintet\u00e9ben c\u00e9lszer\u0171 is ezt haszn\u00e1lni, mert ekkor nincs sz\u00fcks\u00e9g a commit-ot k\u00f6vet\u0151en k\u00fcl\u00f6n push m\u0171veletre. Megjegyz\u00e9s: ha a parancs az \"Unable to push to the remote repository because your local branch is behind the remote branch\" hib\u00e1val z\u00e1rul, el\u0151bb pull-oljuk, majd ism\u00e9telj\u00fck meg a push-t. Erre m\u00e9g al\u00e1bb visszat\u00e9r\u00fcnk.</li> <li>\"Commit All and Sync\", mely a \"Commit All\" gomb melletti ny\u00edl lenyit\u00e1s\u00e1val \u00e9rhet\u0151 el. Hat\u00e1sa: commit ut\u00e1n pull (leszedi a saj\u00e1t helyi rep\u00f3nkba m\u00e1sok esetleges v\u00e1ltoztat\u00e1sait a k\u00f6zponti rep\u00f3b\u00f3l), majd push. \u00cdgy a k\u00f6zponti rep\u00f3ban lev\u0151 esetleges v\u00e1ltoz\u00e1sokat lehozza a helyi rep\u00f3nkba, az ezt k\u00f6vet\u0151en a v\u00e1ltoztat\u00e1sainkat egyb\u0151l publik\u00e1lja is ide.</li> </ul> <p>Note</p> <p>A git commit-ot mindig meg kell el\u0151zze egy \u00fan. stage l\u00e9p\u00e9s, mely sor\u00e1n kiv\u00e1lasztjuk azokat a helyi v\u00e1ltoztat\u00e1sokat, melyeket a k\u00f6vetkez\u0151 commit-ba be k\u00edv\u00e1nunk tenni. Ez az \u00fan. staging area ter\u00fcletre teszi az \u00e1ltalunk kiv\u00e1lasztott v\u00e1ltoz\u00e1sokat (a f\u00e1jlrendszerben nem mozgat semmif\u00e9le f\u00e1jlt, ez csak a git a bels\u0151 nyilv\u00e1ntart\u00e1s\u00e1ban jelenik meg). Ez az\u00e9rt j\u00f3, mert plusz rugalmass\u00e1got biztos\u00edt, hiszen nem biztos, mindig minden v\u00e1ltoztat\u00e1st bele k\u00edv\u00e1nunk tenni a k\u00f6vetkez\u0151 commit-ba. A fenti \"Commit all\" stb. parancsok nev\u00e9ben nem v\u00e9letlen van benne az \"all\": ezek a sz\u00ednfalak m\u00f6g\u00f6tt a commit el\u0151tt egy megfelel\u0151 git paranccsal valamennyi v\u00e1ltoz\u00e1st a git staging area-ra tesznek, \u00edgy ezt nek\u00fcnk nem kell k\u00fcl\u00f6n megtenn\u00fcnk.</p>"},{"location":"hazi/hf-folyamat/#push-pull","title":"Push, Pull","text":"<p>A commit m\u0171velet csak a helyi repository-ban \"\u00e9rv\u00e9nyes\u00edti\" a v\u00e1ltoztat\u00e1sokat. Ezt k\u00f6vet\u0151en a v\u00e1ltoztat\u00e1sokat a GitHub k\u00f6zponti repository-nkba fel kell t\u00f6lteni a push m\u0171velettel. Erre a l\u00e9p\u00e9sre csak akkor van sz\u00fcks\u00e9g, ha a commit sor\u00e1n nem haszn\u00e1ltuk a \"Commit All and Push\" vagy \"Commit All and Sync\" parancsokat. A push m\u0171velet VS-ben a \"Git/Push\" men\u00fc seg\u00edt\u00e9s\u00e9vel ind\u00edthat\u00f3.  Ha t\u00f6bben dolgozunk, a k\u00f6zponti repository-ban lehetnek m\u00e1sok \u00e1ltal pusholt, hozz\u00e1nk m\u00e9g le nem t\u00f6lt\u00f6tt commitok (vagy ak\u00e1r olyanok, melyeket mi magunk push-oltunk egy m\u00e1sik lok\u00e1lis clone-b\u00f3l, vagy ha a GitHub online fel\u00fclet\u00e9n eszk\u00f6z\u00f6lt\u00fcnk a k\u00f3don v\u00e1ltoz\u00e1sokat). Ezeket a pull m\u0171velettel tudjuk a helyi rep\u00f3nkba merge-elni (Git/Pull men\u00fc). A h\u00e1zi feladat vonatkoz\u00e1s\u00e1ban ezt nem haszn\u00e1ljuk, hiszen mindenki saj\u00e1t dedik\u00e1lt k\u00f6zponti repositoryval rendelkezik, melyben egyed\u00fcl dolgozik (kiv\u00e9ve, ha esetleg valaki a GitHub fel\u00fclet\u00e9nek seg\u00edts\u00e9g\u00e9vel v\u00e1ltoztatott a k\u00f3don, akkor ezt egy pull-lal tudja a helyi rep\u00f3j\u00e1ba lehozni).</p> <p>Note</p> <p>A push csak akkor hajthat\u00f3 v\u00e9gre, ha a k\u00f6zponti rep\u00f3ban nincs olyan v\u00e1ltoz\u00e1s, melyet m\u00e9g a pull paranccsal nem hoztunk le \u00e9s merge-elt\u00fcnk a saj\u00e1t lok\u00e1lis rep\u00f3nkba. Ha ez nincs \u00edgy, egy ehhez hasonl\u00f3 hiba\u00fczenet kapunk: \"Unable to push to the remote repository because your local branch is behind the remote branch\". Ekkor pull-oljunk, ut\u00e1na ism\u00e9telj\u00fck meg a pusht.</p> <p>Note</p> <p>A pull m\u0171velet csak akkor hajthat\u00f3 v\u00e9gre, ha nincs olyan v\u00e1ltoztat\u00e1sunk helyben, melyeket m\u00e9g nem commit\u00e1ltunk. Ha van ilyen, akkor azokat vagy commit\u00e1ljuk (vagy ha ezt nem akarjuk megtenni m\u00e9g, akkor stash-elj\u00fck a pull idej\u00e9re).</p> <p>Tip</p> <p>A Pull \u00e9s Push parancsok a \u201eGit Changes\u201d (View/Git Changes men\u00fc jelen\u00edti meg) panel tetej\u00e9n el\u00e9rhet\u0151 le \u00e9s fel nyilakkal is v\u00e9grehajthat\u00f3k:</p> <p></p>"},{"location":"hazi/hf-folyamat/#git-history","title":"Git history","text":"<p>A Git egy v\u00e1ltoz\u00e1sk\u00f6vet\u0151 rendszer. A v\u00e1ltoz\u00e1s egys\u00e9ge a commit (melyben tetsz\u0151leges sz\u00e1m\u00fa f\u00e1jlt \u00e9rint\u0151 v\u00e1ltoz\u00e1s lehet), a Git historyban a commitok egym\u00e1sut\u00e1nis\u00e1g\u00e1t l\u00e1thatjuk. A f\u00e1jlokat \u00e9rint\u0151 v\u00e1ltoz\u00e1sokon t\u00falmen\u0151en minden commithoz tartozik egy egyedi azonos\u00edt\u00f3 (commit hash), id\u0151b\u00e9lyeg, illetve egy szerz\u0151. A szerz\u0151 felhaszn\u00e1l\u00f3, aki a v\u00e1ltoz\u00e1sokat eszk\u00f6z\u00f6lte (val\u00f3j\u00e1ban van k\u00fcl\u00f6n Author \u00e9s Commiter, de a kett\u0151 \u00e1ltal\u00e1ban ugyanaz). Visual Studioban a historyt a View/Git Repository men\u00fcvel tudjuk megjelen\u00edteni, de a history term\u00e9szetesen a GitHub online fel\u00fclet\u00e9n is megjelen\u00edthet\u0151. A Visual Studioban a \"Git Repository\" n\u00e9zetet a View/Git Repository men\u00fcvel tudjuk megjelen\u00edteni.</p> <ul> <li>Outgoing commits: Megmutatja, hogy milyen, a lok\u00e1lis repository-nkba m\u00e1r l\u00e9tez\u0151, de a k\u00f6zponti rep\u00f3ba m\u00e9g nem push-olt commitok vannak. Ezeket a Push m\u0171velettel tudjuk felt\u00f6lteni.</li> <li>Incoming commits: Megmutatja, hogy a k\u00f6zponti repository-ban milyen m\u00e1sok \u00e1ltal pusholt, hozz\u00e1nk m\u00e9g le nem t\u00f6lt\u00f6tt commitok vannak. Ezek akkor jelennek meg, ha a Fetch paranccsal lehozzuk a helyi rep\u00f3ba (ez m\u00e9g nem merge-el). Ezeket a Pull m\u0171velettel tudjuk a helyi rep\u00f3nkba merge-elni. A fetch parancsot ritk\u00e1n haszn\u00e1ljuk: \u00e1ltal\u00e1ban a pullt haszn\u00e1ljuk mag\u00e1ban, ami egy fetch + merge (v\u00e1ltoz\u00e1sok merge-el\u00e9se a helyi rep\u00f3ba) kombin\u00e1ci\u00f3ja.</li> </ul> <p>P\u00e9lda:</p> <p></p> <p>Tip</p> <p>Am\u00edg nem vagyunk rutinosak a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00fcnk-e.</p>"},{"location":"hazi/hf-folyamat/#egyeb-iranyelvek","title":"Egy\u00e9b ir\u00e1nyelvek","text":"<p>A Git commit \u00e9s push sor\u00e1n megfigyelhetj\u00fck, hogy a solution-jeink k\u00f6ztes \u00e9s kimeneti \u00e1llom\u00e1nyai (.dll, .exe stb. f\u00e1jlok) nem ker\u00fclnek bele a commitba, \u00e9s \u00edgy nem ker\u00fclnek fel GitHubra sem. Ez \u00edgy is van j\u00f3l, ezen \u00e1llom\u00e1nyok b\u00e1rmikor reproduk\u00e1lhat\u00f3k, a verzi\u00f3kezel\u0151 rendszernek nem feladata ezek t\u00e1rol\u00e1sa, csak felesleges \u00e9s zavar\u00f3 helyfoglal\u00f3k lenn\u00e9nek. Felmer\u00fcl a k\u00e9rd\u00e9s, honnan tudja a Git, hogy mely \u00e1llom\u00e1nyokat sz\u00fcks\u00e9ges figyelmen k\u00edv\u00fcl hagyni a commit sor\u00e1n. Erre szolg\u00e1l a repository-ban (tipikusan annak gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban) tal\u00e1lhat\u00f3 .gitignore f\u00e1jl, mely felsorolja azon mapp\u00e1kat, f\u00e1jlkiterjeszt\u00e9seket, illetve egyedi f\u00e1jlokat, melyeket a commit sor\u00e1n figyelmen k\u00edv\u00fcl szeretn\u00e9nk hagyni. A .gitignore f\u00e1jl tartalma teljes eg\u00e9sz\u00e9ben a kez\u00fcnk al\u00e1 tartozik, szabadon szerkeszthet\u0151/commit\u00e1lhat\u00f3/pusholhat\u00f3. A t\u00e1rgy keret\u00e9ben minden kiindul\u00f3 rep\u00f3nak r\u00e9sze egy .gitignore f\u00e1jl, ne v\u00e1ltoztassuk a tartalm\u00e1t! \u00cdgy a commit/push sor\u00e1n a kimeneti \u00e1llom\u00e1nyok a h\u00e1zi feladatok eset\u00e9ben sem ker\u00fclnek fel GitHub-ra, \u00e9s egy \u00edgy is van rendj\u00e9n.</p> <p>A f\u00e9l\u00e9vben a feladatok megold\u00e1sa sor\u00e1n az egyes oszt\u00e1lyok, interf\u00e9szek stb. forr\u00e1sk\u00f3dj\u00e1t k\u00fcl\u00f6n f\u00e1jlba kell tenni, vagyis egy C# forr\u00e1sf\u00e1jlban egy oszt\u00e1ly/interf\u00e9sz/stb. defin\u00edci\u00f3ja legyen.</p>"},{"location":"hazi/hf-folyamat/#git-hasznalata-parancssorbol","title":"Git haszn\u00e1lata parancssorb\u00f3l","text":"<p>B\u00e1r sokan \u00f3dzkodnak a git parancssori alkalmaz\u00e1s\u00e1t\u00f3l, az egyszer\u0171bb m\u0171veleteket gyakran gyorsabban v\u00e9gre tudjuk hajtani parancssorb\u00f3l, mint a GUI fel\u00fcleteken t\u00f6rt\u00e9n\u0151 kattintgat\u00e1sokkal. Az al\u00e1bbiakban egy egyszer\u0171 l\u00e9p\u00e9ssorozattal illusztr\u00e1ljuk ezt. Ezeket a t\u00e1rgy keret\u00e9ben nem kell tudni, de hosszabb t\u00e1von mindenk\u00e9ppen hasznos (\u00e9s az ipar\u00e1gban elv\u00e1r\u00e1s is) az ismeret\u00fck.</p> <ol> <li> <p>Repository clone (ezt csak egyszer)</p> <p><code>git clone https://github.com/bmeviauab00/hazi1-2022-myusername</code></p> </li> <li> <p>V\u00e1ltoztat\u00e1sok v\u00e9grehajt\u00e1sa a helyi rep\u00f3ban (f\u00e1jlrendszerben, fejleszt\u0151eszk\u00f6zben).</p> </li> <li> <p>V\u00e1ltoztat\u00e1sok megtekint\u00e9se, mutatja melyek az \u00faj/t\u00f6r\u00f6lt/m\u00f3dosult f\u00e1jlok (nem k\u00f6telez\u0151, csak ha k\u00edv\u00e1ncsiak vagyunk r\u00e1)*</p> <p><code>git status</code></p> </li> <li> <p>Minden v\u00e1ltoztat\u00e1s felt\u00e9tele a staging area-ra</p> <p><code>git add -A</code></p> <p>Ha ezt k\u00f6vet\u0151en ism\u00e9t kiadjuk <code>git status</code> parancsot (nem k\u00f6telez\u0151), l\u00e1tjuk, hogy minden v\u00e1ltoz\u00e1s stage-elve van.</p> </li> <li> <p>Commit</p> <p><code>git commit -m \"megjegyz\u00e9s a commithoz\"</code></p> </li> <li> <p>Push</p> <p><code>git push</code></p> </li> </ol> <p>Megjegyz\u00e9sek:</p> <ul> <li>Ha t\u00f6bben is dolgozunk az adott git \u00e1gon, akkor a 6. push el\u0151tt sz\u00fcks\u00e9g lehet/van egy <code>git pull</code>-ra, hogy m\u00e1sok v\u00e1ltoztat\u00e1sai megjelenjenek a mi helyi rep\u00f3nkban (en\u00e9lk\u00fcl nem fogunk tudni push-olni). A pull-nak c\u00e9lszer\u0171 lehet megadni a <code>--rebase</code> opci\u00f3t is, hogy ne sz\u00fclessen a merge-hez egy plusz merge commit, ennek magyar\u00e1zat\u00e1ra itt nem t\u00e9r\u00fcnk ki.</li> <li> <p>Mint kor\u00e1bban eml\u00edtett\u00fck, a commit sor\u00e1n a commithoz hozz\u00e1rendel\u0151dik egy felhaszn\u00e1l\u00f3n\u00e9v \u00e9s e-mail c\u00edm. Ha ezek nincsenek a git sz\u00e1m\u00e1ra bekonfigur\u00e1lva, akkor a git a commit sor\u00e1n ezt hiba\u00fczenetben jelzi. Ekkor az al\u00e1bbi parancsokkal - \u00e9rtelemszer\u0171en a saj\u00e1t felhaszn\u00e1l\u00f3nev\u00fcnket \u00e9s e-mail c\u00edm\u00fcnket megadva - tudjuk ezeket a git glob\u00e1lis konfigur\u00e1ci\u00f3j\u00e1ban be\u00e1ll\u00edtani (ezt csak egyszer kell megtenni):</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"myusername\"\n</code></pre> </li> <li> <p>Windows parancssorban \u00f6sszevonhatunk t\u00f6bb parancsot is egy sorba, pl. egy l\u00e9p\u00e9sben minden v\u00e1ltoz\u00e1sra stage/commit/push:</p> <p><code>git add -A &amp; git commit -m \"All tests run\" &amp; git push</code></p> <p>Powershell haszn\u00e1latakor a <code>&amp;</code> helyett <code>;</code>-t kell szepar\u00e1tork\u00e9nt haszn\u00e1lni.</p> </li> </ul>"},{"location":"hazi/hf-folyamat/index_eng/","title":"Homework workflow and using Git/GitHub","text":"<p>If you haven't read it yet, it's advisable to start here: Git, GitHub, GitHub Classroom</p>"},{"location":"hazi/hf-folyamat/index_eng/#steps","title":"Steps","text":"<p>The initial framework of each homework assignment is published using GitHub/GitHub Classroom. The steps for downloading and submitting the homework from this published environment are as follows:</p> <ol> <li> Do not wait until the deadline approaches to start. At least get to the point of creating your repository as soon as possible. This way, if you run into any issues, we can assist you in time.</li> <li>Register a GitHub account (https://github.com/) if you haven\u2019t already, and log in to GitHub.</li> <li>Open the link corresponding to the assignment. Each assignment will have a different link, which will be gradually announced on the subject webpage throughout the semester. The format will be similar to: https://classroom.github.com/abcdefgh. If you encounter an authentication error (\"There was a problem authenticating with GitHub, please try again.\"), try copying and pasting the link directly into the browser's address bar.</li> <li>If prompted, grant GitHub Classroom permission to use your account information.</li> <li>You will see a page where you can accept the assignment (\"Accept this assignment\"). Click the button.</li> <li>Wait for the repository to be created. GitHub does not always refresh the page automatically, so manually refreshing (e.g., pressing F5) may be necessary. Once the repository is ready, the page will display its URL, which you can click to access the repository (e.g., https://github.com/bmeviauab00/hazi1-2024-username). However, saving the URL is not strictly necessary, as you can always find it later among your repositories on the GitHub homepage (https://github.com/).</li> <li>Clone the repository (we will discuss how to do this shortly). Inside, you will find a framework or starter code. Work on this and modify it as needed. Stay on the default Git branch (if this doesn't mean anything to you, don't worry\u2014this note is primarily for those who are experienced in Git and usually work with multiple branches).</li> <li> Do not modify, delete, or alter the content of the <code>.github/workflows</code> folder within the project.</li> <li> You must work within the provided solution/project from the initial repository. Do not create a new project/solution.</li> <li> Enter your Neptun code in the <code>neptun.txt</code> file located in the root directory of the repository. The file should contain only these six uppercase characters and nothing else.</li> <li>Solve the assignment and push your changes before the deadline. Work directly on the default \"Main\" branch\u2014there are no pull requests. You can have as many commits as needed; we will evaluate the latest state at the deadline.</li> <li>Results will be announced on Aut webpage. Expect results within a few days after the submission deadline.</li> <li>There is no need to explicitly submit the assignment separately\u2014just make sure it is available on GitHub by the deadline.</li> <li> Before considering your homework as submitted, it is advisable to check your repository on GitHub's web interface to ensure that all changes have been pushed and that the <code>neptun.txt</code> file has been properly filled out.</li> </ol> <p>The following steps raise two remaining questions:</p> <ul> <li>How do we clone our repository (which contains the initial framework for the homework)?</li> <li>How do we commit and push to GitHub?</li> </ul> <p>Most of these topics have already been covered in the Software Technology course. However, if you don\u2019t remember all the details or want to learn how to use these features not only from the command line but also in Visual Studio, be sure to read the following. We will briefly cover all the Git-related aspects needed to complete the homework (even for those who have never used Git before and are just starting the course).</p> <p>If you encounter the error message \"Support for password authentication was removed\" during Git login, check the section on the Git Credential Manager at the bottom of the Git installation guide.</p>"},{"location":"hazi/hf-folyamat/index_eng/#cloning-a-github-repository","title":"Cloning a GitHub Repository","text":"<p>We will explore two options:</p> <ul> <li>Cloning from the GitHub web interface using Visual Studio (or directly from Visual Studio)</li> <li>Cloning from the command line</li> </ul>"},{"location":"hazi/hf-folyamat/index_eng/#cloning-from-the-github-web-interface-in-visual-studio","title":"Cloning from the GitHub Web Interface in Visual Studio","text":"<p>There are several ways to clone a repository for a homework assignment. One option is as follows:</p> <p>Open the repository\u2019s online page. There are several ways to access it:</p> <ul> <li>When creating the repository, GitHub provides a URL\u2014simply click on it.</li> <li>On the GitHub homepage (https://github.com), if logged in, your accessible repositories are listed on the left; just click on the correct one.</li> <li>When the repository is created (after accepting the GitHub Classroom assignment), you receive an email notification containing the link.</li> </ul> <p>The page should look something like this (though the URL will end with your username):</p> <p></p> <p>Click the green Code button, then select \"Open in Visual Studio\" from the dropdown menu:</p> <p></p> <p>At this point, your browser may prompt a window (e.g., in Chrome/Edge, below the address bar) where you need to click Open\u2026 to launch Visual Studio. If the prompt appears as \"Microsoft Visual Studio Web Protocol Handler Selector\", allow it. Additionally, you may want to check the box saying \"Always allow github.com to open links ...\".</p> <p>If everything goes well, Visual Studio will start and display a window with the \"Repository location\" field pre-filled with your repository\u2019s URL. Specify where you want to clone the repository on your system, then click Clone:</p> <p></p>"},{"location":"hazi/hf-folyamat/index_eng/#alternative-cloning-in-visual-studio","title":"Alternative Cloning in Visual Studio","text":"<p>If \"Open in Visual Studio\" or \"Microsoft Visual Studio Web Protocol Handler Selector\" does not work in the browser, you can start directly from Visual Studio. Simply launch Visual Studio, and in the startup window, click \"Clone Repository\" (or, if the startup window is skipped, select \"Git/Clone Repository\" from the main menu). Enter your repository\u2019s URL and click Clone.</p> <p>Once cloned, you can check the created folders and files in Windows Explorer:</p> <p></p> <p>From this, it is clear that a Git repository is nothing more than a collection of folders and files, along with a .git folder located in the root directory, which (in simple terms) contains the version history of individual files. To start working, you only need to open the .sln solution file associated with the given homework assignment (e.g., by double-clicking it in Windows Explorer).</p> <p>The first homework assignment is special (it contains two solutions)!</p> <p>The first homework assignment consists of two main parts, each with a different solution file. For the first part, open the MusicApp.sln file located in the Feladat1 folder, and for the second part, open the Shapes.sln file in the Feladat2 folder. You can open these files by double-clicking the respective .sln file in Windows Explorer. However, there is an alternative method: If you have opened the Git root folder in Visual Studio (which is the case right after cloning), you can click the \"Switch View\" button in the Solution Explorer header. This will list all solutions under the Git root folder, and you can open any of them by double-clicking it.</p> <p></p>"},{"location":"hazi/hf-folyamat/index_eng/#cloning-from-the-command-line","title":"Cloning from the Command Line","text":"<p>Another option is using the command line. Navigate to the folder where you want to clone the repository and run:</p> <p><code>git clone &lt;repo url&gt;</code></p> <p>where <code>&lt;repo url&gt;</code> is your repository's URL (copied from the browser, e.g., <code>https://github.com/bmeviauab00/hazi1-2024-myusername</code>). After running the command, the repository will be cloned into a folder named after the repository.</p> <p>Command-line Git</p> <p>Don't be afraid to use Git in the command line\u2014cloning a repository this way is actually the simplest method.</p> <p>If you encounter an error stating that the git command is not recognized, it is likely because Git has not been installed on your system yet. You can find more details about installing Git here.</p>"},{"location":"hazi/hf-folyamat/index_eng/#daily-git-workflow-in-visual-studio-commit-push","title":"Daily Git Workflow in Visual Studio (Commit, Push)","text":"<p>After cloning the GitHub repository for the assignment to our computer, a local Git repository is created. Opening the <code>.sln</code> files in Visual Studio, we work with them as usual\u2014adding, modifying, and deleting files\u2014just as if they were not part of a Git repository. However, before submitting the assignment, we must commit our changes and push them to GitHub. We can commit and push our changes multiple times during the assignment, but at the deadline, the state of the repository on GitHub will be evaluated, regardless of how many commits it contains. To perform the commit and push operations, use the commands in the \"Git\" menu in Visual Studio.</p>"},{"location":"hazi/hf-folyamat/index_eng/#commit","title":"Commit","text":"<p>To view the changes made since the last commit, select \"View\\Git Changes\". This will open the \"Git Changes\" panel showing the list of changes:</p> <p></p> <p>To commit the changes, enter a short description (e.g., \"Final solution\", \"Fixed xyz bug\") in the text box. The available options are:</p> <ul> <li>\"Commit All\": Commits changes locally (but does not push them to the central Git repository until a separate Push command is executed).</li> <li>\"Commit All and Push\": Available from the dropdown next to the \"Commit All\" button. It first commits the changes and then pushes them to GitHub. This is recommended for homework submissions, as it eliminates the need for a separate push operation.   If the command results in an error \"Unable to push to the remote repository because your local branch is behind the remote branch\", perform a pull first, then retry the push.</li> <li>\"Commit All and Sync\": Also available from the dropdown. This commits, then pulls any changes from the remote repository before pushing. It ensures that local changes are merged with any modifications in the central repository.</li> </ul> <p>Note</p> <p>A commit must always be preceded by a stage step, where we select which changes to include in the commit. This places selected changes in the staging area (without physically moving files). This approach provides flexibility, allowing us to exclude certain modifications from a commit if necessary. The \"Commit All\" commands automatically stage all changes before committing.</p>"},{"location":"hazi/hf-folyamat/index_eng/#push-pull","title":"Push, Pull","text":"<p>The commit operation only applies changes locally. To update the GitHub repository, use the Push operation. This step is necessary only if \"Commit All and Push\" or \"Commit All and Sync\" were not used earlier. The push command can be executed from the Git/Push menu in Visual Studio.</p> <p>If working collaboratively, there might be remote changes that have not yet been downloaded. Use Pull from the Git/Pull menu to merge these updates into the local repository. However, for individual homework assignments, this is usually unnecessary.</p> <p>Note</p> <p>A push can only be performed if there are no unmerged remote changes. If there are, an error message such as \"Unable to push to the remote repository because your local branch is behind the remote branch\" will appear. In this case, perform a Pull, then retry the push.</p> <p>Note</p> <p>A pull operation can only proceed if there are no uncommitted local changes. If necessary, commit or temporarily store changes before pulling.</p> <p>Tip</p> <p>The Pull and Push commands can also be accessed via the Git Changes panel:</p> <p></p>"},{"location":"hazi/hf-folyamat/index_eng/#git-history","title":"Git History","text":"<p>Git tracks all changes in the repository as commits. Each commit has a unique identifier (commit hash), a timestamp, and an author. To view the commit history, use View/Git Repository in Visual Studio. The commit history can also be viewed on GitHub.</p> <ul> <li>Outgoing commits: Shows locally committed changes that have not yet been pushed to the remote repository.  </li> <li>Incoming commits: Shows remote changes that have been fetched but not yet merged. Use Pull to merge them.</li> </ul> <p>Example:</p> <p></p> <p>Tip</p> <p>If you are new to Visual Studio\u2019s Git integration, after pushing changes (especially before submitting an assignment), verify that all updates appear in the GitHub repository.</p>"},{"location":"hazi/hf-folyamat/index_eng/#additional-guidelines","title":"Additional Guidelines","text":"<p>Git does not include intermediate and output files (such as <code>.dll</code> and <code>.exe</code>) in commits. These files are generated during the build process and do not need to be version-controlled. Git determines which files to ignore using the <code>.gitignore</code> file, which lists file types and directories that should not be committed. Each assignment repository includes a pre-configured <code>.gitignore</code> file\u2014do not modify its contents. This ensures that unnecessary files are not uploaded to GitHub.</p> <p>Throughout the semester, each class, interface, etc., should be placed in its own file, meaning that a C# source file should contain only one class, interface, or other definition.</p>"},{"location":"hazi/hf-folyamat/index_eng/#using-git-in-the-command-line","title":"Using Git in the Command Line","text":"<p>Even if you're not used to it, using Git in the command line can often be faster than navigating through GUI menus. Here\u2019s a simple workflow:</p> <ol> <li> <p>Clone the repository (only needed once):    <code>git clone https://github.com/bmeviauab00/hazi1-2022-myusername</code></p> </li> <li> <p>Make changes in your local repository.</p> </li> <li> <p>View changes (optional, just to check modifications):    <code>git status</code></p> </li> <li> <p>Stage all changes:    <code>git add -A</code></p> </li> <li> <p>Commit changes:    <code>git commit -m \"Commit message\"</code></p> </li> <li> <p>Push changes to GitHub:    <code>git push</code></p> </li> </ol> <p>Notes:</p> <ul> <li> <p>If multiple people are working on the same Git branch, before step 6 (push), a <code>git pull</code> may be necessary to incorporate changes made by others into your local repository (without this, you won't be able to push). It may be useful to add the <code>--rebase</code> option to the pull command to avoid creating an additional merge commit, but we won\u2019t go into the explanation here.</p> </li> <li> <p>As mentioned earlier, every commit is associated with a username and an email address. If these are not configured in Git, an error message will appear when committing. You can set them in Git\u2019s global configuration using the following commands (you only need to do this once, replacing the placeholders with your actual information):</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"myusername\"\n</code></pre> </li> <li> <p>In the Windows command prompt, multiple commands can be combined into a single line. For example, to stage, commit, and push all changes in one step:</p> <p><code>git add -A &amp; git commit -m \"All tests run\" &amp; git push</code></p> <p>If using PowerShell, replace <code>&amp;</code> with <code>;</code> as the separator.</p> </li> </ul>"},{"location":"hazi/imsc-liftsystem/","title":"IMSc. HF - Liftrendszer","text":""},{"location":"hazi/imsc-liftsystem/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A h\u00e1zi feladatban egy konzol alap\u00fa alkalmaz\u00e1st kell elk\u00e9sz\u00edteni, mely egy liftrendszert szimul\u00e1l, az Observer tervez\u00e9si mint\u00e1ra \u00e9p\u00edtve.</p> <p>A megval\u00f3s\u00edt\u00e1s\u00e9rt 7 IMSc pont szerezhet\u0151.</p> <p>A h\u00e1zi feladat az Observer \u00e9s Adapter tervez\u00e9si minta ismeret\u00e9re \u00e9p\u00edt (l\u00e1sd kapcsol\u00f3d\u00f3 tervez\u00e9si mint\u00e1k el\u0151ad\u00e1sanyag). </p> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s. Ez egy konzolos alkalmaz\u00e1s, ak\u00e1r Linux/Mac k\u00f6rnyezetben is megval\u00f3s\u00edthat\u00f3.</p>"},{"location":"hazi/imsc-liftsystem/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li> Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</li> </ul>"},{"location":"hazi/imsc-liftsystem/#1-feladat-liftrendszer-alapok","title":"1. feladat - Liftrendszer alapok","text":"<p>K\u00e9sz\u00edts egy <code>Lift</code> oszt\u00e1lyt, mely egy emeletes h\u00e1z felvon\u00f3j\u00e1t reprezent\u00e1lja! A k\u00f6vetkez\u0151 tagokkal rendelkezzen:</p> <ul> <li><code>Floor</code> tulajdons\u00e1g: Aktu\u00e1lis emelet. Eg\u00e9sz \u00e9rt\u00e9k.</li> <li><code>TargetFloor</code> tulajdons\u00e1g: C\u00e9l emelet. Eg\u00e9sz \u00e9rt\u00e9k.</li> <li><code>Stairway</code> tulajdons\u00e1g: L\u00e9pcs\u0151h\u00e1z sz\u00e1ma, melyben a lift tal\u00e1lhat\u00f3. Eg\u00e9sz \u00e9rt\u00e9k. Egy l\u00e9pcs\u0151h\u00e1zban egy lift lehet (ezt nem kell valid\u00e1lni az alkalmaz\u00e1sban, de mindig \u00edgy haszn\u00e1ljuk).</li> <li><code>Call</code> m\u0171velet: A lift h\u00edv\u00e1s\u00e1ra szolg\u00e1l, be\u00e1ll\u00edtja a c\u00e9lemeletet a param\u00e9terben magadott \u00e9rt\u00e9kre.</li> <li><code>Step</code> m\u0171velet: A lift egy emelettel t\u00f6rt\u00e9n\u0151 l\u00e9ptet\u00e9s\u00e9re szolg\u00e1l (amennyiben az aktu\u00e1lis \u00e9s c\u00e9lemelet nem egyezik: ha egyezik, nem csin\u00e1l semmit). V\u00e9letlenszer\u0171 esetben - \u00e1tlagosan kb. minden 5. l\u00e9p\u00e9s sor\u00e1n - a lift ideiglenesen beragad: ez azt jelenti, hogy az adott l\u00e9p\u00e9s sor\u00e1n nem v\u00e1lt emeletet a c\u00e9lemelet ir\u00e1ny\u00e1ba.</li> </ul> <p>K\u00e9sz\u00edts egy <code>LiftDoor</code> oszt\u00e1lyt, mely egy liftajt\u00f3t reprezent\u00e1l:</p> <ul> <li>Konstruktor param\u00e9terben lehessen megadni a lift objektumot, melyhez a lift tartozik, valamint azt, hogy az ajt\u00f3 melyik emeleten helyezkedik el.</li> <li>A liftajt\u00f3 kijelz\u0151je mindig a liftj\u00e9nek aktu\u00e1lis emelet\u00e9t mutatja, kiv\u00e9ve, amikor a lift az adott liftajt\u00f3 szintj\u00e9re \u00e9rkezik. Ekkor, ha ez volt a c\u00e9l\u00e1llom\u00e1s, egy 'o' jelenik meg a kijelz\u0151n (jelezve, hogy ny\u00edlik az ajt\u00f3), egy\u00e9bk\u00e9nt egy '*'. </li> <li>A kijelz\u0151h\u00f6z nem kell k\u00fcl\u00f6n oszt\u00e1lyt k\u00e9sz\u00edteni, a megjelen\u00edt\u00e9s\u00e9rt a <code>LiftDoor</code> oszt\u00e1ly felel.</li> <li> <p>Egy adott lifthez tartoz\u00f3 ajt\u00f3k adatai egy oszlopban, egym\u00e1s alatt (emelet sorrendj\u00e9ben) jelenjenek meg. Az 1. oszlopban az 1. l\u00e9pcs\u0151h\u00e1z, 2. oszlopban a 2. l\u00e9pcs\u0151h\u00e1z stb. lift/liftajt\u00f3 adatok jelenjenek meg. Az oszlopok 20-as karaktersz\u00e9less\u00e9g\u0171ek, \u00edgy az 1. oszlop a 20-as, a 2. oszlop a 40-es stb. karakterpoz\u00edci\u00f3ban kezd\u0151dik. Az al\u00e1bbi \u00e1bra illusztr\u00e1lja az elrendez\u00e9st k\u00e9t lift eset\u00e9re (1. lift az els\u0151 l\u00e9pcs\u0151h\u00e1zban, 2. lift a 2. l\u00e9pcs\u0151h\u00e1zban tal\u00e1lhat\u00f3):</p> <p></p> <p>Az \u00e1bra azt is illusztr\u00e1lja, hogy a liftajt\u00f3knak milyen form\u00e1ban kell a kimenetet megjelen\u00edteni (emelet ut\u00e1n kett\u0151spont, majd [ ] k\u00f6z\u00f6tt a kijelz\u0151 \u00e9rt\u00e9ke).</p> </li> <li> <p>A konzolra \u00edr\u00e1s sor\u00e1n a <code>Console.SetCursorPosition</code> m\u0171veletet \u00e9rdemes haszn\u00e1lni az \u00edr\u00e1si poz\u00edci\u00f3 be\u00e1ll\u00edt\u00e1s\u00e1ra.</p> </li> <li>Egyszer\u0171s\u00edt\u00e9s: a <code>Lift</code> oszt\u00e1lynak nem kell tudnia, hogy h\u00e1ny szint tartozik hozz\u00e1, \u00edgy nem sz\u00fcks\u00e9ges erre vonatkoz\u00f3 valid\u00e1ci\u00f3kat sem megval\u00f3s\u00edtani.</li> <li> Kulcsfontoss\u00e1g\u00fa, hogy a <code>Lift</code> oszt\u00e1ly nem tudhatja, milyen m\u00e1s oszt\u00e1lyok \u00e9p\u00edtenek az \u00e1llapot\u00e1ra. Pl. eset\u00fcnkben egyel\u0151re a <code>LiftDoor</code> ilyen (k\u00e9s\u0151bb lesz m\u00e1s is). Vagyis a rendszernek k\u00f6nnyen b\u0151v\u00edthet\u0151nek kell lenni m\u00e1s oszt\u00e1lyokkal, melyek a <code>Lift</code> m\u0171k\u00f6d\u00e9s\u00e9t\u0151l/\u00e1llapot\u00e1t\u00f3l f\u00fcggenek, \u00faj ilyen oszt\u00e1ly bevezet\u00e9sekor a <code>Lift</code> oszt\u00e1lyt nem szabad a k\u00e9s\u0151bbiekben m\u00f3dos\u00edtani. Ennek megfelel\u0151en a <code>Lift</code> - <code>LiftDoor</code> viszony\u00e1t az Observer mint\u00e1ra kell \u00e9p\u00edteni. </li> <li>A j\u00f6v\u0151ben a tov\u00e1bbfejleszt\u00e9s sor\u00e1n lehetnek m\u00e1s <code>Subject</code> oszt\u00e1lyok is, ez\u00e9rt be kell vezetni egy <code>Subject</code> \u0151soszt\u00e1lyt a k\u00f3dduplik\u00e1ci\u00f3 elker\u00fcl\u00e9s\u00e9re (de a h\u00e1zi feladatban csak egy subject lesz).</li> <li> A megold\u00e1s NEM \u00e9p\u00edthet .NET event-ekre (ugyanezen oszt\u00e1lyokkal/interf\u00e9szekkel pl. Java nyelven is megval\u00f3s\u00edthat\u00f3nak kell lennie).</li> </ul> <p>A liftrendszer konfigur\u00e1ci\u00f3 \u00f6ssze\u00e1ll\u00edt\u00e1s\u00e9rt \u00e9s a szimul\u00e1ci\u00f3 futtat\u00e1s\u00e1\u00e9rt egy <code>LiftSystemModel</code> oszt\u00e1ly legyen a felel\u0151s. Ennek forr\u00e1sk\u00f3dj\u00e1t al\u00e1bb megadjuk, ebb\u0151l kell egy p\u00e9ld\u00e1nyt a <code>Main</code> f\u00fcggv\u00e9nyben l\u00e9trehozni, \u00e9s a <code>Run</code> f\u00fcggv\u00e9ny\u00e9t megh\u00edvni:</p> <pre><code>class LiftSystemModel\n{\n    int iterationCount = 0;\n\n    Lift lift1 = new() { Stairway = 1 };\n    Lift lift2 = new() { Stairway = 2 };\n\n    public LiftSystemModel()\n    {\n        var a1 = new LiftDoor(1, lift1);\n        var a2 = new LiftDoor(2, lift1);\n        var a3 = new LiftDoor(3, lift1);\n        var a4 = new LiftDoor(4, lift1);\n        var a5 = new LiftDoor(5, lift1);\n\n        var b1 = new LiftDoor(1, lift2);\n        var b2 = new LiftDoor(2, lift2);\n        var b3 = new LiftDoor(3, lift2);\n        var b4 = new LiftDoor(4, lift2);\n        var b5 = new LiftDoor(5, lift2);\n    }\n\n    public void Run()\n    {\n        while (true)\n        {\n            Step();\n            Thread.Sleep(1000);\n            iterationCount++;\n        }\n    }\n\n    private void Step()\n    {\n        lift1.Step();\n        lift2.Step();\n\n        if (iterationCount == 0)\n            lift1.Call(5);\n        if (iterationCount == 2)\n            lift2.Call(5);\n\n        if (iterationCount == 6)\n            lift1.Call(1);\n        if (iterationCount == 9)\n            lift2.Call(1);\n    }\n\n}\n</code></pre> <p>A fenti k\u00f3d r\u00f6vid magyar\u00e1zata:</p> <ul> <li>A modell k\u00e9t liftet tartalmaz, az egyik az 1., a m\u00e1sik a 2. l\u00e9pcs\u0151h\u00e1zban tal\u00e1lhat\u00f3.</li> <li>A konstruktorban l\u00e9trehozzuk a k\u00e9t lifthez az egyes emeleteken tal\u00e1lhat\u00f3 ajt\u00f3kat (mindk\u00e9t l\u00e9pcs\u0151h\u00e1z 5 emeletes).</li> <li>A <code>Run</code> egy v\u00e9gtelen ciklusban futtatja a szimul\u00e1ci\u00f3t. A <code>Step</code> m\u0171veletben l\u00e9ptet, v\u00e1r egy m\u00e1sodpercet, majd megn\u00f6veli az aktu\u00e1lis iter\u00e1ci\u00f3sz\u00e1mot.</li> <li>A <code>Step</code> h\u00edv\u00f3dik minden iter\u00e1ci\u00f3ban. Ebben l\u00e9ptetj\u00fck mindk\u00e9t liftet, \u00e9s bizonyos iter\u00e1ci\u00f3kban h\u00edvjuk a k\u00e9t liftet az 5. illetve 1. emeletre.</li> </ul> <p>A k\u00f6vetkez\u0151 mozg\u00f3k\u00e9p illusztr\u00e1lja a m\u0171k\u00f6d\u00e9st:  </p>"},{"location":"hazi/imsc-liftsystem/#2-feladat-liftcontroller-osztaly-bevezetese","title":"2. Feladat - LiftController oszt\u00e1ly bevezet\u00e9se","text":"<p>K\u00e9sz\u00edts el egy <code>LiftController</code> oszt\u00e1lyt, mely egy adott liftre vonatkoz\u00f3an folyamatosan meg tudja jelen\u00edteni, mely szinten van \u00e9s mely szintre h\u00edvt\u00e1k utolj\u00e1ra (ez a k\u00f6zponti vez\u00e9rl\u0151terem sz\u00e1m\u00e1ra hasznos).</p> <ul> <li>Konstruktor param\u00e9terben lehessen a lift objektumot megadni, melyhez a <code>LiftController</code> tartozik.</li> <li><code>LiftSystemModel</code> konstruktor\u00e1ban mindk\u00e9t lifthez vegy\u00fcnk fel egy-egy <code>LiftController</code> p\u00e9ld\u00e1nyt.</li> <li> Kulcsfontoss\u00e1g\u00fa, hogy a bevezet\u00e9se sor\u00e1n NE kelljen a <code>Lift</code> oszt\u00e1lyt m\u00f3dos\u00edtani (az Observer mint\u00e1nak k\u00f6sz\u00f6nhet\u0151en).</li> <li><code>LiftController</code>-ek a hozz\u00e1juk tartoz\u00f3 lift oszlop\u00e1ban a liftajt\u00f3k alatt jelen\u00edts\u00e9k meg egy \"-&gt;\" el\u0151tt az aktu\u00e1lis, ut\u00e1na pedig a c\u00e9l emeletet. </li> </ul> <p>A megold\u00e1s illusztr\u00e1l\u00e1sa:</p> <p></p>"},{"location":"hazi/imsc-liftsystem/#3-feladat-meglevo-liftmonitor-osztaly-beillesztese","title":"3. feladat - Megl\u00e9v\u0151 LiftMonitor oszt\u00e1ly beilleszt\u00e9se","text":"<p>A feladat a liftek m\u0171k\u00f6d\u00e9si st\u00e1tusz\u00e1r\u00f3l inform\u00e1ci\u00f3 megjelen\u00edt\u00e9se. Eml\u00e9kezz\u00fcnk: a liftek v\u00e9letlenszer\u0171 id\u0151k\u00f6z\u00f6nk\u00e9nt elakadnak, mint ahogy a kor\u00e1bbi le\u00edr\u00e1sban szerepelt! Minden id\u0151pillanatban tudni szeretn\u00e9nk, hogy egy lift m\u0171k\u00f6dik (st\u00e1tusza \"OK\"), vagy el van akadva (st\u00e1tusza \"stuck\").  Ehhez rendelkez\u00e9sre is \u00e1ll az al\u00e1bbi oszt\u00e1ly:</p> <pre><code>class LiftMonitor\n{\n    int prevFloor;\n    bool isPrevFloorInitialized;\n\n    public void CheckLift(Lift lift)\n    {\n        Console.SetCursorPosition(lift.Stairway * 20, 13);\n        if (lift.Floor == prevFloor &amp;&amp; isPrevFloorInitialized)\n        {\n            Console.Write($\"LiftMonitor: stuck!\");\n        }\n        else\n            Console.Write($\"LiftMonitor: OK    \");\n\n        prevFloor = lift.Floor;\n        isPrevFloorInitialized = true;\n    }\n}\n</code></pre> <p>Vegy\u00fck fel a fenti oszt\u00e1lyt!</p> <p> Ett\u0151l a pillanatt\u00f3l feltessz\u00fck, hogy a fenti oszt\u00e1lyt egy k\u00f6nyvt\u00e1r form\u00e1j\u00e1ban kaptuk meg, \u00edgy forr\u00e1sk\u00f3dja nem m\u00f3dos\u00edthat\u00f3!</p> <p>Illessz\u00fck be az Adapter minta seg\u00edts\u00e9g\u00e9vel a fenti oszt\u00e1lyt a megold\u00e1sunkba:</p> <ul> <li>A <code>LiftMonitor</code> oszt\u00e1ly nem m\u00f3dos\u00edthat\u00f3!</li> <li> Kulcsfontoss\u00e1g\u00fa, hogy a beilleszt\u00e9se sor\u00e1n NE kelljen a <code>Lift</code> oszt\u00e1lyt m\u00f3dos\u00edtani (az Observer mint\u00e1nak k\u00f6sz\u00f6nhet\u0151en). Tipp: a <code>Lift</code> akkor is kell \u00e9rtes\u00edtse a megfigyel\u0151it, ha beragad\u00e1s miatt nem v\u00e1ltott szintet, m\u00e1sk\u00fcl\u00f6nben a <code>LiftMonitor</code> nem tudja detekt\u00e1lni a beragad\u00e1st.</li> <li><code>LiftSystemModel</code> konstruktor\u00e1ban mindk\u00e9t lifthez vegy\u00fcnk fel egy-egy monitoroz\u00e1st megval\u00f3s\u00edt\u00f3 objektumot.</li> <li>Csak Object Adapter alap\u00fa megold\u00e1s fogadhat\u00f3 el (Class Adapter nem).</li> </ul> <p>A megold\u00e1s m\u0171k\u00f6d\u00e9s\u00e9nek illusztr\u00e1l\u00e1sa:</p> <p></p>"},{"location":"hazi/imsc-liftsystem/#4-feladat-lift-leptetese-a-chain-of-responsibility-minta-segitsegevel","title":"4. feladat - Lift l\u00e9ptet\u00e9se a Chain of Responsibility minta seg\u00edts\u00e9g\u00e9vel","text":"<p>Jelen megold\u00e1sban a lift l\u00e9ptet\u00e9s\u00e9nek megval\u00f3s\u00edt\u00e1sa be van \u00e9getve a <code>Lift</code> oszt\u00e1ly <code>Step</code> m\u0171velet\u00e9be. A feladat a lift l\u00e9ptet\u00e9s\u00e9nek rugalmasabb\u00e1 t\u00e9tele. A k\u00f6vetkez\u0151ket kell t\u00e1mogatni:</p> <ul> <li>A m\u00e1r megl\u00e9v\u0151, v\u00e9letlenszer\u0171 elakad\u00e1s.</li> <li>V\u00e9szle\u00e1ll\u00e1s m\u00f3d. Amikor a liftre bekapcsolj\u00e1k a v\u00e9szle\u00e1ll\u00e1s m\u00f3dot, a <code>Step</code> m\u0171velet nem l\u00e9ptetheti a liftet semmilyen ir\u00e1nyba (eg\u00e9szen a v\u00e9szle\u00e1ll\u00e1s m\u00f3d deaktiv\u00e1l\u00e1s\u00e1ig).</li> <li>Legyen lehet\u0151s\u00e9g a l\u00e9ptet\u00e9s m\u0171velet viselked\u00e9s\u00e9nek k\u00e9nyelmes konfigur\u00e1l\u00e1s\u00e1ra, tov\u00e1bbi viselked\u00e9sek bevezet\u00e9s\u00e9re \u00e9s a megl\u00e9v\u0151/\u00fajonnan bevezetett viselked\u00e9sek tetsz\u0151leges kombin\u00e1l\u00e1s\u00e1ra an\u00e9lk\u00fcl, hogy a <code>Step</code> m\u0171velet k\u00f3dj\u00e1t m\u00f3dos\u00edtani kellene!</li> </ul> <p>A megold\u00e1shoz a Chain of Responsibility tervez\u00e9si mint\u00e1t kell alkalmazni. A minta nem szerepel el\u0151ad\u00e1son, de az online forr\u00e1sok alapj\u00e1n k\u00f6nnyen megismerhet\u0151. </p> Megold\u00e1s alapelve - kis seg\u00edts\u00e9g <p>H\u00e1rom konkr\u00e9t Handler oszt\u00e1lyt c\u00e9lszer\u0171 bevezetni \u00e9s a <code>Lift</code> oszt\u00e1ly konstruktor\u00e1ban megfelel\u0151 sorrendben \"\u00f6sszef\u0171zni\", a <code>Step</code> m\u0171veletben pedig ezt haszn\u00e1lni.</p> Megold\u00e1s alapelve - nagyobb seg\u00edts\u00e9g <p>A h\u00e1rom Handler oszt\u00e1ly: egy az alap\u00e9rtelmezett l\u00e9ptet\u00e9snek, egy a v\u00e9letlenszer\u0171 elakad\u00e1snak, egy a v\u00e9szle\u00e1ll\u00e1snak. Ez ut\u00f3bbiba kell egy property, mely enged\u00e9lyezi az emergency \u00fczemm\u00f3dot, \u00e9s ezt a property-t a <code>Lift</code> oszt\u00e1lyban bevezetett m\u00e1sik propertyn kereszt\u00fcl el\u00e9rhet\u0151v\u00e9 kell tenni a k\u00fclvil\u00e1g sz\u00e1m\u00e1ra.</p>"},{"location":"hazi/imsc-mvvm-receptek/","title":"5b. HF - MVVM mint\u00e1ra \u00e9p\u00fcl\u0151 alkalmaz\u00e1sok (opcion\u00e1lis)","text":""},{"location":"hazi/imsc-mvvm-receptek/#bevezetes","title":"Bevezet\u00e9s","text":"<p>A h\u00e1zi feladatban a laboron elkezdett recept alkalmaz\u00e1st fogjuk tov\u00e1bb b\u0151v\u00edteni az MVVM mint\u00e1t haszn\u00e1lva.</p> <p>A megval\u00f3s\u00edt\u00e1s\u00e9rt 3 IMSc pont szerezhet\u0151.</p> <p>Az \u00f6n\u00e1ll\u00f3 feladat az MVVM el\u0151ad\u00e1sokon elhangzottakra \u00e9p\u00edt. A feladatok gyakorlati h\u00e1tter\u00e9\u00fcl a 5. labor \u2013 MVVM laborgyakorlat szolg\u00e1l.</p> <p>A fentiekre \u00e9p\u00edtve, jelen \u00f6n\u00e1ll\u00f3 gyakorlat feladatai a feladatle\u00edr\u00e1st k\u00f6vet\u0151 r\u00f6videbb ir\u00e1nymutat\u00e1s seg\u00edts\u00e9g\u00e9vel (n\u00e9ha alap\u00e9rtelmezetten \u00f6sszecsukva) \u00f6n\u00e1ll\u00f3an elv\u00e9gezhet\u0151k.</p> <p>Az \u00f6n\u00e1ll\u00f3 gyakorlat c\u00e9lja:</p> <ul> <li>MVVM minta haszn\u00e1lat\u00e1nak gyakorl\u00e1sa</li> <li>Adatok megjelen\u00edt\u00e9se \u00e9s interakci\u00f3k kezel\u00e9se a fel\u00fcleten adatk\u00f6t\u00e9ssel</li> <li>Dependency Injection minta alkalmaz\u00e1sa</li> <li>Adatok kezel\u00e9se a szolg\u00e1ltat\u00e1s r\u00e9tegben HTTP k\u00e9r\u00e9seken illetve egy lok\u00e1lis adatt\u00e1r seg\u00edts\u00e9g\u00e9vel</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s.</p> <p>Fejleszt\u0151k\u00f6rnyezet WinUI3 fejleszt\u00e9shez</p> <p>A kor\u00e1bbi laborokhoz hasonl\u00f3an plusz komponensek telep\u00edt\u00e9se sz\u00fcks\u00e9ges. A fenti oldal eml\u00edti, hogy sz\u00fcks\u00e9g van a \".NET desktop development\" Visual Studio Workload telep\u00edt\u00e9s\u00e9re, valamint ugyanitt az oldal alj\u00e1n van egy \"WinUI t\u00e1mogat\u00e1s\" fejezet, az itt megadott l\u00e9p\u00e9seket is mindenk\u00e9ppen meg kell tenni!</p>"},{"location":"hazi/imsc-mvvm-receptek/#a-beadas-menete","title":"A bead\u00e1s menete","text":"<ul> <li>Az alapfolyamat megegyezik a kor\u00e1bbiakkal. GitHub Classroom seg\u00edts\u00e9g\u00e9vel hozz l\u00e9tre magadnak egy repository-t. A megh\u00edv\u00f3 URL-t Moodle-ben tal\u00e1lod (a t\u00e1rgy nyit\u00f3oldal\u00e1n a \"GitHub classroom hivatkoz\u00e1sok a h\u00e1zi feladatokhoz\" hivatkoz\u00e1sra kattintva megjelen\u0151 oldalon l\u00e1that\u00f3). Fontos, hogy a megfelel\u0151, ezen h\u00e1zi feladathoz tartoz\u00f3 megh\u00edv\u00f3 URL-t haszn\u00e1ld (minden h\u00e1zi feladathoz m\u00e1s URL tartozik). Kl\u00f3nozd le az \u00edgy elk\u00e9sz\u00fclt repository-t. Ez tartalmazni fogja a megold\u00e1s elv\u00e1rt szerkezet\u00e9t. A feladatok elk\u00e9sz\u00edt\u00e9se ut\u00e1n commit-old \u00e9s push-old a megold\u00e1sod.</li> <li>A kikl\u00f3nozott f\u00e1jlok k\u00f6z\u00f6tt a <code>MvvmLab.sln</code>-t megnyitva kell dolgozni.</li> <li> A feladatok k\u00e9rik, hogy k\u00e9sz\u00edts k\u00e9perny\u0151k\u00e9pet a megold\u00e1s egy-egy r\u00e9sz\u00e9r\u0151l, mert ezzel bizony\u00edtod, hogy a megold\u00e1sod saj\u00e1t magad k\u00e9sz\u00edtetted. A k\u00e9perny\u0151k\u00e9pek elv\u00e1rt tartalm\u00e1t a feladat minden esetben pontosan megnevezi. A k\u00e9perny\u0151k\u00e9peket a megold\u00e1s r\u00e9szek\u00e9nt kell beadni, a repository-d gy\u00f6k\u00e9rmapp\u00e1j\u00e1ba tedd (a neptun.txt mell\u00e9). A k\u00e9perny\u0151k\u00e9pek \u00edgy felker\u00fclnek GitHub-ra a git repository tartalm\u00e1val egy\u00fctt. Mivel a repository priv\u00e1t, azt az oktat\u00f3kon k\u00edv\u00fcl m\u00e1s nem l\u00e1tja. Amennyiben olyan tartalom ker\u00fcl a k\u00e9perny\u0151k\u00e9pre, amit nem szeretn\u00e9l felt\u00f6lteni, kitakarhatod a k\u00e9pr\u0151l.</li> <li> Ehhez a feladathoz \u00e9rdemi el\u0151ellen\u0151rz\u0151 nem tartozik: minden push ut\u00e1n lefut ugyan, de csak a neptun.txt kit\u00f6lt\u00f6tts\u00e9g\u00e9t ellen\u0151rzi. Az \u00e9rdemi ellen\u0151rz\u00e9st a hat\u00e1rid\u0151 lej\u00e1rta ut\u00e1n a laborvezet\u0151k teszik majd meg.</li> </ul>"},{"location":"hazi/imsc-mvvm-receptek/#kikotesek","title":"Kik\u00f6t\u00e9sek","text":"<p> MVVM minta k\u00f6telez\u0151 alkalmaz\u00e1sa!   Jelen h\u00e1zi feladatban az MVVM mint\u00e1t gyakoroljuk, \u00edgy a feladatok megold\u00e1s\u00e1ban k\u00f6telez\u0151 az MVVM minta alkalmaz\u00e1sa. Az ett\u0151l val\u00f3 elt\u00e9r\u00e9s a feladatok \u00e9rt\u00e9kel\u00e9s\u00e9nek elutas\u00edt\u00e1s\u00e1t vonja maga ut\u00e1n.</p>"},{"location":"hazi/imsc-mvvm-receptek/#kiindulo-allapot","title":"Kiindul\u00f3 \u00e1llapot","text":"<p>A kiindul\u00f3 \u00e1llapot \u00e9p\u00edt az 5. labor v\u00e9g\u00e1llapot\u00e1ra, de ahhoz k\u00e9pest egy l\u00e9nyeges v\u00e1ltoztat\u00e1st tartalmaz.</p> <p>Az alkalmaz\u00e1s az indul\u00e1sa ut\u00e1n l\u00e9trehoz egy <code>ShellPage</code> t\u00edpus\u00fa oldalt, ami a projektben a <code>Views</code> mapp\u00e1ban tal\u00e1lhat\u00f3 meg. Ez egy <code>NavigationView</code>-t tartalmaz (aka. Hamburger men\u00fc), mely a navig\u00e1ci\u00f3t fogja eset\u00fcnkben kezelni. Tartalmazhat <code>NavigationViewItem</code>-eket, melyek a men\u00fcpontokat reprezent\u00e1lj\u00e1k, \u00e9s mindig el\u00e9rhet\u0151ek az alkalmaz\u00e1sban. A men\u00fcpontokra kattintva a <code>Frame</code>-en bel\u00fcl a megfelel\u0151 oldal jelenik meg a projektben tal\u00e1lhat\u00f3 seg\u00e9doszt\u00e1lyok seg\u00edts\u00e9g\u00e9vel, ami t\u00e1mogatja a kor\u00e1bbi oldalra t\u00f6rt\u00e9n\u0151 vissza navig\u00e1ci\u00f3t is.</p>"},{"location":"hazi/imsc-mvvm-receptek/#1-feladat-receptek-kedvenckent-kezelese","title":"1. Feladat - Receptek kedvenck\u00e9nt kezel\u00e9se","text":"<p>Feladatunk funkcion\u00e1lis k\u00f6vetelm\u00e9nyei a k\u00f6vetkez\u0151ek:</p> <ul> <li> <p>A recepteket kedvencek k\u00f6z\u00e9 lehessen menteni</p> <ul> <li>Jelenjen meg egy kit\u00f6ltetlen csillag ikonnal rendelkez\u0151 gomb a recept r\u00e9szletes oldalon (pl. bal oldali oszlop tetej\u00e9n), amelyre kattintva a receptet a kedvencek k\u00f6z\u00e9 menthetj\u00fck.</li> <li>A kedvenc kezel\u0151 gomb ikonja v\u00e1ltson tele csillagra, a sz\u00f6vege pedig \"Remove from Favorites\"-re, ha a recept kedvencnek lett jel\u00f6lve.</li> <li>A kor\u00e1bban kedvencnek jel\u00f6lt recept kivehet\u0151 a kedvencek k\u00f6z\u00fcl ugyanezen a gombon t\u00f6rt\u00e9n\u0151 kattint\u00e1ssal: ekkor a gomb ikonja \u00e1llapota vissza\u00e1ll \u00fcres csillagra, a sz\u00f6vege pedig \"Add to Favorites\"-re.</li> <li> <p>A kedvenc receptek list\u00e1j\u00e1t lok\u00e1lisan t\u00e1roljuk, az alkalmaz\u00e1s bez\u00e1r\u00e1s\u00e1val ne vesszenek el.</p> Add To FavoritesRemove From Favorites <p></p> <p></p> <p>A k\u00e9t gomb \u00e1llapot megjelen\u00edt\u00e9se</p> <p>A fenti \u00e1bra felett az \"Add To Favorites\" \u00e9s \"Remove From Favorites\"-en kattintva lehet v\u00e1ltani a k\u00e9t \u00e1llapotot megjelen\u00edt\u0151 k\u00e9pek k\u00f6z\u00f6tt.</p> </li> </ul> </li> <li> <p>A kedvencek list\u00e1j\u00e1t jelen\u00edts\u00fck meg egy k\u00fcl\u00f6n oldalon.</p> <ul> <li>A kedvencek list\u00e1t a hamburger men\u00fcb\u0151l lehessen el\u00e9rni</li> <li>A list\u00e1ban l\u00e9v\u0151 elemek kin\u00e9zete hasonl\u00f3 legyen a receptek list\u00e1j\u00e1ban l\u00e9v\u0151 elemekhez</li> <li>A lista ne legyen csoportos\u00edtva</li> <li> <p>A kedvencek list\u00e1j\u00e1nak elemei k\u00f6z\u00f6tt a recepteket kattintva megnyithatjuk a recept r\u00e9szletes oldal\u00e1t (pont \u00fagy, mint a Recipes oldalon)</p> <p></p> </li> </ul> </li> </ul>"},{"location":"hazi/imsc-mvvm-receptek/#11-kedvencek-kezelese-a-szolgaltatas-retegben","title":"1.1 Kedvencek kezel\u00e9se a szolg\u00e1ltat\u00e1s r\u00e9tegben","text":"<p>Bottom-up megval\u00f3s\u00edt\u00e1si sorrendben haladva k\u00e9sz\u00edts\u00fck el el\u0151sz\u00f6r a szolg\u00e1ltat\u00e1s r\u00e9tegben a kedvencek kezel\u00e9s\u00e9hez sz\u00fcks\u00e9ges funkci\u00f3kat.</p> <p>A kedvencnek megjel\u00f6l\u00e9st az online szolg\u00e1ltat\u00e1s nem t\u00e1mogatja. A megold\u00e1s alapelve \u00edgy a k\u00f6vetkez\u0151 lesz:</p> <ul> <li>Lok\u00e1lisan perzisztensen elt\u00e1roljuk a kedvencnek megjel\u00f6lt receptek azonos\u00edt\u00f3it (annak \u00e9rdek\u00e9ben, hogy a program \u00fajraindul\u00e1s\u00e1t k\u00f6vet\u0151en megmaradjon ez az inform\u00e1ci\u00f3).</li> <li>A kedvencnek megjel\u00f6lt receptek r\u00e9szletes adatait (c\u00edm, k\u00e9p) az online szolg\u00e1ltat\u00e1st\u00f3l k\u00e9rdezz\u00fck le (az azonos\u00edt\u00f3ik alapj\u00e1n).</li> </ul> <p>Lok\u00e1lis perzisztens adatt\u00e1rol\u00e1shoz a kiindul\u00f3 projektben el\u0151 van k\u00e9sz\u00edtve az <code>ILocalSettingsService</code> interf\u00e9sz (\u00e9s egy ezt megval\u00f3s\u00edt\u00f3 implement\u00e1ci\u00f3). Erre \u00e9p\u00edtve kulcs \u00e9rt\u00e9k p\u00e1rokat tudunk JSON soros\u00edtva t\u00e1rolni lok\u00e1lisan az alkalmaz\u00e1sban.</p> <pre><code>public interface ILocalSettingsService\n{\n    Task&lt;T&gt; ReadSettingAsync&lt;T&gt;(string key);\n    Task SaveSettingAsync&lt;T&gt;(string key, T value);\n}\n</code></pre> <p>Haszn\u00e1lata sor\u00e1n \u00e9rdemes odafigyelni arra, hogy a f\u00fcggv\u00e9nyek generikusak, \u00edgy a t\u00edpusokat explicit meg kell(het) adni a h\u00edv\u00e1s sor\u00e1n.</p> <p>A fenti <code>ILocalSettingsService</code> seg\u00edts\u00e9g\u00e9vel egy adott kulcs alatt fogjuk a kedvenc receptek azonos\u00edt\u00f3inak list\u00e1j\u00e1t elt\u00e1rolni.</p> <p>Szint\u00e9n fontos, hogy a f\u00fcggv\u00e9nyek <code>Task</code>-kal t\u00e9rnek vissza, teh\u00e1t aszinkronok, \u00edgy <code>await</code> kulcssz\u00f3val kell h\u00edvni \u0151ket, \u00e9s a h\u00edv\u00f3 f\u00fcggv\u00e9nynek is aszinkronnak kell lennie (a r\u00e9szletesebb szab\u00e1lyhalmaz a kapcsol\u00f3d\u00f3 \"5. MVVM\" labor le\u00edr\u00e1s\u00e1ban tal\u00e1lhat\u00f3).</p> <p>A kedvencek kezel\u00e9se a labor sor\u00e1n bevezetett <code>IRecipeService</code> interf\u00e9sz \u00e9s az ezt megval\u00f3s\u00edt\u00f3 <code>RecipeService</code> oszt\u00e1ly feladata legyen. </p> <p>Els\u0151 l\u00e9p\u00e9sben azt kell megoldani, hogy a <code>RecipeService</code> sz\u00e1m\u00e1ra rendelkez\u00e9sre \u00e1lljon egy <code>ILocalSettingsService</code> interf\u00e9szt megval\u00f3s\u00edt\u00f3 objektum, melyet fel tud haszn\u00e1lni  megval\u00f3s\u00edt\u00e1s\u00e1ban a kedvenc receptazonos\u00edt\u00f3k elt\u00e1rol\u00e1s\u00e1ra \u00e9s lek\u00e9rdez\u00e9s\u00e9re. A c\u00e9lunk az, hogy <code>RecipeService</code>-ben <code>ILocalSettingsService</code> interf\u00e9szk\u00e9nt kapjuk meg \u00e9s t\u00e1roljuk ezt az implement\u00e1ci\u00f3s objektumot, semmif\u00e9le f\u00fcgg\u00e9st nem szeretn\u00e9nk itt bevezetni a konkr\u00e9t implement\u00e1ci\u00f3t\u00f3l. Ezt a laboron m\u00e1r alkalmazott DI kont\u00e9ner seg\u00edts\u00e9g\u00e9vel val\u00f3s\u00edtsuk meg.</p> <p>Tip</p> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n a <code>RecipeService</code>-ben ahhoz hasonl\u00f3an kell kezelj\u00fck a <code>ILocalSettingsService</code>-t, mint a ahogy a labor sor\u00e1n a <code>MainPageViewModel</code>-ben kezelt\u00fck a <code>IRecipeService</code>-t.</p> <p>Miut\u00e1n a fenti el\u0151k\u00e9sz\u00edt\u00e9ssel elk\u00e9sz\u00fclt\u00e9l, val\u00f3s\u00edtsd meg a sz\u00fcks\u00e9ges funkci\u00f3kat a <code>RecipeService</code> oszt\u00e1lyban! Az al\u00e1bbiakban ehhez n\u00e9mi ir\u00e1nymutat\u00e1st adunk.</p> RecipeService v\u00e1za <p>A <code>RecipeService</code>-nek (\u00e9s interf\u00e9sznek) a k\u00f6vetkez\u0151 \u00faj funkci\u00f3kkal kell rendelkeznie:</p> <ol> <li> <p>Recept kedvenc \u00e1llapot\u00e1nak m\u00f3dos\u00edt\u00e1sa id (int) alapj\u00e1n az \u00faj \u00e1llapottal (bool). (Recept r\u00e9szletes oldalon gombra kattint\u00e1s sor\u00e1n haszn\u00e1ljuk.)</p> <ol> <li>K\u00e9rdezz\u00fck le az <code>ILocalSettingsService</code>-b\u0151l kedvencek azonos\u00edt\u00f3inak list\u00e1j\u00e1t. </li> <li>Lista m\u00f3dos\u00edt\u00e1sa a kapott id \u00e9s \u00faj kedvenc \u00e1llapot alapj\u00e1n.<ol> <li>Kedvencnek jel\u00f6l\u00e9s eset\u00e9n, berakjuk, egy\u00e9bk\u00e9nt t\u00f6r\u00f6lj\u00fck.</li> <li>Gondoljunk arra is, ha a lista m\u00e1r tartalmazza az adott id-t, akkor ne adjuk hozz\u00e1 \u00fajra. (Lista helyett egy\u00e9bk\u00e9nt lehet haszn\u00e1lni egy speci\u00e1lis halmaz tulajdons\u00e1g\u00fa kollekci\u00f3t is, a <code>HashSet&lt;T&gt;</code>-et, mely egy elemet csak egyszer tartalmaz.)</li> </ol> </li> </ol> </li> <li> <p>Kedvenc receptek lek\u00e9rdez\u00e9se. (Kedvencek oldalon list\u00e1z\u00e1s sor\u00e1n haszn\u00e1ljuk.)</p> <ol> <li>K\u00e9rdezz\u00fck le az <code>ILocalSettingsService</code>-b\u0151l a kedvenc receptek azonos\u00edt\u00f3inak list\u00e1j\u00e1t.</li> <li>A kapott id-k alapj\u00e1n egyes\u00e9vel k\u00e9rj\u00fck le a recepteket a REST API-t\u00f3l, a <code>GET /api/Recipes/{id}/Header</code> v\u00e9gponton kereszt\u00fcl. Ez a laborhoz k\u00e9pest egy \u00faj v\u00e9gpont, \u00e9s az adott azonos\u00edt\u00f3j\u00fa recept <code>RecipeHeader</code>-be soros\u00edtott adataival t\u00e9r vissza. Ehhez a v\u00e9gponthoz \u00e9rdemes \u00faj seg\u00e9df\u00fcggv\u00e9nyt is k\u00e9sz\u00edteni. Dolgozhatunk a laboron m\u00e1r bevezetett <code>RecipeService</code>-ben lev\u0151 <code>HttpClient</code>-et haszn\u00e1l\u00f3 m\u0171veletek \"mint\u00e1j\u00e1ra\".</li> <li>A lek\u00e9rdezett <code>RecipeHeader</code> objektumokb\u00f3l \u00f6ssze\u00e1ll\u00edtott list\u00e1val t\u00e9rj\u00fcnk vissza.</li> </ol> </li> <li> <p>Recept kedvenc \u00e1llapot\u00e1nak lek\u00e9rdez\u00e9se id alapj\u00e1n. (Recept r\u00e9szletes oldal bet\u00f6lt\u00e9sekor a gomb \u00e1llapot\u00e1nak be\u00e1ll\u00edt\u00e1s\u00e1hoz haszn\u00e1ljuk.)</p> <ol> <li>Igaz hamis \u00e9rt\u00e9kkel t\u00e9rj\u00fcnk vissza, att\u00f3l f\u00fcgg\u0151en, hogy az adott azonos\u00edt\u00f3 szerepel-e a kedvenc receptek list\u00e1j\u00e1ban.</li> </ol> </li> </ol> <p>Els\u0151 h\u00edv\u00e1s</p> <p>Gondolni kell arra is, ha m\u00e9g most h\u00edvjuk meg el\u0151sz\u00f6r a lek\u00e9rdez\u0151 f\u00fcggv\u00e9nyt, \u00e9s nincs m\u00e9g mentett kedvenc recept azonos\u00edt\u00f3 list\u00e1nk (<code>null</code>-lal t\u00e9r vissza az adott kulcs\u00fa elem lek\u00e9rdez\u00e9sekor az <code>ILocalSettingsService.ReadSettingAsync</code>).</p>"},{"location":"hazi/imsc-mvvm-receptek/#12-kedvencnek-jeloles-a-reszletes-oldalon","title":"1.2 Kedvencnek jel\u00f6l\u00e9s a r\u00e9szletes oldalon","text":"<p>A recept r\u00e9szletes oldalon (a <code>RecipeDetailPage</code>-en) meg kell jelen\u00edteni egy gombot, melynek k\u00e9t \u00e1llapota van:</p> <ol> <li>Ha a recept nincs kedvencnek jel\u00f6lve, akkor egy \u00fcres csillag ikon jelenik meg a gombon, a gomb felirata pedig legyen \"Add to Favorites\".</li> <li>Ha a recept kedvencnek van jel\u00f6lve, akkor egy kit\u00f6lt\u00f6tt csillag ikon jelenik meg a gombon, a gomb felirata pedig legyen \"Remove from Favorites\".</li> </ol> Add To FavoritesRemove From Favorites <p></p> <p></p> <p>Ezt az igaz-hamis \u00e1llapotot \u00e9s m\u00f3dos\u00edt\u00f3 m\u0171veletet c\u00e9lszer\u0171 a <code>RecipeDetailPageViewModel</code>-ban t\u00e1rolni/bevezetni (mivel a ViewModelnek defin\u00edci\u00f3 szerint ez a feladata), majd adatk\u00f6t\u00e9ssel k\u00f6tni az \u00e1llapotot gomb kin\u00e9zet\u00e9hez, illetve a m\u0171veletet commandj\u00e1hoz. Mindenk\u00e9ppen az MVVM mint\u00e1t k\u00f6vetve dolgozzunk!</p> RecipeDetailPageViewModel m\u00f3dos\u00edt\u00e1sa <p>A <code>RecipeDetailViewModel</code>-t m\u00f3dos\u00edtani sz\u00fcks\u00e9ges a k\u00f6vetkez\u0151kkel:</p> <ol> <li>Kedvenc \u00e1llapot t\u00e1rol\u00e1sa<ol> <li>Az \u00e1llapotot egy <code>bool</code> t\u00edpus\u00fa property-ben t\u00e1roljuk (mindenk\u00e9ppen \u00e9rdemes az  <code>[ObservableProperty]</code> attrib\u00fatumot haszn\u00e1lni, m\u0171k\u00f6d\u00e9s\u00e9nek \u00e9s jelent\u0151s\u00e9g\u00e9nek \u00e1tism\u00e9tl\u00e9s\u00e9vel).</li> <li>Az \u00e1llapotot az <code>IRecipeService</code>-b\u0151l lek\u00e9rdezve inicializ\u00e1ljuk az oldalra val\u00f3 navig\u00e1l\u00e1skor.</li> </ol> </li> <li> <ol> <li>Elmenti az \u00faj kedvenc \u00e1llapotot az <code>IRecipeService</code> seg\u00edts\u00e9g\u00e9vel.</li> <li>Gondoskodik a ViewModel oszt\u00e1lyunkban t\u00e1rolt <code>bool</code> kedvenc \u00e1llapot tulajdons\u00e1g karbantart\u00e1s\u00e1r\u00f3l.</li> </ol> <p>\u00daj command f\u00fcggv\u00e9ny k\u00e9sz\u00edt\u00e9se, amely </p> Tipp a megold\u00e1shoz <p>A megold\u00e1s elve hasonl\u00edt a SendComment parancsf\u00fcggv\u00e9nyhez, de itt a CanExecute-tal nem kell foglalkozzunk, hiszen az \u00faj commandunk mindig futtathat\u00f3.</p> </li> </ol> <p>\u00c1llapot t\u00e1rol\u00e1sa a modellben</p> <p>A kedvenc \u00e1llapotot a <code>RecipeHeader</code> modellben is t\u00e1rolhatn\u00e1nk, viszont az k\u00e9t m\u00e1sik probl\u00e9m\u00e1t is gener\u00e1lna: a modellnek kell megval\u00f3s\u00edtania az <code>INotifyPropertyChanged</code> interf\u00e9szt, hogy az \u00e1llapot v\u00e1ltoz\u00e1s\u00e1t jelezni tudja.  Ezen fel\u00fcl az \u00faj property \u00e9rt\u00e9k\u00e9t valamelyik m\u00e1sik r\u00e9tegben (ViewModel vagy Service) kellene kit\u00f6lteni, mivel ez az inf\u00f3 csak lok\u00e1lisan \u00e9rhet\u0151 el, a <code>RecipeHeader</code>pedig alapvet\u0151en most csak egy DTO (Data Transfer Object) a modell r\u00e9tegben.</p> RecipeDetailPage (vagyis a View) m\u00f3dos\u00edt\u00e1sa <p>A <code>RecipeDetailPage</code>-en a k\u00f6vetkez\u0151ket kell m\u00f3dos\u00edtani:</p> <ol> <li>\u00daj gomb hozz\u00e1ad\u00e1sa az oldal tetej\u00e9re, tartalma legyen egy <code>SymbolIcon</code> \u00e9s egy <code>TextBlock</code> egym\u00e1s mellett.<ol> <li>A <code>SymbolIcon</code>-nak a <code>Symbol</code> tulajdons\u00e1g\u00e1hoz haszn\u00e1ljuk a <code>Symbol.SolidStar</code> \u00e9s <code>Symbol.OutlineStar</code> enum \u00e9rt\u00e9keket a csillag ikonokhoz.</li> </ol> </li> <li>A gomb commandj\u00e1t adatk\u00f6tni kell a ViewModel-ben tal\u00e1lhat\u00f3 command-hoz.</li> </ol> <p>A ViewModel-ben t\u00e1rolt <code>bool</code> \u00e9rt\u00e9ket valamilyen m\u00f3don <code>Symbol</code> enumra (gomb ikonja) \u00e9s <code>string</code>-re (gomb aktu\u00e1lis sz\u00f6vege) kell konvert\u00e1lni, hogy a fel\u00fcleten a gomb megjelen\u00e9se mindk\u00e9t \u00e1llapotban a megfelel\u0151 legyen. Erre t\u00f6bb megold\u00e1s is lehets\u00e9ges:</p> <ul> <li><code>x:Bind</code> haszn\u00e1lata, ahol nem property-t k\u00f6t\u00fcnk, hanem egy a xaml.cs-ben l\u00e9v\u0151 seg\u00e9df\u00fcggv\u00e9nyt, mely a konverzi\u00f3t elv\u00e9gzi. Vagyis property k\u00f6t\u00e9s helyett f\u00fcggv\u00e9ny/funkci\u00f3 k\u00f6t\u00e9st haszn\u00e1lunk. El\u0151ad\u00e1sanyagban a \"Property k\u00f6t\u00e9se funkci\u00f3khoz\"-ra \u00e9rdemes r\u00e1keresni, illetve a 3. h\u00e1zi feladatban a \"f\u00fcggv\u00e9ny k\u00f6t\u00e9s p\u00e9lda\"-ra.</li> <li>Az <code>IValueConverter</code> interf\u00e9sz implement\u00e1l\u00e1sa \u00e9s haszn\u00e1lata az adatk\u00f6t\u00e9s sor\u00e1n.</li> <li>A <code>RecipeDetailPageViewModel</code>-ben t\u00e1roljuk a n\u00e9zethez sz\u00fcks\u00e9ges adatokat \u00faj tuljadons\u00e1gokat bevezetve (a tulajdons\u00e1gok t\u00edpusa a n\u00e9zet sz\u00e1m\u00e1ra sz\u00fcks\u00e9ges <code>Symbol</code> \u00e9s <code>string</code>), \u00e9s ezekhez t\u00f6rt\u00e9nik az adatk\u00f6t\u00e9s.<ul> <li>Tal\u00e1n ez a legegyszer\u0171bb megold\u00e1s, ha nem szeretn\u00e9nk k\u00fcl\u00f6n konvertert \u00edrni vagy az adatk\u00f6t\u00e9seket \"bonyol\u00edtani\", viszont a legkev\u00e9sb\u00e9 is lesz karbantarthat\u00f3, mivel a ViewModel view specifikus adatokat is tartalmaz, melyeket k\u00fcl\u00f6n karban is kell tartani ha a bool property megv\u00e1ltozik.</li> </ul> </li> </ul> <p>1.2. feladat BEADAND\u00d3</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol a teend\u0151 r\u00e9szletes oldalon megjelenik a kedvencnek jel\u00f6l\u00e9s gomb! (<code>f1.2.1.png</code>)</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol a teend\u0151 r\u00e9szletes oldalon egy m\u00e1r kedvencnek jel\u00f6lt recepthez a kedvencekb\u0151l elt\u00e1vol\u00edt\u00e1s gomb jelenik meg! (<code>f1.2.2.png</code>)</p>"},{"location":"hazi/imsc-mvvm-receptek/#13-kedvencek-oldal-navigacio","title":"1.3 Kedvencek oldal navig\u00e1ci\u00f3","text":"<p>A kedvencek oldalra navig\u00e1l\u00e1shoz t\u00f6bb l\u00e9p\u00e9sre is sz\u00fcks\u00e9g\u00fcnk lesz, melyek a kiindul\u00f3 projekt saj\u00e1toss\u00e1gaib\u00f3l ad\u00f3d\u00f3dnak, de ezeket itt r\u00e9szletesen \u00e1tvessz\u00fck (a navig\u00e1ci\u00f3 megval\u00f3s\u00edt\u00e1sa nem r\u00e9sze a tanagyagnak).</p> <ol> <li> <p>Hozzuk l\u00e9tre a <code>FavoritesPage</code>-et a <code>Views</code> mapp\u00e1ban (Add/New Item/Blank Page (WinUI3))</p> <p>Ford\u00edt\u00e1si hib\u00e1k</p> <p>Ha valami\u00e9rt egzotikus hib\u00e1kat kapn\u00e1nk az \u00faj oldal felv\u00e9tele ut\u00e1n t\u00f6r\u00f6lj\u00fck ki a projekt f\u00e1jlb\u00f3l az al\u00e1bbi sorokat:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;None Remove=\"Views\\FavoritesPage.xaml\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <pre><code>&lt;Page Update=\"Views\\FavoritesPage.xaml\"&gt;\n    &lt;Generator&gt;MSBuild:Compile&lt;/Generator&gt;\n&lt;/Page&gt;\n</code></pre> </li> <li> <p>Hozzuk l\u00e9tre a <code>FavoritesPageViewModel</code> oszt\u00e1lyt a <code>ViewModels</code> mapp\u00e1ban</p> <ol> <li>Gondoskodjunk arr\u00f3l, hogy a megfelel\u0151 oszt\u00e1lyb\u00f3l sz\u00e1rmazzon!</li> <li>Val\u00f3s\u00edtsa meg az <code>INavigationAware</code> interf\u00e9szt a navig\u00e1ci\u00f3 t\u00e1mogat\u00e1s\u00e1hoz (egyel\u0151re \u00fcres f\u00fcggv\u00e9nyt\u00f6rzzsel).</li> </ol> </li> <li> <p>Regisztr\u00e1ljuk be az <code>App.xaml.cs</code>-ben a Dependency Injection kont\u00e9nerbe az \u00faj n\u00e9zetet \u00e9s az \u00faj ViewModelt:</p> <pre><code>services.AddTransient&lt;FavoritesPage&gt;();\nservices.AddTransient&lt;FavoritesPageViewModel&gt;();\n</code></pre> </li> <li> <p>A <code>Pages</code> oszt\u00e1lyban (<code>PageService.cs</code>) vegy\u00fcnk fel egy \u00faj kulcsot a kedvencek oldalhoz, \u00e9s konfigur\u00e1ljuk a navig\u00e1ci\u00f3t ehhez a kulcshoz:</p> Pages<pre><code>public static string Favorites { get; } = \"Favorites\";\n</code></pre> PageService konstruktor<pre><code>Configure&lt;FavoritesPageViewModel, FavoritesPage&gt;(Pages.Favorites);\n</code></pre> </li> <li> <p>A <code>ShellPage</code>-en a <code>NavigationView</code>-hoz adjunk hozz\u00e1 egy \u00faj <code>NavigationViewItem</code>-et a kedvencek oldalhoz:</p> <pre><code>&lt;NavigationViewItem helpers:NavigationHelper.NavigateTo=\"Favorites\" Content=\"Favorites\"&gt;\n    &lt;NavigationViewItem.Icon&gt;\n        &lt;SymbolIcon Symbol=\"SolidStar\" /&gt;\n    &lt;/NavigationViewItem.Icon&gt;\n&lt;/NavigationViewItem&gt;\n</code></pre> <p>Navig\u00e1ci\u00f3</p> <p>A navig\u00e1ci\u00f3 a <code>helpers:NavigationHelper.NavigateTo=\"Favorites\"</code> attached property seg\u00edts\u00e9g\u00e9vel t\u00f6rt\u00e9nik, ahol azt a kulcsot adhatjuk meg, amilyen kulcs\u00fa oldalra navig\u00e1lni szeretn\u00e9nk.</p> </li> </ol>"},{"location":"hazi/imsc-mvvm-receptek/#14-kedvencek-oldal-logika","title":"1.4 Kedvencek oldal logika","text":"<p>A kedvencek oldal (<code>FavoritesPage</code>) a <code>MainPage</code> mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n el, \u00e9s a receptek list\u00e1j\u00e1t jelen\u00edtse meg, csoportos\u00edt\u00e1s n\u00e9lk\u00fcl (!) egy <code>AdaptiveGridView</code> vez\u00e9rl\u0151ben.</p> <p></p> <p>A ViewModel (<code>FavoritesPageViewModel</code>) a <code>MainPageViewModel</code> mint\u00e1j\u00e1ra k\u00e9sz\u00fclj\u00f6n el, \u00e9s a navig\u00e1ci\u00f3 sor\u00e1n k\u00e9rdezze le az <code>IRecipeService</code>-t\u0151l a kedvenc receptek list\u00e1j\u00e1t (<code>GetFavoriteRecipesAsync</code>) \u00e9s t\u00e1rolja el egy megfelel\u0151, pl. gener\u00e1lt tulajdons\u00e1gba. Mivel itt nem csoportos\u00edtjuk a recepteket, <code>RecipeGroup</code>-ok helyett <code>RecipeHeader</code>-ekkel kell dolgozni.</p> <p>1.4. feladat BEADAND\u00d3</p> <p>Illessz be egy k\u00e9perny\u0151k\u00e9pet az alkalmaz\u00e1sr\u00f3l, ahol kedvencek lista l\u00e1that\u00f3! (<code>f1.4.png</code>)</p>"},{"location":"hazi/imsc-mvvm-receptek/#beadas","title":"Bead\u00e1s","text":"<p>Ellen\u0151rz\u0151lista ism\u00e9tl\u00e9sk\u00e9ppen:</p> <ul> <li>A repository gy\u00f6k\u00e9rmapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 neptun.txt f\u00e1jlba \u00edrd bele a Neptun k\u00f3dod, csupa nagybet\u0171vel. A f\u00e1jlban csak ez a hat karakter legyen, semmi m\u00e1s.</li> <li>A GitHub-r\u00f3l let\u00f6lt\u00f6tt kiindul\u00f3 solutionben/projektekben kell dolgozni, nem \u00fajonnan l\u00e9trehozottban.</li> <li>Am\u00edg nem vagy rutinos a Visual Studio Git szolg\u00e1ltat\u00e1sainak haszn\u00e1lat\u00e1ban, a push-t k\u00f6vet\u0151en (legk\u00e9s\u0151bb akkor, amikor a h\u00e1zi feladatot beadottnak tekintj\u00fck) c\u00e9lszer\u0171 ellen\u0151rizni a GitHub webes fel\u00fclet\u00e9n a repository-ban a f\u00e1jlokra val\u00f3 r\u00e1pillant\u00e1ssal, hogy val\u00f3ban minden v\u00e1ltoztat\u00e1st felt\u00f6lt\u00f6tt\u00e9l-e.</li> <li>A GitHub fel\u00fclet\u00e9n ellen\u0151rizd a push-t k\u00f6vet\u0151en, hogy a GitHub Action alap\u00fa el\u0151ellen\u0151rz\u0151 hiba n\u00e9lk\u00fcl lefutott-e.</li> <li>L\u00e9nyeges, hogy a feladatok csak akkor ker\u00fclnek elfogad\u00e1sra, ha teljesen elk\u00e9sz\u00fclnek, \u00e9s minden tekintetben teljes\u00edtik a k\u00f6vetelm\u00e9nyeket. Nem fordul\u00f3 k\u00f3d, illetve r\u00e9szleges megold\u00e1s elfogad\u00e1s\u00e1ban nem \u00e9rdemes b\u00edzni.</li> <li>Term\u00e9szetesen saj\u00e1t munk\u00e1t kell beadni (hiszen \u00e9rt\u00e9kel\u00e9sre ker\u00fcl).</li> </ul>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/","title":"5. HF - Anwendungen auf der Grundlage des MVVM-Modells","text":""},{"location":"hazi/imsc-mvvm-receptek/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Als Hausaufgabe werden wir die in der \u00dcbung begonnene Rezeptanwendung mit Hilfe der MVVM-Vorlage erweitern.</p> <p>Die eigenst\u00e4ndige \u00dcbung baut auf dem auf, was in den MVVM-Vorlesungen gesagt wurde. Den praktischen Hintergrund f\u00fcr die \u00dcbungen liefert die Labor\u00fcbung 5 - MVVM-Labor\u00fcbung. </p> <p>Darauf aufbauend k\u00f6nnen die Aufgaben dieser Selbst\u00fcbung mit Hilfe der k\u00fcrzeren Leitf\u00e4den, die auf die Aufgabenbeschreibung folgen (manchmal standardm\u00e4\u00dfig eingeklappt), selbst\u00e4ndig bearbeitet werden.</p> <p>Das Ziel der unabh\u00e4ngigen \u00dcbung:</p> <ul> <li>\u00dcben mit dem MVVM-Beispiel</li> <li>Anzeige von Daten und Verwaltung von Interaktionen auf der Schnittstelle mit Datenbindung</li> <li>Anwendung des Dependency Injection-Musters</li> <li>Datenverwaltung auf der Dienstebene \u00fcber HTTP-Anfragen oder ein lokales Repository</li> </ul> <p>Die erforderliche Entwicklungsumgebung wird hier beschrieben.</p> <p>Entwicklungsumgebung f\u00fcr WinUI3-Entwicklung</p> <p>Wie in den vorherigen \u00dcbungen m\u00fcssen zus\u00e4tzliche Komponenten installiert werden. Auf der obigen Seite wird erw\u00e4hnt, dass Sie Visual Studio Workload f\u00fcr die \".NET-Desktop-Entwicklung\" installieren m\u00fcssen, und es gibt einen Abschnitt \"WinUI-Unterst\u00fctzung\" am unteren Ende der Seite, Sie sollten den Schritten dort folgen!</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#das-verfahren-fur-die-einreichung","title":"Das Verfahren f\u00fcr die Einreichung","text":"<ul> <li>Der grundlegende Prozess ist derselbe wie zuvor. Erstellen Sie mit GitHub Classroom ein Repository f\u00fcr sich selbst. Sie finden die Einladungs-URL in Moodle (Sie k\u00f6nnen sie sehen, indem Sie auf den Link*\"GitHub classroom links for homework*\" auf der Startseite des Fachs klicken). Es ist wichtig, dass Sie die richtige Einladungs-URL f\u00fcr diese Hausaufgabe verwenden (jede Hausaufgabe hat eine andere URL). Klonen Sie das resultierende Repository. Dazu geh\u00f6rt auch die erwartete Struktur der L\u00f6sung. Nachdem Sie die Aufgaben erledigt haben, \u00fcbergeben Sie Ihre L\u00f6sung alt und dr\u00fccken Sie sie alt.</li> <li>Um mit den geklonten Dateien zu arbeiten, \u00f6ffnen Sie <code>MvvmLab.sln</code>.</li> <li> In den \u00dcbungen werden Sie aufgefordert, einen Screenshot von einem Teil Ihrer L\u00f6sung zu machen, da dies beweist, dass Sie Ihre L\u00f6sung selbst erstellt haben. Der erwartete Inhalt der Screenshots wird immer in der Aufgabe angegeben. Screenshots sollten als Teil der L\u00f6sung eingereicht werden, legen Sie sie in den Stammordner Ihres Repositorys (neben neptun.txt). Die Screenshots werden dann zusammen mit dem Inhalt des Git-Repositorys auf GitHub hochgeladen. Da das Repository privat ist, ist es f\u00fcr niemanden au\u00dfer den Lehrkr\u00e4ften sichtbar. Wenn Sie Inhalte auf dem Screenshot haben, die Sie nicht hochladen m\u00f6chten, k\u00f6nnen Sie diese aus dem Screenshot herausschneiden.</li> <li> Diese Aufgabe enth\u00e4lt keinen sinnvollen Pre-Checker: Sie wird nach jedem Push ausgef\u00fchrt, pr\u00fcft aber nur, ob neptun.txt gef\u00fcllt ist. Die inhaltliche \u00dcberpr\u00fcfung wird von den Laborleitern nach Ablauf der Frist durchgef\u00fchrt.</li> </ul>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#verbindungen","title":"Verbindungen","text":"<p> Obligatorische Verwendung des MVVM-Beispiels!   In dieser Hausaufgabe \u00fcben wir das MVVM-Pattern, daher ist das MVVM-Pattern f\u00fcr die L\u00f6sung der Aufgaben zwingend erforderlich. Andernfalls wird die Bewertung der Aufgaben verweigert.</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#ausgangszustand","title":"Ausgangszustand","text":"<p>Der Ausgangszustand baut auf dem Endzustand von Labor 5 auf, allerdings mit einer wichtigen \u00c4nderung.</p> <p>Wenn die Anwendung gestartet wird, wird eine Seite des Typs <code>ShellPage</code> erstellt, die sich im Ordner <code>Views</code> des Projekts befindet. Es enth\u00e4lt eine <code>NavigationView</code>(aka. Hamburger Men\u00fc), das in unserem Fall die Navigation \u00fcbernimmt. Sie kann <code>NavigationViewItem</code>enthalten, die Men\u00fcpunkte darstellen und in der Anwendung immer verf\u00fcgbar sind. Wenn Sie auf die Men\u00fcpunkte innerhalb von <code>Frame</code>klicken, wird die entsprechende Seite mit Hilfe der Hilfsklassen im Projekt aufgerufen, die auch die Navigation zur\u00fcck zur vorherigen Seite unterst\u00fctzt.</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#1-aufgabe-rezepte-als-favoriten-verwalten","title":"1. Aufgabe - Rezepte als Favoriten verwalten","text":"<p>Die funktionalen Anforderungen an unsere Aufgabe sind:</p> <ul> <li> <p>Rezepte als Favoriten speichern</p> <ul> <li>Auf der Detailseite des Rezepts (z. B. oben in der linken Spalte) sollte eine Schaltfl\u00e4che mit einem nicht ausgef\u00fcllten Sternsymbol zu finden sein, die angeklickt werden kann, um das Rezept als Favorit zu speichern.</li> <li>Das Symbol der Favoriten-Schaltfl\u00e4che sollte sich in einen vollen Stern und der Text in \"Aus den Favoriten entfernen\" \u00e4ndern, wenn das Rezept als Favorit markiert wurde.</li> <li>Ein zuvor als Favorit gekennzeichnetes Rezept kann durch Klicken auf dieselbe Schaltfl\u00e4che aus den Favoriten entfernt werden: Das Symbol der Schaltfl\u00e4che wird dann wieder zu einem leeren Stern und der Text \u00e4ndert sich in \"Zu Favoriten hinzuf\u00fcgen\".</li> <li> <p>Ihre Liste der Lieblingsrezepte wird lokal gespeichert, damit sie nicht verloren geht, wenn Sie die App schlie\u00dfen.</p> <p>=== \"Zu Favoriten hinzuf\u00fcgen\" </p> <p>=== \"Aus Favoriten entfernen\" </p> <p>Zwei Schaltfl\u00e4chenstatus anzeigen</p> <p>Klicken Sie oberhalb der Abbildung auf \"Zu Favoriten hinzuf\u00fcgen\" und \"Aus Favoriten entfernen\", um zwischen den beiden Status der Bilder zu wechseln.</p> </li> </ul> </li> <li> <p>Zeigen Sie die Liste der Favoriten auf einer separaten Seite an.</p> <ul> <li>Die Favoritenliste kann \u00fcber das Hamburger-Men\u00fc aufgerufen werden</li> <li>Die Eintr\u00e4ge in der Liste sollten \u00e4hnlich aussehen wie die Eintr\u00e4ge in der Rezeptliste</li> <li>Die Liste sollte nicht gruppiert werden</li> <li> <p>Klicken Sie auf ein Rezept in der Favoritenliste, um die detaillierte Rezeptseite zu \u00f6ffnen (genau wie auf der Seite Rezepte)</p> <p></p> </li> </ul> </li> </ul>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#11-verwaltung-von-favoriten-in-der-dienstebene","title":"1.1 Verwaltung von Favoriten in der Dienstebene","text":"<p>In einer Bottom-up-Implementierungsreihenfolge erstellen wir zun\u00e4chst die Funktionen, die f\u00fcr die Verwaltung der Favoriten in der Dienstschicht erforderlich sind.</p> <p>Favoriten werden vom Online-Dienst nicht unterst\u00fctzt. Das Grundprinzip der L\u00f6sung lautet also:</p> <ul> <li>Die Kennungen der als Favoriten markierten Rezepte werden lokal gespeichert (damit diese Informationen bei einem Neustart des Programms erhalten bleiben).</li> <li>Die Angaben zu den als Favoriten gekennzeichneten Rezepten (Adresse, Bild) werden vom Online-Dienst angefordert (auf der Grundlage ihrer Kennungen).</li> </ul> <p>F\u00fcr die lokale persistente Datenspeicherung wird die Schnittstelle <code>ILocalSettingsService</code> (und eine Implementierung) im urspr\u00fcnglichen Projekt vorbereitet. Darauf aufbauend k\u00f6nnen wir nach JSON sortierte Schl\u00fcssel-Wert-Paare lokal in der Anwendung speichern.</p> <pre><code>public interface ILocalSettingsService\n{\n    Task&lt;T&gt; ReadSettingAsync&lt;T&gt;(string key);\n    Task SaveSettingAsync&lt;T&gt;(string key, T value);\n}\n</code></pre> <p>Bei der Verwendung ist zu beachten, dass die Funktionen generisch sind, so dass die Typen beim Aufruf explizit angegeben werden m\u00fcssen.</p> <p>Mit Hilfe der obigen <code>ILocalSettingsService</code> speichern wir eine Liste der bevorzugten Rezept-IDs unter einem bestimmten Schl\u00fcssel.</p> <p>Wichtig ist auch, dass die Funktionen <code>Task</code>zur\u00fcckgeben, also asynchron sind. Sie m\u00fcssen also mit dem Schl\u00fcsselwort <code>await</code> aufgerufen werden, und die aufrufende Funktion muss ebenfalls asynchron sein (f\u00fcr einen detaillierteren Satz von Regeln siehe den zugeh\u00f6rigen Abschnitt \"5. MVVM\" Laborbeschreibung).</p> <p>Die Verwaltung der Favoriten sollte in der Verantwortung der Schnittstelle <code>IRecipeService</code> und der Klasse <code>RecipeService</code> liegen, die sie implementiert. </p> <p>Der erste Schritt besteht darin, <code>RecipeService</code> ein Objekt zur Verf\u00fcgung zu stellen, das die Schnittstelle <code>ILocalSettingsService</code> implementiert, die es in seiner Implementierung verwenden kann, um seine bevorzugten Rezeptbezeichnungen zu speichern und abzurufen. Unser Ziel ist es, dieses Implementierungsobjekt in <code>RecipeService</code>als Schnittstelle zu <code>ILocalSettingsService</code> zu erhalten und zu speichern, wir wollen hier keine Abh\u00e4ngigkeiten von der spezifischen Implementierung einf\u00fchren. Dazu wird der bereits im Labor verwendete DI-Beh\u00e4lter verwendet.</p> <p>Tip</p> <p>Bei der Umsetzung sollten wir <code>ILocalSettingsService</code>in <code>RecipeService</code>genauso behandeln, wie wir <code>IRecipeService</code>in <code>MainPageViewModel</code>im Labor behandelt haben.</p> <p>Nachdem Sie die obigen Vorbereitungen getroffen haben, implementieren Sie die notwendige Funktionalit\u00e4t in der Klasse <code>RecipeService</code>!  Hier finden Sie einige Hinweise dazu.</p> RezeptService vase <p>Der <code>RecipeService</code> (und die Schnittstelle) sollten die folgenden neuen Eigenschaften haben:</p> <ol> <li> <p>\u00c4ndern Sie den Status des Rezeptfavoriten basierend auf id (int) mit dem neuen Status (bool). (Rezeptdetailseite, die beim Anklicken der Schaltfl\u00e4che angezeigt wird)</p> <ol> <li>Abfrage von <code>ILocalSettingsService</code> nach einer Liste von Favoriten-IDs. </li> <li>\u00c4ndern Sie die Liste anhand der erhaltenen ID und des neuen Favoritenstatus.<ol> <li>Wenn Sie es als Favorit markieren, wird es hinzugef\u00fcgt, andernfalls wird es gel\u00f6scht.</li> <li>Wenn die Liste die ID bereits enth\u00e4lt, f\u00fcgen Sie sie nicht erneut hinzu. (Anstelle einer Liste k\u00f6nnen Sie auch eine spezielle Sammlung mit Mengeneigenschaften verwenden, <code>HashSet&lt;T&gt;</code>, die ein Element nur einmal enth\u00e4lt)</li> </ol> </li> </ol> </li> <li> <p>Fragen Sie Ihre Lieblingsrezepte ab. (Wird f\u00fcr die Auflistung auf der Seite Favoriten verwendet.)</p> <ol> <li>Abfrage von <code>ILocalSettingsService</code> nach der Liste der IDs Ihrer Lieblingsrezepte.</li> <li>Auf der Grundlage der empfangenen IDs rufen wir die Rezepte einzeln von der REST-API ab, und zwar \u00fcber den Endpunkt \"GET /api/Recipes/{id}/Header\". Dies ist ein neuer Endpunkt in Bezug auf das Labor und gibt die Rezeptdaten mit der angegebenen ID zur\u00fcck, sortiert nach dem <code>RecipeHeader</code>. F\u00fcr diesen Endpunkt lohnt es sich auch, eine neue Hilfsfunktion zu erstellen. Wir k\u00f6nnen ein \"Muster\" von Operationen mit <code>HttpClient</code> in <code>RecipeService</code> erarbeiten, das bereits im Labor implementiert wurde.</li> <li>R\u00fcckgabe mit einer Liste der abgerufenen <code>RecipeHeader</code>-Objekte.</li> </ol> </li> <li> <p>Abfrage des Favoritenstatus eines Rezepts anhand der ID. (Dient zum Einstellen des Schaltfl\u00e4chenstatus beim Laden einer Rezeptdetailseite)</p> <ol> <li>R\u00fcckgabe mit einem true/false-Wert, je nachdem, ob die Kennung in der Liste der Lieblingsrezepte enthalten ist.</li> </ol> </li> </ol> <p>Erster Anruf</p> <p>Sie sollten auch bedenken, wenn Sie die Abfragefunktion zum ersten Mal aufrufen und keine ID-Liste der Lieblingsrezepte gespeichert haben (<code>null</code> wird zur\u00fcckgegeben, wenn <code>ILocalSettingsService.ReadSettingAsync</code> f\u00fcr das angegebene Schl\u00fcsselelement aufgerufen wird).</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#12-auf-der-detailseite-als-favorit-markieren","title":"1.2 Auf der Detailseite als Favorit markieren","text":"<p>Auf der Rezeptseite (unter <code>RecipeDetailPage</code>) sollten Sie eine Schaltfl\u00e4che mit zwei Zust\u00e4nden sehen:</p> <ol> <li>Wenn das Rezept nicht als Favorit markiert ist, erscheint ein leeres Sternsymbol auf der Schaltfl\u00e4che und die Schaltfl\u00e4che ist mit \"Zu Favoriten hinzuf\u00fcgen\" beschriftet.</li> <li>Wenn das Rezept als Favorit markiert ist, erscheint ein ausgef\u00fclltes Sternsymbol auf der Schaltfl\u00e4che und die Schaltfl\u00e4che ist mit \"Aus Favoriten entfernen\" beschriftet.</li> </ol> <p>=== \"Zu Favoriten hinzuf\u00fcgen\" </p> <p>=== \"Aus Favoriten entfernen\" </p> <p>Dieser true/false-Zustand und die \u00e4ndernde Aktion sollten in <code>RecipeDetailPageViewModel</code>gespeichert/implementiert werden (da dies per Definition die Aufgabe des ViewModels ist) und dann mit dem Zustand der Schaltfl\u00e4che und dem Befehl der Aktion datengebunden werden. Achten Sie darauf, das MVVM-Modell zu befolgen!</p> RecipeDetailPageViewModel modification <p>Das <code>RecipeDetailViewModel</code> sollte wie folgt ge\u00e4ndert werden:</p> <ol> <li>Favoritenstatus speichern<ol> <li>Der Zustand wird in einer Eigenschaft vom Typ <code>bool</code> gespeichert (verwenden Sie unbedingt das Attribut <code>[ObservableProperty]</code> und wiederholen Sie dessen Funktion und Bedeutung).</li> <li>Der Status wird initialisiert, indem er beim Aufrufen der Seite von \"IRecipeService\" abgerufen wird.</li> </ol> </li> <li> <ol> <li>Speichert den neuen Favoritenstatus unter Verwendung von <code>IRecipeService</code>.</li> <li>K\u00fcmmert sich um die Pflege der in unserer ViewModel-Klasse gespeicherten Eigenschaft \"bool\".</li> </ol> <p>Erstellen Sie eine neue Befehlsfunktion, die </p> Tipp f\u00fcr die L\u00f6sung <p>Das Prinzip ist \u00e4hnlich wie bei der Befehlsfunktion SendComment, aber hier m\u00fcssen wir uns nicht mit CanExecute befassen, da unser neuer Befehl immer ausf\u00fchrbar ist.</p> </li> </ol> <p>Speichern eines Zustands im Modell</p> <p>Der Status der Favoriten k\u00f6nnte im Modell \"RecipeHeader\" gespeichert werden, aber das w\u00fcrde zu zwei weiteren Problemen f\u00fchren: Das Modell m\u00fcsste die Schnittstelle \"INotifyPropertyChanged\" implementieren, um eine Status\u00e4nderung anzuzeigen.  Dar\u00fcber hinaus sollte der Wert der neuen Eigenschaft in einer anderen Schicht (ViewModel oder Service) gef\u00fcllt werden, da diese Information nur lokal verf\u00fcgbar ist und der \"RecipeHeader\" im Grunde nur noch ein DTO (Data Transfer Object) in der Modellschicht ist.</p> RecipeDetailPage (d.h. die Ansicht) \u00e4ndern <p>Auf der \"RecipeDetailPage\" sollte folgendes ge\u00e4ndert werden:</p> <ol> <li>F\u00fcgen Sie oben auf der Seite eine neue Schaltfl\u00e4che hinzu, mit einem \"SymbolSymbol\" und einem \"Textblock\" nebeneinander.<ol> <li>F\u00fcr die Eigenschaft <code>SymbolIcon</code> von <code>Symbol</code> sind die Enum-Werte <code>Symbol.SolidStar</code> und <code>Symbol.OutlineStar</code> f\u00fcr die Sternsymbole zu verwenden.</li> </ol> </li> <li>Der Schaltfl\u00e4chenbefehl muss mit dem Befehl im ViewModel datengebunden sein.</li> </ol> <p>Der im ViewModel gespeicherte \"bool\"-Wert muss auf irgendeine Weise in ein \"Symbol\"-Enum (Schaltfl\u00e4chensymbol) und einen \"String\" (tats\u00e4chlicher Schaltfl\u00e4chentext) umgewandelt werden, so dass die Schaltfl\u00e4che in beiden Zust\u00e4nden auf der Oberfl\u00e4che erscheint. Es gibt mehrere m\u00f6gliche L\u00f6sungen:</p> <ul> <li>verwenden Sie \"x:Bind\", wobei Sie keine Eigenschaft binden, sondern eine Hilfsfunktion in xaml.cs, die die Umwandlung vornimmt. Das hei\u00dft, dass wir anstelle der Eigenschaftsbindung eine Funktions-/Funktionsbindung verwenden. In den Vorlesungsunterlagen sollten Sie nach \"Binding Property to Functions\" und in Hausaufgabe 3 nach \"Function Binding Example\" suchen.</li> <li>Implementierung und Verwendung der Schnittstelle \"IValueConverter\" bei der Datenbindung.</li> <li>Im \"RecipeDetailPageViewModel\" werden die f\u00fcr die Ansicht erforderlichen Daten gespeichert, indem neue Ergebniseigenschaften eingef\u00fchrt werden (die f\u00fcr die Ansicht erforderlichen Eigenschaftstypen sind \"Symbol\" und \"String\") und die Daten an sie gebunden werden.<ul> <li>Dies ist wahrscheinlich die einfachste L\u00f6sung, wenn Sie keinen separaten Konverter schreiben oder die Datenbindungen \"verkomplizieren\" wollen, aber es ist auch die am wenigsten wartbare, da die ViewModel-Ansicht ansichtsspezifische Daten enth\u00e4lt, die separat gepflegt werden m\u00fcssen, wenn sich die bool-Eigenschaft \u00e4ndert.</li> </ul> </li> </ul> <p>Aufgabe 1.2. einzureichen</p> <p>F\u00fcgen Sie einen Screenshot des Antrags ein, auf dem Sie eine Schaltfl\u00e4che zum Markieren als Favorit auf der Detailseite sehen (<code>f1.2.1.png</code>)</p> <p>F\u00fcgen Sie einen Screenshot der App ein, auf der die Schaltfl\u00e4che \"Aus Favoriten entfernen\" auf der Detailseite eines bereits als Favorit markierten Rezepts erscheint (<code>f1.2.2.png</code>)</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#13-navigation-der-favoritenseite","title":"1.3 Navigation der Favoritenseite","text":"<p>Um zur Favoritenseite zu navigieren, sind mehrere Schritte erforderlich, die f\u00fcr das urspr\u00fcngliche Projekt spezifisch sind, aber wir werden sie hier im Detail erl\u00e4utern (die Implementierung der Navigation ist nicht Teil des Tutorials).</p> <ol> <li> <p>Erstellen Sie <code>FavoritesPage</code>im Ordner <code>Views</code> (Add/New Item/Blank Page (WinUI3))</p> <p>\u00dcbersetzungsfehler</p> <p>Wenn Sie aus irgendeinem Grund exotische Fehler erhalten, nachdem Sie eine neue Seite hinzugef\u00fcgt haben, l\u00f6schen Sie die folgenden Zeilen in der Projektdatei:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;Keine Remove=\"ViewsFavoritesPage.xaml\" /&gt;\n&lt;/EinzelteilGruppe&gt;\n</code></pre> <pre><code>&lt;Seite Update=\"ViewsFavoritesPage.xaml\"&gt;\n    &lt;Generator&gt;MSBuild:Compile&lt;/Generator&gt;\n&lt;/Seite&gt;\n</code></pre> </li> <li> <p>Erstellen Sie die Klasse <code>FavoritesPageViewModel</code> im Ordner <code>ViewModels</code> </p> <ol> <li>Achten Sie darauf, dass es aus der richtigen Klasse kommt!</li> <li>Konfigurieren Sie die Schnittstelle <code>INavigationAware</code> so, dass sie die Navigation unterst\u00fctzt (vorerst mit einer leeren Funktionstaste).</li> </ol> </li> <li> <p>Registrieren Sie den neuen View und das neue ViewModel im Dependency Injection Container in <code>App.xaml.cs</code>:</p> <pre><code>services.AddTransient&lt;FavoritesPage&gt;();\nservices.AddTransient&lt;FavoritesPageViewModel&gt;();\n</code></pre> </li> <li> <p>F\u00fcgen Sie in der Klasse <code>Pages</code> (<code>PageService.cs</code>) einen neuen Schl\u00fcssel f\u00fcr die Favoritenseite hinzu und konfigurieren Sie die Navigation zu diesem Schl\u00fcssel:</p> Pages<pre><code>public static string Favorites { get; } = \"Favorites\";\n</code></pre> PageService konstruktor<pre><code>Configure&lt;FavoritesPageViewModel, FavoritesPage&gt;(Pages.Favorites);\n</code></pre> </li> <li> <p>F\u00fcgen Sie unter <code>ShellPage</code>eine neue <code>NavigationViewItem</code>bis <code>NavigationView</code>f\u00fcr die Favoritenseite hinzu:</p> <pre><code>&lt;NavigationViewItem helpers:NavigationHelper.NavigateTo=\"Favorites\" Content=\"Favorites\"&gt;\n    &lt;NavigationViewItem.Icon&gt;\n        &lt;SymbolIcon Symbol=\"SolidStar\" /&gt;\n    &lt;/NavigationViewItem.Icon&gt;\n&lt;/NavigationViewItem&gt;\n</code></pre> <p>Navigation</p> <p>Die Navigation erfolgt \u00fcber die angeh\u00e4ngte Eigenschaft <code>helpers:NavigationHelper.NavigateTo=\"Favorites\"</code>, in der Sie den Schl\u00fcssel angeben k\u00f6nnen, um zu der Seite mit dem Schl\u00fcssel zu navigieren, zu dem Sie navigieren m\u00f6chten.</p> </li> </ol>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#14-logik-der-favoritenseite","title":"1.4 Logik der Favoritenseite","text":"<p>Die Favoritenseite (<code>FavoritesPage</code>) sollte nach dem Vorbild von <code>MainPage</code> gestaltet werden und die Liste der Rezepte ohne Gruppierung (!) in einem <code>AdaptiveGridView</code> Steuerelement anzeigen.</p> <p></p> <p>Erstellen Sie ein ViewModel (<code>FavoritesPageViewModel</code>) basierend auf <code>MainPageViewModel</code> und rufen Sie die Liste der Lieblingsrezepte ( <code>IRecipeService</code>) w\u00e4hrend der Navigation (<code>GetFavoriteRecipesAsync</code>) von ab und speichern Sie sie in einer geeigneten Eigenschaft, z.B. generated. Da wir die Rezepte hier nicht gruppieren, m\u00fcssen Sie mit <code>RecipeHeader</code>statt mit <code>RecipeGroup</code>arbeiten.</p> <p>1.4. exercise REQUIRED</p> <p>Einf\u00fcgen eines Screenshots der Anwendung mit einer Liste von Favoriten (<code>f1.4.png</code>)</p>"},{"location":"hazi/imsc-mvvm-receptek/index_ger/#vorlegen-bei","title":"Vorlegen bei","text":"<p>Checkliste f\u00fcr Wiederholungen:</p> <ul> <li>Es ist wichtig, dass nur die Aufgaben akzeptiert werden, die Sie vollst\u00e4ndig gemacht haben und die die Anforderungen in jeder Hinsicht erf\u00fcllen. </li> <li>Sie m\u00fcssen nat\u00fcrlich Ihre eigene Arbeit eingeben (da sie bewertet wird).</li> <li>Nicht nur das Quellcode, sondern auch die erwartete Bildschirmfotos sollen eingegeben werden.</li> </ul>"},{"location":"labor/meghirdetes-elott/","title":"Labor","text":"<p>Ez a labor feladat ebben a f\u00e9l\u00e9vben m\u00e9g nem ker\u00fclt meghirdet\u00e9sre, \u00edgy a le\u00edr\u00e1sa k\u00e9s\u0151bb lesz el\u00e9rhet\u0151 a f\u00e9l\u00e9v folyam\u00e1n.</p>"},{"location":"labor/meghirdetes-elott_eng/","title":"Lab","text":"<p>This lab maetrial has not been announced yet for this semester, so its description will be available later during the semester.</p>"},{"location":"labor/meghirdetes-elott_ger/","title":"Hausaufgaben","text":"<p>Diese Hausarbeit wurde in diesem Semester noch nicht angek\u00fcndigt, so dass die Beschreibung erst im Laufe des Semesters verf\u00fcgbar sein wird.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/","title":"1. A modell \u00e9s a k\u00f3d kapcsolata","text":""},{"location":"labor/1-model-es-kod-kapcsolata/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9lja:</p> <ul> <li>Ismerked\u00e9s a hallgat\u00f3kkal/gyakorlatvezet\u0151vel</li> <li>A gyakorlatokra vonatkoz\u00f3 k\u00f6vetelm\u00e9nyek pontos\u00edt\u00e1sa</li> <li>Elindul\u00e1s Visual Studio-val \u00e9s .NET alkalmaz\u00e1sok fejleszt\u00e9s\u00e9vel.</li> <li>Egy egyszer\u0171 Hello World .NET alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se, C# alapok</li> <li>Az UML \u00e9s a k\u00f3d kapcsolat\u00e1nak szeml\u00e9ltet\u00e9se</li> <li>Az interf\u00e9sz \u00e9s az absztrakt \u0151soszt\u00e1ly alkalmaz\u00e1stechnik\u00e1ja</li> </ul> Gyakorlatvezet\u0151knek <p>B\u00e1r a hallgat\u00f3k k\u00f6z\u00f6tt biztosan vannak olyanok, akik kor\u00e1bban, a Prog2 (C++) t\u00e1rgy keret\u00e9ben vagy m\u00e1s okb\u00f3l kifoly\u00f3lag m\u00e1r haszn\u00e1lt\u00e1k a Visual Studio k\u00f6rnyezetet, szinte biztosan lesznek olyanok is, akik m\u00e9g nem haszn\u00e1lt\u00e1k, vagy m\u00e1r kev\u00e9sb\u00e9 eml\u00e9keznek r\u00e1. A c\u00e9l jelen esetben a fel\u00fclettel val\u00f3 ismerked\u00e9s, ez\u00e9rt a feladatok megold\u00e1sa sor\u00e1n folyamatosan ismertess\u00fck a haszn\u00e1lt dolgokat (pl. Solution Explorer, F5-futtat\u00e1s, breakpoint haszn\u00e1lat stb.), hogy elk\u00e9sz\u00edts\u00fck \u00e9let\u00fcnk els\u0151 C# alkalmaz\u00e1s\u00e1t.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Visual Studio-b\u00f3l a legfrissebb verzi\u00f3t c\u00e9lszer\u0171 feltenni. A Community Edition, Professional \u00e9s az Enterprise verzi\u00f3 is megfelel. A Community Edition ingyenes, let\u00f6lthet\u0151 a Microsoft honlapj\u00e1r\u00f3l. A Professional fizet\u0151s, de az egyetem hallgat\u00f3i sz\u00e1m\u00e1ra ez is ingyenesen el\u00e9rhet\u0151 (https://azureforeducation.microsoft.com/devtools honlapon, az Azure Dev Tools for Teaching program keret\u00e9ben).</p> <p>Visual Studio Class Diagram t\u00e1mogat\u00e1s</p> <p>Jelen gyakorlat bizonyos feladatain\u00e1l (\u00e9s az els\u0151 h\u00e1zi feladat eset\u00e9ben is) a Visual Studio Class Designer t\u00e1mogat\u00e1s\u00e1t haszn\u00e1ljuk. A Visual Studio nem teszi fel minden esetben a Class Designer komponenst a telep\u00edt\u00e9s sor\u00e1n. Ha nem lehet Class Diagram-ot felvenni a Visual Studio projektbe (mert a Class Diagram nem szerepel a list\u00e1ban az Add New Item parancs sor\u00e1n megjelen\u0151 ablak list\u00e1j\u00e1ban \u2013 err\u0151l a jelen \u00fatmutat\u00f3 k\u00e9s\u0151bbi fejezet\u00e9ben b\u0151vebben), akkor a Class Diagram komponenst ut\u00f3lag kell telep\u00edteni:</p> <ol> <li>Visual Studio telep\u00edt\u0151 ind\u00edt\u00e1sa (pl. a Windows Start men\u00fcben a \u201eVisual Studio Installer\u201d beg\u00e9pel\u00e9s\u00e9vel).</li> <li>A megjelen\u0151 ablakban \u201eIndividual components\u201d f\u00fcl kiv\u00e1laszt\u00e1sa</li> <li> <p>A keres\u0151mez\u0151be \u201eclass designer\u201d beg\u00e9pel\u00e9se, majd gy\u0151z\u0151dj\u00fcnk meg, hogy a sz\u0171rt list\u00e1ban a \u201eClass Designer\u201d elem ki van pip\u00e1lva.</p> <p></p> </li> </ol> <p>Amit \u00e9rdemes \u00e1tn\u00e9zned:</p> <ul> <li>A gyakorlathoz nem kapcsol\u00f3dik a t\u00e1rgyb\u00f3l el\u0151ad\u00e1s. Ugyanakkor a gyakorlat \u00e9p\u00edt az UML alapismeretekre, illetve az UML oszt\u00e1lydiagram \u00e9s a k\u00f3d egym\u00e1sra t\u00f6rt\u00e9n\u0151 lek\u00e9pez\u00e9s\u00e9nek alapjaira.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/#gyakorlat-menete","title":"Gyakorlat menete","text":"<p>A gyakorlatvezet\u0151 a gyakorlat elej\u00e9n \u00f6sszefoglalja a gyakorlatokra vonatkoz\u00f3 k\u00f6vetelm\u00e9nyeket:</p> <ul> <li>A t\u00e1rgyi adatlapon ezek t\u00f6bbs\u00e9ge megtal\u00e1lhat\u00f3</li> <li>Az otthoni feladatokr\u00f3l inform\u00e1ci\u00f3 a t\u00e1rgy honlapj\u00e1n tal\u00e1lhat\u00f3.</li> </ul> <p>Visual Studio fejleszt\u0151eszk\u00f6zzel, .NET alkalmaz\u00e1sokat fogunk k\u00e9sz\u00edteni C# nyelven. A C#  hasonl\u00edt a Java-hoz, fokozatosan ismerj\u00fck meg a k\u00fcl\u00f6nbs\u00e9geket. A gyakorlat vezetett, gyakorlatvezet\u0151 instrukci\u00f3i alapj\u00e1n egy\u00fctt ker\u00fclnek elv\u00e9gz\u00e9sre a feladatok.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre:</p> <p><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo -b megoldas</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#1-feladat-hello-world-net-konzol-alkalmazas-elkeszitese","title":"1. Feladat - \u201eHello world\u201d .NET konzol alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se","text":"<p>A feladat egy olyan C# nyelv\u0171 konzol alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se, amely a konzolra ki\u00edrja a \u201eHello world!\u201d sz\u00f6veget.</p> <p>Az alkalmaz\u00e1st C# nyelven k\u00e9sz\u00edtj\u00fck el. A leford\u00edtott alkalmaz\u00e1s futtat\u00e1s\u00e1t a .NET runtime v\u00e9gzi. A ford\u00edt\u00e1s/futtat\u00e1s elm\u00e9leti h\u00e1tter\u00e9t, valamint a .NET alapjait az els\u0151 el\u0151ad\u00e1s ismerteti.</p> <p>A solution \u00e9s azon bel\u00fcli projekt l\u00e9trehoz\u00e1s\u00e1nak l\u00e9p\u00e9sei Visual Studio 2022 eset\u00e9n:</p> <ol> <li>\u00daj projekt var\u00e1zsl\u00f3 elind\u00edt\u00e1sa, melyre k\u00e9t m\u00f3d is van<ul> <li>Ind\u00edt\u00f3ablak seg\u00edts\u00e9g\u00e9vel<ol> <li>Ind\u00edtsuk el a Visual Studio-t</li> <li>A megjelen\u0151 ind\u00edt\u00f3ablak jobb oldali s\u00e1vj\u00e1ban Create new project</li> </ol> </li> <li>M\u00e1r fut\u00f3 Visual Studio-ban<ol> <li>File / New-Project</li> </ol> </li> </ul> </li> <li> <p>A Create new project var\u00e1zsl\u00f3ban a Console app (\u00e9s NEM a Console app (.NET Framework) sablont v\u00e1lasszuk ki, ebb\u0151l is a C#-osat. Azt, hogy C#-os, a sablon ikonj\u00e1nak bal fels\u0151 sarka jelzi. Ha nem l\u00e1tjuk a list\u00e1ban, r\u00e1 kell keresni/sz\u0171rni. R\u00e1kereshet\u00fcnk a fels\u0151 keres\u0151s\u00e1vban a \u201econsole\u201d be\u00edr\u00e1s\u00e1val. Vagy az alatta lev\u0151 leny\u00edl\u00f3 mez\u0151k seg\u00edts\u00e9g\u00e9vel: az els\u0151ben (nyelvkiv\u00e1laszt\u00f3) \u201eC#\u201d, a harmadikban (projektt\u00edpus kiv\u00e1laszt\u00f3) \u201eConsole\u201d.</p> <p></p> </li> <li> <p>Next gomb az var\u00e1zsl\u00f3ablak alj\u00e1n, a k\u00f6vetkez\u0151 var\u00e1zsl\u00f3oldalon:</p> <ol> <li>Project name: Hello World</li> <li>Location: a laborokban a c:\\work\\ mapp\u00e1ba dolgozzunk, ehhez van \u00edr\u00e1si jogunk. <li>Solution name: Hello World (elvileg ez be is lesz \u00edrva, mire ide\u00e9r\u00fcnk)</li> <li>Place solution and project in the same directory: nincs pipa (de nincs k\u00fcl\u00f6n\u00f6sebb jelent\u0151s\u00e9ge).</li> <li> <p>Next gomb az var\u00e1zsl\u00f3ablak alj\u00e1n, a k\u00f6vetkez\u0151 var\u00e1zsl\u00f3oldalon:</p> <ol> <li>Framework: .NET 8 (Long-term support).</li> <li>A \"Do not use top level statements\" jel\u00f6l\u0151n\u00e9gyzetet pip\u00e1ljuk be (ennek magyar\u00e1zat\u00e1ra mindj\u00e1rt visszat\u00e9r\u00fcnk).</li> </ol> </li> <p>A projekttel egy \u00faj solution is l\u00e9trej\u00f6n, mely strukt\u00far\u00e1ja a Visual Studio Solution Explorer ablak\u00e1ban tekinthet\u0151 \u00e1t. Egy solution t\u00f6bb projectb\u0151l \u00e1llhat, egy project pedig t\u00f6bb f\u00e1jlb\u00f3l. A solution a teljes munkak\u00f6rnyezetet fogja \u00f6ssze (egy <code>.sln</code> kiterjeszt\u00e9s\u0171 f\u00e1jl tartozik hozz\u00e1), m\u00edg egy projekt kimenete egy <code>.exe</code> vagy <code>.dll</code> f\u00e1jl jellemz\u0151en, vagyis egy \u00f6sszetett alkalmaz\u00e1s/rendszer egy komponens\u00e9t \u00e1ll\u00edtja el\u0151. A projektf\u00e1jlok kiterjeszt\u00e9se C# alkalmaz\u00e1sok eset\u00e9n <code>.csproj</code>.</p> <p>A <code>Program.cs</code> f\u00e1jlunk tartalma a k\u00f6vetkez\u0151:</p> Program.cs<pre><code>namespace HelloWorld\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> <p>Vegy\u00fcnk fel egy <code>Console.ReadKey()</code> sort:</p> <pre><code>namespace HelloWorld\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            Console.ReadKey();\n        }\n    }\n}\n</code></pre> <ol> <li> <p>Futtassuk az alkalmaz\u00e1st (pl. az F5 billenty\u0171 haszn\u00e1lat\u00e1val).</p> <p>A k\u00f3d fel\u00e9p\u00edt\u00e9se nagyon hasonl\u00edt a Java-hoz, illetve a C++-hoz. Az oszt\u00e1lyaink n\u00e9vterekbe szervezettek. N\u00e9vteret defini\u00e1lni a <code>namespace</code> kulcssz\u00f3val tudunk. N\u00e9vtereket hat\u00f3k\u00f6rbe \u201ehozni\u201d a <code>using</code> kulcssz\u00f3val tudjuk.  pl.:</p> <pre><code>using System.Collections.Generic;\n</code></pre> </li> <li> <p>Egy konzolos C# alkalmaz\u00e1sban az alkalmaz\u00e1sunk bel\u00e9p\u00e9si pontj\u00e1t egy statikus <code>Main</code> nev\u0171 f\u00fcggv\u00e9ny meg\u00edr\u00e1s\u00e1val adjuk meg. Az oszt\u00e1lyunk neve b\u00e1rmi lehet, a VS egy <code>Program</code> nev\u0171 oszt\u00e1lyt gener\u00e1lt eset\u00fcnkben. A <code>Main</code> f\u00fcggv\u00e9ny param\u00e9terlist\u00e1ja k\u00f6t\u00f6tt: vagy ne adjunk meg param\u00e9tereket, vagy egy <code>string[]</code>-\u00f6t adjunk meg, amiben fut\u00e1s k\u00f6zben megkapjuk az parancssori argumentumokat.</p> </li> <li>.NET-ben a standard ki \u00e9s bemenet kezel\u00e9s\u00e9re a <code>System</code> n\u00e9vt\u00e9r <code>Console</code> oszt\u00e1lya haszn\u00e1land\u00f3. A <code>WriteLine</code> statikus m\u0171velet\u00e9vel egy sort tudunk ki\u00edrni, a <code>ReadKey</code> m\u0171velettel egy billenty\u0171 lenyom\u00e1s\u00e1ra v\u00e1rakozhatunk.</li> </ol> <p>Top level statements, Implicit \u00e9s static usings \u00e9s n\u00e9vterek</p> <p>A projekt l\u00e9trehoz\u00e1sakor kor\u00e1bban bepip\u00e1ltuk a \"Do not use top level statements\" jel\u00f6l\u0151n\u00e9gyzetet. Ha ezt nem tett\u00fck volna meg, akkor a <code>Program.cs</code> f\u00e1jlunkban mind\u00f6ssze egyetlen \u00e9rdemi sort tal\u00e1ltunk volna:</p> <pre><code>// See https://aka.ms/new-console-template for more information\nConsole.WriteLine(\"Hello World!\");\n</code></pre> <p>Ez  m\u0171k\u00f6d\u00e9s\u00e9ben ekvivalens a fenti <code>Program</code> oszt\u00e1lyt \u00e9s ebben <code>Main</code> f\u00fcggv\u00e9nyt tartalmaz\u00f3 k\u00f3ddal. N\u00e9zz\u00fck, mik teszik ezt lehet\u0151v\u00e9 (ezekr\u0151l pl. itt https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements olvashatunk b\u0151vebben, mindkett\u0151 C# 10 \u00fajdons\u00e1g):</p> <ul> <li>Top level statements. Ennek az a l\u00e9nyege, hogy mindenf\u00e9le oszt\u00e1ly/<code>Main</code> \u00e9s egy\u00e9b  f\u00fcggv\u00e9nydefin\u00edci\u00f3 n\u00e9lk\u00fcl a projektben egyetlen forr\u00e1sf\u00e1jlban k\u00f6zvetlen\u00fcl is \u00edrhatunk k\u00f3dot. Ez esetben ezt a sz\u00ednfalak m\u00f6g\u00f6tt a ford\u00edt\u00f3 berakja egy \u00e1ltalunk nem l\u00e1that\u00f3 oszt\u00e1ly statikus <code>Main</code> f\u00fcggv\u00e9ny\u00e9be. A bevezet\u00e9s\u00e9nek a motiv\u00e1ci\u00f3ja az volt, hogy a nagyon egyszer\u0171, \u201escript\u201d szer\u0171 alkalmaz\u00e1sok eset\u00e9n kevesebb legyen a boilerplate k\u00f3d.</li> <li>Implicit global usings. Annak f\u00fcggv\u00e9ny\u00e9ben, hogy pontosan milyen projektt\u00edpust hoztunk l\u00e9tre, bizonyos alapn\u00e9vterek a sz\u00ednfalak m\u00f6g\u00f6tt automatikusan using-olva lesznek minden forr\u00e1sf\u00e1jlban (ehhez a compiler a global using utas\u00edt\u00e1st haszn\u00e1lja). A l\u00e9nyeg: a fejleszt\u0151knek \u00edgy bizonyos, gyakran haszn\u00e1lt n\u00e9vtereket (pl. <code>System.IO</code>, <code>System.Collections.Generic</code> stb.) nem kell a forr\u00e1sf\u00e1jlonk\u00e9nt using-olni.</li> <li> <p>Static using. Lehet\u0151s\u00e9g\u00fcnk van C#-ban n\u00e9vterek helyett statikus oszt\u00e1lyokat is usingolni, \u00edgy azokat a haszn\u00e1latuk sor\u00e1n nem fontos ki\u00edrni. Gyakori eset erre a <code>Console</code> vagy a <code>Math</code> oszt\u00e1ly usingol\u00e1sa.</p> <pre><code>using static System.Console;\n\nnamespace ConsoleApp12\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteLine(\"Hello, World!\");\n        }\n    }\n}\n</code></pre> </li> <li> <p>F\u00e1jl szint\u0171 n\u00e9vterek. C# 10-ben szint\u00e9n egy egyszer\u0171s\u00edt\u00e9st kapunk a n\u00e9vterek deklar\u00e1l\u00e1sa sor\u00e1n, mert m\u00e1r nem k\u00f6telez\u0151 a kapcsos z\u00e1r\u00f3jeleket kitenni, \u00edgy az adott namespace a teljes f\u00e1jlra \u00e9rv\u00e9nyes lesz pl.:</p> <pre><code>namespace HelloWorld;\n\ninternal class Program\n{\n    // ...\n}\n</code></pre> </li> </ul> <p>Inconsistent visibility vagy inconsistent accessibility hiba</p> <p>A f\u00e9l\u00e9v sor\u00e1n a programoz\u00e1si feladatok megval\u00f3s\u00edt\u00e1sa sor\u00e1n tal\u00e1lkozhatunk inconsistent visibility-re vagy inconsistent accessibility-re panaszkod\u00f3 ford\u00edt\u00e1si hiba\u00fczenetekkel. A jelens\u00e9g h\u00e1tter\u00e9ben az \u00e1ll, hogy .NET k\u00f6rnyezetben lehet\u0151s\u00e9g van az egyes t\u00edpusok (oszt\u00e1ly, interf\u00e9sz stb.) l\u00e1that\u00f3s\u00e1g\u00e1nak szab\u00e1lyoz\u00e1s\u00e1ra:</p> <ul> <li><code>internal</code> vagy nem adjuk meg a l\u00e1that\u00f3s\u00e1got: a t\u00edpus csak az adott szerelv\u00e9nyen (.exe, .dll)/projekten,  bel\u00fcl l\u00e1that\u00f3</li> <li><code>public</code>: a t\u00edpus m\u00e1s szerelv\u00e9nyek/projektek sz\u00e1m\u00e1ra is l\u00e1that\u00f3</li> </ul> <p>A hiba legegyszer\u0171bben \u00fagy h\u00e1r\u00edthat\u00f3 el, ha minden t\u00edpusunkat publikusnak defini\u00e1ljuk, pl.:</p> <pre><code>public class HardDisk\n{\n    // ...\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/#elmeleti-attekintes","title":"Elm\u00e9leti \u00e1ttekint\u00e9s","text":"<p>Az alfejezetek nem tartalmaznak feladatot, a hallgat\u00f3k sz\u00e1m\u00e1ra ismertetik a kapcsol\u00f3d\u00f3 elm\u00e9leti t\u00e9mak\u00f6r\u00f6ket, p\u00e9ld\u00e1kkal illusztr\u00e1lva.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#a-az-uml-osztalydiagram-es-a-kod-kapcsolatanak-elmelete-hallgato","title":"A) Az UML oszt\u00e1lydiagram \u00e9s a k\u00f3d kapcsolat\u00e1nak elm\u00e9lete [hallgat\u00f3]*","text":"<p>Az anyag itt el\u00e9rhet\u0151: Az UML oszt\u00e1lydiagram \u00e9s a k\u00f3d kapcsolata. Ez a t\u00e9mak\u00f6r kor\u00e1bbi f\u00e9l\u00e9vben a Szoftvertechnol\u00f3gia t\u00e1rgy keret\u00e9ben ker\u00fclt ismertet\u00e9sre.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#b-interfesz-es-absztrakt-ososztaly-hallgato","title":"B) Interf\u00e9sz \u00e9s absztrakt (\u0151s)oszt\u00e1ly [hallgat\u00f3]*","text":"<p>Az anyag itt el\u00e9rhet\u0151: Interf\u00e9sz \u00e9s absztrakt (\u0151s)oszt\u00e1ly.</p> <p>T\u00e9mak\u00f6r\u00f6k:</p> <ul> <li>Absztrakt oszt\u00e1ly fogalma \u00e9s defini\u00e1l\u00e1sa C# nyelven</li> <li>Interf\u00e9sz fogalma \u00e9s defini\u00e1l\u00e1sa C# nyelven</li> <li>Absztrakt \u0151s \u00e9s interf\u00e9sz \u00f6sszehasonl\u00edt\u00e1sa</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/#2-feladat-az-uml-es-a-kod-kapcsolatanak-szemleltetese","title":"2. Feladat - Az UML \u00e9s a k\u00f3d kapcsolat\u00e1nak szeml\u00e9ltet\u00e9se","text":""},{"location":"labor/1-model-es-kod-kapcsolata/#feladat-leirasa-equipment-inventory","title":"Feladat le\u00edr\u00e1sa - Equipment inventory","text":"<p>Feladat: Egy sz\u00e1m\u00edt\u00f3g\u00e9palkatr\u00e9sz nyilv\u00e1ntart\u00f3 alkalmaz\u00e1s kifejleszt\u00e9s\u00e9vel b\u00edztak meg benn\u00fcnket. B\u0151vebben:</p> <ul> <li>K\u00fcl\u00f6nb\u00f6z\u0151 t\u00edpus\u00fa alkatr\u00e9szeket kell tudni kezelni. Kezdetben a <code>HardDisk</code>, <code>SoundCard</code> \u00e9s <code>LedDisplay</code> t\u00edpusokat kell t\u00e1mogatni, de a rendszer legyen k\u00f6nnyen b\u0151v\u00edthet\u0151 \u00faj t\u00edpusokkal.</li> <li>Az alkatr\u00e9szekhez tartoz\u00f3 adatok: beszerz\u00e9s \u00e9ve, \u00e9letkora (sz\u00e1m\u00edtott), beszerz\u00e9si \u00e1ra \u00e9s aktu\u00e1lis \u00e1ra (sz\u00e1m\u00edtott), de ezeken fel\u00fcl t\u00edpusf\u00fcgg\u0151 adatokat is tartalmazhatnak (pl. a <code>HardDisk</code> eset\u00e9ben a kapacit\u00e1s).</li> <li>Az aktu\u00e1lis \u00e1r f\u00fcgg az alkatr\u00e9sz t\u00edpus\u00e1t\u00f3l, a beszerz\u00e9si \u00e1rt\u00f3l \u00e9s az alkatr\u00e9sz gy\u00e1rt\u00e1si \u00e9v\u00e9t\u0151l. Pl. min\u00e9l \u00f6regebb egy alkatr\u00e9sz, ann\u00e1l nagyobb kedvezm\u00e9nyt adunk r\u00e1, de a kedvezm\u00e9ny m\u00e9rt\u00e9ke f\u00fcgg az alkatr\u00e9sz t\u00edpust\u00f3l is.</li> <li>List\u00e1zni kell tudni a k\u00e9szleten lev\u0151 alkatr\u00e9szeket.</li> <li>A <code>LedDisplay</code> oszt\u00e1lynak k\u00f6telez\u0151en egy <code>DisplayBase</code> oszt\u00e1lyb\u00f3l kell sz\u00e1rmaznia, \u00e9s a <code>DisplayBase</code> oszt\u00e1ly forr\u00e1sk\u00f3dja nem megv\u00e1ltoztathat\u00f3. Jelen p\u00e9ld\u00e1ban ennek nincs sok \u00e9rtelme, a gyakorlatban azonban gyakran tal\u00e1lkozunk hasonl\u00f3 helyzettel, amikor is az \u00e1ltalunk haszn\u00e1lt keretrendszer/platform el\u0151\u00edrja, hogy adott esetben egy-egy be\u00e9p\u00edtett oszt\u00e1lyb\u00f3l kell sz\u00e1rmaztassunk. Tipikusan ez a helyzet, amikor ablakokkal, \u0171rlapokkal, saj\u00e1t vez\u00e9rl\u0151t\u00edpusokkal dolgozunk: ezeket a keretrendszer be\u00e9p\u00edtett oszt\u00e1lyaib\u00f3l kell sz\u00e1rmaztatnunk, \u00e9s a keretrendszer  - pl. Java, .NET - forr\u00e1sk\u00f3dja nem \u00e1ll rendelkez\u00e9s\u00fcnkre (de legal\u00e1bbis biztosan nem akarjuk megv\u00e1ltoztatni). A p\u00e9ld\u00e1nkban a <code>DisplayBase</code>-b\u0151l val\u00f3 sz\u00e1rmaztat\u00e1s el\u0151\u00edr\u00e1s\u00e1val ezt a helyzetet szimul\u00e1ljuk.</li> </ul> <p>A megval\u00f3s\u00edt\u00e1s sor\u00e1n jelent\u0151s egyszer\u0171s\u00edt\u00e9ssel \u00e9l\u00fcnk: az alkatr\u00e9szeket csak mem\u00f3ri\u00e1ban tarjuk nyilv\u00e1n, a list\u00e1z\u00e1s is a lehet\u0151 legegyszer\u0171bb, egyszer\u0171en csak ki\u00edrjuk a nyilv\u00e1ntartott alkatr\u00e9szek adatait a konzolra.</p> <p>A kezdeti egyeztet\u00e9sek sor\u00e1n a megrendel\u0151nkt\u0151l a k\u00f6vetkez\u0151 inform\u00e1ci\u00f3t kapjuk: egy bels\u0151 munkat\u00e1rsuk m\u00e1r elindult a fejleszt\u00e9ssel, de id\u0151 hi\u00e1ny\u00e1ban csak f\u00e9lk\u00e9sz megold\u00e1sig jutott. A feladatunk r\u00e9sz\u00e9t k\u00e9pezi a f\u00e9lk\u00e9sz megold\u00e1s megismer\u00e9se, illetve ebb\u0151l kiindulva kell a feladatot megval\u00f3s\u00edtani.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#class-diagram","title":"Class Diagram","text":"<p>Nyissuk meg a megrendel\u0151nkt\u0151l kapott forr\u00e1sk\u00f3d solution-j\u00e9t, melyet a k\u00f6vetkez\u0151 l\u00e9p\u00e9seket k\u00f6vetve tudunk megtenni.</p> <p>Ehhez kl\u00f3nozzuk le a kiindul\u00f3 projekt online GitHub rendszerben el\u00e9rhet\u0151 Git repositoryj\u00e1t a <code>C:\\Work</code> mapp\u00e1n bel\u00fcl egy \u00faj saj\u00e1t mapp\u00e1ba: pl.: <code>C:\\Work\\NEPTUN\\lab1</code>. Ebben az \u00faj mapp\u00e1ban nyissunk meg egy command line-t vagy powershellt \u00e9s futtassuk az al\u00e1bbi git parancsot:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo.git\n</code></pre> <p>Git \u00e9s GitHub</p> <p>A Git-r\u0151l, mint forr\u00e1sk\u00f3dkezel\u0151 rendszerr\u0151l, az els\u0151 h\u00e1zi feladat kontextus\u00e1ban olvashatunk majd b\u0151vebben.</p> <p>Nyissuk meg a lekl\u00f3nozott mapp\u00e1ban tal\u00e1lhat\u00f3 src/EquipmentInventory.sln Visual Studio solutiont.</p> <p>A Solution Explorerben szemmel fussuk \u00e1t a f\u00e1jlokat. Az meg\u00e9rt\u00e9st seg\u00edten\u00e9, ha egy oszt\u00e1lydiagramon megjelen\u00edten\u00e9nk az oszt\u00e1lyok k\u00f6z\u00f6tti kapcsolatokat. Vegy\u00fcnk is fel egy oszt\u00e1lydiagramot a projekt\u00fcnkbe. A Solution Explorerben a projekten (\u00e9s nem a solution-\u00f6n!) jobb gombbal kattintva a felugr\u00f3 men\u00fcben az Add/New Item elemet v\u00e1lasztva, majd a megjelen\u0151 ablakban a Class Diagram elemet v\u00e1lasszuk ki, az ablak alj\u00e1n a diagram nev\u00e9nek a Main.cd-t adjuk meg, \u00e9s OK-zuk le az ablakot.</p> <p>Class Diagram hi\u00e1nyz\u00f3 sablon</p> <p>Ha a Class Diagram elem nem jelenik meg a list\u00e1ban, akkor nincs telep\u00edtve a VS megfelel\u0151 komponense. Err\u0151l jelen dokumentum El\u0151felt\u00e9telek fejezet\u00e9ben olvashatsz b\u0151vebben.</p> <p>Ekkor a Solution Explorerben megjelenik a <code>Main.cd</code> diagramf\u00e1jl, duplakattint\u00e1ssal nyissuk meg. A diagramunk jelenleg \u00fcres. A Solution Explorerb\u0151l drag&amp;drop-pal dobjuk r\u00e1 a .cs forr\u00e1sf\u00e1jlokat a diagramra. Ekkor a VS megn\u00e9zi, milyen oszt\u00e1lyok vannak ezekben a forr\u00e1sf\u00e1jlokban, \u00e9s visszafejti \u0151ket UML oszt\u00e1lyokk\u00e1. Alak\u00edtsuk ki a k\u00f6vetkez\u0151 \u00e1br\u00e1nak megfelel\u0151 elrendez\u00e9st (az oszt\u00e1lyok tagjainak megjelen\u00edt\u00e9s\u00e9t a t\u00e9glalapuk jobb fels\u0151 sark\u00e1ban lev\u0151 duplany\u00edlra kattint\u00e1ssal \u00e9rhetj\u00fck el):</p> <p></p> <p>Az oszt\u00e1lyokhoz tartoz\u00f3 forr\u00e1sk\u00f3dot is megn\u00e9zhetj\u00fck, ak\u00e1r a diagramon a megfelel\u0151 oszt\u00e1lyra dupl\u00e1n kattintva, ak\u00e1r a Solution Explorerb\u0151l a .cs f\u00e1jlokat megnyitva. A k\u00f6vetkez\u0151ket tapasztaljuk:</p> <ul> <li>A <code>SoundCard</code>, <code>HardDisk</code> \u00e9s <code>LedDisplay</code> oszt\u00e1lyok viszonylag j\u00f3l kidolgozottak, rendelkeznek a sz\u00fcks\u00e9ges attrib\u00fatumokkal \u00e9s lek\u00e9rdez\u0151 f\u00fcggv\u00e9nyekkel.</li> <li>Az <code>LedDisplay</code> a k\u00f6vetelm\u00e9nyeknek megfelel\u0151en a <code>DisplayBase</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</li> <li>Az <code>EquipmentInventory</code> felel\u0151s ugyan a k\u00e9szleten lev\u0151 alkatr\u00e9szek nyilv\u00e1ntart\u00e1s\u00e1\u00e9rt, de gyakorlatilag semmi nincs ebb\u0151l megval\u00f3s\u00edtva.</li> <li>Tal\u00e1lunk egy <code>IEquipment</code> interf\u00e9szt, <code>GetAge</code> \u00e9s <code>GetPrice</code> m\u0171veletekkel</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/#equipmentinventory","title":"EquipmentInventory","text":"<p>\u00c1lljunk neki a megold\u00e1s kidolgoz\u00e1s\u00e1nak. El\u0151sz\u00f6r is az alapkoncepci\u00f3kat fektess\u00fck le. Az <code>EquipmentInventory</code> oszt\u00e1lyban egy heterog\u00e9n kollekci\u00f3ban t\u00e1roljuk a k\u00fcl\u00f6nb\u00f6z\u0151 alkatr\u00e9sz t\u00edpusokat. Ez a kulcsa az alkatr\u00e9szek egys\u00e9ges kezel\u00e9s\u00e9nek, vagyis annak, hogy a megold\u00e1sunk \u00faj alkatr\u00e9szt\u00edpusokkal k\u00f6nnyen b\u0151v\u00edthet\u0151 legyen.</p> <p>Mint kor\u00e1bban taglaltuk, az egys\u00e9ges kezel\u00e9st vagy k\u00f6z\u00f6s \u0151soszt\u00e1ly, vagy k\u00f6z\u00f6s interf\u00e9sz bevezet\u00e9s\u00e9vel lehet megoldani. Eset\u00fcnkben a k\u00f6z\u00f6s \u0151soszt\u00e1ly (pl. <code>EquipmentBase</code>) \u00fagy t\u0171nik, kiesik, mert ennek bevezet\u00e9s\u00e9vel az <code>LedDisplay</code> oszt\u00e1lynak k\u00e9t \u0151soszt\u00e1lya is lenne: a k\u00f6telez\u0151nek kik\u00f6t\u00f6tt <code>DisplayBase</code>, \u00e9s az \u00e1ltalunk az egys\u00e9ges kezel\u00e9sre bevezetett <code>EquipmentBase</code>. Ez nem lehets\u00e9ges, .NET k\u00f6rnyezetben egy oszt\u00e1lynak csak egy \u0151se lehet. Az a megold\u00e1s pedig, hogy a <code>DisplayBase</code>-t \u00fagy m\u00f3dos\u00edtjuk, hogy \u0151 is az <code>EquipmentBase</code>-b\u0151l sz\u00e1rmazik, a k\u00f6vetelm\u00e9ny\u00fcnknek megfelel\u0151en nem lehets\u00e9ges (kik\u00f6t\u00e9s volt, hogy a forr\u00e1sk\u00f3dja nem m\u00f3dos\u00edthat\u00f3). Marad teh\u00e1t az interf\u00e9sz alap\u00fa megk\u00f6zel\u00edt\u00e9s. Minden bizonnyal az alkalmaz\u00e1s kor\u00e1bbi fejleszt\u0151je is erre a k\u00f6vetkeztet\u00e9sre jutott, ez\u00e9rt is vezette be az <code>IEquipment</code> interf\u00e9szt.</p> <p>Vegy\u00fcnk fel egy <code>IEquipment</code> t\u00edpus\u00fa elemekb\u0151l \u00e1ll\u00f3 generikus list\u00e1t (ne property-t hanem field-et!) az <code>EquipmentInventory</code> oszt\u00e1lyba. A l\u00e1that\u00f3s\u00e1ga \u2013 az egys\u00e9gbez\u00e1r\u00e1sra t\u00f6rekedve \u2013 legyen <code>private</code>. A neve legyen <code>equipment</code> (ne legyen \u201es\u201d a v\u00e9g\u00e9n, angolban az equipment t\u00f6bbes sz\u00e1ma is equipment). A tagv\u00e1ltoz\u00f3 felv\u00e9tel\u00e9hez a Visual Studio Class Details ablak\u00e1t haszn\u00e1ljuk. Ha az ablak nem l\u00e1that\u00f3, a View / Other Windows / Class Details men\u00fc kiv\u00e1laszt\u00e1s\u00e1val jelen\u00edthet\u0151 meg.</p> <p></p> <p>A tagv\u00e1ltoz\u00f3 t\u00edpusa teh\u00e1t <code>List&lt;IEquipment&gt;</code>. A .NET <code>List</code> t\u00edpusa egy dinamikusan ny\u00fajt\u00f3zkod\u00f3 generikus t\u00f6mb (mint Java-ban az <code>ArrayList</code>). A diagramon az <code>EquipmentInventory</code> oszt\u00e1lyra pillantva azt l\u00e1tjuk, hogy csak a tagv\u00e1ltoz\u00f3 neve jelenik meg, a t\u00edpusa nem. A diagram h\u00e1tter\u00e9n jobb gombbal kattintva a Change Members Format men\u00fcb\u0151l a Display Full Signature-t v\u00e1lasszuk ki. Ezt k\u00f6vet\u0151en a diagramon l\u00e1that\u00f3v\u00e1 v\u00e1lik a tagv\u00e1ltoz\u00f3k t\u00edpusa, valamint a m\u0171veletek teljes szignat\u00far\u00e1ja.</p> <p></p> <p>Az <code>EquipmentInventory</code> oszt\u00e1lyon dupl\u00e1n kattintva elnavig\u00e1lhatunk a forr\u00e1sk\u00f3dba, \u00e9s mint l\u00e1that\u00f3, val\u00f3ban egy lista t\u00edpus\u00fa tagv\u00e1ltoz\u00f3k\u00e9nt jelenik meg a k\u00f3dban:</p> <pre><code>class EquipmentInventory\n{\n    private List&lt;IEquipment&gt; equipment;\n</code></pre> <p>Ennek egyr\u00e9szt \u00f6r\u00fcl\u00fcnk, mert a Visual Studio t\u00e1mogatja a round-trip engineering technik\u00e1t: a modellt \u00e9rint\u0151 v\u00e1ltoz\u00e1sokat azonnal \u00e1tvezeti a k\u00f3dba, \u00e9s viszont. M\u00e1sr\u00e9szt a kor\u00e1bbiakban azt taglaltuk, hogy ha egy oszt\u00e1lyban egy gy\u0171jtem\u00e9ny tag van egy m\u00e1sik oszt\u00e1ly elemeib\u0151l, akkor annak az UML modellben egy 1-t\u00f6bb t\u00edpus\u00fa asszoci\u00e1ci\u00f3s kapcsolatk\u00e9nt \u201eillik\u201d megjelennie a k\u00e9t oszt\u00e1ly k\u00f6z\u00f6tt. A modell\u00fcnkben egyel\u0151re nem ezt tapasztaljuk. Szerencs\u00e9re a VS modellez\u0151 fel\u00fclete r\u00e1vehet\u0151, hogy ilyen form\u00e1ban jelen\u00edtse meg ezt a kapcsolatt\u00edpust. Ehhez kattintsunk a diagramon jobb gombbal az equipment tagv\u00e1ltoz\u00f3n, \u00e9s a men\u00fcb\u0151l v\u00e1lasszuk ki a Show as Collection Association elemet. Az <code>IEquipment</code> interf\u00e9szt ezt k\u00f6vet\u0151en mozgassuk ki jobbra, hogy kell\u0151 hely legyen a diagramon az asszoci\u00e1ci\u00f3s kapcsolat \u00e9s a kapcsolaton lev\u0151 szerep (role) adatainak megjelen\u00edt\u00e9s\u00e9re:</p> <p></p> <p>A dupla ny\u00edl v\u00e9gz\u0151d\u00e9s a \u201et\u00f6bbes\u201d oldalon nem szabv\u00e1nyos UML, de ne szomorodjunk el t\u0151le k\u00fcl\u00f6n\u00f6sebben, nincs semmi jelent\u0151s\u00e9ge. Annak mindenk\u00e9ppen \u00f6r\u00fcl\u00fcnk, hogy  a kapcsolatot reprezent\u00e1l\u00f3 ny\u00edl az <code>IEquipment</code> v\u00e9g\u00e9n a szerepben a tagv\u00e1ltoz\u00f3 neve (s\u0151t, m\u00e9g a pontos t\u00edpusa is) fel van t\u00fcntetve.</p> <p>Navig\u00e1ljunk el az <code>EquipmentInventory</code> forr\u00e1sk\u00f3dj\u00e1hoz, \u00e9s \u00edrjuk meg a konstruktor\u00e1t, ami inicializ\u00e1lja az <code>equipment</code> gy\u0171jtem\u00e9nyt!</p> <pre><code>public EquipmentInventory()\n{\n    equipment = new List&lt;IEquipment&gt;();\n}\n</code></pre> <p>Ezut\u00e1n \u00edrjuk meg a <code>ListAll</code> met\u00f3dust, ami ki\u00edrja az elemek \u00e9letkor\u00e1t, \u00e9s az aktu\u00e1lis \u00e9rt\u00e9k\u00fcket:</p> <pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine($\"\u00c9letkor: {eq.GetAge()}\\t\u00c9rt\u00e9ke: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>Az elemeken a <code>foreach</code> utas\u00edt\u00e1ssal iter\u00e1lunk v\u00e9gig. A <code>foreach</code> utas\u00edt\u00e1s haszn\u00e1lata sor\u00e1n az <code>in</code> kulcssz\u00f3 ut\u00e1n egy gy\u0171jtem\u00e9nynek kell \u00e1llnia, az <code>in</code> el\u0151tt pedig egy v\u00e1ltoz\u00f3 deklar\u00e1ci\u00f3nak (eset\u00fcnkben <code>IEquipment eq</code>), ahol a t\u00edpus a gy\u0171jtem\u00e9ny elemt\u00edpusa. Minden iter\u00e1ci\u00f3ban ez a v\u00e1ltoz\u00f3 a gy\u0171jtem\u00e9ny iter\u00e1ci\u00f3beli \u00e9rt\u00e9k\u00e9t veszi fel.</p> <p>A <code>Console.WriteLine</code> m\u0171veletnek vagy egy egyszer\u0171 stringet adunk meg, vagy, mint eset\u00fcnkben, egy form\u00e1z\u00e1si stringet. A behelyettes\u00edt\u00e9seket string interpol\u00e1ci\u00f3val oldottuk meg: a behelyettes\u00edtend\u0151 \u00e9rt\u00e9keket <code>{}</code> k\u00f6z\u00f6tt kell megadni. Ha string interpol\u00e1ci\u00f3t haszn\u00e1lunk, a stringnek <code>$</code> jellel kell kezd\u0151dnie.</p> <p>\u00cdrjunk meg egy <code>AddEquipment</code> nev\u0171 f\u00fcggv\u00e9nyt, ami felvesz egy \u00faj eszk\u00f6zt a k\u00e9szletbe:</p> <pre><code>public void AddEquipment(IEquipment eq)\n{\n     equipment.Add(eq);\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/#iequipment-megvalositok","title":"IEquipment megval\u00f3s\u00edt\u00f3k","text":"<p>Kor\u00e1bbi d\u00f6nt\u00e9s\u00fcnk \u00e9rtelm\u00e9ben az <code>IEquipment</code> interf\u00e9szt haszn\u00e1ljuk az k\u00fcl\u00f6nb\u00f6z\u0151 alkatr\u00e9sz t\u00edpusok egys\u00e9ges kezel\u00e9s\u00e9re. Est\u00fcnkben mind a <code>SoundCard</code>, mind a <code>HardDisk</code> oszt\u00e1ly rendelkezik <code>GetAge()</code> \u00e9s <code>GetPrice()</code> met\u00f3dussal, m\u00e9gsem tudjuk \u0151ket egys\u00e9gesen kezelni (pl. k\u00f6z\u00f6s list\u00e1ban t\u00e1rolni). Ahhoz, hogy ezt meg tudjuk tenni, el kell \u00e9rn\u00fcnk, hogy mindk\u00e9t oszt\u00e1ly megval\u00f3s\u00edtsa az <code>IEquipment</code> interf\u00e9szt. M\u00f3dos\u00edtsuk a forr\u00e1sukat:</p> <pre><code>public class SoundCard : IEquipment\n</code></pre> <pre><code>public class HardDisk : IEquipment\n</code></pre> <p>Ezt k\u00f6vet\u0151en a <code>SoundCard</code> \u00e9s <code>HardDisk</code> oszt\u00e1lyban implement\u00e1lnunk kell az <code>IEquipment</code> interf\u00e9szben lev\u0151 met\u00f3dusokat. Azt tapasztaljuk, hogy ezzel nincs most teend\u0151k, a <code>GetPrice</code> \u00e9s <code>GetAge</code> f\u00fcggv\u00e9nyek m\u00e1r meg vannak \u00edrva mindk\u00e9t helyen.</p> <p>Pr\u00f3bak\u00e9ppen a <code>Program.cs</code> f\u00e1jlban tal\u00e1lhat\u00f3 <code>Main</code> f\u00fcggv\u00e9ny\u00fcnkben hozzunk l\u00e9tre egy <code>EquipmentInventory</code> objektumot, t\u00f6lts\u00fck fel <code>HardDisk</code> \u00e9s <code>SoundCard</code> objektumokkal, majd list\u00e1zzuk a k\u00e9sztelet a konzolra. Amennyiben nem 2025 az aktu\u00e1lis \u00e9v, az al\u00e1bbi sorokn\u00e1l a 2025-\u00f6s \u00e9vet \u00edrjuk \u00e1t az aktu\u00e1lis \u00e9vre, a 2024-et pedig enn\u00e9l eggyel kisebb sz\u00e1mra!</p> <pre><code>static void Main( string[] args )\n{\n    EquipmentInventory ei = new EquipmentInventory();\n\n    ei.AddEquipment(new HardDisk(2023, 30000, 80));\n    ei.AddEquipment(new HardDisk(2024, 25000, 120));\n    ei.AddEquipment(new HardDisk(2024, 25000, 250));\n\n    ei.AddEquipment(new SoundCard(2024, 8000));\n    ei.AddEquipment(new SoundCard(2025, 7000));\n    ei.AddEquipment(new SoundCard(2024, 6000));\n\n    ei.ListAll();\n}\n</code></pre> <p>Az alkalmaz\u00e1st futtatva azt tapasztaljuk, hogy b\u00e1r megold\u00e1sunk kezdetleges, de m\u0171k\u00f6dik:</p> <p></p> <p>Folytassuk a munk\u00e1t a <code>LedDisplay</code> oszt\u00e1llyal. A <code>DisplayBase</code> \u0151s forr\u00e1sk\u00f3dj\u00e1t a k\u00f6vetelm\u00e9nyek miatt nem m\u00f3dos\u00edthatjuk. De ez semmif\u00e9le probl\u00e9m\u00e1t nem okoz, a <code>LedDisplay</code> oszt\u00e1lyunk fogja az <code>IEquipment</code> interf\u00e9szt implement\u00e1lni, m\u00f3dos\u00edtsuk a k\u00f3dot ennek megfelel\u0151en:</p> <pre><code>public class LedDisplay : DisplayBase, IEquipment\n</code></pre> <p>A <code>LedDisplay</code> oszt\u00e1lyban m\u00e1r meg kell \u00edrni az interf\u00e9szben szerepl\u0151 f\u00fcggv\u00e9nyeket:</p> <pre><code>public double GetPrice()\n{\n    return this.price;\n}\n\npublic int GetAge()\n{\n    return DateTime.Today.Year - this.manufacturingYear;\n}\n</code></pre> <p>B\u0151v\u00edts\u00fck a <code>Main</code> f\u00fcggv\u00e9ny\u00fcnket is, vegy\u00fcnk fel k\u00e9t <code>LedDisplay</code> objektumot a k\u00e9szlet\u00fcnkbe (itt is \u00e9l, hogy amennyiben nem 2025 az aktu\u00e1lis \u00e9v, az al\u00e1bbi sorokn\u00e1l a 2025-\u00f6s \u00e9vet \u00edrjuk \u00e1t az aktu\u00e1lis \u00e9vre, a 2024-et pedig enn\u00e9l eggyel kisebb sz\u00e1mra!</p> <pre><code>ei.AddEquipment(new LedDisplay(2024, 80000, 17, 16));\nei.AddEquipment(new LedDisplay (2025, 70000, 17, 12));\n\nei.ListAll();\nConsole.ReadKey();\n</code></pre> <p>Tesztel\u00e9sk\u00e9ppen futtassuk az alkalmaz\u00e1st.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#3-feladat-az-interfesz-es-az-absztrakt-ososztaly-alkalmazastechnikaja","title":"3. Feladat - Az interf\u00e9sz \u00e9s az absztrakt \u0151soszt\u00e1ly alkalmaz\u00e1stechnik\u00e1ja","text":""},{"location":"labor/1-model-es-kod-kapcsolata/#interfesz-problematikaja","title":"Interf\u00e9sz problematik\u00e1ja","text":"<p>\u00c9rt\u00e9kelj\u00fck a jelenlegi, interf\u00e9sz alap\u00fa megold\u00e1sunkat.</p> <p>Az egyik f\u0151 probl\u00e9ma, hogy k\u00f3dunk tele van a karbantarthat\u00f3s\u00e1got \u00e9s b\u0151v\u00edthet\u0151s\u00e9get rombol\u00f3 k\u00f3dduplik\u00e1ci\u00f3val:</p> <ul> <li>A <code>yearOfCreation</code> \u00e9s <code>newPrice</code> tagok minden alkatr\u00e9sz t\u00edpusban (kiv\u00e9ve a speci\u00e1lis <code>LedDisplay</code>-t) k\u00f6z\u00f6sek, ezeket \u00faj t\u00edpus bevezet\u00e9sekor is copy-paste technik\u00e1val \u00e1t kell venni.</li> <li>A <code>GetAge</code> f\u00fcggv\u00e9ny implement\u00e1ci\u00f3ja szinten minden alkatr\u00e9sz t\u00edpusban (kiv\u00e9ve a speci\u00e1lis <code>LedDisplay</code>-t) azonos, szint\u00e9n copy-paste-tel \u201eszapor\u00edtand\u00f3\u201d.</li> <li>A konstruktorok <code>yearOfCreation</code> \u00e9s <code>newPrice</code> tagokat inicializ\u00e1l\u00f3 sorai szint\u00e9n duplik\u00e1ltak az egyes oszt\u00e1lyokban.</li> </ul> <p>B\u00e1r ez a k\u00f3dduplik\u00e1ci\u00f3 egyel\u0151re nem t\u0171nik jelent\u0151snek, \u00faj alkatr\u00e9sz t\u00edpusok bevezet\u00e9s\u00e9vel egyre ink\u00e1bb elm\u00e9rgesedik a helyzet, jobb id\u0151ben elej\u00e9t venni a j\u00f6v\u0151beli f\u00e1jdalmaknak.</p> <p>A m\u00e1sik probl\u00e9ma abb\u00f3l ad\u00f3dik, hogy az alkatr\u00e9sz adatok list\u00e1z\u00e1sa jelenleg f\u00e1jdalmasan hi\u00e1nyos, nem jelenik meg az alkatr\u00e9sz t\u00edpusa (csak a kora \u00e9s az \u00e1ra). A t\u00edpus megjelen\u00edt\u00e9s\u00e9hez az IEquipment interf\u00e9szt b\u0151v\u00edteni kell, pl. egy <code>GetDescription</code> nev\u0171 m\u0171velet bevezet\u00e9s\u00e9vel.  Vegy\u00fcnk is fel egy <code>GetDescription</code> f\u00fcggv\u00e9nyt az interf\u00e9szbe!</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription();\n}\n</code></pre> <p>Ekkor minden <code>IEquipment</code> interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyban meg kellene val\u00f3s\u00edtani ezt a met\u00f3dust is, ami sok oszt\u00e1ly eset\u00e9n sok munka (valamint egy t\u00f6bbkomponens\u0171, vagyis t\u00f6bb DLL-b\u0151l \u00e1ll\u00f3 alkalmaz\u00e1s eset\u00e9ben, amikor ezek nem egy fejleszt\u0151 c\u00e9g kez\u00e9ben vannak, sokszor nem is megoldhat\u00f3). A Build parancs futtat\u00e1s\u00e1val ellen\u0151rizz\u00fck, hogy a <code>GetDescription</code> felv\u00e9tele ut\u00e1n h\u00e1rom helyen is ford\u00edt\u00e1si hib\u00e1t kapunk.</p> <p>Interf\u00e9szben alap\u00e9rtelmezett implement\u00e1ci\u00f3 megad\u00e1sa</p> <p>\u00c9rdemes tudni, hogy C# 8-t\u00f3l (illetve .NET vagy .NET Core runtime is kell hozz\u00e1, .NET Framework alatt nem t\u00e1mogatott) kezdve interf\u00e9sz m\u0171veleteknek is lehet alap\u00e9rtelmezett implement\u00e1ci\u00f3t adni (default interface methods), \u00edgy a fenti probl\u00e9ma megold\u00e1s\u00e1hoz nincs sz\u00fcks\u00e9g absztrakt oszt\u00e1lyra, de interf\u00e9sznek tov\u00e1bbiakban sem lehet tagv\u00e1ltoz\u00f3ja. B\u0151vebben inform\u00e1ci\u00f3 itt:  default interface methods.</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription() { return \"EquipmentBase\"; }\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/#absztrakt-osztaly","title":"Absztrakt oszt\u00e1ly","text":"<p>Mindk\u00e9t probl\u00e9m\u00e1ra megold\u00e1st jelent egy k\u00f6z\u00f6s absztrakt \u0151s bevezet\u00e9se (kiv\u00e9ve az <code>LedDisplay</code> oszt\u00e1lyt, amire m\u00e9g visszat\u00e9r\u00fcnk). Ebbe fel tudjuk k\u00f6lt\u00f6ztetni a lesz\u00e1rmazottakra k\u00f6z\u00f6s k\u00f3dot, valamint az \u00fajonnan bevezetett <code>GetDescription</code> m\u0171velethez egy alap\u00e9rtelmezett implement\u00e1ci\u00f3t tudunk megadni. Legyen az \u00faj absztrakt \u0151soszt\u00e1lyunk neve <code>EquipmentBase</code>. K\u00e9rd\u00e9s, sz\u00fcks\u00e9g van-e a tov\u00e1bbiakban az <code>IEquipment</code> interf\u00e9szre, vagy az teljesen kiv\u00e1lthat\u00f3 az \u00faj <code>EquipmentBase</code> oszt\u00e1llyal. Az <code>IEquipment</code> interf\u00e9szt meg kell tartsuk, mert a LedDisplay oszt\u00e1lyunkat nem tudjuk az <code>EquipmentBase</code>-b\u0151l sz\u00e1rmaztatni: m\u00e1r van egy k\u00f6telez\u0151en el\u0151\u00edrt \u0151soszt\u00e1lya, a <code>DisplayBase</code>: emiatt az EquipmentInventory a tov\u00e1bbfejlesztett megold\u00e1sunkban is <code>IEquipment</code> interf\u00e9szk\u00e9nt hivatkozik az k\u00fcl\u00f6nb\u00f6z\u0151 alkatr\u00e9szekre.</p> <p>\u00c1lljunk is neki az \u00e1talak\u00edt\u00e1snak. Legyen az oszt\u00e1lydiagramunk az akt\u00edv tabf\u00fcl. A Toolbox-b\u00f3l drag&amp;drop-pal dobjunk fel egy Abstract Class elemet a diagramra, a neve legyen <code>EquipmentBase</code>.</p> <p></p> <p>A k\u00f6vetkez\u0151kben azt kell el\u00e9rj\u00fck, hogy a <code>SoundCard</code> \u00e9s a <code>HardDisk</code> oszt\u00e1lyok sz\u00e1rmazzanak az <code>EquipmentBase</code>-b\u0151l (a <code>LedDisplay</code>-nek m\u00e1r van m\u00e1sik \u0151se, \u00edgy ott ezt nem tudjuk megtenni). Ehhez v\u00e1lasszuk ki az Inheritance kapcsolatot a Toolbox-ban, majd h\u00fazzunk egy-egy vonalat a gyermekoszt\u00e1lyb\u00f3l kiindulva az \u0151soszt\u00e1lyba a <code>SoundCard</code> \u00e9s <code>HardDisk</code> eset\u00e9ben egyar\u00e1nt.</p> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben alak\u00edtsuk \u00e1t \u00fagy a k\u00f3dot, hogy ne a <code>HardDisk</code> \u00e9s <code>SoundCard</code> val\u00f3s\u00edts\u00e1k meg k\u00fcl\u00f6n-k\u00fcl\u00f6n az <code>IEquipment</code> interf\u00e9szt, hanem a k\u00f6z\u00f6s \u0151s\u00fck, az <code>EquipmentBase</code> egyszer. Ehhez m\u00f3dos\u00edtsuk az EquipmentBase oszt\u00e1lyt \u00fagy, hogy val\u00f3s\u00edtsa meg az interf\u00e9szt (ak\u00e1r a diagramon h\u00fazzunk be egy inheritance kapcsolatot az <code>EquipmentBase</code>-b\u0151l az <code>IEquipment</code>-be, vagy az <code>EquipmentBase</code> forr\u00e1sk\u00f3dj\u00e1t m\u00f3dos\u00edtsuk). A <code>HardDisk</code> \u00e9s <code>SoundCard</code> oszt\u00e1lyokb\u00f3l t\u00f6r\u00f6lj\u00fck az <code>IEquipment</code> megval\u00f3s\u00edt\u00e1s\u00e1t (az \u0151s m\u00e1r implement\u00e1lja).</p> <p>A diagramunk \u00e9s a forr\u00e1sk\u00f3dunk vonatkoz\u00f3 r\u00e9szei ezt k\u00f6vet\u0151en \u00edgy n\u00e9znek ki:</p> <p></p> <pre><code>public abstract class EquipmentBase : IEquipment\n</code></pre> <pre><code>public class HardDisk : EquipmentBase\n</code></pre> <pre><code>public class SoundCard : EquipmentBase\n</code></pre> <p>A k\u00f3dunk m\u00e9g nem fordul, ennek t\u00f6bb oka is van. Az <code>EquipmentBase</code> implement\u00e1lja az <code>IEquipment</code> interf\u00e9szt, de m\u00e9g nincsenek benne implement\u00e1lva az interf\u00e9sz m\u0171veletei. Vagy gener\u00e1ltassuk le a met\u00f3dusokat a smart tag haszn\u00e1lat\u00e1val, vagy g\u00e9pelj\u00fck be a k\u00f6vetkez\u0151 elveknek megfelel\u0151en:</p> <ul> <li>A <code>newPrice</code> \u00e9s <code>yearOfCreation</code> duplik\u00e1lva vannak a <code>HardDisk</code> \u00e9s <code>SoundCard</code> oszt\u00e1lyokban: mozgassuk (\u00e9s ne m\u00e1soljuk!) \u00e1t ezeket a k\u00f6z\u00f6s <code>EquipmentBase</code> \u0151sbe, \u00e9s <code>protected</code> l\u00e1that\u00f3s\u00e1got adjunk meg.</li> <li>A <code>GetAge</code> m\u0171velet duplik\u00e1lva van a <code>HardDisk</code> \u00e9s <code>SoundCard</code> oszt\u00e1lyokban, ezekb\u0151l t\u00f6r\u00f6lj\u00fck ki az implement\u00e1ci\u00f3t \u00e9s vigy\u00fck \u00e1t az <code>EquipmentBase</code> oszt\u00e1lyba.</li> <li>A <code>GetPrice</code> m\u0171veletet absztrakt m\u0171veletk\u00e9nt vegy\u00fck fel az \u0151sbe. Ez sz\u00e1nd\u00e9kos tervez\u0151i d\u00f6nt\u00e9s, \u00edgy r\u00e1k\u00e9nyszer\u00edtj\u00fck a lesz\u00e1rmazott oszt\u00e1lyokat, hogy mindenk\u00e9ppen defini\u00e1lj\u00e1k fel\u00fcl ezt a m\u0171veletet.</li> <li>A <code>GetDescription</code> eset\u00e9ben viszont pont ford\u00edtottja a helyzet: ezt virtu\u00e1lisnak defini\u00e1ljuk (\u00e9s nem absztraktnak), vagyis m\u00e1r az \u0151sben is adunk meg implement\u00e1ci\u00f3t. \u00cdgy a lesz\u00e1rmazottak nincsenek r\u00e1k\u00e9nyszer\u00edtve a m\u0171velet fel\u00fcldefini\u00e1l\u00e1s\u00e1ra.</li> </ul> <p>A fentieknek megfelel\u0151 k\u00f3d a k\u00f6vetkez\u0151:</p> <pre><code>public abstract class EquipmentBase : IEquipment\n{\n    protected int yearOfCreation;\n    protected int newPrice;\n\n    public int GetAge()\n    {\n        return DateTime.Today.Year - yearOfCreation;\n    }\n\n    public abstract double GetPrice();\n\n    public virtual string GetDescription()\n    {\n        return \"EquipmentBase\";\n    }\n}\n</code></pre> <p>N\u00e9h\u00e1ny kieg\u00e9sz\u00edt\u0151 gondolat a k\u00f3dr\u00e9szletre vonatkoz\u00f3an:</p> <ul> <li>Az absztrakt oszt\u00e1lyok eset\u00e9ben az <code>abstract</code> kulcssz\u00f3t ki kell \u00edrni a <code>class</code> sz\u00f3 el\u00e9.</li> <li>Az absztrakt m\u0171veletek eset\u00e9ben az <code>abstract</code> kulcssz\u00f3t kell megadni</li> <li>.NET k\u00f6rnyezetben lehet\u0151s\u00e9g\u00fcnk van szab\u00e1lyozni, hogy egy m\u0171velet virtu\u00e1lis-e vagy sem. Ebb\u0151l a szempontb\u00f3l a C++ nyelvhez hasonl\u00edt. Amennyiben egy m\u0171veletet virtu\u00e1liss\u00e1 szeretn\u00e9nk tenni, a <code>virtual</code> kulcssz\u00f3t kell a m\u0171veletre megadni. Eml\u00e9keztet\u0151: akkor defini\u00e1ljunk egy m\u0171veletet virtu\u00e1lisnak, ha a lesz\u00e1rmazottak azt fel\u00fcldefini\u00e1l(hat)j\u00e1k. Csak ekkor garant\u00e1lt, hogy egy \u0151sreferenci\u00e1n megh\u00edvva az adott m\u0171veletet a lesz\u00e1rmazottbeli verzi\u00f3 h\u00edv\u00f3dik meg.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/#leszarmazottak","title":"Lesz\u00e1rmazottak","text":"<p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben t\u00e9rj\u00fcnk \u00e1t az <code>EquipmentBase</code> lesz\u00e1rmazottakra. C# nyelven az absztrakt \u00e9s virtu\u00e1lis m\u0171veletek fel\u00fcldefini\u00e1l\u00e1sakor a lesz\u00e1rmazottban meg kell adni az <code>override</code> kulcssz\u00f3t. Els\u0151 l\u00e9p\u00e9sben a <code>GetPrice</code> m\u0171veletet defini\u00e1ljuk fel\u00fcl:</p> HardDisk.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0\n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 5000;\n}\n</code></pre> SoundCard.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0 \n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 2000;\n}\n</code></pre> <p>A k\u00f6vetkez\u0151kben l\u00e9p\u00e9sben a <code>GetDescription</code> m\u0171veletet \u00edrjuk meg a <code>HardDisk</code> \u00e9s <code>SoundCard</code> oszt\u00e1lyokban. Mivel itt az \u0151sbeli virtu\u00e1lis f\u00fcggv\u00e9nyt defini\u00e1ljuk fel\u00fcl, szint\u00e9n meg kell adni az <code>override</code> kulcssz\u00f3t:</p> HardDisk.cs<pre><code>public override string GetDescription()\n{\n    return \"Hard Disk\";\n}\n</code></pre> SoundCard.cs<pre><code>public override string GetDescription()\n{\n    return \"Sound Card\";\n}\n</code></pre> <p>Felmer\u00fclhet benn\u00fcnk a k\u00e9rd\u00e9s, mi\u00e9rt d\u00f6nt\u00f6ttek \u00fagy a C# nyelv tervez\u0151i, hogy a m\u0171veletek fel\u00fcldefini\u00e1l\u00e1sakor egy extra kulcssz\u00f3t kelljen megadni, hasonl\u00f3ra pl. a C++ nyelv eset\u00e9ben nem volt sz\u00fcks\u00e9g. Az ok egyszer\u0171: a k\u00f3d \u00edgy kifejez\u0151bb. A lesz\u00e1rmazottak k\u00f3dj\u00e1t n\u00e9zve az <code>override</code> sz\u00f3 azonnal egy\u00e9rtelm\u0171v\u00e9 teszi, hogy valamelyik \u0151sben ez a m\u0171velet absztrakt vagy virtu\u00e1lis, nem kell valamennyi \u0151s k\u00f3dj\u00e1t ehhez \u00e1ttekinteni.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#leddisplay-ose","title":"LedDisplay \u0151se","text":"<p>A <code>LedDisplay</code> oszt\u00e1lyunk \u0151se meg van k\u00f6tve, annak k\u00f3dja nem m\u00f3dos\u00edthat\u00f3, \u00edgy nem tudjuk az <code>EquipmentBase</code>-b\u0151l sz\u00e1rmaztatni. A <code>GetAge</code> m\u0171veletet \u00edgy nem tudjuk t\u00f6r\u00f6lni, ez a k\u00f3dduplik\u00e1ci\u00f3 itt megmarad (de csak a <code>LedDisplay</code> eset\u00e9ben, ami csak egy oszt\u00e1ly a sok k\u00f6z\u00fcl!).</p> <p>Note</p> <p>Val\u00f3j\u00e1ban egy kis plusz munk\u00e1val ett\u0151l a duplik\u00e1ci\u00f3t\u00f3l is meg tudn\u00e1nk szabadulni. Ehhez valamelyik oszt\u00e1lyban (pl. <code>EquipmentBase</code>) fel kellene venni egy statikus seg\u00e9df\u00fcggv\u00e9nyt, mely param\u00e9terben megkapn\u00e1 a gy\u00e1rt\u00e1si \u00e9vet, \u00e9s visszaadn\u00e1 az \u00e9letkort. Az <code>EquipmentBase.GetAge</code> \u00e9s a <code>LedDisplay.GetAge</code> ezt a seg\u00e9df\u00fcggv\u00e9nyt haszn\u00e1ln\u00e1 kimenete el\u0151\u00e1ll\u00edt\u00e1s\u00e1ra.</p> <p>A <code>LedDisplay</code> oszt\u00e1lyunkban ad\u00f3sak vagyunk m\u00e9g a <code>GetDescription</code> meg\u00edr\u00e1s\u00e1val:</p> LedDisplay.cs<pre><code>public string GetDescription()\n{\n    return \"Led Display\";\n}\n</code></pre> <p>Figyelj\u00fck meg, hogy itt NEM adtuk meg az <code>override</code> kulcssz\u00f3t. Mikor egy interf\u00e9sz f\u00fcggv\u00e9nyt implement\u00e1lunk, az <code>override</code>-ot nem kell/szabad ki\u00edrni.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#getdescription-hasznalata","title":"GetDescription haszn\u00e1lata","text":"<p>M\u00f3dos\u00edtsuk az <code>EquipmentInventory.ListAll</code> m\u0171velet\u00e9t, hogy az elemek le\u00edr\u00e1s\u00e1t is \u00edrja ki a kimenetre:</p> EquipmentInventory.cs<pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine($\"Le\u00edr\u00e1s: {eq.GetDescription()}\\t\" +\n            $\"\u00c9letkor: {eq.GetAge()}\\t\u00c9rt\u00e9ke: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>\u00cdgy m\u00e1r sokkal informat\u00edvabb kimetet kapunk az alkalmaz\u00e1s futtat\u00e1sakor:</p> <p></p>"},{"location":"labor/1-model-es-kod-kapcsolata/#konstruktor-kodduplikacio","title":"Konstruktor k\u00f3dduplik\u00e1ci\u00f3","text":"<p>A k\u00f3dunkat \u00e1ttekintve m\u00e9g egy helyen tal\u00e1lunk k\u00f3dduplik\u00e1ci\u00f3t. Valamennyi <code>EquipmentBase</code> lesz\u00e1rmazott (<code>HardDisk</code>, <code>SoundCard</code>) konstruktor\u00e1ban ott van ez a k\u00e9t sor:</p> <pre><code> this.yearOfCreation = yearOfCreation;\n this.newPrice = newPrice;\n</code></pre> <p>Ha belegondolunk, ezek a <code>yearOfCreation</code> \u00e9s <code>newPrice</code> tagok az \u0151sben vannak defini\u00e1lva, \u00edgy egy\u00e9bk\u00e9nt is az \u0151 felel\u0151ss\u00e9ge kellene legyen ezek inicializ\u00e1l\u00e1sa. Vegy\u00fcnk is fel egy megfelel\u0151 konstruktort az <code>EquipmentBase</code>-ben:</p> EquipmentBase.cs<pre><code>public EquipmentBase(int yearOfCreation, int newPrice)\n{\n    this.yearOfCreation = yearOfCreation;\n    this.newPrice = newPrice;\n}\n</code></pre> <p>A <code>HardDisk</code> \u00e9s <code>SoundCard</code> lesz\u00e1rmazottak konstruktor\u00e1nak t\u00f6rzs\u00e9b\u0151l vegy\u00fck ki a k\u00e9t tag inicializ\u00e1l\u00e1s\u00e1t, helyette a <code>base</code> kulcssz\u00f3val hivatkozva h\u00edvjuk meg az \u0151s konstruktor\u00e1t:</p> HardDisk.cs<pre><code>public HardDisk(int yearOfCreation, int newPrice, int capacityGB)\n    : base(yearOfCreation, newPrice)\n{\n    this.capacityGB = capacityGB;\n}\n</code></pre> SoundCard.cs<pre><code>public SoundCard(int yearOfCreation, int newPrice)\n    : base(yearOfCreation, newPrice)\n{\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/#ertekeles","title":"\u00c9rt\u00e9kel\u00e9s","text":"<p>Az interf\u00e9sz \u00e9s absztrakt \u0151s egy\u00fcttes haszn\u00e1lat\u00e1val siker\u00fclt a legkevesebb kompromisszummal j\u00e1r\u00f3 megold\u00e1st kidolgoznunk:</p> <ul> <li><code>IEquipment</code> interf\u00e9szk\u00e9nt hivatkozva egys\u00e9gesen tudjuk kezelni az alkatr\u00e9szek valamennyi t\u00edpus\u00e1t, m\u00e9g azokat is, melyekn\u00e9l az \u0151soszt\u00e1ly meg volt k\u00f6tve (puszt\u00e1n absztrakt \u0151s haszn\u00e1lat\u00e1val ezt nem tudtuk volna el\u00e9rni).</li> <li>Az <code>EquipmentBase</code> absztrakt \u0151s bevezet\u00e9s\u00e9vel egy kiv\u00e9telt\u0151l eltekintve a k\u00fcl\u00f6nb\u00f6z\u0151 alkatr\u00e9szt\u00edpusokra k\u00f6z\u00f6s k\u00f3dot fel tudtuk vinni egy k\u00f6z\u00f6s \u0151sbe, \u00edgy el tudtuk ker\u00fclni a k\u00f3dduplik\u00e1ci\u00f3t.</li> <li>Az <code>EquipmentBase</code> absztrakt \u0151s bevezet\u00e9s\u00e9vel alap\u00e9rtelmezett implement\u00e1ci\u00f3t tudunk megadni az \u00fajonnan bevezetett <code>IEquipment</code> m\u0171veletek eset\u00e9ben (pl. <code>GetDescripton</code>), \u00edgy nem vagyunk r\u00e1k\u00e9nyszer\u00edtve, hogy minden <code>IEquipment</code> implement\u00e1ci\u00f3s oszt\u00e1lyban meg kelljen azt adni.</li> </ul> <p>Z\u00e1r\u00e1sk\u00e9ppen vess\u00fcnk egy pillant\u00e1st megold\u00e1sunk UML (szer\u0171) oszt\u00e1lydiagramj\u00e1ra:</p> <p></p> <p>C# 11 - Statikus interf\u00e9szek</p> <p>A C# 11 leg\u00fajabb \u00fajdons\u00e1ga a statikus interf\u00e9sz tagok defini\u00e1l\u00e1sa, amivel olyan tagokat k\u00f6vetelhet\u00fcnk meg az implement\u00e1l\u00f3 oszt\u00e1lyt\u00f3l, amelyek nem az objektum p\u00e9ld\u00e1nyra vonatkoznak, hanem az oszt\u00e1lynak kell egy adott statikus taggal rendelkeznie. B\u0151vebben</p>"},{"location":"labor/1-model-es-kod-kapcsolata/#megjegyzes-opcionalis-hazi-gyakorlo-feladat","title":"Megjegyz\u00e9s - opcion\u00e1lis h\u00e1zi gyakorl\u00f3 feladat","text":"<p>Jelen megold\u00e1sunk nem t\u00e1mogatja az alkatr\u00e9szspecifikus adatok (pl. <code>HardDisk</code> eset\u00e9ben a kapacit\u00e1s) megjelen\u00edt\u00e9s\u00e9t a list\u00e1z\u00e1s sor\u00e1n. Ahhoz, hogy ezt meg tudjuk tenni, az alkatr\u00e9sz adatok form\u00e1zott stringbe \u00edr\u00e1s\u00e1t az <code>EqipmentInventory</code> oszt\u00e1lyb\u00f3l az alkatr\u00e9sz oszt\u00e1lyokba kellene vinni, a k\u00f6vetkez\u0151 elveknek megfelel\u0151en:</p> <ul> <li>Bevezethet\u00fcnk ehhez az <code>IEquipment</code> interf\u00e9szbe egy <code>GetFormattedString</code> m\u0171veletet, mely egy <code>string</code> t\u00edpus\u00fa objektummal t\u00e9r vissza. Alternat\u00edv megold\u00e1s lehet, ha a <code>System.Object ToString()</code> m\u0171velet\u00e9t defini\u00e1ljuk fel\u00fcl. .NET-ben ugyanis minden t\u00edpus implicit m\u00f3don a <code>System.Object</code>-b\u0151l sz\u00e1rmazik, aminek van egy virtu\u00e1lis <code>ToString()</code> m\u0171velete.</li> <li>Az <code>EquipmentBase</code>-ben meg\u00edrjuk a k\u00f6z\u00f6s tagok (le\u00edr\u00e1s, \u00e1r, kor) stringbe form\u00e1z\u00e1s\u00e1t.</li> <li>Amennyiben egy alkatr\u00e9sz t\u00edpusspecifikus adattal is rendelkezik, akkor oszt\u00e1ly\u00e1ban override-oljuk a stringbe form\u00e1z\u00f3 f\u00fcggv\u00e9nyt: ennek a f\u00fcggv\u00e9nynek egyr\u00e9szt meg kell h\u00edvnia az \u0151s v\u00e1ltozat\u00e1t (a <code>base</code> kulcssz\u00f3 haszn\u00e1lat\u00e1val), majd ehhez hozz\u00e1 kell f\u0171zni a saj\u00e1t form\u00e1zott adatait, \u00e9s ezzel a stringgel kell visszat\u00e9rnie.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/","title":"1. The relationship between the model and the code","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>The aim of the laboratory:</p> <ul> <li>Getting to know the students/instructor</li> <li>Clarification of the requirements for the laboratories</li> <li>Getting started with Visual Studio and .NET application development.</li> <li>Creating a simple Hello World .NET application, C# basics</li> <li>Illustrating the relationship between UML and code</li> <li>How to use an interface and an abstract base class</li> </ul> For instructors <p>Although there are certainly students who have used the Visual Studio environment before, either during the Prog2 (C++) course or for other reasons, there will almost certainly be others who have not used it or who remember it less. The goal here is to get familiar with the interface, so while solving the tasks, continuously explain the features being used (e.g. Solution Explorer, F5 run, using breakpoints, etc.), in order to create our very first C# application.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools needed to complete the laboratory:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>It is recommended to install the latest version of Visual Studio. The Community Edition, Professional and Enterprise versions are also suitable. The Community Edition is free and can be downloaded from the Microsoft website. The Professional is paid, but it is also available free of charge to students of the university (on the website https://azureforeducation.microsoft.com/devtools, as part of the Azure Dev Tools for Teaching programme).</p> <p>Visual Studio Class Diagram support</p> <p>For some of the exercises in this laboratory (and also for the first homework) we will use the Visual Studio Class Designer support. Visual Studio does not always add the Class Designer component during installation. If it is not possible to add a Class Diagram to your Visual Studio project (because the Class Diagram is not listed in the list of the window that appears during the Add New Item command - more on this later in this guide), you will need to install the Class Diagram component later:</p> <ol> <li>Start the Visual Studio installer (e.g. by typing \"Visual Studio Installer\" in the Windows Start menu).</li> <li>In the window that appears, select the \"Individual components\" tab</li> <li> <p>In the search box, type \"class designer\" and then make sure that \"Class Designer\" is checked in the filtered list.</p> <p></p> </li> </ol> <p>What you should review:</p> <ul> <li>There is no lecture associated with this laboratory. However, the laboratory builds on basic UML knowledge and the principles of mapping UML class diagrams to code.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#structure-of-the-laboratory","title":"Structure of the laboratory","text":"<p>At the beginning of the exercise, the instructor summarizes the requirements for the laboratories:</p> <ul> <li>Most of these can be found in the course data sheet</li> <li>Information about the homework assignments can be found on the course website.</li> </ul> <p>We will create .NET applications in C# using the Visual Studio development tool. C# is similar to Java, we will gradually learn the differences. The laboratory is guided, and tasks are carried out together based on the instructor's instructions.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#solution","title":"Solution","text":"Download the completed solution <p> It is essential to work following the instructor during the lab, it is forbidden (and pointless) to download the final solution. However, during subsequent independent practice, it can be useful to review the final solution, so we make it available.</p> <p>The solution is available on GitHub. The easiest way to download it is to clone it to your computer via the command line using the <code>git clone</code> command:</p> <p><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo -b megoldas</code></p> <p>You need to have the command-line git installed on your machine, more information here.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#task-1-creating-a-hello-world-net-console-application","title":"Task 1 - Creating a \"Hello world\" .NET console application","text":"<p>The task is to create a C# console application that prints the text \"Hello world!\" to the console.</p> <p>The application is written in C#. The compiled application is run by the .NET runtime. The theoretical background of compiling/running and the basics of .NET are covered in the first lecture.</p> <p>The steps to create a solution and a project within it in Visual Studio 2022:</p> <ol> <li>Start a new project wizard, which can be done in two ways<ul> <li>Using the startup window<ol> <li>Launch Visual Studio</li> <li>In the right-hand sidebar of the launch window that appears, choose Create new project</li> </ol> </li> <li>In a running Visual Studio<ol> <li>File / New-Project</li> </ol> </li> </ul> </li> <li> <p>In the Create new project wizard, select the Console app (and NOT the Console app (.NET Framework) template, choose the C# one. That it is C# is indicated by the top left corner of the template icon. If it doesn\u2019t appear in the list, you have to search/filter for it. You can search for it by typing \"console\" in the top search bar, or use the drop-down boxes below: set the first one (language) to \"C#\" and the third one (project type) to \"Console\".</p> <p></p> </li> <li> <p>Next button at the bottom of the wizard window, on the next wizard page:</p> <ol> <li>Project name: Hello World</li> <li>Location: in the labs, work in the **c:\\work** folder, you have write access to it.</li> <li>Solution name: Hello World (this should be written in by the time we get here)</li> <li>Place solution and project in the same directory: no tick (but not particularly significant).</li> </ol> </li> <li> <p>Next button at the bottom of the wizard window, on the next wizard page:</p> <ol> <li>Framework: .NET 8 (Long-term support).</li> <li>Check the \"Do not use top level statements\" checkbox (we will return to this explanation shortly).</li> </ol> </li> </ol> <p>The project also creates a new solution, whose structure can be viewed in the Visual Studio Solution Explorer window. A solution can consist of several projects, and a project can consist of several files. A solution is a summary of the entire working environment (it includes a file with the extension <code>.sln</code>), while the output of a project is typically a file <code>.exe</code> or <code>.dll</code>, i.e. a component of a complex application/system. The project file extension for C# applications is <code>.csproj</code>.</p> <p>The content of our <code>Program.cs</code> file is as follows:</p> Program.cs<pre><code>namespace HelloWorld\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> <p>Add a <code>Console.ReadKey()</code> line:</p> <pre><code>namespace HelloWorld\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            Console.ReadKey();\n        }\n    }\n}\n</code></pre> <ol> <li> <p>Run the application (e.g. using the F5 key).</p> <p>The structure of the code is very similar to Java and C++. Our classes are organised into namespaces. A namespace can be defined with the keyword <code>namespace</code>. To bring namespaces into scope use the <code>using</code> keyword. e.g:</p> <pre><code>using System.Collections.Generic;\n</code></pre> </li> <li> <p>In a C# console application, the entry point of the application is defined by writing a static function named <code>Main</code>. The class name can be anything, VS generated a class called <code>Program</code> in our case. The parameter list of the <code>Main</code> function is fix: either no parameters are given, or a <code>string[]</code> is given, in which the command line arguments are given at runtime.</p> </li> <li>In .NET, the <code>Console</code> class of the <code>System</code> namespace is used to handle standard input and output. With the static operation <code>WriteLine</code> you can write a line, with <code>ReadKey</code> you can wait for a key to be pressed.</li> </ol> <p>Top level statements, Implicit and static usings, and namespaces</p> <p>When creating the project earlier, we checked the \"Do not use top-level statements\" checkbox. If we had not done this, our <code>Program.cs</code> file would contain only one meaningful line:</p> <pre><code>// See https://aka.ms/new-console-template for more information\nConsole.WriteLine(\"Hello World!\");\n</code></pre> <p>This is functionally equivalent to the code above containing the <code>Program</code> class and its <code>Main</code> function. Let's see what makes this possible (you can read more about them here https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements, both new in C# 10):</p> <ul> <li>Top level statements. The idea is that you can write code directly in a single source file without any class/<code>Main</code> and other function definitions in the project. In this case, behind the scenes, the compiler puts this into a static <code>Main</code> function of a class we don't see. The motivation for its introduction was to reduce boilerplate code for very simple, \"script-like\" applications.</li> <li>Implicit global usings. Depending on exactly what project type you have created, certain fundamental namespaces will be automatically using in all source files behind the scenes (the compiler uses the global using directive for this). The point is: this way, developers don't have to add certain frequently used namespaces (e.g. <code>System.IO</code>, <code>System.Collections.Generic</code>, etc.) in each source file.</li> <li> <p>Static using. In C#, you can also use static classes instead of namespaces, so you do not have to explicitly reference them. A common case is the use of the <code>Console</code> or <code>Math</code> class.</p> <pre><code>using static System.Console;\n\nnamespace ConsoleApp12\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteLine(\"Hello, World!\");\n        }\n    }\n}\n</code></pre> </li> <li> <p>File-scoped namespaces. Also a C# 10 simplification that lets you skip braces when declaring namespaces, so the namespace applies to the entire file:</p> <pre><code>namespace HelloWorld;\n\ninternal class Program\n{\n    // ...\n}\n</code></pre> </li> </ul> <p>Inconsistent visibility or inconsistent accessibility error</p> <p>During the the semester, while implementing programming tasks, you may encounter a compiler error complaining about inconsistent visibility or inconsistent accessibility. This phenomenon is due to the possibility to control the visibility of each type (class, interface, etc.) in a .NET environment:</p> <ul> <li><code>internal</code> or no visibility is specified: the type is visible only inside the assembly (.exe, .dll)/project</li> <li><code>public</code>: the type is also visible to other assemblies/projects</li> </ul> <p>The easiest way to avoid this error is to define all our types as public, e.g.:</p> <pre><code>public class HardDisk\n{\n    // ...\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#theoretical-overview","title":"Theoretical overview","text":"<p>The following subchapters do not contain tasks; they are meant to introduce students to relevant theoretical topics with examples.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#a-theory-of-the-relationship-between-the-uml-class-diagram-and-code-student","title":"A) Theory of the relationship between the UML class diagram and code [student]*","text":"<p>The material is available here: The relationship between the UML class diagram and code. This topic was covered in the previous semester in the Software Technology course.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#b-interface-and-abstract-base-class-student","title":"B) Interface and abstract (base) class [student]*","text":"<p>The material is available here: Interface and abstract (base) class.</p> <p>Topics:</p> <ul> <li>The concept and definition of an abstract class in C#</li> <li>The concept and definition of an interface in C#</li> <li>Comparison of abstract base class and interface</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#task-2-illustrating-the-relationship-between-uml-and-code","title":"Task 2 - Illustrating the relationship between UML and code","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#task-description-equipment-inventory","title":"Task description - Equipment inventory","text":"<p>Task: We were asked to develop a computer parts inventory application. In details:</p> <ul> <li>We need to be able to handle different types of parts. Initially, <code>HardDisk</code>, <code>SoundCard</code> and <code>LedDisplay</code> types should be supported, but the system should be easily extensible to new types.</li> <li>The data related to the parts are: year of purchase, age (calculated), purchase price and current price (calculated), but may also include type-specific data (e.g. capacity for <code>HardDisk</code>).</li> <li>The actual price depends on the type of part, the purchase price and the part\u2019s manufacturing year. For example, the older the part, the higher the discount, but the discount depends on the part type.</li> <li>You must be able to list the parts in stock.</li> <li>The <code>LedDisplay</code> class must be derived from a <code>DisplayBase</code> class, and the source code of the <code>DisplayBase</code> class cannot be changed. In this example, it may not seem particularly meaningful, but in practice, we often encounter similar situations where the framework/platform we are using requires us to derive from a built-in class. Typically, this is the case when working with windows, forms, or custom control types: they must inherit from the framework's built-in classes, and we don't have (or at least certainly don't want to change) the source code of the framework - e.g. Java, .NET. Our example simulates that scenario by requiring that <code>LedDisplay</code> inherit from <code>DisplayBase</code>.</li> </ul> <p>In our implementation, we are making a big simplification: the parts are only stored in memory, and the listing is as simple as possible, simply by writing the data of the registered parts to the console.</p> <p>During the initial discussions, we receive the following information from the client: an internal staff member has already started the development, but due to lack of time, they have only reached a half-finished solution. Part of our task is to understand the semi-finished solution and to implement the task from there.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#class-diagram","title":"Class Diagram","text":"<p>Open the source code solution provided by our client by following the steps below.</p> <p>To do this, clone the Git repository of the initial project, available online on GitHub, to a new folder of its own within <code>C:\\Work</code>: e.g: <code>C:\\Work\\NEPTUN\\lab1</code>. In this new folder, open a command line or powershell and run the following git command:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo.git\n</code></pre> <p>Note</p> <p>You will read more about Git as a source code management system in the context of the first homework assignment.</p> <p>Open the Visual Studio solution src/EquipmentInventory.sln in the cloned folder.</p> <p>In Solution Explorer, run through the files by eye. It would help to understand the relationships between classes by displaying them on a class diagram. Let's add a class diagram in our project. In the Solution Explorer, right-click on the project (not the solution!), select Add/New Item from the pop-up menu, then in the window that appears, select Class Diagram. Enter Main.cd as the name of the diagram at the bottom of the window, then click OK.</p> <p>Missing Class Diagram template</p> <p>If the Class Diagram item does not appear in the list, then the appropriate component of VS is not installed. You can read more about this in the Prerequisites section of this document.</p> <p>At this point, the <code>Main.cd</code> diagram file appears in the Solution Explorer, double-click to open it. The diagram is currently empty. Drag and drop the .cs files from the Solution Explorer onto the diagram. Visual Studio then examines the classes in those source files and reverse-engineers them into UML classes. Arrange them to match the figure below (expand the class members by clicking the double arrow in the upper-right corner of each class shape):</p> <p></p> <p>You can also view the source code for the classes, either by double-clicking on the corresponding class on the diagram or by opening the .cs files from Solution Explorer. We observe the following:</p> <ul> <li>The <code>SoundCard</code>, <code>HardDisk</code> and <code>LedDisplay</code> classes are relatively well-developed, with the necessary attributes and getter functions.</li> <li><code>LedDisplay</code> inherits from the <code>DisplayBase</code> class as required.</li> <li><code>EquipmentInventory</code> is responsible for handling the inventory of parts in stock, but practically none of this is implemented.</li> <li>There is an <code>IEquipment</code> interface with <code>GetAge</code> and <code>GetPrice</code> methods.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#equipmentinventory","title":"EquipmentInventory","text":"<p>Let's start working on the solution. First, establish the basic concepts. In the <code>EquipmentInventory</code> class, we will store different part types in a heterogeneous collection. This is the key to uniform handling of parts, enabling the solution to be easily extended with new part types.</p> <p>As discussed earlier, unified management can be achieved either by implementing a common base class or a common interface. In our case, a common base class (e.g. <code>EquipmentBase</code>) is ruled out because <code>LedDisplay</code> is already forced to inherit from <code>DisplayBase</code>, and .NET does not allow multiple inheritance from classes. We also cannot modify <code>DisplayBase</code> so that it inherits from <code>EquipmentBase</code> (the requirement says we cannot modify its source code). So, an interface-based approach remains. Likely, the earlier developer reached the same conclusion and introduced the <code>IEquipment</code> interface.</p> <p>Add a generic list of <code>IEquipment</code> type elements (not property but field!) to the <code>EquipmentInventory</code> class. Its visibility - striving for encapsulation - should be <code>private</code>. The name should be <code>equipment</code> (no \"s\" at the end, in English the plural of equipment is also equipment). To add a member variable, we use the Visual Studio Class Details window. If the window is not visible, it can be displayed by selecting View / Other Windows / Class Details.</p> <p></p> <p>So the field type is <code>List&lt;IEquipment&gt;</code>. The .NET <code>List</code> type is a dynamically resizing generic array (like <code>ArrayList</code> in Java). Looking at the <code>EquipmentInventory</code> class in the diagram, we see that only the name of the member variable is displayed, not the type. Right-click on the background of the diagram and from the Change Members Format menu, select Display Full Signature. Then the field type will be visible, and method signatures will also be fully displayed.</p> <p></p> <p>Double-clicking the <code>EquipmentInventory</code> class navigates to its source code, and indeed we see a list field there:</p> <pre><code>class EquipmentInventory\n{\n    private List&lt;IEquipment&gt; equipment;\n</code></pre> <p>On the one hand, we are pleased because Visual Studio supports round-trip engineering: changes to the model are immediately reflected in the code, and vice versa. On the other hand, we have previously discussed that if a class has a collection of members from another class, then it \"fits\" in the UML model as a type 1-to-many association relation between the two classes. Currently, we do not see that in our model. Fortunately, the VS modelling interface can be made to display this type of connection in this form. To do this, right-click on the equipment field on the diagram and select Show as Collection Association from the menu. The <code>IEquipment</code> interface should then be moved to the right to allow enough space on the diagram to display the association relationship and the role on the relationship:</p> <p></p> <p>The double arrow ending on the \"many\" side is not standard UML, but don't worry about it, it's not important. The important thing is that the narrow representing the relationship at the <code>IEquipment</code> end displays the role (field) name (and even the exact type).</p> <p>Navigate to the source code of <code>EquipmentInventory</code> and write the constructor that initializes the <code>equipment</code> collection:</p> <pre><code>public EquipmentInventory()\n{\n    equipment = new List&lt;IEquipment&gt;();\n}\n</code></pre> <p>Next, implement the <code>ListAll</code> method that prints each item\u2019s age and current value:</p> <pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine($\"Age: {eq.GetAge()}\\tPrice: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>Iterate through the elements using the <code>foreach</code> statement. The <code>in</code> keyword is followed by the collection, and before <code>in</code> is a variable declaration (in this case <code>IEquipment eq</code>) whose type matches the collection\u2019s element type. In each iteration, this variable gets the current element from the collection.</p> <p>The <code>Console.WriteLine</code> method can take a simple string or, as in our case, a formatting string. The substitutions are solved by string interpolation: the values to be substituted must be given between <code>{}</code>. If string interpolation is used, the string must start with <code>$</code>.</p> <p>Write a function called <code>AddEquipment</code> that adds a new piece of equipment to the inventory:</p> <pre><code>public void AddEquipment(IEquipment eq)\n{\n     equipment.Add(eq);\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#implementers-of-iequipment","title":"Implementers of IEquipment","text":"<p>According to our earlier decision, we use the <code>IEquipment</code> interface to uniformly handle different part types. In our example, both <code>SoundCard</code> and <code>HardDisk</code> have <code>GetAge()</code> and <code>GetPrice()</code> methods, yet we cannot treat them uniformly (e.g., store them in a common list) because they do not actually implement <code>IEquipment</code>. Let\u2019s fix that. Modify their declarations:</p> <pre><code>public class SoundCard : IEquipment\n</code></pre> <pre><code>public class HardDisk : IEquipment\n</code></pre> <p>Then, in each class (<code>SoundCard</code> and <code>HardDisk</code>), we have to implement the methods defined by the <code>IEquipment</code> interface. In our case, <code>GetPrice</code> and <code>GetAge</code> are already implemented. That\u2019s convenient.</p> <p>As a test, in our <code>Main</code> function in <code>Program.cs</code>, create an <code>EquipmentInventory</code> object, add some <code>HardDisk</code> and <code>SoundCard</code> objects, and then list them. . If the current year is not 2021, replace 2021 shown below with your current year (and 2020 with one less than that):</p> <pre><code>static void Main( string[] args )\n{\n    EquipmentInventory ei = new EquipmentInventory();\n\n    ei.AddEquipment(new HardDisk(2021, 30000, 80));\n    ei.AddEquipment(new HardDisk(2020, 25000, 120));\n    ei.AddEquipment(new HardDisk(2020, 25000, 250));\n\n    ei.AddEquipment(new SoundCard(2021, 8000));\n    ei.AddEquipment(new SoundCard(2020, 7000));\n    ei.AddEquipment(new SoundCard(2020, 6000));\n\n    ei.ListAll();\n}\n</code></pre> <p>Running the application, we can see that although our solution is still basic, it works:</p> <p></p> <p>Continue with the <code>LedDisplay</code> class. The <code>DisplayBase</code> source code cannot be modified due to requirements. But this doesn't cause any problems, our <code>LedDisplay</code> class will implement the <code>IEquipment</code> interface, so modify the code accordingly:</p> <pre><code>public class LedDisplay : DisplayBase, IEquipment\n</code></pre> <p>In the <code>LedDisplay</code> class, we already need to implement the methods in the interface:</p> <pre><code>public double GetPrice()\n{\n    return this.price;\n}\n\npublic int GetAge()\n{\n    return DateTime.Today.Year - this.manufacturingYear;\n}\n</code></pre> <p>Let's extend our <code>Main</code> function by adding two <code>LedDisplay</code> objects to our set (again, if 2021 is not the current year, adjust the year in the following lines accordingly):</p> <pre><code>ei.AddEquipment(new LedDisplay(2020, 80000, 17, 16));\nei.AddEquipment(new LedDisplay (2021, 70000, 17, 12));\n\nei.ListAll();\nConsole.ReadKey();\n</code></pre> <p>Test by running the application.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#task-3-application-of-the-interface-and-the-abstract-primitive-class","title":"Task 3 - Application of the interface and the abstract primitive class","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#interface-problems","title":"Interface problems","text":"<p>Let\u2019s evaluate our current interface-based solution.</p> <p>One main issue is that our code is full of code duplication that harms maintainability and extensibility:</p> <ul> <li>The <code>yearOfCreation</code> and <code>newPrice</code> fields are common to all part types (except the special <code>LedDisplay</code>), and must be copy-pasted when a new type is introduced.</li> <li>The implementation of the <code>GetAge</code> function is the same for all component types (except for the special <code>LedDisplay</code>), so we would copy-paste it again.</li> <li>The lines of the constructors that initialize <code>yearOfCreation</code> and <code>newPrice</code> are similarly duplicated.</li> </ul> <p>Although this code duplication does not seem significant at the moment, the situation is getting worse as new component types are introduced, and it is better to prevent future pains in time.</p> <p>Another problem arises because part listing is incomplete: we only see the item\u2019s age and price, not its type. To display the type, the IEquipment interface must be extended, e.g. by introducing a method called <code>GetDescription</code>. Let's add a <code>GetDescription</code> function to the interface:</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription();\n}\n</code></pre> <p>Then every class implementing the <code>IEquipment</code> interface would have to implement this method, which is a lot of work for many classes (and often not even feasible for a multi-component application, i.e. one with several DLLs, when they are not in the hands of a single developer). Run the Build command to check that after adding <code>GetDescription</code>, you get compilation errors in three places.</p> <p>Default implementations in interfaces</p> <p>INote that from C# 8 onward (and on .NET or .NET Core runtime, not supported under .NET Framework), it\u2019s possible to provide default implementations for interface methods (default interface methods), so to solve the above problem you don't need an abstract class, but you still cannot have instance fields in an interface. More information here: default interface methods.</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription() { return \"EquipmentBase\"; }\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#abstract-class","title":"Abstract class","text":"<p>A solution to both problems is the introduction of a common abstract base class (except for the <code>LedDisplay</code> class, which we will come back to later). In this abstract base class, we can place the code common to all part types, and we can provide a default implementation of newly added <code>GetDescription</code> method. Let our new abstract base class be called <code>EquipmentBase</code>. The question is whether the <code>IEquipment</code> interface is still needed, or whether it can be completely replaced by the new <code>EquipmentBase</code> class. We need to keep the <code>IEquipment</code> interface, because we cannot derive our <code>LedDisplay</code> class from <code>EquipmentBase</code>: it already has a mandatory base class, <code>DisplayBase</code>. For this reason, <code>EquipmentInventory</code> in our enhanced solution also refers to the different components as <code>IEquipment</code> interface.</p> <p>Let's begin the transformation. Let our class diagram be the active tab. From the Toolbox, add an Abstract Class element onto the diagram with drag&amp;drop, and name it <code>EquipmentBase</code>.</p> <p></p> <p>In the following, we need to make the <code>SoundCard</code> and <code>HardDisk</code> classes derive from <code>EquipmentBase</code> (<code>LedDisplay</code> already has another base class, so we cannot do this there). To do this, select the Inheritance relationship in the Toolbox, then draw a line from the child class to the base class for both <code>SoundCard</code> and <code>HardDisk</code>.</p> <p>In the next step, we want <code>EquipmentBase</code> to implement the <code>IEquipment</code> interface instead of <code>SoundCard</code> and <code>HardDisk</code> directly. To do this, modify the <code>EquipmentBase</code> class to implement the interface (either by drawing an inheritance link from <code>EquipmentBase</code> to <code>IEquipment</code> on the diagram, or by modifying the source code of <code>EquipmentBase</code>). Delete the implementation of <code>IEquipment</code> from the <code>HardDisk</code> and <code>SoundCard</code> classes (the base class already implements it).</p> <p>The relevant parts of our diagram and source code will then look like this:</p> <p></p> <pre><code>public abstract class EquipmentBase : IEquipment\n</code></pre> <pre><code>public class HardDisk : EquipmentBase\n</code></pre> <pre><code>public class SoundCard : EquipmentBase\n</code></pre> <p>The code won\u2019t compile yet for several reasons. The <code>EquipmentBase</code> class implements the <code>IEquipment</code> interface, but it does not yet implement the interface methods. Either generate the methods using the smart tag, or type them according to the following principles:</p> <ul> <li><code>newPrice</code> and <code>yearOfCreation</code> are duplicated in the <code>HardDisk</code> and <code>SoundCard</code> classes: move (not copy!) them to <code>EquipmentBase</code> and make them <code>protected</code>.</li> <li>The <code>GetAge</code> method is also duplicated in the <code>HardDisk</code> and <code>SoundCard</code> classes, delete the implementation from these and move it to the <code>EquipmentBase</code> class.</li> <li>The <code>GetPrice</code> method should be declared abstract in the base class. This is an intentional design choice, that forces each subclass to override this operation anyway.</li> <li>In the case of <code>GetDescription</code>, the opposite is true: we give an implementation in the base class marked as <code>virtual</code>(not <code>abstract</code>), so child classes are not forced to override it.</li> </ul> <p>The code corresponding to the above is:</p> <pre><code>public abstract class EquipmentBase : IEquipment\n{\n    protected int yearOfCreation;\n    protected int newPrice;\n\n    public int GetAge()\n    {\n        return DateTime.Today.Year - yearOfCreation;\n    }\n\n    public abstract double GetPrice();\n\n    public virtual string GetDescription()\n    {\n        return \"EquipmentBase\";\n    }\n}\n</code></pre> <p>A few additional remarks on the code snippet:</p> <ul> <li>For abstract classes, the keyword <code>abstract</code> must be written before the word <code>class</code>.</li> <li>For abstract methods, use the keyword <code>abstract</code></li> <li>.NET allows you to control whether methods are virtual or not. In this respect, it is similar to C++. To make a function virtual, the keyword <code>virtual</code> must be used. Reminder: define a method as virtual if it might be overridden by its descendants. This ensures if you call it via a reference to the base class, the child\u2019s overridden method is invoked.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#descendants","title":"Descendants","text":"<p>Next, we handle the <code>EquipmentBase</code> descendants. In C#, when overriding abstract or virtual methods in child classes, we must use the <code>override</code> keyword. First, override <code>GetPrice</code>:</p> HardDisk.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0\n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 5000;\n}\n</code></pre> SoundCard.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0 \n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 2000;\n}\n</code></pre> <p>In the next step, the <code>GetDescription</code> method is implemented in the <code>HardDisk</code> and <code>SoundCard</code> classes. Since the virtual function of the base class is being overridden here, the <code>override</code> keyword is needed:</p> HardDisk.cs<pre><code>public override string GetDescription()\n{\n    return \"Hard Disk\";\n}\n</code></pre> SoundCard.cs<pre><code>public override string GetDescription()\n{\n    return \"Sound Card\";\n}\n</code></pre> <p>One might ask why the designers of the C# language decided to add an extra keyword to the definition of methods, which was not necessary in the case of C++. The reason is simple: the code is more expressive. Looking at the descendant code, the word <code>override</code> clearly indicates that this operation is abstract or virtual in one of the base classes, without having to to search up the entire class hierarchy.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#base-class-of-leddisplay","title":"Base class of LedDisplay","text":"<p><code>LedDisplay</code> is forced to inherit from <code>DisplayBase</code>, whose code we can\u2019t change, so it can\u2019t inherit from <code>EquipmentBase</code>. This means we cannot remove the code duplication for <code>GetAge</code> from <code>LedDisplay</code>, this is preserved here (but only for <code>LedDisplay</code>, which is only one class among many!).</p> <p>Note</p> <p>In fact, with a bit of extra work, we could avoid even that duplication by adding a static helper method in e.g. <code>EquipmentBase</code> that calculates the age based on its parameter containing the manufacturing year. Then both <code>EquipmentBase.GetAge</code> and <code>LedDisplay.GetAge</code> could call that helper method.</p> <p>We still need to implement <code>GetDescription</code> in <code>LedDisplay</code>:</p> LedDisplay.cs<pre><code>public string GetDescription()\n{\n    return \"Led Display\";\n}\n</code></pre> <p>Note that we do NOT write the <code>override</code> keyword here. When an interface function is implemented, <code>override</code> is not required/allowed to be written.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#using-getdescription","title":"Using GetDescription","text":"<p>Finally, let\u2019s modify the <code>EquipmentInventory.ListAll</code> method so that the description of the items are also printed:</p> EquipmentInventory.cs<pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine($\"Description: {eq.GetDescription()}\\t\" +\n            $\"Age: {eq.GetAge()}\\tPrice: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>Now we get a more informative output:</p> <p></p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#constructor-code-duplication","title":"Constructor code duplication","text":"<p>If we review our code, there is still some duplication in our constructors. Each descendant of <code>EquipmentBase</code> (<code>HardDisk</code>, <code>SoundCard</code>) has the same lines in its constructor:</p> <pre><code> this.yearOfCreation = yearOfCreation;\n this.newPrice = newPrice;\n</code></pre> <p>If you think about it, these <code>yearOfCreation</code> and <code>newPrice</code> fields are defined in the base class, so it should be responsible for their initialization. Let's add a corresponding constructor in <code>EquipmentBase</code>:</p> EquipmentBase.cs<pre><code>public EquipmentBase(int yearOfCreation, int newPrice)\n{\n    this.yearOfCreation = yearOfCreation;\n    this.newPrice = newPrice;\n}\n</code></pre> <p>In the <code>HardDisk</code> and <code>SoundCard</code> constructors, remove the two lines that initialize those fields. Instead, call the base constructor via the <code>base</code> keyword:</p> HardDisk.cs<pre><code>public HardDisk(int yearOfCreation, int newPrice, int capacityGB)\n    : base(yearOfCreation, newPrice)\n{\n    this.capacityGB = capacityGB;\n}\n</code></pre> SoundCard.cs<pre><code>public SoundCard(int yearOfCreation, int newPrice)\n    : base(yearOfCreation, newPrice)\n{\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#evaluation","title":"Evaluation","text":"<p>By combining an interface and an abstract base class, we get a solution that involves the fewest compromises:</p> <ul> <li>Referencing parts through the <code>IEquipment</code> interface lets us handle all part types uniformly, including those with a required base class (<code>LedDisplay</code>). (With an abstract base class alone, we could not achieve this.)</li> <li>Introducing <code>EquipmentBase</code> as an abstract base class lets us move the shared code for various part types (except one) into a single place, avoiding duplication.</li> <li>Introducing <code>EquipmentBase</code> also lets us provide a default implementation for newly added methods in the <code>IEquipment</code> interface (e.g., <code>GetDescription</code>), so we are not forced to define them in every implementer of <code>IEquipment</code>.</li> </ul> <p>Finally, let's take a look at the UML (like) class diagram of our solution:</p> <p></p> <p>C# 11 \u2013 Static interfaces</p> <p>A new feature in C# 11 is the ability to define static interface members, so that a class implementing the interface must provide certain static members. More info</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_eng/#note-optional-homework-practice","title":"Note - optional homework practice","text":"<p>In our current solution, component-specific data (e.g. capacity for <code>HardDisk</code>) is not displayed when listing the parts. To accomplish that, the formatting of component data as a string should be moved from <code>EquipmentInventory</code> into the component classes, following the principles below:</p> <ul> <li>We could add a <code>GetFormattedString</code> method to the <code>IEquipment</code> interface that returns a string. Alternatively, we could override <code>ToString()</code>, since in .NET every type implicitly inherits from <code>System.Object</code>, which has a virtual <code>ToString()</code> method.</li> <li>In <code>EquipmentBase</code>, we could implement the formatting of common fields (description, price, age) into a string.</li> <li>If a component also has type-specific data, then its class overrides the function that formats it into a string: this function must first call its ancestor (using the <code>base</code> keyword), then append its own formatted data to it, and return with this string.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/","title":"1. Beziehung zwischen dem Modell und dem Code","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>Das Ziel der \u00dcbung:</p> <ul> <li>Kennenlernen der Studenten/Studentinnen und des \u00dcbungsleiters/ins</li> <li>Kl\u00e4rung der Anforderungen f\u00fcr \u00dcbungen</li> <li>Erste Schritte mit Visual Studio und der Entwicklung von .NET-Anwendungen.</li> <li>Erstellen einer einfachen Hello World .NET-Anwendung, C#-Grundlagen</li> <li>Veranschaulichung der Beziehung zwischen UML und Code</li> <li>Anwendungstechnik der Schnittstelle und der abstrakte Basisklasse </li> </ul> F\u00fcr \u00dcbungsleiter/in <p>Sicherlich gibt es einige Teilnehmer, die Visual Studio bereits in Prog2 (C++) oder aus anderen Gr\u00fcnden verwendet haben, aber es wird auch einige geben, die es noch nicht verwendet haben oder sich weniger daran erinnern. Das Ziel ist in diesem Fall, die Benutzeroberfl\u00e4che kennenzulernen. So w\u00e4hrend der L\u00f6sung der \u00dcbungen, sollten die benutzte Dinge (z. B. Solution Explorer,  Ausf\u00fchren mit F5, Verwenden von Haltepunkten usw.) auch besprochen werden.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Ausf\u00fchrung der \u00dcbung ben\u00f6tigten Werkzeuge:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Es sollte die neueste Version von Visual Studio installiert sein. Die Versionen Community Edition, Professional und Enterprise sind ebenfalls geeignet. Die Community Edition ist kostenlos und kann von der Microsoft-Website heruntergeladen werden. Der Professional ist kostenpflichtig, steht aber auch f\u00fcr Studenten der Universit\u00e4t kostenlos zur Verf\u00fcgung (auf der Website, im Rahmen des Programms Azure Dev Tools for Teaching).</p> <p>Visual Studio Class Diagram support</p> <p>F\u00fcr einige Aufgaben in dieser \u00dcbung (und auch f\u00fcr die erste Hausaufgabe) werden wir die Unterst\u00fctzung des Visual Studio Class Designer nutzen. Visual Studio f\u00fcgt die Komponente Class Designer w\u00e4hrend der Installation nicht immer hinzu. Falls es nicht m\u00f6glich ist, ein Klassendiagramm zum Visual Studio-Projekt hinzuzuf\u00fcgen (weil \u201eClass Diagram\u201c in der Liste des Fensters, das beim Befehl \u201eAdd New Item\u201c erscheint, nicht gelistet wird - mehr dazu sp\u00e4ter in dieser Anleitung), muss man die Komponente Klassendiagramm sp\u00e4ter installieren:</p> <ol> <li>Starten Sie das Visual Studio-Installationsprogramm (z. B. durch Eingabe von \"Visual Studio Installer\" im Windows-Startmen\u00fc).</li> <li>W\u00e4hlen Sie in dem nun erscheinenden Fenster die Registerkarte \"Individual components\"</li> <li> <p>Geben Sie in das Suchfeld \"class designer\" ein und stellen Sie sicher, dass \"Class Designer\" in der gefilterten Liste aktiviert ist.</p> <p></p> </li> </ol> <p>Was Sie sich ansehen sollten:</p> <ul> <li>Die \u00dcbung beinhaltet keine Vorlesung zu diesem Thema. Gleichzeitig baut die \u00dcbung auf grundlegendem UML-Kenntnisse und den Grundlagen der Abbildung von UML-Klassendiagrammen auf Code.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#verlauf-der-ubung","title":"Verlauf der \u00dcbung","text":"<p>Der/die \u00dcbungsleiter/in fasst die Anforderungen f\u00fcr die \u00dcbungen am Anfang der \u00dcbung zusammen:</p> <ul> <li>Die meisten davon finden Sie in dem Merkblatt</li> <li>Informationen zu den Hausaufgaben finden Sie auf der Website des Fachs.</li> </ul> <p>Mit dem Entwicklungsumgebung Visual Studio werden wir .NET-Anwendungen in C# erstellen. C# ist \u00e4hnlich wie Java, wir lernen stufenweise die Unterschiede. Die Aufgaben werden gemeinsam unter der Leitung des \u00dcbungsleiters/ins durchgef\u00fchrt.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#losung","title":"L\u00f6sung","text":"Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist auf GitHub verf\u00fcgbar. Der einfachste Weg, es herunterzuladen, ist, es von der Kommandozeile aus mit dem Befehl <code>git clone</code> auf Ihren Computer zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo -b solved</code></p> <p>Sie m\u00fcssen Git auf Ihrem Rechner installiert haben, weitere Informationen hier.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#1-aufgabe-erstellen-einer-hello-world-net-konsolenanwendung","title":"1. Aufgabe - Erstellen einer \"Hello World\" .NET-Konsolenanwendung","text":"<p>Die Aufgabe ist die Erstellung einer C#-Konsolenanwendung, die den Text \"Hello world!\" auf der Konsole ausgibt.</p> <p>Die Anwendung wird in C# geschrieben. Die kompilierte Anwendung wird von der .NET-Laufzeitumgebung ausgef\u00fchrt. In der ersten Vorlesung werden die theoretischen Hintergr\u00fcnde des Kompilierens/Ablaufens und die Grundlagen von .NET behandelt.</p> <p>Die Schritte zum Erstellen einer Projektmappe und eines Projekts in Visual Studio 2022:</p> <ol> <li>Starten wir den \"Neues Projekt erstellen\" Dialogfeld, was auf zwei Arten geschehen kann:<ul> <li>Verwendung des Startfensters<ol> <li>Visual Studio starten</li> <li>In der rechten Seitenleiste des erscheinenden Startfensters Create new project</li> </ol> </li> <li>Bereits in Visual Studio ausgef\u00fchrt<ol> <li>File / New-Project</li> </ol> </li> </ul> </li> <li> <p>W\u00e4hlen wir im Dialogfeld \"Neues Projekt erstellen\" die Vorlage \" Console app \" (und NICHT die Vorlage \" Console app (.NET Framework)\", einschlie\u00dflich der C#-Vorlage. Dass es sich um C# handelt, ist an der oberen linken Ecke des Vorlagensymbols zu erkennen. Wenn man es nicht in der Liste sieht, muss man es suchen/filtern. Man kann danach suchen, falls in der oberen Suchleiste \"console\" eingibt. Oder die Dropdown-Felder unten k\u00f6nnen auch verwendet werden: im ersten (Sprachauswahl) \"C#\", im dritten (Projekttypauswahl) \"Console\".</p> <p></p> </li> <li> <p>Next-Taste am unteren Rand des Dialogfeldes \"Neues Projekt erstellen\", auf der n\u00e4chsten Seite:</p> <ol> <li>Project name: Hello World</li> <li>Location: In den Labors arbeiten wir im Ordner c:\\work\\&lt;IhreName&gt;, auf den Sie Schreibrechte haben.</li> <li>Solution name: Hello World (dies sollte bis zu unserer Ankunft hier eingeschrieben sein)</li> <li>Place solution and project in the same directory: kein H\u00e4kchen (aber nicht besonders wichtig).</li> </ol> </li> <li> <p>Next-Taste am unteren Rand des Dialogfeldes \"Neues Projekt erstellen\", auf der n\u00e4chsten Seite:</p> <ol> <li>Framework: .NET 8 (Langfristige Unterst\u00fctzung).</li> <li>Aktivieren wir das Kontrollk\u00e4stchen \"Do not use top level statements\" (wir werden dies gleich erkl\u00e4ren).</li> </ol> </li> </ol> <p>Das Projekt erstellt auch eine neue Projektmappe, deren Struktur im Visual Studio Solution Explorer-Fenster angezeigt werden kann. Eine Projektmappe (Solution) kann aus mehreren Projekten bestehen, und ein Projekt kann aus mehreren Dateien bestehen. Ein Solution ist eine Zusammenfassung der gesamten Arbeitsumgebung (sie hat die Dateierweiterung <code>.sln</code> ), w\u00e4hrend die Ausgabe eines Projekts typischerweise eine Datei <code>.exe</code> oder <code>.dll</code> ist, d. h. eine Komponente einer komplexen Anwendung/eines komplexen Systems. Projektdateierweiterung f\u00fcr C#-Anwendungen <code>.csproj</code>.</p> <p>Der Inhalt unserer Datei <code>Program.cs</code> ist die folgende:</p> Program.cs<pre><code>namespace HelloWorld\n{\n    internal class  Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> <p>Nehmen wir eine <code>Console.ReadKey()</code> Zeile aus: </p> <pre><code>namespace HelloWorld\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            Console.ReadKey();\n        }\n    }\n}\n</code></pre> <ol> <li> <p>F\u00fchren wir die Anwendung aus (z. B. mit der Taste F5 ).</p> <p>Die Struktur des Codes ist sehr \u00e4hnlich zu Java und C++. Unsere Klassen sind in Namespaces organisiert. Ein Namespace kann mit dem Schl\u00fcsselwort <code>namespace</code> definiert werden. Wir k\u00f6nnen Namespaces mit dem Schl\u00fcsselwort <code>using</code> \"ins Geltungsbereich bringen\". z.B.:</p> <pre><code>using System.Collections.Generic;\n</code></pre> </li> <li> <p>In einer C#-Konsolenanwendung wird der Eintrittspunkt der Anwendung mit einer statischen Funktion namens <code>Main</code> gegeben. Der Name der Klasse kann beliebig gew\u00e4hlt werden, in unserem Fall hat VS eine Klasse namens <code>Program</code> erzeugt. Die Parameterliste der Funktion <code>Main</code> ist gebunden: entweder werden keine Parameter angegeben, oder es wird ein <code>string[]</code>angegeben, in dem die Befehlszeilenargumente zur Laufzeit angegeben werden.</p> </li> <li>In .NET wird die Klasse <code>Console</code> aus dem Namensraum <code>System</code> verwendet, um die Standardeingabe und -ausgabe zu verarbeiten. Mit der statischen Aktion <code>WriteLine</code> kann man eine Zeile drucken, mit <code>ReadKey</code> kann man auf das Dr\u00fccken einer Taste warten.</li> </ol> <p>Top-Level-Anweisungen, implizite und statische Verwendungen und Namespaces</p> <p>Bei der Projekterstellung haben wir zuvor das Kontrollk\u00e4stchen \"Do not use top level statements\" aktiviert. Falls wir dies nicht getan h\u00e4tten, h\u00e4tten wir in unserer Datei <code>Program.cs</code> nur eine einzige Zeile mit Inhalt gefunden:</p> <pre><code>// siehe https://aka.ms/new-console-template f\u00fcr weitere Informationen\nConsole.WriteLine(\"Hello World!\");\n</code></pre> <p>Es ist funktionell \u00e4quivalent zu dem obigen Code, der die Klasse <code>Program</code> und ihre Funktion <code>Main</code> enth\u00e4lt. Schauen wir uns an, was dies m\u00f6glich macht (Sie k\u00f6nnen hier mehr dar\u00fcber lesen https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements, beide neu in C# 10):</p> <ul> <li>Top level statements. Die Idee ist, dass man Code direkt in einer einzigen Quelldatei schreiben kann, ohne dass Klassen/<code>Main</code> und andere Funktionsdefinitionen im Projekt vorhanden sind. In diesem Fall setzt der Compiler dies hinter den Kulissen in eine statische <code>Main</code>-Funktion einer Klasse, die wir nicht sehen. Die Motivation f\u00fcr seine Einf\u00fchrung war die Reduzierung von \"Boilerplate\"-Code f\u00fcr sehr einfache, \"skriptartige\" Anwendungen.</li> <li>Implicit global usings. Je nachdem, welchen Projekttyp wir erstellt haben, werden bestimmte Basis-Namensr\u00e4ume automatisch im Hintergrund in allen Quelldateien verwendet (der Compiler verwendet dazu die global using-Direktive). Der Punkt ist: Auf diese Weise m\u00fcssen Entwickler bestimmte h\u00e4ufig verwendete Namespaces (z.B. <code>System.IO</code>, <code>System.Collections.Generic</code>, etc.) nicht in jeder Quelldatei mit <code>using</code> importieren.</li> <li> <p>Static using. Es ist m\u00f6glich, statische Klassen statt Namespaces in C# mit <code>using</code> zu verwenden, so es nicht wichtig ist, diese auszuschreiben, wenn sie verwendet werden. Ein h\u00e4ufiger Fall ist die Verwendung der Klasse \"Console\" oder \"Math\".</p> <pre><code>using static System.Console;\n\nnamensraum ConsoleApp12\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> </li> <li> <p>Namensr\u00e4ume auf Dateiebene. In C# 10 gibt es auch eine Vereinfachung bei der Deklaration von Namespaces, da es nicht mehr zwingend erforderlich ist, Klammern zu verwenden, so dass der angegebene Namespace f\u00fcr die ganze Datei g\u00fcltig ist, z.B:</p> <pre><code>namespace HelloWorld;\n\ninternal class Program\n{\n    // ...\n}\n</code></pre> </li> </ul> <p>Inconsistent visibility oder inconsistent accessibility Fehler</p> <p>W\u00e4hrend des Semesters k\u00f6nnen Sie bei der Durchf\u00fchrung von Programmieraufgaben auf \u00dcbersetzungsfehlermeldungen sto\u00dfen, die sich \u00fcber inconsistent visibility oder inconsistent accessibility beschweren. Dieses Ph\u00e4nomen ist auf die M\u00f6glichkeit zur\u00fcckzuf\u00fchren, die Sichtbarkeit der einzelnen Typen (Klassen, Schnittstellen usw.) in einer .NET-Umgebung zu steuern:</p> <ul> <li><code>internal</code> oder keine Sichtbarkeit angeben: der Typ ist nur in der angegebenen Assembly (.exe, .dll)/dem angegebenen Projekt sichtbar</li> <li><code>public</code>: der Typ ist auch f\u00fcr andere Assemblys/Projekte sichtbar</li> </ul> <p>Der einfachste Weg, diesen Fehler zu vermeiden, ist, alle unsere Typen als \u00f6ffentlich zu definieren, z.B.:</p> <pre><code>public class HardDisk\n{\n    // ...\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#theoretischer-uberblick","title":"Theoretischer \u00dcberblick","text":"<p>Die Unterkapitel enthalten keine \u00dcbungen, sondern bieten den Studierenden eine mit Beispielen illustrierte Einf\u00fchrung in die entsprechenden theoretischen Themen.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#a-theorie-der-beziehung-zwischen-dem-uml-klassendiagramm-und-dem-code-student","title":"A) Theorie der Beziehung zwischen dem UML-Klassendiagramm und dem Code [Student]*","text":"<p>Das Material ist hier verf\u00fcgbar: Die Beziehung zwischen dem UML-Klassendiagramm und dem Code Dieses Thema wurde im vorangegangenen Semester in der Vorlesung Softwaretechnologien behandelt.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#b-schnittstelle-und-abstrakte-basisklasse-student","title":"B) Schnittstelle und abstrakte (Basis)Klasse [Student]*","text":"<p>Das Material ist hier verf\u00fcgbar:  Schnittstelle und abstrakte (angestammte) Klasse.</p> <p>Themen:</p> <ul> <li>Konzept und Definition abstrakter Klassen in C#</li> <li>Schnittstellenkonzepte und -definitionen in C#</li> <li>Vergleich von abstraktem Basisklasse und Schnittstelle</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#2-aufgabe-veranschaulichen-der-beziehung-zwischen-uml-und-code","title":"2. Aufgabe - Veranschaulichen der Beziehung zwischen UML und Code","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#aufgabenbeschreibung-equipment-inventory","title":"Aufgabenbeschreibung - Equipment inventory","text":"<p>Aufgabe: Wir haben die Aufgabe bekommen, eine Computerteilregister-Anwendung zu entwickeln. Mehr Details:</p> <ul> <li>Es soll f\u00e4hig sein, verschiedene Arten von Teilen zu behandeln. Anf\u00e4nglich sollten die Typen <code>HardDisk</code>, <code>SoundCard</code> und <code>LedDisplay</code> unterst\u00fctzt werden, aber das System sollte leicht auf neue Typen erweiterbar sein.</li> <li>Daten der Teilen: Kaufsjahr, Alter (berechnet), Kaufspreis und aktueller Preis (berechnet), kann aber auch typspezifische Daten enthalten (z. B. Kapazit\u00e4t f\u00fcr <code>HardDisk</code> ).</li> <li>Der aktueller Preis h\u00e4ngt von der Art des Teils, dem Einkaufspreis und dem Produktionsjahr des Teils ab. Z.B. Je \u00e4lter das Teil ist, desto h\u00f6her ist die Erm\u00e4\u00dfigung, aber die Erm\u00e4\u00dfigung h\u00e4ngt von dem Typ des Teils ab.</li> <li>Es soll f\u00e4hig sein, die speicherte Teilen aufzulisten.</li> <li>Die Klasse <code>LedDisplay</code> muss von einer Klasse <code>DisplayBase</code> abgeleitet sein, und der Quellcode der Klasse <code>DisplayBase</code> darf nicht ver\u00e4ndert werden. In diesem Beispiel hat dies nicht viel Sinn, aber in der Praxis treffen wir oft auf \u00e4hnliche Situationen, in denen das von uns verwendete Framework/die Plattform verlangt, dass wir von einer eingebauten Klasse ableiten. Typischerweise ist dies der Fall, wenn wir mit Fenstern, Formularen oder benutzerdefinierten Steuerelementen arbeiten: Wir m\u00fcssen sie von den eingebauten Klassen des Frameworks ableiten, und wir haben den Quellcode des Frameworks nicht (oder wollen ihn zumindest nicht \u00e4ndern) - z.B. Java, .NET. In unserem Beispiel simulieren wir diese Situation, indem wir eine Ableitung von <code>DisplayBase</code>verlangen.</li> </ul> <p>Die Implementierung ist erheblich vereinfacht: Die Teile werden nur im Speicher abgelegt, und die Auflistung ist so einfach wie m\u00f6glich, einfach die Daten der registrierten Teile werden auf die Konsole geschrieben.</p> <p>Bei den ersten Gespr\u00e4chen erhalten wir vom Kunden folgende Information: Ein interner Mitarbeiter hat bereits mit der Entwicklung begonnen, ist aber aus Zeitmangel nur zu einer halbfertigen L\u00f6sung gekommen. Ein Teil unserer Aufgabe besteht darin, die halbfertige L\u00f6sung zu verstehen und die Aufgabe von dort aus umzusetzen.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#klassendiagramm","title":"Klassendiagramm","text":"<p>\u00d6ffnen wir die Projektmappe des Quellcodes unseres Kunden mit dem Ausf\u00fchren der folgenden Schritte.</p> <p>Klonen wir das Git-Repository des urspr\u00fcnglichen Projekts, das online auf GitHub verf\u00fcgbar ist, in einen eigenen Ordner innerhalb des Ordners <code>C:\\Work</code>: z. B.: <code>C:\\Work\\NEPTUN\\lab1</code>. \u00d6ffnen wir in diesem neuen Ordner eine Befehlszeile oder Powershell und f\u00fchren wir den folgenden git-Befehl aus:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-modellkod-kiindulo.git\n</code></pre> <p>\u00d6ffnen wir das Visual Studio Solution src/EquipmentInventory.sln im geklonten Ordner.</p> <p>Blicken wir die Dateien im Solution Explorer kurz \u00fcber. Es w\u00e4re hilfreich, die Beziehungen zwischen den Klassen in einem Klassendiagramm darzustellen, um sie zu verstehen. Wir wollen ein Klassendiagramm in unser Projekt einf\u00fcgen. Klicken wir im Solution Explorer mit der rechten Maustaste auf das Projekt (nicht auf das Solution!), und w\u00e4hlen wir im Popup-Men\u00fc die Option Add/New Item. Dann w\u00e4hlen wir in dem erscheinenden Fenster die Option Class Diagram, geben wir am unten im Fenster Main.cd als der Namen des Diagramms ein, und schlie\u00dfen wir das Fenster mit OK.</p> <p>Fehlende Class Diagram-Vorlage</p> <p>Wenn das Element Class Diagram nicht in der Liste erscheint, ist die entsprechende Komponente von VS nicht installiert. Weitere Informationen hierzu finden Sie im Abschnitt Voraussetzungen in diesem Dokument.</p> <p>Die Diagrammdatei <code>Main.cd</code> wird dann im  Solution Explorer angezeigt. Doppelklicken wir darauf, um sie zu \u00f6ffnen. Unseres Diagramm ist derzeit leer. Ziehen wir die .cs-Quelldateien aus Solution Explorer mit drag&amp;drop auf das Diagramm. VS pr\u00fcft dann, welche Klassen in diesen Quelldateien enthalten sind, und zerlegt sie in UML-Klassen. Erstellen wir das Layout wie in der folgenden Abbildung gezeigt (man kann die Mitglieder der Klassen anzeigen, falls man auf den Doppelpfeil in der oberen rechten Ecke ihres Rechtecks klickt):</p> <p></p> <p>Wir k\u00f6nnen auch den Quellcode der Klassen anschauen, falls wir entweder auf die entsprechende Klasse im Diagramm doppelklicken oder die .cs-Dateien im  Solution Explorer \u00f6ffnen. Wir werden die Folgenden erfahren:</p> <ul> <li>Die Klassen <code>SoundCard</code>, <code>HardDisk</code> und <code>LedDisplay</code> sind relativ gut entwickelt und verf\u00fcgen \u00fcber die notwendigen Attribute und Abfragefunktionen.</li> <li><code>LedDisplay</code> wird bei Bedarf von <code>DisplayBase</code> abgeleitet.</li> <li>Obwohl <code>EquipmentInventory</code> f\u00fcr die Register der auf Lager befindlichen Teile verantwortlich ist, wird praktisch nichts davon umgesetzt.</li> <li>Wir finden eine Schnittstelle <code>IEquipment</code>, mit <code>GetAge</code> und <code>GetPrice</code> Funktionen.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#equipmentinventory","title":"EquipmentInventory","text":"<p>Lassen wir uns an der L\u00f6sung arbeiten. Lassen wir uns zuerst die grundlegenden Konzepte festlegen. In der Klasse <code>EquipmentInventory</code> speichern wir eine heterogene Sammlung verschiedener Teiltypen. Dies ist der Schl\u00fcssel zu einer konsistenten Teilverwaltung, so dass unsere L\u00f6sung problemlos mit neuen Teiltypen erweitert werden kann.</p> <p>Wie fr\u00fcher erw\u00e4hnt, kann eine einheitliche Verwaltung entweder durch die Implementierung einer gemeinsamen Basisklasse oder einer gemeinsamen Schnittstelle erreicht werden. In unserem Fall scheint die gemeinsame Basisklasse (z. B. <code>EquipmentBase</code>) eliminiert zu werden, denn durch ihre Einf\u00fchrung h\u00e4tte die Klasse <code>LedDisplay</code> zwei Basisklassen: <code>DisplayBase</code>, die obligatorisch ist, und <code>EquipmentBase</code>, die wir zur einheitlichen Verwaltung einf\u00fchren. Dies ist nicht m\u00f6glich, in einer .NET-Umgebung kann eine Klasse nur einen Vorg\u00e4nger haben. Die L\u00f6sung, <code>DisplayBase</code>so zu \u00e4ndern, dass es von <code>EquipmentBase</code>stammt, ist nach unseren Anforderungen nicht m\u00f6glich (es war eine Anforderung, dass der Quellcode nicht ge\u00e4ndert werden durfte). Es bleibt also der schnittstellenbasierte Ansatz. Dies ist sicherlich die Schlussfolgerung des vorherigen Entwicklers der Anwendung, weshalb er die Schnittstelle <code>IEquipment</code> eingef\u00fchrt hat.</p> <p>F\u00fcgen wir eine generische Liste von Elementen des Typs <code>IEquipment</code> (keine Eigenschaft, sondern ein Feld!) zur Klasse <code>EquipmentInventory</code> hinzu. Ihre Sichtbarkeit sollte - in dem Bem\u00fchen um Integration - <code>private</code>sein. Der Name sollte <code>equipment</code> sein (ohne \"s\" am Ende, im Englisch ist der Plural von equipment auch equipment). Um eine Membervariable hinzuzuf\u00fcgen, verwenden wir das Class Details Fenster von Visual Studio. Wenn das Fenster nicht sichtbar ist, kann es durch Auswahl von View / Other Windows / Class Details angezeigt werden.</p> <p></p> <p>Der Typ der Mitgliedsvariablen ist <code>List&lt;IEquipment&gt;</code>. Der .NET-Typ <code>List</code> ist ein dynamisch dehnbares generisches Array (wie <code>ArrayList</code>in Java). Falls wir auf die Klasse <code>EquipmentInventory</code> im Diagramm blicken, so sehen wir, dass nur der Name der Mitgliedsvariablen angezeigt wird, nicht aber der Typ. Klicken wir mit der rechten Maustaste auf den Hintergrund des Diagramms und w\u00e4hlen wir im Change Members Format Men\u00fc  die Option Display Full Signature. Das Diagramm zeigt dann den Typ der Mitgliedsvariablen und die vollst\u00e4ndige Signatur der Operationen.</p> <p></p> <p>Wenn wir auf die Klasse <code>EquipmentInventory</code> doppelklicken, k\u00f6nnen wir zum Quellcode navigieren, und wie wir sehen k\u00f6nnen, erscheint sie im Code tats\u00e4chlich als Mitgliedsvariable vom Typ Liste:</p> <pre><code>class EquipmentInventory\n{\n    private List&lt;IEquipment&gt; equipment;\n</code></pre> <p>Einerseits freuen wir uns dar\u00fcber, weil Visual Studio Round-Trip-Engineering unterst\u00fctzt: \u00c4nderungen am Modell werden sofort in den Code \u00fcbernommen und umgekehrt. Andererseits haben wir bereits dar\u00fcber gesprochen, dass eine Klasse, die eine Sammlung von Mitgliedern einer anderen Klasse hat, sollte in das UML-Modell als eine Assoziationsbeziehung vom Typ 1-mehr zwischen den beiden Klassen erscheinen. Dies ist noch nicht der Fall in unserem Modell. Gl\u00fccklicherweise kann die VS-Modellierungsschnittstelle dazu gebracht werden, diese Art von Verbindung in dieser Form anzuzeigen. Klicken wir dazu im Diagramm mit der rechten Maustaste auf die Membervariable equipment und w\u00e4hlen wir im Men\u00fc die Option Show as Collection Association aus. Die Schnittstelle <code>IEquipment</code> sollte dann nach rechts verschoben werden, damit im Diagramm gen\u00fcgend Platz f\u00fcr die Darstellung der Assoziationsverbindung und der Rolle der Verbindung bleibt:</p> <p></p> <p>Der Doppelpfeil, der auf der \"Mehr\"-Seite endet, entspricht nicht dem UML-Standard, aber sei man nicht zu traurig dar\u00fcber, es ist nicht wichtig. Wir freuen uns dar\u00fcber, dass der Name (und sogar der genaue Typ) der Mitgliedsvariablen am <code>IEquipment</code> Ende der die Beziehung darstellende Pfeil in der Rolle anzeigt ist.</p> <p>Navigieren wir zum Quellcode von <code>EquipmentInventory</code> und schreiben wir den Konstruktor, der die Sammlung <code>equipment</code> initialisiert!</p> <pre><code>public EquipmentInventory()\n{\n    equipment = new List&lt;IEquipment&gt;();\n}\n</code></pre> <p>Schreiben wir dann die Methode <code>ListAll</code>, die das Alter der Elemente und ihren aktuellen Preis ausgibt:</p> <pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine($\"Alter: {eq.GetAge()}\\tPreis: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>Mit dem Befehl <code>foreach</code> durchlaufen wir die Elemente. Bei der Verwendung des Befehls <code>foreach</code> sollte <code>in</code> von einer Sammlung gefolgt werden, und <code>in</code> sollte eine Variablendeklaration (in diesem Fall <code>IEquipment eq</code>) vorangestellt werden, wo type der Elementtyp der Sammlung ist. Bei jeder Iteration nimmt diese Variable den Iterationswert der Sammlung an.</p> <p>Der Operation <code>Console.WriteLine</code> wird entweder eine einfache Zeichenfolge oder, wie in unserem Fall, eine Formatierungszeichenfolge \u00fcbergeben. Die Ersetzungen werden durch String-Interpolation gel\u00f6st: Die zu ersetzenden Werte m\u00fcssen zwischen <code>{}</code> angegeben werden. Bei der String-Interpolation muss der String mit <code>$</code> beginnen.</p> <p>Schreiben wir eine Funktion mit dem Namen <code>AddEquipment</code>, die ein neues Bestandteil zu der Liste hinzuf\u00fcgt:</p> <pre><code>public void AddEquipment(IEquipment eq)\n{\n     equipment.Add(eq);\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#verwirklichern-von-iequipment","title":"Verwirklichern von IEquipment","text":"<p>Wir haben entschieden, die Schnittstelle <code>IEquipment</code> zu verwenden, um die verschiedenen Komponententypen einheitlich zu verwalten. In unserem Fall haben sowohl die Klassen <code>SoundCard</code> als auch <code>HardDisk</code> die Methoden <code>GetAge()</code> und <code>GetPrice()</code>, aber wir k\u00f6nnen sie nicht einheitlich verwalten (z. B. in einer gemeinsamen Liste speichern). Zu diesem Zweck m\u00fcssen wir beide Klassen dazu bringen, die Schnittstelle <code>IEquipment</code> zu implementieren. \u00c4ndern wir ihr Quellcode:</p> <pre><code>public class SoundCard : IEquipment\n</code></pre> <pre><code>public class HardDisk : IEquipment\n</code></pre> <p>Dann m\u00fcssen wir die Methoden der Schnittstelle <code>IEquipment</code> in den Klassen <code>SoundCard</code> und <code>HardDisk</code> implementieren. Wir stellen fest, dass es damit nichts mehr zu tun gibt, die Funktionen <code>GetPrice</code> und <code>GetAge</code> sind bereits an beiden Stellen geschrieben.</p> <p>Erstellen wir testweise ein Objekt <code>EquipmentInventory</code> in unserer <code>Main</code> Funktion in <code>Program.cs</code>, f\u00fcllen wir es mit den Objekten <code>HardDisk</code> und <code>SoundCard</code> auf, und listen wir das Objekt dann in der Konsole aus. Wenn 2021 nicht das aktuelle Jahr ist, schreiben wir in den folgenden Zeilen das Jahr 2021 auf das aktuelle Jahr und das Jahr 2020 auf eine mit eins kleinere Zahl um!</p> <pre><code>static void Main( string[] args )\n{\n    EquipmentInventory ei = new EquipmentInventory();\n\n    ei.AddEquipment(new HardDisk(2023, 30000, 80));\n    ei.AddEquipment(new HardDisk(2024, 25000, 120));\n    ei.AddEquipment(new HardDisk(2024, 25000, 250));\n\n    ei.AddEquipment(new SoundCard(2024, 8000));\n    ei.AddEquipment(new SoundCard(2025, 7000));\n    ei.AddEquipment(new SoundCard(2024, 6000));\n\n    ei.ListAll();\n}\n</code></pre> <p>Wenn wir die Anwendung ausf\u00fchren, stellen wir fest, dass unsere L\u00f6sung zwar anf\u00e4nglich ist, aber funktioniert:</p> <p></p> <p>Arbeiten wir weiter mit der Klasse <code>LedDisplay</code>.  Der Quellcode von <code>DisplayBase</code> kann aufgrund der Anforderungen nicht ge\u00e4ndert werden. Aber das ist kein Problem, unsere Klasse <code>LedDisplay</code> wird die Schnittstelle <code>IEquipment</code> implementieren, lassen wir uns den Code entsprechend \u00e4ndern:</p> <pre><code>public class LedDisplay : DisplayBase, IEquipment\n</code></pre> <p>In der Klasse <code>LedDisplay</code> m\u00fcssen die Funktionen der Schnittstelle bereits geschrieben werden:</p> <pre><code>public double GetPrice()\n{\n    return this.price;\n}\n\npublic int GetAge()\n{\n    return DateTime.Today.Year - this.manufacturingYear;\n}\n</code></pre> <p>Erweitern wir unsere <code>Main</code> Funktion, f\u00fcgen wir zwei <code>LedDisplay</code> Objekte zu unserer Liste hinzu (auch hier gilt: Wenn 2021 nicht das aktuelle Jahr ist, schreiben wir in den folgenden Zeilen das Jahr 2021 auf das aktuelle Jahr und das Jahr 2020 auf eine mit eins kleinere Zahl um!)</p> <pre><code>ei.AddEquipment(new LedDisplay(2020, 80000, 17, 16));\nei.AddEquipment(new LedDisplay (2021, 70000, 17, 12));\n\nei.ListAll();\nConsole.ReadKey();\n</code></pre> <p>F\u00fchren wir die Anwendung testweise aus.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#3-aufgabe-anwendung-der-schnittstelle-und-der-abstrakten-basisklasse","title":"3. Aufgabe - Anwendung der Schnittstelle und der abstrakten Basisklasse","text":""},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#schnittstellenprobleme","title":"Schnittstellenprobleme","text":"<p>Bewerten wir unsere aktuelle schnittstellenbasierte L\u00f6sung.</p> <p>Eines der Hauptprobleme ist, dass unser Code mit Code-Duplikationen voll ist, die die Wartbarkeit und Erweiterbarkeit zerst\u00f6ren:</p> <ul> <li>Die Mitglieder <code>yearOfCreation</code> und <code>newPrice</code> gelten f\u00fcr alle Komponententypen (mit Ausnahme des speziellen <code>LedDisplay</code>) und m\u00fcssen immer mit copy-paste hinzugef\u00fcgt werden, wenn ein neuer Typ eingef\u00fchrt wird.</li> <li>Die Implementierung der Funktion <code>GetAge</code> ist f\u00fcr alle Komponententypen (mit Ausnahme der speziellen <code>LedDisplay</code>) gleich, auch mit copy-paste wird \"vermehrt\".</li> <li>Die Zeilen in den Konstruktoren, die die Mitglieder <code>yearOfCreation</code> und <code>newPrice</code> initialisieren, werden ebenfalls in jeder Klasse dupliziert.</li> </ul> <p>Auch wenn diese Codeduplizierung im Moment noch unbedeutend zu sein scheint, wird die Situation mit der Einf\u00fchrung neuer Komponententypen immer schlechter, und es ist besser, k\u00fcnftigen Problemen rechtzeitig zu l\u00f6sen.</p> <p>Ein weiteres Problem besteht darin, dass die Auflistung der Teiledaten derzeit schmerzlich unvollst\u00e4ndig ist, da kein Typ gelistet wird (nur Alter und Preis). Um den Typ anzuzeigen, muss die Schnittstelle <code>IEquipment</code> erweitert werden, z. B. durch Einf\u00fchrung einer Operation namens <code>GetDescription</code>.   F\u00fcgen wir der Schnittstelle eine Funktion <code>GetDescription</code> hinzu!</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription();\n}\n</code></pre> <p>Dann m\u00fcsste jede Klasse, die die Schnittstelle <code>IEquipment</code> implementiert, diese Methode implementieren, was f\u00fcr viele Klassen eine Menge Arbeit bedeutet (und f\u00fcr eine Mehrkomponenten-Anwendung, d.h. eine Anwendung, die aus mehreren DLLs besteht, oft gar nicht machbar ist, wenn sie nicht in den H\u00e4nden eines einzigen Entwicklers liegen). F\u00fchren wir den Befehl Build aus, um zu \u00fcberpr\u00fcfen, ob wir nach dem Hinzuf\u00fcgen von <code>GetDescription</code> an drei Stellen \u00dcbersetzungsfehler erhalten.</p> <p>Standardimplementierung in der Schnittstelle festlegen</p> <p>Es ist wichtig zu wissen, dass ab C# 8 (genauer .NET oder .NET Core Runtime ist auch n\u00f6tig, es ist unter .NET Framework nicht unterst\u00fctzt ) Schnittstellenoperationen eine Standardimplementierung erhalten k\u00f6nnen (default interface methods), so dass wir zur L\u00f6sung des obigen Problems keine abstrakte Klasse ben\u00f6tigen, aber die Schnittstelle kann weiterhin keine Mitgliedsvariablen haben. Weitere Informationen finden Sie hier: default interface methods.</p> <pre><code>public interface IEquipment\n{\n    double GetPrice();\n    int GetAge();\n    string GetDescription() { return \"EquipmentBase\"; }\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#abstrakte-klasse","title":"Abstrakte Klasse","text":"<p>Eine L\u00f6sung f\u00fcr beide Probleme ist die Einf\u00fchrung eines gemeinsamen abstrakten Vorfahres (mit Ausnahme der Klasse <code>LedDisplay</code>, auf die wir noch zur\u00fcckkommen werden). Wir k\u00f6nnen den Code, der allen Nachkommen gemeinsam ist, dorthin verschieben und eine Standardimplementierung f\u00fcr die neu eingef\u00fchrte Operation <code>GetDescription</code> bereitstellen. Nennen wir unsere neue abstrakte Basisklasse <code>EquipmentBase</code>. Die Frage ist, ob die Schnittstelle <code>IEquipment</code> noch ben\u00f6tigt wird oder ob sie vollst\u00e4ndig durch die neue Klasse <code>EquipmentBase</code> ersetzt werden kann. Wir m\u00fcssen die Schnittstelle <code>IEquipment</code> beibehalten, weil wir unsere Klasse LedDisplay nicht von <code>EquipmentBase</code>ableiten k\u00f6nnen: Sie hat bereits eine obligatorische Basisklasse, <code>DisplayBase</code>, deshalb bezieht sich EquipmentInventory in unserer erweiterten L\u00f6sung auf die verschiedenen Komponenten als Schnittstelle <code>IEquipment</code>. </p> <p>Beginnen wir mit der Umwandlung. Unser Klassendiagramm soll die aktive Registerkarte sein. Ziehen wir aus der Toolbox mit drag&amp;drop ein  Abstract Class Element auf das Diagramm und benennen wir es <code>EquipmentBase</code>.</p> <p></p> <p>Im Folgenden m\u00fcssen wir die Klassen <code>SoundCard</code> und <code>HardDisk</code> von <code>EquipmentBase</code>ableiten (<code>LedDisplay</code>hat bereits einen anderen Vorfahren, so dass wir dies dort nicht tun k\u00f6nnen). W\u00e4hlen wir dazu die Verkn\u00fcpfung Inheritance in der Toolbox und ziehen wir dann eine Linie von der Kindklasse zur Basisklasse sowohl f\u00fcr <code>SoundCard</code> als auch f\u00fcr <code>HardDisk</code>. </p> <p>Im n\u00e4chsten Schritt \u00e4ndern wir den Code so, dass <code>HardDisk</code> und <code>SoundCard</code> die Schnittstelle <code>IEquipment</code> nicht separat implementieren, sondern ihr gemeinsamer Vorfahre <code>EquipmentBase</code> dies tut. \u00c4ndern wir dazu die Klasse <code>EquipmentBase</code> so, dass sie die Schnittstelle implementiert (entweder durch Einf\u00fcgen eines inheritance Beziehung von <code>EquipmentBase</code> zu <code>IEquipment</code> im Diagramm oder durch \u00c4ndern des Quellcodes von <code>EquipmentBase</code> ). Entfernen wir die Implementierung von <code>IEquipment</code> aus den Klassen <code>HardDisk</code> und <code>SoundCard</code> (der Vorg\u00e4nger implementiert sie bereits).</p> <p>Die relevanten Teile unseres Diagramms und des Quellcodes sehen dann wie folgt aus:</p> <p></p> <pre><code>public abstract class EquipmentBase : IEquipment\n</code></pre> <pre><code>public class HardDisk : EquipmentBase\n</code></pre> <pre><code>public class SoundCard : EquipmentBase\n</code></pre> <p>Unser Code kann aus mehreren Gr\u00fcnden noch nicht kompiliert werden.  <code>EquipmentBase</code> implementiert die Schnittstelle <code>IEquipment</code>, aber sie implementiert noch nicht die Operationen der Schnittstelle. Erzeugen wir die Methoden entweder mit Hilfe des Smarttags oder geben wir sie nach den folgenden Grunds\u00e4tzen ein:</p> <ul> <li>Die Mitglieder <code>newPrice</code> und <code>yearOfCreation</code> sind in den Klassen <code>HardDisk</code> und <code>SoundCard</code> dupliziert: verschieben (nicht kopieren!) wir sie in den gemeinsamen Vorfahren <code>EquipmentBase</code> und geben wir <code>protected</code> Sichtbarkeit.</li> <li>Die Operation <code>GetAge</code> wird in den Klassen <code>HardDisk</code> und <code>SoundCard</code> dupliziert, l\u00f6schen wir die Implementierung aus diesen Klassen und verschieben wir sie in die Klasse <code>EquipmentBase</code>. </li> <li>Die Operation <code>GetPrice</code> wird als abstrakte Operation in den Vorg\u00e4nger aufgenommen. Dies ist eine bewusste Design-Entscheidung, so dass wir nachkommende Klassen zwingen, diesen Vorgang trotzdem zu \u00fcberschreiben.</li> <li>F\u00fcr <code>GetDescription</code> gilt das Gegenteil: Wir definieren es als virtuell (und nicht abstrakt), d. h. sie erh\u00e4lt bereits in der Basisklasse eine Implementierung. Dadurch sind die abgeleiteten Klassen nicht dazu gezwungen, die Methode zu \u00fcberschreiben.</li> </ul> <p>Der entsprechende Code:</p> <pre><code>public abstract class EquipmentBase : IEquipment\n{\n    protected int yearOfCreation;\n    protected int newPrice;\n\n    public int GetAge()\n    {\n        return DateTime.Today.Year - yearOfCreation;\n    }\n\n    public abstract double GetPrice();\n\n    public virtual string GetDescription()\n    {\n        return \"EquipmentBase\";\n    }\n}\n</code></pre> <p>Einige zus\u00e4tzliche Gedanken zum Codefragment:</p> <ul> <li>Bei abstrakten Klassen muss das Schl\u00fcsselwort <code>abstract</code> vor das Wort <code>class</code> geschrieben werden.</li> <li>F\u00fcr abstrakte Operationen muss das Schl\u00fcsselwort <code>abstract</code> angegeben werden.</li> <li>In .NET-Umgebung kann man steuern, ob eine Methode virtuell ist oder nicht. In dieser Hinsicht ist es \u00e4hnlich wie C++. Wenn man eine Operation virtuell machen will, muss man das Schl\u00fcsselwort <code>virtual</code> f\u00fcr die Operation angeben. Zur Erinnerung: Man definiert eine Operation als virtuell, wenn ihre Nachkommen sie \u00fcberdefinieren (k\u00f6nnen). Nur dann ist gew\u00e4hrleistet, dass die Nachfolgeversion aufgerufen wird, wenn die angegebene Operation auf einen Vorg\u00e4ngerverweis angewendet wird.</li> </ul>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#nachkommen","title":"Nachkommen","text":"<p>Im n\u00e4chsten Schritt gehen wir zu den Nachkommen von <code>EquipmentBase</code> \u00fcber. Wenn abstrakte und virtuelle Operationen in C# \u00fcberschrieben werden, muss das Schl\u00fcsselwort <code>override</code> im Nachfahren angegeben werden. Zuerst wird die Methode <code>GetPrice</code> neu definiert:</p> HardDisk.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0\n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 5000;\n}\n</code></pre> SoundCard.cs<pre><code>public override double GetPrice()\n{\n    return yearOfCreation &lt; (DateTime.Today.Year - 4)\n        ? 0 \n        : newPrice - (DateTime.Today.Year - yearOfCreation) * 2000;\n}\n</code></pre> <p>Im n\u00e4chsten Schritt werden wir die Operation <code>GetDescription</code> in die Klassen <code>HardDisk</code> und <code>SoundCard</code> schreiben. Da wir hier die virtuelle Vorg\u00e4ngerfunktion umdefinieren, m\u00fcssen wir auch das Schl\u00fcsselwort <code>override</code> angeben:</p> HardDisk.cs<pre><code>public override string GetDescription()\n{\n    return \"Hard Disk\";\n}\n</code></pre> SoundCard.cs<pre><code>public override string GetDescription()\n{\n    return \"Sound Card\";\n}\n</code></pre> <p>Man k\u00f6nnte sich fragen, warum die Entwickler der Sprache C# beschlossen haben, der Definition von Operationen ein zus\u00e4tzliches Schl\u00fcsselwort hinzuzuf\u00fcgen, was im Fall von C++ nicht notwendig war. Der Grund daf\u00fcr ist einfach: Der Code ist aussagekr\u00e4ftiger. Wenn man sich den Code der Nachkommen ansieht, macht das Wort <code>override</code> sofort klar, dass diese Operation in einem der Vorfahren abstrakt oder virtuell ist, ohne dass man sich den Code aller Vorfahren ansehen muss.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#vorfahre-von-leddisplay","title":"Vorfahre von LedDisplay","text":"<p>Die Basisklasse unserer <code>LedDisplay</code> Klasse ist gebunden, ihr Code kann nicht ge\u00e4ndert werden, daher k\u00f6nnen wir sie nicht von <code>EquipmentBase</code>ableiten. Wir k\u00f6nnen die Funktion <code>GetAge</code> nicht l\u00f6schen, diese Code-Duplizierung bleibt hier erhalten (aber nur f\u00fcr <code>LedDisplay</code>, die nur eine Klasse unter vielen ist!).</p> <p>Note</p> <p>Mit ein wenig zus\u00e4tzlicher Arbeit k\u00f6nnten wir diese Codeduplizierung beseitigen. Dazu m\u00fcsste eine statische Hilfsfunktion in eine der Klassen aufgenommen werden (z. B. <code>EquipmentBase</code>) , die das Produktionsjahr ermittelt und das Alter zur\u00fcckgibt.  <code>EquipmentBase.GetAge</code> und <code>LedDisplay.GetAge</code> w\u00fcrden diese Hilfsfunktion f\u00fcr ihre Ausgabe verwenden.</p> <p>In unserer Klasse <code>LedDisplay</code> m\u00fcssen wir noch <code>GetDescription</code> schreiben:</p> LedDisplay.cs<pre><code>public string GetDescription()\n{\n    return \"Led Display\";\n}\n</code></pre> <p>Beachten wir, dass das Schl\u00fcsselwort <code>override</code> hier NICHT angegeben ist. Wenn eine Schnittstellenfunktion implementiert ist, muss/darf <code>override</code>nicht ausgeschrieben werden.</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#getdescription-verwenden","title":"GetDescription verwenden","text":"<p>\u00c4ndern wir die Operation <code>EquipmentInventory.ListAll</code>, um auch die Beschreibung der Elemente in die Ausgabe zu schreiben:</p> EquipmentInventory.cs<pre><code>public void ListAll()\n{\n    foreach (IEquipment eq in equipment)\n    {\n        Console.WriteLine(\"$Beschreibung: {eq.GetDescription()}\\t\" +\n            $\"Alter: {eq.GetAge()}\\tPreis: {eq.GetPrice()}\");\n    }\n}\n</code></pre> <p>Dies f\u00fchrt zu einer informativeren Ausgabe, wenn die Anwendung ausgef\u00fchrt wird:</p> <p></p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#duplizierung-von-konstruktorcode","title":"Duplizierung von Konstruktorcode","text":"<p>Ein Blick auf unseren Code zeigt, dass es eine weitere Duplikation gibt. Alle Nachfahren von <code>EquipmentBase</code> (<code>HardDisk</code>, <code>SoundCard</code>) haben diese beiden Zeilen in ihrem Konstruktor:</p> <pre><code> this.yearOfCreation = yearOfCreation;\n this.newPrice = newPrice;\n</code></pre> <p>Wenn wir nachdenken, werden diese <code>yearOfCreation</code> und <code>newPrice</code> Mitglieder im Vorfahren definiert, also sollte es seine Verantwortung sein, sie zu initialisieren. F\u00fcgen wir einen entsprechenden Konstruktor in <code>EquipmentBase</code>hinzu:</p> EquipmentBase.cs<pre><code>public EquipmentBase(int yearOfCreation, int newPrice)\n{\n    this.yearOfCreation = yearOfCreation;\n    this.newPrice = newPrice;\n}\n</code></pre> <p>Entfernen wir die Initialisierung der beiden Mitglieder aus dem Konstruktor der Nachfahren <code>HardDisk</code> und <code>SoundCard</code> und rufen wir stattdessen den Konstruktor des Vorfahren auf, indem wir auf das Schl\u00fcsselwort <code>base</code> verweisen:</p> HardDisk.cs<pre><code>public HardDisk(int yearOfCreation, int newPrice, int capacityGB)\n    : base(yearOfCreation, newPrice)\n{\n    this.capacityGB = capacityGB;\n}\n</code></pre> SoundCard.cs<pre><code>public SoundCard(int yearOfCreation, int newPrice)\n    : base(yearOfCreation, newPrice)\n{\n}\n</code></pre>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#bewertung","title":"Bewertung","text":"<p>Durch die Verwendung einer Kombination aus Schnittstelle und abstrakter Basisklasse ist es uns gelungen, die L\u00f6sung mit dem geringsten Kompromiss zu entwickeln:</p> <ul> <li><code>IEquipment</code> als Schnittstelle k\u00f6nnen wir alle Arten von Teilen einheitlich behandeln, auch solche, bei denen die Basisklasse gebunden war (mit abstrakter Basisklasse allein h\u00e4tten wir dies nicht erreichen k\u00f6nnen).</li> <li>Durch die Einf\u00fchrung der abstrakten Basisklasse <code>EquipmentBase</code> konnten wir den Code, der in den verschiedenen Komponententypen gemeinsam ist, mit einer Ausnahme in einen gemeinsamen Basisklasse bringen und so Code-Duplikationen vermeiden.</li> <li>Durch die Einf\u00fchrung des abstrakten Basisklasse <code>EquipmentBase</code> k\u00f6nnen wir eine Standardimplementierung f\u00fcr neu eingef\u00fchrte Methode der Schnittstelle <code>IEquipment</code> (z.B. <code>GetDescripton</code>) angeben, so dass wir nicht gezwungen sind, diese in jeder <code>IEquipment</code> Implementierungsklasse anzugeben.</li> </ul> <p>Werfen wir abschlie\u00dfend noch einen Blick auf das UML-Klassendiagramm unserer L\u00f6sung:</p> <p></p> <p>C# 11 - Statische Schnittstellen</p> <p>Die neueste Funktion von C# 11 ist die Definition von statischen Schnittstellenmitgliedern, die es Ihnen erm\u00f6glicht, von einer implementierenden Klasse zu verlangen, dass sie Mitglieder hat, die sich nicht auf die Objektinstanz beziehen, sondern die Klasse muss \u00fcber ein bestimmtes statisches Mitglied verf\u00fcgen. Mehr lesen</p>"},{"location":"labor/1-model-es-kod-kapcsolata/index_ger/#hinweis-fakultative-hausaufgabe","title":"Hinweis - fakultative Hausaufgabe","text":"<p>Unsere L\u00f6sung unterst\u00fctzt nicht die Anzeige von komponentenspezifischen Daten (z.B. Kapazit\u00e4t f\u00fcr <code>HardDisk</code> ) w\u00e4hrend der Auflistung. Zu diesem Zweck sollte das Schreiben von Komponentendaten in eine formatierte Zeichenkette von der Klasse <code>EqipmentInventory</code> in die Komponentenklassen verlagert werden, und zwar nach den folgenden Grunds\u00e4tzen:</p> <ul> <li>Sie k\u00f6nnen eine <code>GetFormattedString</code> Operation in die <code>IEquipment</code> Schnittstelle einf\u00fchren, die ein Objekt vom Typ <code>string</code> zur\u00fcckgibt. Alternativ kann die Operation <code>System.Object ToString()</code> \u00fcberschrieben werden. In .NET sind alle Typen implizit von <code>System.Object</code>abgeleitet, das \u00fcber eine virtuelle Operation <code>ToString()</code> verf\u00fcgt.</li> <li>In <code>EquipmentBase</code>schreiben Sie die Formatierung der gemensamen Mitglieder (Beschreibung, Preis, Alter) in Strings.</li> <li>Wenn eine Komponente auch typspezifische Daten hat, dann \u00fcberschreibt ihre Klasse die Funktion, die sie in eine Zeichenkette formatiert: Diese Funktion muss zuerst ihren Vorg\u00e4nger aufrufen (mit dem Schl\u00fcsselwort <code>base</code> ), dann ihre eigenen formatierten Daten an sie anh\u00e4ngen und mit dieser Zeichenkette zur\u00fcckkehren.</li> </ul>"},{"location":"labor/2-nyelvi-eszkozok/","title":"2. Nyelvi eszk\u00f6z\u00f6k","text":""},{"location":"labor/2-nyelvi-eszkozok/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat sor\u00e1n a hallgat\u00f3k megismerkednek a legfontosabb modern, a .NET k\u00f6rnyezetben is rendelkez\u00e9sre \u00e1ll\u00f3 nyelvi eszk\u00f6z\u00f6kkel. Felt\u00e9telezz\u00fck, hogy a hallgat\u00f3 a kor\u00e1bbi tanulm\u00e1nyai sor\u00e1n elsaj\u00e1t\u00edtotta az objektum-orient\u00e1lt szeml\u00e9letm\u00f3dot, \u00e9s tiszt\u00e1ban van az objektum-orient\u00e1lt alapfogalmakkal. Jelen gyakorlat sor\u00e1n azokra a .NET-es nyelvi elemekre koncentr\u00e1lunk, amelyek t\u00falmutatnak az \u00e1ltal\u00e1nos objektum-orient\u00e1lt szeml\u00e9leten, ugyanakkor nagyban hozz\u00e1j\u00e1rulnak a j\u00f3l \u00e1tl\u00e1that\u00f3 \u00e9s k\u00f6nnyen karbantarthat\u00f3 k\u00f3d elk\u00e9sz\u00edt\u00e9s\u00e9hez. Ezek a k\u00f6vetkez\u0151k:</p> <ul> <li>Tulajdons\u00e1g (property)</li> <li>Deleg\u00e1t (delegate, met\u00f3dusreferencia)</li> <li>Esem\u00e9ny (event)</li> <li>Attrib\u00fatum (attribute)</li> <li>Lambda kifejez\u00e9s (lambda expression)</li> <li>Generikus t\u00edpus (generic type)</li> <li>N\u00e9h\u00e1ny tov\u00e1bbi nyelvi konstrukci\u00f3</li> </ul> <p>Kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok: a 2. el\u0151ad\u00e1s \u00e9s a 3. el\u0151ad\u00e1s eleje \u2013 Nyelvi eszk\u00f6z\u00f6k.</p>"},{"location":"labor/2-nyelvi-eszkozok/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Gyakorlat Linuxon vagy macOS alatt</p> <p>A gyakorlat anyag alapvet\u0151en Windowsra \u00e9s Visual Studiora k\u00e9sz\u00fclt, de az elv\u00e9gezhet\u0151 m\u00e1s oper\u00e1ci\u00f3s rendszereken is m\u00e1s fejleszt\u0151eszk\u00f6z\u00f6kkel (pl. VS Code, Rider, Visual Studio for Mac), vagy ak\u00e1r egy sz\u00f6vegszerkeszt\u0151vel \u00e9s CLI (parancssori) eszk\u00f6z\u00f6kkel. Ezt az teszi lehet\u0151v\u00e9, hogy a p\u00e9ld\u00e1k egy egyszer\u0171 Console alkalmaz\u00e1s kontextus\u00e1ban ker\u00fclnek ismertet\u00e9sre (nincsenek Windows specifikus elemek),  a .NET SDK pedig t\u00e1mogatott Linuxon \u00e9s macOS alatt. Hello World Linuxon</p>"},{"location":"labor/2-nyelvi-eszkozok/#bevezeto","title":"Bevezet\u0151","text":"<p>Kitekint\u0151 r\u00e9szek</p> <p>Jelen \u00fatmutat\u00f3 t\u00f6bb helyen is b\u0151v\u00edtett ismeretanyagot, illetve extra magyar\u00e1zatot ad meg jelen megjegyz\u00e9ssel egyez\u0151 sz\u00ednnel keretezett \u00e9s ugyanilyen ikonnal ell\u00e1tott form\u00e1ban. Ezek hasznos kitekint\u00e9sek, de nem k\u00e9pezik az alap tananyag r\u00e9sz\u00e9t.</p>"},{"location":"labor/2-nyelvi-eszkozok/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el itt. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre:</p> <p><code>git clone https://github.com/bmeviauab00/lab-nyelvieszkozok-megoldas</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/2-nyelvi-eszkozok/#0-feladat-var-kulcsszo-implicit-tipusu-lokalis-valtozok-implicitly-typed-local-variables","title":"0. Feladat - var kulcssz\u00f3 - Implicit t\u00edpus\u00fa lok\u00e1lis v\u00e1ltoz\u00f3k (implicitly typed local variables)","text":"<p>Egy egyszer\u0171, bemeleg\u00edt\u0151 feladattal kezd\u00fcnk. A k\u00f6vetkez\u0151 p\u00e9ld\u00e1ban egy <code>Person</code> nev\u0171 oszt\u00e1lyt fogunk elk\u00e9sz\u00edteni, mely egy szem\u00e9lyt reprezent\u00e1l.</p> <ol> <li>Hozzunk l\u00e9tre egy \u00faj C# konzolos alkalmaz\u00e1st. .NET alap\u00fat (vagyis ne .NET Framework-\u00f6set):<ul> <li>Erre az els\u0151 gyakorlat alkalm\u00e1val l\u00e1ttunk p\u00e9ld\u00e1t, le\u00edr\u00e1sa annak \u00fatmutat\u00f3j\u00e1ban szerepel.</li> <li>A \"Do not use top level statements\" jel\u00f6l\u0151n\u00e9gyzetet pip\u00e1ljuk be a projekt l\u00e9trehoz\u00e1s sor\u00e1n.</li> </ul> </li> <li>Adjunk hozz\u00e1 egy \u00faj oszt\u00e1lyt az alkalmaz\u00e1sunkhoz <code>Person</code> n\u00e9ven.     (\u00daj oszt\u00e1ly hozz\u00e1ad\u00e1s\u00e1hoz a Solution Explorerben kattintsunk jobb eg\u00e9rgombbal a projekt f\u00e1jlra \u00e9s v\u00e1lasszuk az Add / Class men\u00fcpontot. Az el\u0151ugr\u00f3 ablakban a l\u00e9trehozand\u00f3 f\u00e1jl nev\u00e9t m\u00f3dos\u00edtsuk <code>Person.cs</code>-re, majd nyomjuk meg az Add gombot.)</li> <li> <p>Tegy\u00fck az oszt\u00e1lyt publikuss\u00e1. Ehhez az oszt\u00e1ly neve el\u00e9 be kell \u00edrni a <code>public</code> kulcssz\u00f3t. Erre a m\u00f3dos\u00edt\u00e1sra itt val\u00f3j\u00e1ban m\u00e9g nem volna sz\u00fcks\u00e9g, ugyanakkor egy k\u00e9s\u0151bbi feladat m\u00e1r egy publikus oszt\u00e1lyt fog ig\u00e9nyelni.</p> <pre><code>public class Person\n{\n}\n</code></pre> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>Program.cs</code> f\u00e1jl <code>Main</code> f\u00fcggv\u00e9ny\u00e9t, hogy kipr\u00f3b\u00e1lhassuk az \u00faj oszt\u00e1lyunkat.</p> <pre><code>static void Main(string[] args)\n{\n    Person p = new Person();\n}\n</code></pre> </li> <li> <p>A lok\u00e1lis v\u00e1ltoz\u00f3k t\u00edpus\u00e1nak explicit megad\u00e1sa helyett haszn\u00e1lhatjuk a <code>var</code> kulcssz\u00f3t is:</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n}\n</code></pre> <p>Ezt implicitly typed local variables-nek, magyarul implicit t\u00edpus\u00fa lok\u00e1lis v\u00e1ltoz\u00f3-nak nevezz\u00fck. Ilyenkor a ford\u00edt\u00f3 a kontextusb\u00f3l, az egyenl\u0151s\u00e9gjel jobb oldal\u00e1b\u00f3l megpr\u00f3b\u00e1lja kital\u00e1lni a v\u00e1ltoz\u00f3 t\u00edpus\u00e1t, fenti esetben ez egy <code>Person</code> lesz. Fontos, hogy ett\u0151l a nyelv m\u00e9g statikusan tipusos marad (teh\u00e1t nem \u00fagy m\u0171k\u00f6dik mint a JavaScript-es <code>var</code> kulcssz\u00f3), mert a <code>p</code> v\u00e1ltoz\u00f3 t\u00edpusa a k\u00e9s\u0151bbiekben nem v\u00e1ltozhat meg, ez csak egy egyszer\u0171 szintaktikai \u00e9des\u00edt\u0151szer annek \u00e9rdek\u00e9ben, hogy t\u00f6m\u00f6rebben tudjunk lok\u00e1lis v\u00e1ltoz\u00f3kat defini\u00e1lni (ne kelljen a t\u00edpust \"dupl\u00e1n\", az <code>=</code> bal \u00e9s jobb oldal\u00e1n is megadni).</p> <p>Target-typed <code>new</code> expressions</p> <p>Egy m\u00e1sik megk\u00f6zel\u00edt\u00e9s lehet a a C# 9-ben megjelent Target-typed <code>new</code> expressions, ahol a new oper\u00e1tor eset\u00e9n hagyhat\u00f3 el a t\u00edpus, ha az a ford\u00edt\u00f3 \u00e1ltal kital\u00e1lhat\u00f3 a kontextusb\u00f3l (pl.: \u00e9rt\u00e9kad\u00e1s bal oldala, param\u00e9ter t\u00edpusa stb.). A fenti <code>Person</code> konstruktorunk a k\u00f6vetkez\u0151k\u00e9ppen n\u00e9zne ki:</p> <pre><code>Person p = new();\n</code></pre> <p>Ennek a megk\u00f6zel\u00edt\u00e9snek az el\u0151nye a <code>var</code>-ral szemben, hogy tagv\u00e1ltoz\u00f3k eset\u00e9ben is alkalmazhat\u00f3.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#1-feladat-tulajdonsag-property","title":"1. Feladat \u2013 Tulajdons\u00e1g (property)","text":"<p>A tulajdons\u00e1gok seg\u00edts\u00e9g\u00e9vel tipikusan (de mint l\u00e1tni fogjuk, nem kiz\u00e1r\u00f3lagosan) oszt\u00e1lyok tagv\u00e1ltoz\u00f3ihoz f\u00e9rhet\u00fcnk hozz\u00e1 szintaktika tekintet\u00e9ben hasonl\u00f3 m\u00f3don, mintha egy hagyom\u00e1nyos tagv\u00e1ltoz\u00f3t \u00e9rn\u00e9nk el. A hozz\u00e1f\u00e9r\u00e9s sor\u00e1n azonban lehet\u0151s\u00e9g\u00fcnk van arra, hogy az egyszer\u0171 \u00e9rt\u00e9k lek\u00e9rdez\u00e9s vagy be\u00e1ll\u00edt\u00e1s helyett met\u00f3dusszer\u0171en implement\u00e1ljuk a v\u00e1ltoz\u00f3 el\u00e9r\u00e9s\u00e9nek a m\u00f3dj\u00e1t, s\u0151t k\u00fcl\u00f6n k\u00fcl\u00f6n is meghat\u00e1rozhatjuk a lek\u00e9rdez\u00e9s \u00e9s a be\u00e1ll\u00edt\u00e1s l\u00e1that\u00f3s\u00e1g\u00e1t.</p>"},{"location":"labor/2-nyelvi-eszkozok/#tulajdonsag-szintaktikaja","title":"Tulajdons\u00e1g szintaktik\u00e1ja","text":"<p>A k\u00f6vetkez\u0151 p\u00e9ld\u00e1ban egy <code>Person</code> nev\u0171 oszt\u00e1lyt fogunk elk\u00e9sz\u00edteni, mely egy szem\u00e9lyt reprezent\u00e1l. K\u00e9t tagv\u00e1ltoz\u00f3ja van, <code>name</code> \u00e9s <code>age</code>. A tagv\u00e1ltoz\u00f3khoz k\u00f6zvetlen\u00fcl nem f\u00e9rhet\u00fcnk hozz\u00e1 (mivel priv\u00e1tok), csak a <code>Name</code>, illetve <code>Age</code> publikus tulajdons\u00e1gokon kereszt\u00fcl kezelhetj\u00fck \u0151ket. A p\u00e9lda j\u00f3l szeml\u00e9lteti, hogy a .NET-es tulajdons\u00e1gok egy\u00e9rtelm\u0171en megfelelnek a C++-b\u00f3l \u00e9s Java-b\u00f3l m\u00e1r j\u00f3l ismert <code>SetX(\u2026)</code> illetve <code>GetX()</code> t\u00edpus\u00fa met\u00f3dusoknak, csak itt ez a megold\u00e1s egys\u00e9gbez\u00e1rtabb m\u00f3don nyelvi szinten t\u00e1mogatott.</p> <ol> <li> <p>Az el\u0151z\u0151 feladatban bevezetett <code>Person</code> oszt\u00e1lyon bel\u00fcl hozzunk l\u00e9tre egy <code>int</code> t\u00edpus\u00fa <code>age</code> nev\u0171 tagv\u00e1ltoz\u00f3t \u00e9s egy ezt el\u00e9rhet\u0151v\u00e9 tev\u0151 <code>Age</code> tulajdons\u00e1got.</p> <pre><code>public class Person\n{\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set { age = value; }\n    }\n}\n</code></pre> <p>Visual Studio snippetek</p> <p>A laboron ugyan a gyakorl\u00e1s kedv\u00e9\u00e9rt k\u00e9zzel g\u00e9pelt\u00fck be a teljes tulajdons\u00e1got, de a Visual Studio-ban a gyakran el\u0151fordul\u00f3 k\u00f3dr\u00e9szletek l\u00e9trehoz\u00e1s\u00e1ra \u00fagynevezett code snippetek \u00e1llnak rendelkez\u00e9s\u00fcnkre, melyekkel a gyakori nyelvi konstrukci\u00f3kat tudjuk sablonszer\u0171en felhaszn\u00e1lni. A fenti property k\u00f3dr\u00e9szletet a <code>propfull</code> snippettel tudjuk el\u0151csalni. G\u00e9pelj\u00fck be a snippet nev\u00e9t (<code>propfull</code>), majd addig nyomjuk a Tab billenty\u0171t am\u00edg a snippet nem aktiv\u00e1l\u00f3dik (tipikusan 2x).</p> <p>Eml\u00edt\u00e9sre m\u00e9lt\u00f3 egy\u00e9b snippetek a teljess\u00e9g ig\u00e9nye n\u00e9lk\u00fcl:</p> <ul> <li><code>ctor</code>: konstruktor</li> <li><code>for</code>: for ciklus</li> <li><code>foreach</code>: foreach ciklus</li> <li><code>prop</code>: auto property (l\u00e1sd k\u00e9s\u0151bb)</li> <li><code>switch</code>: switch utas\u00edt\u00e1s</li> <li><code>cw</code>: Console.WriteLine</li> </ul> <p>Ilyen snippeteket egy\u00e9bk\u00e9nt mi is k\u00e9sz\u00edthet\u00fcnk.</p> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>Program.cs</code> f\u00e1jl <code>Main</code> f\u00fcggv\u00e9ny\u00e9t, hogy kipr\u00f3b\u00e1lhassuk az \u00faj tulajdons\u00e1gunkat.</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n    p.Age = 17;\n    p.Age++;\n    Console.WriteLine(p.Age);\n}\n</code></pre> </li> <li> <p>Futtassuk a programunkat (F5)</p> <p>L\u00e1thatjuk, hogy a tulajdons\u00e1g a tagv\u00e1ltoz\u00f3khoz hasonl\u00f3an haszn\u00e1lhat\u00f3. A tulajdons\u00e1g lek\u00e9rdez\u00e9se eset\u00e9n a tulajdons\u00e1gban defini\u00e1lt <code>get</code> r\u00e9sz fog lefutni, \u00e9s a tulajdons\u00e1g \u00e9rt\u00e9ke a return \u00e1ltal visszaadott \u00e9rt\u00e9k lesz. A tulajdons\u00e1g be\u00e1ll\u00edt\u00e1sa eset\u00e9n a tulajdons\u00e1gban defini\u00e1lt <code>set</code> r\u00e9sz fog lefutni, \u00e9s a speci\u00e1lis <code>value</code> v\u00e1ltoz\u00f3 \u00e9rt\u00e9ke ebben a szakaszban megfelel a tulajdons\u00e1gnak \u00e9rt\u00e9k\u00fcl adott kifejez\u00e9ssel.</p> <p>Figyelj\u00fck meg a fenti megold\u00e1sban azt, hogy milyen eleg\u00e1nsan tudjuk egy \u00e9vvel megemelni az ember \u00e9letkor\u00e1t. Java, vagy C++ k\u00f3dban egy hasonl\u00f3 m\u0171veletet a <code>p.setAge(p.getAge() + 1)</code> form\u00e1ban \u00edrhattunk volna le, amely jelent\u0151sen k\u00f6r\u00fclm\u00e9nyesebb \u00e9s nehezen olvashat\u00f3bb szintaktika a fentin\u00e9l. A tulajdons\u00e1gok haszn\u00e1lat\u00e1nak legf\u0151bb hozad\u00e9ka, hogy k\u00f3dunk szintaktikailag tiszt\u00e1bb lesz, az \u00e9rt\u00e9kad\u00e1sok/lek\u00e9rdez\u00e9sek pedig az esetek t\u00f6bbs\u00e9g\u00e9ben j\u00f3l elv\u00e1lnak a t\u00e9nyleges f\u00fcggv\u00e9nyh\u00edv\u00e1sokt\u00f3l.</p> </li> <li> <p>Gy\u0151z\u0151dj\u00fcnk meg r\u00f3la, hogy a programunk val\u00f3ban elv\u00e9gzi a <code>get</code> \u00e9s <code>set</code> r\u00e9szek h\u00edv\u00e1s\u00e1t. Ehhez helyezz\u00fcnk t\u00f6r\u00e9spontokat (breakpoint) a getter \u00e9s setter blokkok belsej\u00e9be a k\u00f3dszerkeszt\u0151 bal sz\u00e9l\u00e9n l\u00e1that\u00f3 sz\u00fcrke s\u00e1vra kattintva.</p> </li> <li> <p>Futtassuk a programot l\u00e9p\u00e9sr\u0151l l\u00e9p\u00e9sre. Ehhez a programot F5 helyett az F11 billenty\u0171vel ind\u00edtsuk, majd az F11 tov\u00e1bbi megnyom\u00e1saival engedj\u00fck sorr\u00f3l sorra a v\u00e9grehajt\u00e1st.</p> <p>L\u00e1thatjuk, hogy a programunk val\u00f3ban minden egyes alkalommal megh\u00edvja a gettert, amikor \u00e9rt\u00e9klek\u00e9rdez\u00e9s, illetve a settert, amikor \u00e9rt\u00e9kbe\u00e1ll\u00edt\u00e1s t\u00f6rt\u00e9nik.</p> </li> <li> <p>A setter f\u00fcggv\u00e9nyek egyik fontos funkci\u00f3ja, hogy lehet\u0151s\u00e9get k\u00edn\u00e1lnak az \u00e9rt\u00e9kvalid\u00e1ci\u00f3ra. Eg\u00e9sz\u00edts\u00fck ki ennek szellem\u00e9ben az <code>Age</code> tulajdons\u00e1g setter-\u00e9t.</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"\u00c9rv\u00e9nytelen \u00e9letkor!\");\n        age = value; \n    }\n}\n</code></pre> <p>Figyelj\u00fck meg, hogy m\u00edg az egyszer\u0171 getter \u00e9s setter eset\u00e9ben az \u00e9rt\u00e9klek\u00e9rdez\u00e9st/be\u00e1ll\u00edt\u00e1st egy sorban tartjuk, addig komplexebb t\u00f6rzs eset\u00e9n m\u00e1r t\u00f6bb sorra t\u00f6rdelj\u00fck.</p> </li> <li> <p>Az alkalmaz\u00e1s tesztel\u00e9s\u00e9hez rendelj\u00fcnk hozz\u00e1 negat\u00edv \u00e9rt\u00e9ket az \u00e9letkorhoz a <code>Program</code> oszt\u00e1ly <code>Main</code> f\u00fcggv\u00e9ny\u00e9ben.</p> <pre><code>p.Age = -2;\n</code></pre> </li> <li> <p>Futtassuk a programot, gy\u0151z\u0151dj\u00fcnk meg arr\u00f3l, hogy az ellen\u0151rz\u00e9s helyesen m\u0171k\u00f6dik, majd h\u00e1r\u00edtsuk el a hib\u00e1t azzal, hogy pozit\u00edvra cser\u00e9lj\u00fck a be\u00e1ll\u00edtott \u00e9letkort.</p> <pre><code>p.Age = 2;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#autoimplementalt-tulajdonsag-auto-implemented-property","title":"Autoimplement\u00e1lt tulajdons\u00e1g (auto-implemented property)","text":"<p>A mindennapi munk\u00e1nk sor\u00e1n tal\u00e1lkozhatunk a tulajdons\u00e1goknak egy sokkal t\u00f6m\u00f6rebb szintaktik\u00e1j\u00e1val is. Ez a szintaktika akkor alkalmazhat\u00f3, ha egy olyan tulajdons\u00e1got szeretn\u00e9nk l\u00e9trehozni, melyben:</p> <ul> <li>nem szeretn\u00e9nk semmilyen kieg\u00e9sz\u00edt\u0151 logik\u00e1val ell\u00e1tni a getter \u00e9s setter met\u00f3dusokat,</li> <li>nincs sz\u00fcks\u00e9g\u00fcnk a priv\u00e1t tagv\u00e1ltoz\u00f3 k\u00f6zvetlen el\u00e9r\u00e9s\u00e9re.</li> </ul> <p>Erre n\u00e9zz\u00fcnk a k\u00f6vetkez\u0151kben p\u00e9ld\u00e1t.</p> <ol> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>Person</code> oszt\u00e1lyunkat egy ilyen, \u00fan. \u201eautoimplement\u00e1lt\u201d tulajdons\u00e1ggal (auto-implemented property). K\u00e9sz\u00edts\u00fcnk egy <code>string</code> t\u00edpus\u00fa <code>Name</code> nev\u0171 tulajdons\u00e1got.</p> <pre><code>public string Name { get; set; }\n</code></pre> <p>A szintaktikai k\u00fcl\u00f6nbs\u00e9g a kor\u00e1bbiakhoz k\u00e9pest: a get \u00e9s a set \u00e1gnak sem adtunk implement\u00e1ci\u00f3t (nincsenek kapcsos z\u00e1r\u00f3jelek). Autoimplemet\u00e1lt tulajdons\u00e1g eset\u00e9n a ford\u00edt\u00f3 egy rejtett, k\u00f3db\u00f3l nem el\u00e9rhet\u0151 v\u00e1ltoz\u00f3t gener\u00e1l az oszt\u00e1lyba, mely a tulajdons\u00e1g aktu\u00e1lis \u00e9rt\u00e9k\u00e9nek t\u00e1rol\u00e1s\u00e1ra szolg\u00e1l. Hangs\u00falyozand\u00f3, hogy ez nem a kor\u00e1bban bevezetett <code>name</code> tagv\u00e1ltoz\u00f3t \u00e1ll\u00edtja \u00e9s k\u00e9rdezi le (az ki is t\u00f6r\u00f6lhetn\u00e9nk), hanem egy rejtett, \u00faj v\u00e1ltoz\u00f3n dolgozik!</p> </li> <li> <p>Most ellen\u0151rizz\u00fck a m\u0171k\u00f6d\u00e9s\u00e9t a <code>Main</code> f\u00fcggv\u00e9ny kieg\u00e9sz\u00edt\u00e9s\u00e9vel.</p> <pre><code>static void Main(string[] args)\n{\n    // ...\n    p.Name = \"Luke\";\n    // ...\n    Console.WriteLine(p.Name);\n}\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#alapertelmezett-ertek-default-value","title":"Alap\u00e9rtelmezett \u00e9rt\u00e9k (default value)","text":"<p>Az autoimplement\u00e1lt tulajdons\u00e1gok eset\u00e9ben megadhat\u00f3 a kezdeti \u00e9rt\u00e9k\u00fck is a deklar\u00e1ci\u00f3 sor\u00e1n.</p> <ol> <li> <p>Adjunk kiindul\u00f3 \u00e9rt\u00e9ket a <code>Name</code> tulajdons\u00e1gnak.</p> <pre><code>public string Name { get; set; } = \"anonymous\";\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#tulajdonsagok-lathatosaga","title":"Tulajdons\u00e1gok l\u00e1that\u00f3s\u00e1ga","text":"<p>A tulajdons\u00e1gok nagy el\u0151nye a teljesen szabad implement\u00e1ci\u00f3 mellett, hogy a getter \u00e9s a setter l\u00e1that\u00f3s\u00e1g\u00e1t k\u00fcl\u00f6n k\u00fcl\u00f6n is lehet \u00e1ll\u00edtani.</p> <ol> <li> <p>\u00c1ll\u00edtsuk a <code>Name</code> tulajdons\u00e1g setter\u00e9nek a l\u00e1that\u00f3s\u00e1g\u00e1t priv\u00e1tra.</p> <pre><code>public string Name { get; private set; }\n</code></pre> <p>Ilyenkor a <code>Program</code> oszt\u00e1lyban ford\u00edt\u00e1si hib\u00e1t kapunk a <code>p.Name = \"Luke\";</code> utas\u00edt\u00e1sra. Az alapvet\u0151 szab\u00e1ly az, hogy a getter \u00e9s a setter \u00f6r\u00f6kli a property l\u00e1that\u00f3s\u00e1g\u00e1t, mely tov\u00e1bb sz\u0171k\u00edthet\u0151, de nem laz\u00edthat\u00f3. A l\u00e1that\u00f3s\u00e1g szab\u00e1lyoz\u00e1sa autoimplement\u00e1lt \u00e9s nem autoimplement\u00e1lt tulajdons\u00e1gok eset\u00e9n is haszn\u00e1lhat\u00f3.</p> </li> <li> <p>\u00c1ll\u00edtsuk vissza a l\u00e1that\u00f3s\u00e1got (t\u00e1vol\u00edtsuk el a <code>private</code> kulcssz\u00f3t a <code>Name</code> tulajdons\u00e1g settere el\u0151l), hogy megsz\u0171nj\u00f6n a ford\u00edt\u00e1si hiba.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#csak-olvashato-tulajdonsag-readonly-property","title":"Csak olvashat\u00f3 tulajdons\u00e1g (readonly property)","text":"<p>A setter elhagyhat\u00f3, \u00edgy egy olyan tulajdons\u00e1got kapunk, mely csak olvashat\u00f3. Autoimplement\u00e1lt tulajdons\u00e1g eset\u00e9n ennek is adhat\u00f3 kezd\u0151\u00e9rt\u00e9k: erre csak konstruktorban, vagy alap\u00e9rtelmezett \u00e9rt\u00e9kkel val\u00f3 ell\u00e1t\u00e1ssal (l\u00e1sd fent) van lehet\u0151s\u00e9g, ellent\u00e9tben a priv\u00e1t setterrel rendelkez\u0151 tulajdons\u00e1gokkal, melyek settere b\u00e1rmely, az oszt\u00e1lyban tal\u00e1lhat\u00f3 tagf\u00fcggv\u00e9nyb\u0151l h\u00edvhat\u00f3.</p> <p>Csak olvashat\u00f3 tulajdons\u00e1g defini\u00e1l\u00e1s\u00e1t a k\u00f6vetkez\u0151 k\u00f3dr\u00e9szletek illusztr\u00e1lj\u00e1k (a k\u00f3dunkba NE vezess\u00fck be):</p> <p>a) Autoimplement\u00e1lt eset</p> <pre><code>public string Name { get; }\n</code></pre> <p>b) Nem autoimplement\u00e1lt eset</p> <pre><code>private string name;\n...\npublic string Name { get {return name; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/#szamitott-ertek-calculated-value","title":"Sz\u00e1m\u00edtott \u00e9rt\u00e9k (calculated value)","text":"<p>A csak getterrel rendelkez\u0151 tulajdons\u00e1goknak van m\u00e9g egy haszn\u00e1lati m\u00f3dja. Valamilyen sz\u00e1m\u00edtott \u00e9rt\u00e9k meghat\u00e1roz\u00e1s\u00e1ra is haszn\u00e1lhat\u00f3, mely mindig kisz\u00e1mol egy megadott logika alapj\u00e1n egy \u00e9rt\u00e9ket, de a \"csak olvashat\u00f3 tulajdons\u00e1g\"-gal szemben nincs m\u00f6g\u00f6tte k\u00f6zvetlen\u00fcl a tulajdons\u00e1ghoz tartoz\u00f3 adattag. Ezt a k\u00f6vetkez\u0151 k\u00f3dr\u00e9szlet illusztr\u00e1lja (a k\u00f3dunkba NE vezess\u00fck be):</p> <pre><code>public int AgeInDogYear { get { return Age * 7; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/#2-feladat-delegat-delegate-metodusreferencia","title":"2. Feladat \u2013 Deleg\u00e1t (delegate, met\u00f3dusreferencia)","text":"<p>Forduljon a k\u00f3d!</p> <p>A tov\u00e1bbi feladatok \u00e9p\u00edteni fognak az el\u0151z\u0151 feladatok v\u00e9geredm\u00e9nyeire. Ha programod nem fordul le, vagy nem megfelel\u0151en m\u0171k\u00f6dik, jelezd ezt a gyakorlatvezet\u0151dnek a feladatok v\u00e9g\u00e9n, \u00e9s seg\u00edt elh\u00e1r\u00edtani a hib\u00e1t.</p> <p>A deleg\u00e1tok t\u00edpusos met\u00f3dusreferenci\u00e1kat jelentenek .NET-ben, a C/C++ f\u00fcggv\u00e9nypointerek modern megfelel\u0151i. Egy deleg\u00e1t seg\u00edts\u00e9g\u00e9vel egy olyan t\u00edpus\u00fa v\u00e1ltoz\u00f3t defini\u00e1lhatunk, amellyel met\u00f3dusokra tudunk mutatni/hivatkozni. Nem ak\u00e1rmilyenre, hanem - a C++ f\u00fcggv\u00e9nypointerekkel anal\u00f3g m\u00f3don - olyanokra, amely t\u00edpusa (param\u00e9terlist\u00e1ja \u00e9s visszat\u00e9r\u00e9si \u00e9rt\u00e9ke) megfelel a deleg\u00e1t t\u00edpus\u00e1nak. A deleg\u00e1t v\u00e1ltoz\u00f3 \"megh\u00edv\u00e1s\u00e1val\" az \u00e9rt\u00e9k\u00fcl adott (beregisztr\u00e1lt) met\u00f3dus automatikusan megh\u00edv\u00f3dik. A deleg\u00e1tok haszn\u00e1lat\u00e1nak egyik el\u0151nye az, hogy fut\u00e1si id\u0151ben d\u00f6nthetj\u00fck el, hogy t\u00f6bb met\u00f3dus k\u00f6z\u00fcl \u00e9ppen melyiket szeretn\u00e9nk megh\u00edvni.</p> <p>N\u00e9h\u00e1ny p\u00e9lda deleg\u00e1tok haszn\u00e1lat\u00e1ra:</p> <ul> <li>egy univerz\u00e1lis sorrendez\u0151 f\u00fcggv\u00e9nynek  param\u00e9terk\u00e9nt az elemek \u00f6sszehasonl\u00edt\u00e1s\u00e1t v\u00e9gz\u0151 f\u00fcggv\u00e9ny \u00e1tad\u00e1sa,</li> <li>egy \u00e1ltal\u00e1nos gy\u0171jtem\u00e9nyen univerz\u00e1lis sz\u0171r\u00e9si logika megval\u00f3s\u00edt\u00e1sa, melynek param\u00e9terben egy deleg\u00e1t form\u00e1j\u00e1ban adjuk \u00e1t azt a f\u00fcggv\u00e9nyt, amely eld\u00f6nti, hogy egy elemet bele kell-e venni a sz\u0171rt list\u00e1ba,</li> <li>a publish-subscribe minta megval\u00f3s\u00edt\u00e1sa, amikor bizonyos objektumok m\u00e1s objektumokat \u00e9rtes\u00edtenek bizonyos magukkal kapcsolatos esem\u00e9nyek bek\u00f6vetkez\u00e9s\u00e9r\u0151l.</li> </ul> <p>A k\u00f6vetkez\u0151 p\u00e9ld\u00e1nkban lehet\u0151v\u00e9 tessz\u00fck, hogy a kor\u00e1bban l\u00e9trehozott <code>Person</code> oszt\u00e1ly objektumai szabadon \u00e9rtes\u00edthess\u00e9k m\u00e1s oszt\u00e1lyok objektumait arr\u00f3l, ha egy szem\u00e9ly \u00e9letkora megv\u00e1ltozott. Ennek \u00e9rdek\u00e9ben bevezet\u00fcnk egy deleg\u00e1t t\u00edpust (<code>AgeChangingDelegate</code>), mely param\u00e9terlist\u00e1j\u00e1ban \u00e1t tudja adni az ember\u00fcnk \u00e9letkor\u00e1nak aktu\u00e1lis, illetve \u00faj \u00e9rt\u00e9k\u00e9t. Ezt k\u00f6vet\u0151en l\u00e9trehozunk egy publikus <code>AgeChangingDelegate</code> t\u00edpus\u00fa tagv\u00e1ltoz\u00f3t a <code>Person</code> oszt\u00e1lyban, mely lehet\u0151v\u00e9 teszi, hogy egy k\u00fcls\u0151 f\u00e9l megadhassa azt a f\u00fcggv\u00e9nyt, amelyen kereszt\u00fcl az adott <code>Person</code> p\u00e9ld\u00e1ny v\u00e1ltoz\u00e1sair\u00f3l \u00e9rtes\u00edt\u00e9st k\u00e9r.</p> <ol> <li> <p>Hozzunk l\u00e9tre egy \u00faj deleg\u00e1t t\u00edpust, mely <code>void</code> visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u0171, \u00e9s k\u00e9t darab <code>int</code> param\u00e9tert elv\u00e1r\u00f3 f\u00fcggv\u00e9nyre tud hivatkozni. Figyelj\u00fcnk r\u00e1, hogy az \u00faj t\u00edpust a <code>Person</code> oszt\u00e1ly el\u0151tt, k\u00f6zvetlen\u00fcl a n\u00e9vt\u00e9r scope-j\u00e1ban defini\u00e1ljuk!</p> <pre><code>namespace PropertyDemo\n{\n    public delegate void AgeChangingDelegate(int oldAge, int newAge);\n\n    public class Person\n    {\n        // ...\n</code></pre> <p>Az <code>AgeChangingDelegate</code> egy t\u00edpus (figyelj\u00fck a VS sz\u00ednez\u00e9s\u00e9t is), mely b\u00e1rhol szerepelhet, ahol t\u00edpus \u00e1llhat (pl. lehet l\u00e9trehozni ez alapj\u00e1n tagv\u00e1ltoz\u00f3t, lok\u00e1lis v\u00e1ltoz\u00f3t, f\u00fcggv\u00e9ny param\u00e9tert stb.).</p> </li> <li> <p>Tegy\u00fck lehet\u0151v\u00e9, hogy a <code>Person</code> objektumai r\u00e1mutathassanak tetsz\u0151leges, a fenti szignat\u00far\u00e1nak megfelel\u0151 f\u00fcggv\u00e9nyre. Ehhez hozzunk l\u00e9tre egy <code>AgeChangingDelegate</code> t\u00edpus\u00fa tagv\u00e1ltoz\u00f3t a <code>Person</code> oszt\u00e1lyban!</p> <pre><code>public class Person\n{\n    public AgeChangingDelegate AgeChanging;\n</code></pre> <p>Ez \u00edgy most mennyire objektumorient\u00e1lt?</p> <p>A publikus tagv\u00e1ltoz\u00f3k\u00e9nt l\u00e9trehozott met\u00f3dusreferencia val\u00f3j\u00e1ban (egyel\u0151re) s\u00e9rti az objektumorint\u00e1lt egys\u00e9gbez\u00e1r\u00e1si/inform\u00e1ci\u00f3rejt\u00e9si elveket. Erre k\u00e9s\u0151bb visszat\u00e9r\u00fcnk m\u00e9g.</p> </li> <li> <p>H\u00edvjuk meg a f\u00fcggv\u00e9nyt minden alkalommal, amikor az ember\u00fcnk kora megv\u00e1ltozik. Ehhez eg\u00e9sz\u00edts\u00fck ki az <code>Age</code> tulajdons\u00e1g setter\u00e9t a k\u00f6vetkez\u0151kkel.</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"\u00c9rv\u00e9nytelen \u00e9letkor!\");\n        if (AgeChanging != null)\n            AgeChanging(age, value);\n        age = value; \n    }\n}\n</code></pre> <p>A  fenti k\u00f3dr\u00e9szlet sz\u00e1mos fontos szab\u00e1lyt demonstr\u00e1l:</p> <ul> <li>A valid\u00e1ci\u00f3s logika \u00e1ltal\u00e1ban megel\u0151zi az \u00e9rtes\u00edt\u00e9si logik\u00e1t.</li> <li>Az \u00e9rtes\u00edt\u00e9si logika jelleg\u00e9t\u0151l f\u00fcgg, hogy az \u00e9rt\u00e9kad\u00e1s el\u0151tt, vagy ut\u00e1n futtatjuk le (ebben az esetben, mivel a \"changing\" sz\u00f3 egy folyamatban l\u00e9v\u0151 dologra utal, az \u00e9rtes\u00edt\u00e9s megel\u0151zi az \u00e9rt\u00e9kad\u00e1st, a bek\u00f6vetkez\u00e9st m\u00falt id\u0151 jelezn\u00e9: \"changed\")</li> <li>Fel kell k\u00e9sz\u00fcln\u00fcnk r\u00e1, hogy a delegate t\u00edpus\u00fa tagv\u00e1ltoz\u00f3hoz m\u00e9g senki nem rendelt \u00e9rt\u00e9ket (nincs egy subscriber/el\u0151fizet\u0151 sem). Ilyen esetekben a megh\u00edv\u00e1suk kiv\u00e9telt okozna, ez\u00e9rt megh\u00edv\u00e1s el\u0151tt mindig ellen\u0151rizni kell, hogy a tagv\u00e1ltoz\u00f3 \u00e9rt\u00e9ke <code>null</code>-e.</li> <li>Az esem\u00e9ny els\u00fct\u00e9sekor a <code>null</code> vizsg\u00e1latot \u00e9s az esem\u00e9ny els\u00fct\u00e9st eleg\u00e1nsabb, t\u00f6m\u00f6rebb, \u00e9s sz\u00e1lbiztosabb form\u00e1ban is meg tudjuk tenni a \"<code>?.</code>\" null-conditional oper\u00e1torral (C# 6-t\u00f3l):</li> </ul> <pre><code>if (AgeChanging != null)\n    AgeChanging(age, value);\n</code></pre> <p>helyett</p> <pre><code>AgeChanging?.Invoke(age, value);\n</code></pre> <p>Ez csak akkor s\u00fcti el az esem\u00e9nyt, ha nem <code>null</code>, egy\u00e9bk\u00e9nt semmit nem csin\u00e1l.</p> </li> <li> <p>Ha szigor\u00faan n\u00e9zz\u00fck, akkor csak akkor kellene els\u00fctni az esem\u00e9nyt, ha a kor val\u00f3ban v\u00e1ltozik is, vagyis a property set \u00e1g\u00e1ban meg kellene vizsg\u00e1lni, az \u00faj \u00e9rt\u00e9k egyezik-e a r\u00e9givel. Megold\u00e1s lehet, ha a setter els\u0151 sor\u00e1ban azonnal visszat\u00e9r\u00fcnk, ha az \u00faj \u00e9rt\u00e9k egyezik a r\u00e9givel:</p> <pre><code>if (age == value) \n    return;\n\u2026\n</code></pre> </li> <li> <p>K\u00e9sz vagyunk a <code>Person</code> oszt\u00e1ly k\u00f3dj\u00e1val. T\u00e9rj\u00fcnk \u00e1t az el\u0151fizet\u0151re! Ehhez mindenek el\u0151tt a <code>Program</code> oszt\u00e1lyt kell kieg\u00e9sz\u00edten\u00fcnk egy \u00fajabb f\u00fcggv\u00e9nnyel.</p> <pre><code>class Program\n{\n    // ...\n\n    private static void PersonAgeChanging(int oldAge, int newAge)\n    {\n        Console.WriteLine(oldAge + \" =&gt; \" + newAge);\n    }\n}\n</code></pre> <p>Tipp</p> <p>Fokozottan \u00fcgyelj\u00fcnk r\u00e1, hogy az \u00faj f\u00fcggv\u00e9ny a megfelel\u0151 scope-ba ker\u00fclj\u00f6n! M\u00edg a delegate t\u00edpust az oszt\u00e1lyon k\u00edv\u00fclre (de namespace-en bel\u00fclre) helyezt\u00fck el, a f\u00fcggv\u00e9nyt az oszt\u00e1lyon bel\u00fclre helyezz\u00fck!</p> </li> <li> <p>V\u00e9gezet\u00fcl iratkozzunk fel a v\u00e1ltoz\u00e1sk\u00f6vet\u00e9sre a <code>Main</code> f\u00fcggv\u00e9nyben!</p> <pre><code>static void Main(string[] args)\n{\n  Person p = new Person();\n  p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\n  // ...\n</code></pre> </li> <li> <p>Futtassuk a programot!</p> <p>Pl. az <code>AgeChanging?.Invoke(age, value);</code> sorra t\u00f6r\u00e9spontot helyezve, az alkalmaz\u00e1st debuggolva futtatva, \u00e9s a k\u00f3dot l\u00e9ptetve figyelj\u00fck meg, hogy az esem\u00e9ny minden egyes setter fut\u00e1skor, \u00edgy az els\u0151 \u00e9rt\u00e9kad\u00e1skor \u00e9s az inkrement\u00e1l\u00e1s sor\u00e1n egyar\u00e1nt lefut.</p> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>Main</code> f\u00fcggv\u00e9nyt t\u00f6bbsz\u00f6ri feliratkoz\u00e1ssal (a <code>+=</code> oper\u00e1torral lehet \u00faj feliratkoz\u00f3t felvenni a megl\u00e9v\u0151k mell\u00e9), majd futtassuk a programot.</p> <pre><code>p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += PersonAgeChanging; // T\u00f6m\u00f6rebb szintaktika\n</code></pre> <p>L\u00e1that\u00f3an minden egyes \u00e9rt\u00e9kv\u00e1ltoz\u00e1skor mind a h\u00e1rom beregisztr\u00e1lt/\u201efeliratkozott\u201d f\u00fcggv\u00e9ny lefut. Ez az\u00e9rt lehets\u00e9ges, mert a delegate t\u00edpus\u00fa tagv\u00e1ltoz\u00f3k val\u00f3j\u00e1ban nem csup\u00e1n egy f\u00fcggv\u00e9nyreferenci\u00e1t, hanem egy f\u00fcggv\u00e9nyreferencia-list\u00e1t tartalmaznak (\u00e9s tartanak karban).</p> <p>Figyelj\u00fck meg a fenti harmadik sorban, hogy a f\u00fcggv\u00e9nyreferenci\u00e1kat az el\u0151sz\u00f6r l\u00e1tottn\u00e1l t\u00f6m\u00f6rebb szintaxissal is le\u00edrhatjuk: csak a f\u00fcggv\u00e9ny nev\u00e9t adjuk meg a <code>+=</code> oper\u00e1tor ut\u00e1n, a <code>new AgeChangingDelegate(...)</code> n\u00e9lk\u00fcl. Ett\u0151l f\u00fcggetlen\u00fcl ekkor is egy <code>AgeChangingDelegate</code> objektum fogja becsomagolni a <code>PersonAgeChanging</code> f\u00fcggv\u00e9nyeket a sz\u00ednfalak m\u00f6g\u00f6tt. A  gyakorlatban ezt a t\u00f6m\u00f6rebb szintaktik\u00e1t szoktuk haszn\u00e1lni.</p> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki a leiratkoz\u00e1st is (szabadon v\u00e1lasztott ponton), majd futtassuk a programot.</p> <pre><code>p.AgeChanging -= PersonAgeChanging;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#3-feladat-esemeny-event","title":"3. Feladat \u2013 Esem\u00e9ny (event)","text":"<p>Ahogyan a tulajdons\u00e1gok a getter \u00e9s setter met\u00f3dusoknak, addig a fent l\u00e1tott delegate mechanizmus a Java-b\u00f3l ismert Event Listener-eknek k\u00edn\u00e1lj\u00e1k egy a szintaktika tekintet\u00e9ben letisztultabb alternat\u00edv\u00e1j\u00e1t. A fenti megold\u00e1sunk azonban egyel\u0151re m\u00e9g s\u00falyosan s\u00e9rt p\u00e1r OO elvet (egys\u00e9gbez\u00e1r\u00e1s, inform\u00e1ci\u00f3rejt\u00e9s). Ezt az al\u00e1bbi k\u00e9t p\u00e9ld\u00e1val tudjuk demonstr\u00e1lni.</p> <ol> <li> <p>Az esem\u00e9nyt val\u00f3j\u00e1ban k\u00edv\u00fclr\u0151l (m\u00e1s oszt\u00e1lyok m\u0171veleteib\u0151l) is ki tudjuk v\u00e1ltani. Ez szerencs\u00e9tlen, hiszen \u00edgy az esem\u00e9ny hamis m\u00f3don akkor is kiv\u00e1lthat\u00f3,  r\u00e1ad\u00e1sul val\u00f3tlan adatokkal, amikor az a gyakorlatban be sem k\u00f6vetkezett, becsapva az \u00f6sszes el\u0151fizet\u0151t. Ennek demonstr\u00e1l\u00e1s\u00e1ra sz\u00farjuk be a k\u00f6vetkez\u0151 sort a <code>Main</code> f\u00fcggv\u00e9ny v\u00e9g\u00e9re.</p> <pre><code>p.AgeChanging(67, 12);\n</code></pre> <p>Itt a <code>p</code> <code>Person</code> objektum vonatkoz\u00e1s\u00e1ban egy val\u00f3tlan \u00e9letkorv\u00e1ltoz\u00e1s esem\u00e9nyt v\u00e1ltottunk ki, becsapva minden el\u0151fizet\u0151t. A j\u00f3 megold\u00e1s az lenne, ha az esem\u00e9nyt csak a <code>Person</code> oszt\u00e1ly m\u0171veletei tudn\u00e1k kiv\u00e1ltani.</p> </li> <li> <p>Egy m\u00e1sik probl\u00e9ma a k\u00f6vetkez\u0151. B\u00e1r a <code>+=</code> \u00e9s a <code>-=</code> tekintettel vannak a list\u00e1ba feliratkozott t\u00f6bbi f\u00fcggv\u00e9nyre, val\u00f3j\u00e1ban az <code>=</code> oper\u00e1torral b\u00e1rmikor fel\u00fcl\u00edrhatjuk (kit\u00f6r\u00f6lhetj\u00fck) m\u00e1sok feliratkoz\u00e1sait. Pr\u00f3b\u00e1ljuk ki ezt is, a k\u00f6vetkez\u0151 sor besz\u00far\u00e1s\u00e1val (k\u00f6zvetlen\u00fcl a fel \u00e9s leiratkoz\u00e1sok ut\u00e1n sz\u00farjuk be).</p> <pre><code>p.AgeChanging = null;\n</code></pre> </li> <li> <p>L\u00e1ssuk el az <code>event</code> kulcssz\u00f3val az <code>AgeChanging</code> tagv\u00e1ltoz\u00f3t <code>Person.cs</code>-ben!</p> Person.cs<pre><code>public event AgeChangingDelegate AgeChanging;\n</code></pre> <p>Az <code>event</code> kulcssz\u00f3 feladata val\u00f3j\u00e1ban az, hogy a fenti k\u00e9t probl\u00e9m\u00e1t kiz\u00e1rva visszak\u00e9nyszer\u00edtse programunkat az objektumorient\u00e1lt mederbe.</p> </li> <li> <p>Pr\u00f3b\u00e1ljuk meg leford\u00edtani a programot. L\u00e1tni fogjuk, hogy a ford\u00edt\u00f3 a kor\u00e1bbi kih\u00e1g\u00e1sainkat most m\u00e1r ford\u00edt\u00e1si hibak\u00e9nt kezeli.</p> <p></p> </li> <li> <p>T\u00e1vol\u00edtsuk el a h\u00e1rom hib\u00e1s k\u00f3dsort (figyelj\u00fck meg, hogy m\u00e1r az els\u0151 k\u00f6zvetlen \u00e9rt\u00e9kad\u00e1s is hib\u00e1nak min\u0151s\u00fcl), majd ford\u00edtsuk le \u00e9s futtassuk az alkalmaz\u00e1sunkat!</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/#4-feladat-attributumok","title":"4. Feladat \u2013 Attrib\u00fatumok","text":""},{"location":"labor/2-nyelvi-eszkozok/#sorositas-testreszabasa-attributummal","title":"Soros\u00edt\u00e1s testreszab\u00e1sa attrib\u00fatummal","text":"<p>Az attrib\u00fatumok seg\u00edts\u00e9g\u00e9vel deklarat\u00edv m\u00f3don metaadatokkal l\u00e1thatjuk el forr\u00e1sk\u00f3dunkat. Az attrib\u00fatum is tulajdonk\u00e9ppen egy oszt\u00e1ly, melyet hozz\u00e1k\u00f6t\u00fcnk a program egy megadott elem\u00e9hez (t\u00edpushoz, oszt\u00e1lyhoz, interf\u00e9szhez, met\u00f3dushoz stb.). Ezeket a metainform\u00e1ci\u00f3kat a program fut\u00e1sa k\u00f6zben b\u00e1rki (ak\u00e1r mi magunk is) kiolvashatja az \u00fagynevezett reflection mechanizmus seg\u00edts\u00e9g\u00e9vel. Az attrib\u00fatumok a Java annot\u00e1ci\u00f3k .NET-beli megfelel\u0151inek is tekinthet\u0151k.</p> <p>property vs. attrib\u00fatum vs. static</p> <p>Felmer\u00fcl a k\u00e9rd\u00e9s, hogy milyen oszt\u00e1lyjellemz\u0151k ker\u00fcljenek tulajdons\u00e1gokba \u00e9s melyek attrib\u00fatumokba egy oszt\u00e1ly eset\u00e9ben. A tulajdons\u00e1gok mag\u00e1ra az objektum p\u00e9ld\u00e1nyra vonatkoznak, m\u00edg az attrib\u00fatum az azt le\u00edr\u00f3 oszt\u00e1lyra (vagy annak valamilyen tagj\u00e1ra).</p> <p>Ilyen szempontb\u00f3l az attrib\u00fatumok k\u00f6zelebb \u00e1llnak a statikus tulajdons\u00e1gokhoz, m\u00e9gis megfontoland\u00f3, hogy egy adott adatot statikus tagk\u00e9nt vagy attrib\u00fatumk\u00e9nt defini\u00e1ln\u00e1nk. Attrib\u00fatummal sokkal deklarat\u00edvabb a le\u00edr\u00e1s, \u00e9s nem szennyezz\u00fck olyan r\u00e9szletekkel a k\u00f3dot, melyeknek nem kellene az oszt\u00e1ly publikus interf\u00e9sz\u00e9n megjelennie.</p> <p>A NET sz\u00e1mos be\u00e9p\u00edtett attrib\u00fatumot defini\u00e1l, melyek funkci\u00f3ja a legk\u00fcl\u00f6nb\u00f6z\u0151bb f\u00e9le lehet. A k\u00f6vetkez\u0151 p\u00e9ld\u00e1ban haszn\u00e1lt attrib\u00fatumok p\u00e9ld\u00e1ul az XML soros\u00edt\u00f3val k\u00f6z\u00f6lnek k\u00fcl\u00f6nb\u00f6z\u0151 metainform\u00e1ci\u00f3kat.</p> <ol> <li> <p>Sz\u00farjuk be a <code>Main</code> f\u00fcggv\u00e9ny v\u00e9g\u00e9re a k\u00f6vetkez\u0151 k\u00f3dr\u00e9szletet, majd futtassuk a programunkat!</p> <pre><code>var serializer = new XmlSerializer(typeof(Person));\nvar stream = new FileStream(\"person.txt\", FileMode.Create);\nserializer.Serialize(stream, p);\nstream.Close();\nProcess.Start(new ProcessStartInfo\n{\n    FileName = \"person.txt\",\n    UseShellExecute = true,\n});\n</code></pre> <p>A fenti p\u00e9ld\u00e1b\u00f3l az utols\u00f3 <code>Process.Start</code> f\u00fcggv\u00e9nyh\u00edv\u00e1s nem a soros\u00edt\u00f3 logika r\u00e9sze, csup\u00e1n egy frapp\u00e1ns megold\u00e1s arra, hogy a Windows alap\u00e9rtelmezett sz\u00f6vegf\u00e1jl n\u00e9zeget\u0151j\u00e9vel megnyissuk a keletkezett adat\u00e1llom\u00e1nyt. Ezt kipr\u00f3b\u00e1lhatjuk, de a haszn\u00e1lt .NET runtime-t\u00f3l \u00e9s az oper\u00e1ci\u00f3s rendszer\u00fcnkt\u0151l f\u00fcgg, t\u00e1mogatott-e. Ha nem, fut\u00e1s k\u00f6zben hib\u00e1t kapunk. Ez esetben hagyjuk kikommentezve, \u00e9s a <code>person.txt</code> f\u00e1jlt a f\u00e1jlrendszerben megkeresve k\u00e9zzel nyissuk meg (a Visual Studio mapp\u00e1nkban a *\\bin\\Debug\\* alatt tal\u00e1lhat\u00f3 az .exe alkalmaz\u00e1sunk mellett). <li> <p>N\u00e9zz\u00fck meg a keletkezett f\u00e1jl szerkezet\u00e9t. Figyelj\u00fck meg, hogy minden tulajdons\u00e1g a nev\u00e9nek megfelel\u0151 XML elemre lett lek\u00e9pezve.</p> </li> <li> <p>.NET attrib\u00fatumok seg\u00edts\u00e9g\u00e9vel olyan metaadatokkal l\u00e1thatjuk el a <code>Person</code> oszt\u00e1lyunkat, melyek k\u00f6zvetlen\u00fcl m\u00f3dos\u00edtj\u00e1k a soros\u00edt\u00f3 viselked\u00e9s\u00e9t. Az <code>XmlRoot</code> attrib\u00fatum lehet\u0151s\u00e9get k\u00edn\u00e1l a gy\u00f6k\u00e9relem \u00e1tnevez\u00e9s\u00e9re. Helyezz\u00fck el a <code>Person</code> oszt\u00e1ly f\u00f6l\u00e9!</p> <pre><code>[XmlRoot(\"Szem\u00e9ly\")]\npublic class Person \n{\n    // ...\n}\n</code></pre> </li> <li> <p>Az <code>XmlAttribute</code> attrib\u00fatum jelzi a soros\u00edt\u00f3 sz\u00e1m\u00e1ra, hogy a jel\u00f6lt tulajdons\u00e1got ne xml elemre, hanem xml attrib\u00fatumra k\u00e9pezze le. L\u00e1ssuk el ezzel az <code>Age</code> tulajdons\u00e1got (\u00e9s ne a tagv\u00e1ltoz\u00f3t!)!</p> <pre><code>[XmlAttribute(\"Kor\")]\npublic int Age\n</code></pre> </li> <li> <p>Az <code>XmlIgnore</code> attrib\u00fatum jelzi a soros\u00edt\u00f3nak, hogy a jel\u00f6lt tulajdons\u00e1g teljesen elhagyand\u00f3 az eredm\u00e9nyb\u0151l. Pr\u00f3b\u00e1ljuk ki a <code>Name</code> tulajdons\u00e1g f\u00f6l\u00f6tt.</p> <pre><code>[XmlIgnore]\npublic string Name { get; set; }\n</code></pre> </li> <li> <p>Futtassuk az alkalmaz\u00e1sunkat! Hasonl\u00edtsuk \u00f6ssze az eredm\u00e9nyt a kor\u00e1bbiakkal.</p> </li>"},{"location":"labor/2-nyelvi-eszkozok/#5-feladat-delegat-2","title":"5. Feladat \u2013 Deleg\u00e1t 2.","text":"<p>A 2. \u00e9s 3. feladatokban a deleg\u00e1tokkal esem\u00e9ny alap\u00fa \u00fczenetk\u00fcld\u00e9st val\u00f3s\u00edtottunk meg. A deleg\u00e1tok haszn\u00e1lat\u00e1nak m\u00e1sik tipikus eset\u00e9ben a f\u00fcggv\u00e9nyreferenci\u00e1kat arra haszn\u00e1ljuk, hogy egy algoritmus vagy \u00f6sszetettebb m\u0171velet sz\u00e1m\u00e1ra egy el\u0151re nem defini\u00e1lt l\u00e9p\u00e9s implement\u00e1ci\u00f3j\u00e1t \u00e1tadjuk.</p> <p>A be\u00e9p\u00edtett generikus lista oszt\u00e1ly (<code>List&lt;T&gt;</code>) <code>FindAll</code> f\u00fcggv\u00e9nye p\u00e9ld\u00e1ul k\u00e9pes arra, hogy visszaadjon egy \u00faj list\u00e1ban minden olyan elemet, mely egy adott felt\u00e9telnek eleget tesz. A konkr\u00e9t sz\u0171r\u00e9si felt\u00e9telt egy f\u00fcggv\u00e9ny, pontosabban delegate form\u00e1j\u00e1ban adhatjuk meg param\u00e9terben (ez a <code>FindAll</code> minden elemre megh\u00edvja), mely igazat ad minden olyan elemre, amit az eredm\u00e9nylist\u00e1ban szeretn\u00e9nk l\u00e1tni. A f\u00fcggv\u00e9ny param\u00e9ter\u00e9nek a t\u00edpusa a k\u00f6vetkez\u0151 el\u0151re defini\u00e1lt delegate t\u00edpus (nem kell beg\u00e9pelni/l\u00e9trehozni, hiszen m\u00e1r l\u00e9tezik):</p> <pre><code>public delegate bool Predicate&lt;T&gt;(T obj)\n</code></pre> <p>Note</p> <p>A fenti teljes defin\u00edci\u00f3 megjelen\u00edt\u00e9s\u00e9hez csak g\u00e9pelj\u00fck be valahova, pl. a <code>Main</code> f\u00fcggv\u00e9ny v\u00e9g\u00e9re a <code>Predicate</code> t\u00edpusnevet, kattintsunk rajta eg\u00e9rrel, \u00e9s az F12 billenty\u0171vel navig\u00e1ljunk el a defin\u00edci\u00f3j\u00e1hoz.</p> <p>Vagyis bemenetk\u00e9nt egy olyan t\u00edpus\u00fa v\u00e1ltoz\u00f3t v\u00e1r, mint a listaelemek t\u00edpusa, kimenetk\u00e9nt pedig egy logikai (bool) \u00e9rt\u00e9ket. A fentiek demonstr\u00e1l\u00e1s\u00e1ra kieg\u00e9sz\u00edtj\u00fck a kor\u00e1bbi programunkat egy sz\u0171r\u00e9ssel, mely a list\u00e1b\u00f3l csak a p\u00e1ratlan elemeket fogja megtartani.</p> <ol> <li> <p>Val\u00f3s\u00edtsunk meg egy olyan sz\u0171r\u0151f\u00fcggv\u00e9nyt az alkalmaz\u00e1sunkban, amely a p\u00e1ratlan sz\u00e1mokat adja vissza:</p> <pre><code>private static bool MyFilter(int n)\n{\n    return n % 2 == 1;\n}\n</code></pre> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a kor\u00e1bban \u00edrt k\u00f3dunkat a sz\u0171r\u0151 f\u00fcggv\u00e9ny\u00fcnk haszn\u00e1lat\u00e1val:</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nlist = list.FindAll(MyFilter);\n\nforeach (int n in list)\n{\n    Console.WriteLine($\"Value: {n}\");\n}\n</code></pre> </li> <li> <p>Futtassuk az alkalmaz\u00e1st. Figyelj\u00fck meg, hogy a konzolon val\u00f3ban csak a p\u00e1ratlan sz\u00e1mok jelennek meg.</p> </li> <li>\u00c9rdekess\u00e9gk\u00e9nt elhelyezhet\u00fcnk egy t\u00f6r\u00e9spontot (breakpoint) a <code>MyFilter</code> f\u00fcggv\u00e9ny\u00fcnk belsej\u00e9ben, \u00e9s megfigyelhetj\u00fck, hogy a f\u00fcggv\u00e9ny val\u00f3ban minden egyes listaelemre k\u00fcl\u00f6n-k\u00fcl\u00f6n megh\u00edv\u00f3dik.</li> </ol> <p>Collection initializer szintaxis</p> <p>Minden <code>Add</code> met\u00f3dussal rendelkez\u0151, az <code>IEnumerable</code> interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyra (tipikusan kollekci\u00f3k) a collection initializer szintaxis az al\u00e1bbi m\u00f3don:</p> <pre><code>var list = new List&lt;int&gt;() { 1, 2, 3 };\n</code></pre> <p>C# 12-t\u0151l kezdve m\u00e9g egyszer\u0171bb szintaxis (\u00fan. collection expression) is haszn\u00e1lhat\u00f3 egy gy\u0171jtem\u00e9ny inicializ\u00e1l\u00e1s\u00e1ra, ha v\u00e1ltoz\u00f3 t\u00edpus\u00e1ra a ford\u00edt\u00f3 ki tudja k\u00f6vetkeztetni, hogy gy\u0171jetm\u00e9nyr\u0151l van sz\u00f3. Pl.:</p> <pre><code>List&lt;int&gt; list = [1, 2, 3];\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/#6-feladat-lambda-kifejezesek","title":"6. Feladat \u2013 Lambda kifejez\u00e9sek","text":"<p>Az \u00e9rintett t\u00e9mak\u00f6r\u00f6k az el\u0151ad\u00e1sanyagban r\u00e9szletesen szerepelnek, itt nem ism\u00e9telj\u00fck meg \u0151ket L\u00e1sd \u201eEl\u0151ad\u00e1s 02 - Nyelvi eszk\u00f6z\u00f6k.pdf\u201d dokumentum \"Lambda expression (lambda kifejez\u00e9s)\" fejezete. A kulcselem a <code>=&gt;</code> (lambda oper\u00e1tor), mely seg\u00edts\u00e9g\u00e9vel lambda kifejez\u00e9sek, vagyis n\u00e9vtelen f\u00fcggv\u00e9nyek defini\u00e1l\u00e1s\u00e1ra van lehet\u0151s\u00e9g.</p> <p><code>Action \u00e9s Func</code></p> <p>A .NET be\u00e9p\u00edtett <code>Func</code> \u00e9s <code>Action</code> generikus delegate t\u00edpusokra itt id\u0151 hi\u00e1ny\u00e1ban nem t\u00e9r\u00fcnk ki. Ett\u0151l m\u00e9g beletartoznak az alapanyagba!</p> <p>Az el\u0151z\u0151, 5. feladatot oldjuk meg a k\u00f6vetkez\u0151k\u00e9ppen: ne adjunk meg k\u00fcl\u00f6n sz\u0171r\u0151f\u00fcggv\u00e9nyt, hanem a sz\u0171r\u00e9si logik\u00e1t egy lambda kifejez\u00e9s form\u00e1j\u00e1ban adjuk meg a <code>FindAll</code> m\u0171veletnek.</p> <p>Ehhez mind\u00f6ssze egy sort kell megv\u00e1ltoztatni:</p> <pre><code>list = list.FindAll((int n) =&gt; { return n % 2 == 1; });\n</code></pre> <p>Egy n\u00e9v n\u00e9lk\u00fcli f\u00fcggv\u00e9nyt defini\u00e1ltunk \u00e9s adtunk \u00e1t a <code>FindAll</code> m\u0171veletnek:</p> <ul> <li>ez egy lambda kifejez\u00e9s,</li> <li>a <code>=&gt;</code> bal oldal\u00e1n megadtuk a m\u0171velet param\u00e9tereket (itt csak egy volt),</li> <li>a <code>=&gt;</code> jobb oldal\u00e1n adtuk meg a m\u0171velet t\u00f6rzs\u00e9t (ugyanaz, mint a kor\u00e1bbi <code>MyFilter</code> t\u00f6rzse).</li> </ul> <p>A fenti sort j\u00f3val egyszer\u0171bb \u00e9s \u00e1ttekinthet\u0151bb form\u00e1ba is \u00edrhatjuk:</p> <pre><code>list = list.FindAll(n =&gt; n % 2 == 1);\n</code></pre> <p>A k\u00f6vetkez\u0151 egyszer\u0171s\u00edt\u00e9seket eszk\u00f6z\u00f6lt\u00fck:</p> <ul> <li>a param\u00e9ter t\u00edpus\u00e1t nem \u00edrtuk ki: a ford\u00edt\u00f3 ki tudja k\u00f6vetkeztetni a <code>FindAll</code> delegate param\u00e9teram\u00e9ter\u00e9nek t\u00edpus\u00e1b\u00f3l, mely a kor\u00e1bban vizsg\u00e1lt <code>Predicate</code>.</li> <li>a param\u00e9ter k\u00f6r\u00fcli z\u00e1r\u00f3jelet elhagyhattuk (mert csak egy param\u00e9ter van)</li> <li>a <code>=&gt;</code> jobb oldal\u00e1n elhagyhattuk a {} z\u00e1r\u00f3jeleket \u00e9s a <code>return</code>-t (mert egyetlen kifejez\u00e9sb\u0151l \u00e1llt a f\u00fcggv\u00e9ny t\u00f6rzse, mellyel a f\u00fcggv\u00e9ny visszat\u00e9r).</li> </ul>"},{"location":"labor/2-nyelvi-eszkozok/#7-tovabbi-nyelvi-konstrukciok","title":"7. Tov\u00e1bbi nyelvi konstrukci\u00f3k","text":"<p>Az al\u00e1bbiakban kitekint\u00fcnk n\u00e9h\u00e1ny olyan C# nyelvi elemre, melyek a napi programoz\u00e1si feladatok sor\u00e1n egyre gyakrabban haszn\u00e1latosak. A gyakorlat sor\u00e1n j\u00f3 es\u00e9llyel m\u00e1r nem marad id\u0151 ezek \u00e1ttekint\u00e9s\u00e9re.</p>"},{"location":"labor/2-nyelvi-eszkozok/#kifejezestorzsu-tagok-expression-bodied-members","title":"Kifejez\u00e9st\u00f6rzs\u0171 tagok (Expression-bodied members)","text":"<p>Id\u0151nk\u00e9nt olyan r\u00f6vid f\u00fcggv\u00e9nyeket, illetve tulajdons\u00e1gok eset\u00e9n kifejezetten gyakran olyan r\u00f6vid get/set/init defin\u00edci\u00f3kat \u00edrunk, melyek egyetlen kifejez\u00e9sb\u0151l \u00e1llnak. Ez esetben a f\u00fcggv\u00e9ny, illetve tulajdons\u00e1g eset\u00e9n a get/set/init t\u00f6rzse megadhat\u00f3 \u00fan. kifejez\u00e9st\u00f6rzs\u0171 tagok (expression-bodied members) szintaktik\u00e1val is, a <code>=&gt;</code> alkalmaz\u00e1s\u00e1val. Ez akkor is megtehet\u0151, ha az adott kontextusban van visszat\u00e9r\u00e9si \u00e9rt\u00e9k (return utas\u00edt\u00e1s), ak\u00e1r nincs.</p> <p>A p\u00e9ld\u00e1kban l\u00e1tni fogjuk, hogy a kifejez\u00e9stest\u0171 tagok alkalmaz\u00e1sa nem t\u00f6bb, mint egy kisebb szintaktikai \"csavar\" annak \u00e9rdek\u00e9ben, hogy ilyen egyszer\u0171 esetekben min\u00e9l kevesebb k\u00f6r\u00edt\u0151 k\u00f3dot kelljen \u00edrni.</p> <p>N\u00e9zz\u00fcnk el\u0151sz\u00f6r egy f\u00fcggv\u00e9ny p\u00e9ld\u00e1t (feltessz\u00fck, hogy az oszt\u00e1lyban van egy <code>Age</code> tagv\u00e1ltoz\u00f3 vagy tulajdons\u00e1g):</p> <p><pre><code>public int GetAgeInDogYear() =&gt; Age * 7; \npublic void DisplayName() =&gt; Console.WriteLine(ToString());\n</code></pre> Mint l\u00e1that\u00f3, elhagytuk a {} z\u00e1r\u00f3jeleket \u00e9s a <code>return</code> utas\u00edt\u00e1st, \u00edgy t\u00f6m\u00f6rebb a szintaktika.</p> <p>Fontos</p> <p>B\u00e1r itt is a <code>=&gt;</code> tokent haszn\u00e1ljuk, ennek semmi k\u00f6ze nincs a kor\u00e1bban t\u00e1rgyalt lambda kifejez\u00e9sekhez: egyszer\u0171en csak arr\u00f3l van sz\u00f3, hogy ugyanazt a <code>=&gt;</code> tokent (szimb\u00f3lump\u00e1rt) k\u00e9t teljesen elt\u00e9r\u0151 dologra haszn\u00e1lja a C# nyelv.</p> <p>P\u00e9lda tulajdons\u00e1g getter megad\u00e1s\u00e1ra:</p> <pre><code>public int AgeInDogYear { get =&gt; Age * 7; }\n</code></pre> <p>S\u0151t, ha csak getterje van a tulajdons\u00e1gnak, a <code>get</code> kulcssz\u00f3t \u00e9s a kapcsos z\u00e1r\u00f3jeleket is lehagyhatjuk.</p> <pre><code>public int AgeInDogYear =&gt; Age * 7;\n</code></pre> <p>Ezt az k\u00fcl\u00f6nb\u00f6zteti meg a kor\u00e1bban l\u00e1tott f\u00fcggv\u00e9nyek hasonl\u00f3 szintaktik\u00e1j\u00e1t\u00f3l, hogy itt nem \u00edrtuk ki a kerek z\u00e1r\u00f3jeleket.</p> <p>Note</p> <p>A Microsoft hivatalos dokument\u00e1ci\u00f3j\u00e1nak magyar ford\u00edt\u00e1s\u00e1ban az \"expression-bodied members\" nem \"kifejez\u00e9st\u00f6rzs\u0171\", hanem \"kifejez\u00e9stest\u0171\" tagk\u00e9nt szerepel. K\u00f6sz\u00f6nj\u00fck sz\u00e9pen, de a f\u00fcggv\u00e9nyeknek sokkal ink\u00e1bb t\u00f6rzse, mint teste van a magyar terminol\u00f3gi\u00e1ban, \u00edgy ezt nem vessz\u00fck \u00e1t...</p>"},{"location":"labor/2-nyelvi-eszkozok/#objektuminicializalo-object-initializer","title":"Objektuminicializ\u00e1l\u00f3 (Object initializer)","text":"<p>A publikus tulajdons\u00e1gok/tagv\u00e1ltoz\u00f3k inicializ\u00e1l\u00e1sa \u00e9s a konstruktorh\u00edv\u00e1s kombin\u00e1lhat\u00f3 egy \u00fagynevezett objektuminicializ\u00e1l\u00f3 (object initializer) szintaxis seg\u00edts\u00e9g\u00e9vel. Ennek alkalmaz\u00e1sa sor\u00e1n a konstruktorh\u00edv\u00e1s ut\u00e1n kapcsos z\u00e1r\u00f3jelekkel blokkot nyitunk, ahol a publikus tulajdons\u00e1gok/tagv\u00e1ltoz\u00f3k \u00e9rt\u00e9ke adhat\u00f3 meg, az al\u00e1bbi szintaktik\u00e1val.</p> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Luke\",\n};\n</code></pre> <p>Az tulajdons\u00e1gok/tagok inicializ\u00e1l\u00e1sa a konstruktor lefut\u00e1sa ut\u00e1n t\u00f6rt\u00e9nik (amennyiben tartozik az oszt\u00e1lyhoz konstruktor). Ez a szintaktika az\u00e9rt is el\u0151ny\u00f6s, mert egy kifejez\u00e9snek sz\u00e1m\u00edt (azon h\u00e1rommal szemben, mintha l\u00e9trehozn\u00e1nk egy inicializ\u00e1latlan, <code>Person</code> objektumot, \u00e9s k\u00e9t tov\u00e1bbi l\u00e9p\u00e9sben adn\u00e1nk \u00e9rt\u00e9ket az <code>Age</code> \u00e9s <code>Name</code> tagoknak). \u00cdgy ak\u00e1r k\u00f6zvetlen\u00fcl f\u00fcggv\u00e9nyh\u00edv\u00e1s param\u00e9terek\u00e9nt \u00e1tadhat\u00f3 egy inicializ\u00e1lt objektum, an\u00e9lk\u00fcl, hogy k\u00fcl\u00f6n v\u00e1ltoz\u00f3t kellene deklar\u00e1lni.</p> <pre><code>void Foo(Person p)\n{\n    // do something with p\n}\n</code></pre> <pre><code>Foo(new Person() { Age = 17, Name = \"Luke\" });\n</code></pre> <p>A szintaxis r\u00e1ad\u00e1sul copy-paste bar\u00e1t, mert ahogy a fenti p\u00e9ld\u00e1kban is l\u00e1tszik, hogy nem sz\u00e1m\u00edt, hogy az utols\u00f3 tulajdons\u00e1g megad\u00e1sa ut\u00e1n van-e vessz\u0151, vagy nincs.</p>"},{"location":"labor/2-nyelvi-eszkozok/#tulajdonsagok-init-only-setter","title":"Tulajdons\u00e1gok - Init only setter","text":"<p>Az el\u0151z\u0151 pontban l\u00e9v\u0151 objektuminicializ\u00e1l\u00f3 szintaxis nagyon k\u00e9nyelmes, viszont azt k\u00f6veteli meg a tulajdons\u00e1gt\u00f3l, hogy publikus legyen. Ha azt akarjuk, hogy egy tulajdons\u00e1g \u00e9rt\u00e9ke csak az objektum l\u00e9trehoz\u00e1sakor legyen megadhat\u00f3, ahhoz konstruktor param\u00e9tert kell bevezess\u00fcnk, \u00e9s egy csak olvashat\u00f3 (csak getterrel rendelkez\u0151) tulajdons\u00e1gnak kell azt \u00e9rt\u00e9k\u00fcl adjuk. Erre a probl\u00e9m\u00e1ra ad egyszer\u0171bb megold\u00e1st az \u00fan. Init only setter szintaxis, ahol olyan \"settert\" tudunk k\u00e9sz\u00edteni az <code>init</code> kulcssz\u00f3val, mely \u00e1ll\u00edt\u00e1sa  csak a konstruktorban \u00e9s az el\u0151z\u0151 fejezetben ismertetett objektuminicializ\u00e1l\u00f3 szintaxis alkalmaz\u00e1sa sor\u00e1n enged\u00e9lyezett, ezt k\u00f6vet\u0151en m\u00e1r nem.</p> <pre><code>public string Name { get; init; }\n</code></pre> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Luke\",\n};\n\np.Name = \"Test\"; // build hiba, ut\u00f3lag nem megv\u00e1ltoztathat\u00f3\n</code></pre> <p>Tov\u00e1bb\u00e1 lehet\u0151s\u00e9g\u00fcnk van az init only setter k\u00f6telez\u0151s\u00e9g\u00e9t is be\u00e1ll\u00edtani a tulajdons\u00e1gon alkalmazott <code>required</code> kulcssz\u00f3val. Ekkor a tulajdons\u00e1g \u00e9rt\u00e9k\u00e9t mindenk\u00e9ppen meg kell adni az objektuminicializ\u00e1l\u00f3 szintaxisban, k\u00fcl\u00f6nben ford\u00edt\u00e1si hib\u00e1t kapunk.</p> <pre><code>public required string Name { get; init; }\n</code></pre> <p>Ez az\u00e9rt is hasznos, mert ha egy\u00e9bk\u00e9nt is szeretn\u00e9nk tulajdons\u00e1gokat publik\u00e1lni az oszt\u00e1lyb\u00f3l, \u00e9s egy\u00e9bk\u00e9nt is szeretn\u00e9nk t\u00e1mogatni az objektum inicializ\u00e1l\u00f3 szintaxist, akkor \u00edgy meg tudjuk sp\u00f3rolni a k\u00f6telez\u0151 konstruktor param\u00e9tereket.</p>"},{"location":"labor/2-nyelvi-eszkozok/#8-feladat-generikus-osztalyok","title":"8. Feladat \u2013 Generikus oszt\u00e1lyok","text":"<p>Megjegyz\u00e9s: erre a feladatra j\u00f3 es\u00e9llyel nem marad id\u0151. Ez esetben c\u00e9lszer\u0171 a feladatot gyakorl\u00e1sk\u00e9ppen otthon elv\u00e9gezni.</p> <p>A .NET generikus oszt\u00e1lyai hasonl\u00edtanak C++ nyelv template oszt\u00e1lyaihoz, de k\u00f6zelebb \u00e1llnak a Java-ban m\u00e1r megismert generikus oszt\u00e1lyokhoz. A seg\u00edts\u00e9g\u00fckkel \u00e1ltal\u00e1nos (t\u00f6bb t\u00edpusra is m\u0171k\u00f6d\u0151), de ugyanakkor t\u00edpusbiztos oszt\u00e1lyokat hozhatunk l\u00e9tre. Generikus oszt\u00e1lyok n\u00e9lk\u00fcl, ha \u00e1ltal\u00e1nosan szeretn\u00e9nk kezelni egy probl\u00e9m\u00e1t, akkor <code>object</code> t\u00edpus\u00fa adatokat haszn\u00e1lunk (mert .NET-ben minden oszt\u00e1ly az <code>object</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik). Ez a helyzet p\u00e9ld\u00e1ul az <code>ArrayList</code>-tel is, ami egy \u00e1ltal\u00e1nos c\u00e9l\u00fa gy\u0171jtem\u00e9ny, tetsz\u0151leges, <code>object</code> t\u00edpus\u00fa elemek t\u00e1rol\u00e1s\u00e1ra alkalmas. L\u00e1ssunk egy p\u00e9ld\u00e1t az <code>ArrayList</code> haszn\u00e1lat\u00e1ra:</p> <pre><code>var list = new ArrayList();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    // Castolni kell, k\u00fcl\u00f6nben nem fordul\n    int i = (int)list[n];\n    Console.WriteLine($\"Value: {i}\");\n}\n</code></pre> <p>A fenti megold\u00e1ssal a k\u00f6vetkez\u0151 probl\u00e9m\u00e1k ad\u00f3dnak:</p> <ul> <li>Az <code>ArrayList</code> minden egyes elemet <code>object</code>-k\u00e9nt t\u00e1rol.</li> <li>Amikor hozz\u00e1 szeretn\u00e9nk f\u00e9rni a lista egy elem\u00e9hez, mindig a megfelel\u0151 t\u00edpus\u00fav\u00e1 kell cast-olni.</li> <li>Nem t\u00edpusbiztos. A fenti p\u00e9ld\u00e1ban semmi nem akad\u00e1lyoz meg abban (\u00e9s semmilyen hiba\u00fczenet sem jelzi), hogy az <code>int</code> t\u00edpus\u00fa adatok mell\u00e9  besz\u00farjunk a list\u00e1ba egy m\u00e1sik t\u00edpus\u00fa objektumot. Ilyenkor csak a lista bej\u00e1r\u00e1sa sor\u00e1n kapn\u00e1nk hib\u00e1t, amikor a nem <code>int</code> t\u00edpust <code>int</code> t\u00edpus\u00fara pr\u00f3b\u00e1lunk castolni. Generikus gy\u0171jtem\u00e9nyek haszn\u00e1latakor az ilyen hib\u00e1k m\u00e1r a ford\u00edt\u00e1s sor\u00e1n kider\u00fclnek.</li> <li>\u00c9rt\u00e9k t\u00edpus\u00fa adatok t\u00e1rol\u00e1sakor a lista lassabban m\u0171k\u00f6dik, mert az \u00e9rt\u00e9k t\u00edpust el\u0151sz\u00f6r be kell dobozolni (boxing), hogy az <code>object</code>-k\u00e9nt (azaz referencia t\u00edpusk\u00e9nt) t\u00e1rolhat\u00f3 legyen.</li> </ul> <p>A fenti probl\u00e9ma megold\u00e1sa egy generikus lista haszn\u00e1lat\u00e1val a k\u00f6vetkez\u0151k\u00e9ppen n\u00e9z ki (a gyakorlat sor\u00e1n csak a kiemelt sort m\u00f3dos\u00edtsuk a kor\u00e1bban beg\u00e9pelt p\u00e9ld\u00e1ban):</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    int i = list[n]; // Nem kell cast-olni\n    Console.WriteLine($\"Value: {i}\");\n}\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/","title":"2. Language tools","text":""},{"location":"labor/2-nyelvi-eszkozok/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>During this laboratory, students will become familiar with the most important modern language tools available in the .NET environment. We assume that the student has already acquired an object-oriented mindset in previous studies and is familiar with the fundamental concepts of object-oriented programming. In this laboratory, we focus on .NET language features that go beyond general object-oriented principles, but significantly contribute to writing clear and maintainable code. These include:</p> <ul> <li>Property</li> <li>Delegate (method reference)</li> <li>Event</li> <li>Attribute</li> <li>Lambda expression</li> <li>Generic type</li> <li>A few additional language constructs</li> </ul> <p>Related lectures: Lecture 2 and the beginning of Lecture 3 \u2013 Language Tools.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools needed to complete the laboratory:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Exercise on Linux or macOS</p> <p>The exercise material is primarily designed for Windows and Visual Studio, but it can also be completed on other operating systems using different development tools (e.g., VS Code, Rider, Visual Studio for Mac), or even with a text editor and CLI (command-line) tools. This is possible because the examples are presented in the context of a simple Console application (without Windows-specific elements), and the .NET SDK is supported on Linux and macOS. Hello World on Linux</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#introduction","title":"Introduction","text":"<p>Additional insights</p> <p>This guide provides extended knowledge and extra explanations in sections framed with the same color and marked with the same icon as this note. These are useful insights but are not part of the core learning material.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#solution","title":"Solution","text":"Download the completed solution <p> It is essential to work following the instructor during the lab, it is forbidden (and pointless) to download the final solution. However, during subsequent independent practice, it can be useful to review the final solution, so we make it available.</p> <p>The solution is available on GitHub. The easiest way to download it is to clone it to your computer via the command line using the git clone command:</p> <p><code>git clone https://github.com/bmeviauab00/lab-nyelvieszkozok-megoldas</code></p> <p>To do this, Git must be installed on your machine. More information can be found here.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-0-var-keyword-implicitly-typed-local-variables","title":"Task 0 - var keyword - Implicitly typed local variables","text":"<p>We'll start with a simple warm-up exercise. In the following example, we will create a class named <code>Person</code>, which represents a person.</p> <ol> <li>Create a new C# console application using .NET (not .NET Framework):<ul> <li>We saw an example of this in the first laboratory, and its description is included in that guide.</li> <li>Check the \"Do not use top-level statements\" checkbox during project creation.</li> </ul> </li> <li>Add a new class to our application named <code>Person</code>. (To add a new class, right-click on the project file in the Solution Explorer and select the Add / Class option. In the pop-up window, change the file name to <code>Person.cs</code> and click the Add button.)</li> <li> <p>Make the class public. To do this, add the <code>public</code> keyword before the class name. While this modification is not necessary at this stage, a later task will require a public class.</p> <pre><code>public class Person\n{\n}\n</code></pre> </li> <li> <p>Extend the <code>Main</code> function in the <code>Program.cs</code> file to test our new class.</p> <pre><code>static void Main(string[] args)\n{\n    Person p = new Person();\n}\n</code></pre> </li> <li> <p>Instead of explicitly specifying the type of local variables, we can also use the <code>var</code> keyword:</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n}\n</code></pre> <p>This is called implicitly typed local variables. In this case, the compiler tries to infer the type of the variable from the context, specifically from the right side of the equal sign, which in this example is a <code>Person</code>. It's important to note that the language is still strongly/static typed (it does not work like the <code>var</code> keyword in JavaScript), because the type of the <code>p</code> variable remains fixed and cannot change later. This is only a syntactic sugar to make local variable definitions more concise (so that we don\u2019t have to specify the type on both the left and right sides of <code>=</code>).</p> <p>Target-typed <code>new</code> expressions</p> <p>Another approach introduced in C# 9 is Target-typed <code>new</code> expressions, where the type can be omitted when using the <code>new</code> operator if it can be inferred from the context (e.g., the left-hand side of an assignment, parameter type, etc.). Our <code>Person</code> constructor would look like this:</p> <pre><code>Person p = new();\n</code></pre> <p>The advantage of this approach over <code>var</code> is that it can also be used for member variables.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-1-property","title":"Task 1 \u2013 Property","text":"<p>Properties are typically used (although, as we will see, not exclusively) to access class member variables in a way that is syntactically similar to accessing traditional member variables. However, instead of simply read or setting a value, properties allow us to implement access behavior in a method-like manner, and we can even separately define the visibility of the getter and setter.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#property-syntax","title":"Property syntax","text":"<p>In the following example, we will create a <code>Person</code> class that represents a person. It has two member variables: <code>name</code> and <code>age</code>. These member variables are private, meaning they cannot be accessed directly. Instead, they are managed through the public properties <code>Name</code> and <code>Age</code>. This example clearly demonstrates that .NET properties are functionally equivalent to the <code>SetX(\u2026)</code> and <code>GetX()</code> methods known from C++ and Java, but in a more encapsulated and language-supported way.</p> <ol> <li> <p>In the previously introduced <code>Person</code> class, create a private member variable <code>age</code> of type <code>int</code> and an <code>Age</code> property that enables the access to this variable.</p> <pre><code>public class Person\n{\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set { age = value; }\n    }\n}\n</code></pre> <p>Visual Studio snippets</p> <p>Although we manually typed the full property during the lab for practice, but Visual Studio provides code snippets for creating frequently occurring code fragments which allow us to use common language constructs as templates. The property definition above can be inserted using the <code>propfull</code> snippet. Type the name of the snippet (<code>propfull</code>) and press the Tab key (typically twice) to activate it.</p> <p>Some other useful snippets include:</p> <ul> <li><code>ctor</code>: constructor</li> <li><code>for</code>: for loop</li> <li><code>foreach</code>: foreach loop</li> <li><code>prop</code>: auto property (see later)</li> <li><code>switch</code>: switch statement</li> <li><code>cw</code>: Console.WriteLine</li> </ul> <p>We can even create our own snippets.</p> </li> <li> <p>Modify the <code>Main</code> function in the <code>Program.cs</code> file to test the new property.</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n    p.Age = 17;\n    p.Age++;\n    Console.WriteLine(p.Age);\n}\n</code></pre> </li> <li> <p>Run the program (F5).</p> <p>We can see that the property is used similarly to a member variable. When querying the property, the <code>get</code> part is executed, and the property's value is the returned value. When setting the property, the <code>set</code> part is executed, where the special <code>value</code> variable contains the assigned value.</p> <p>Notice how easily we can increment the age by one. In Java or C++, a similar operation would be written as <code>p.setAge(p.getAge() + 1)</code>, which is more complicated and less readable. The main benefit of using properties is that our code becomes syntactically cleaner, and property assignments/accesses are clearly distinguished from function calls.</p> </li> <li> <p>Check that the program actually calls the <code>get</code> and <code>set</code> methods by placing breakpoints inside the getter and setter blocks. Click on the gray margin in the editor to set a breakpoint.</p> </li> <li> <p>Run the program step by step. Instead of pressing F5, start the program with F11, then press F11 repeatedly to execute it line by line.</p> <p>We can see that the program calls the getter whenever a value is queried and the setter whenever a value is assigned.</p> </li> <li> <p>One important feature of setter functions is that they allow input validation. Modify the <code>Age</code> property\u2019s setter to enforce a constraint.</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"Invalid age!\");\n        age = value; \n    }\n}\n</code></pre> <p>Notice that while simple getters and setters are kept on a single line, more complex logic is formatted across multiple lines.</p> </li> <li> <p>To test the validation, assign a negative age in the <code>Main</code> function of the <code>Program</code> class.</p> <pre><code>p.Age = -2;\n</code></pre> </li> <li> <p>Run the program and verify that the validation correctly prevents invalid age values. Then, fix the issue by setting a positive age.</p> <pre><code>p.Age = 2;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#auto-implemented-property","title":"Auto-implemented property","text":"<p>In everyday development, we often encounter a more concise syntax for properties. This syntax can be used when:</p> <ul> <li>We do not need any additional logic in the getter and setter methods.</li> <li>We do not need direct access to the private member variable.</li> </ul> <p>Let's look at an example.</p> <ol> <li> <p>Extend the <code>Person</code> class with an auto-implemented property. Create a <code>string</code> property called <code>Name</code>.</p> <pre><code>public string Name { get; set; }\n</code></pre> <p>The difference in syntax compared to previous examples: we did not provide implementations for the <code>get</code> and <code>set</code> blocks (no curly braces). In the case of an auto-implemented property, the compiler generates a hidden, inaccessible field within the class to store the current value of the property. It is important to note that this does not set or retrieve the previously introduced <code>name</code> field (which could be deleted), but instead works with a newly generated hidden variable!</p> </li> <li> <p>Now, test its functionality by modifying the <code>Main</code> function.</p> <pre><code>static void Main(string[] args)\n{\n    // ...\n    p.Name = \"Luke\";\n    // ...\n    Console.WriteLine(p.Name);\n}\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#default-value","title":"Default value","text":"<p>Auto-implemented properties can also have an initial value assigned during declaration.</p> <ol> <li> <p>Set an initial value for the <code>Name</code> property.</p> <pre><code>public string Name { get; set; } = \"anonymous\";\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#property-visibility","title":"Property visibility","text":"<p>Besides the ability to fully customize their implementation, a key advantage of properties is that the visibility of the getter and setter can be controlled separately.</p> <ol> <li> <p>Set the <code>Name</code> property\u2019s setter to private.</p> <pre><code>public string Name { get; private set; }\n</code></pre> <p>In this case, the <code>p.Name = \"Luke\";</code> statement in the <code>Program</code> class will cause a compilation error. The general rule is that both the getter and setter inherit the property's visibility, which can be further restricted but not relaxed.</p> <p>Visibility control can be used for both auto-implemented and manually implemented properties.</p> </li> <li> <p>Restore the visibility (remove the <code>private</code> keyword from the <code>Name</code> property\u2019s setter) to eliminate the compilation error.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#readonly-property","title":"Readonly property","text":"<p>The setter can be omitted, resulting in a readonly property. In the case of an auto-implemented property, a readonly property can still be assigned an initial value, but only within the constructor or by providing a default value (as shown above). This is different from properties with a private setter, which can still be modified by any method within the class.</p> <p>Here are examples of defining readonly properties (DO NOT implement this in your code):</p> <p>a) Auto-implemented case</p> <pre><code>public string Name { get; }\n</code></pre> <p>b) Not auto-implemented case</p> <pre><code>private string name;\n...\npublic string Name { get {return name; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#calculated-value","title":"Calculated value","text":"<p>Properties that only have a getter can also be used to determine a computed/calculated value. These properties always calculate a value based on a given logic, but unlike \"readonly properties\", they do not have a directly associated backing field. The following code snippet illustrates this concept (DO NOT introduce it into our code):</p> <pre><code>public int AgeInDogYear { get { return Age * 7; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-2-delegate-method-reference","title":"Task 2 \u2013 Delegate (method reference)","text":"<p>Ensure the code compiles!</p> <p>The following tasks will build on the results of the previous ones. If your program does not compile or does not function correctly, inform your instructor at the end of the tasks, and he/she will help you fix the issue.  </p> <p>Delegates represent strongly typed method references in .NET, serving as a modern equivalent to function pointers in C/C++. A delegate allows us to define a variable type that can reference methods. However, similar to C++ function pointers, they can only reference methods whose type (parameter list and return value) matches the delegate type. When the delegate variable is \"invoked\", the assigned (registered) method is automatically called. One advantage of using delegates is that they allow us to decide at runtime which method to call among multiple options.  </p> <p>Some examples of delegate usage:  </p> <ul> <li>Passing a comparison function as a parameter to a universal sorting function,  </li> <li>Implementing a universal filtering logic on a general collection, where the function deciding whether an element should be included in the filtered list is passed as a delegate,  </li> <li>Implementing the publish-subscribe pattern, where certain objects notify other objects about events related to them.  </li> </ul> <p>In our next example, we will enable objects of the previously created <code>Person</code> class to freely notify other class objects when a person's age changes. To achieve this, we introduce a delegate type (<code>AgeChangingDelegate</code>), which, in its parameter list, can pass the current and new age of the person. We then create a public <code>AgeChangingDelegate</code>-typed member variable in the <code>Person</code> class, allowing an external entity to specify the function through which it requests notifications about changes in the given <code>Person</code> instance.  </p> <ol> <li> <p>Create a new delegate type that can reference a function with <code>void</code> return type and expecting two <code>int</code> parameters. Ensure that the new type is defined in the namespace scope, right before the <code>Person</code> class!  </p> <pre><code>namespace PropertyDemo\n{\n    public delegate void AgeChangingDelegate(int oldAge, int newAge);\n\n    public class Person\n    {\n        // ...\n</code></pre> <p>The <code>AgeChangingDelegate</code> is a type (note its syntax highlighting in Visual Studio), which can be used anywhere a type is allowed (e.g., it can be used to declare member variables, local variables, function parameters, etc.).  </p> </li> <li> <p>Enable <code>Person</code> objects to reference any function that matches the above signature. To do this, create an <code>AgeChangingDelegate</code>-typed member variable in the <code>Person</code> class!  </p> <pre><code>public class Person\n{\n    public AgeChangingDelegate AgeChanging;\n</code></pre> <p>How object-oriented is this?</p> <p>Declaring a method reference as a public member variable actually (for now) violates object-oriented encapsulation and information-hiding principles. We will revisit this issue later.  </p> </li> <li> <p>Call the function every time the person's age changes. To do this, extend the <code>Age</code> property setter with the following:</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"Invalid age!\");\n        if (AgeChanging != null)\n            AgeChanging(age, value);\n        age = value; \n    }\n}\n</code></pre> <p>The above code demonstrates several important principles:</p> <ul> <li>Validation logic generally precedes notification logic.</li> <li>Depending on the nature of the notification logic, it may run before or after the assignment (in this case, since the word \"changing\" implies an ongoing process, the notification precedes the assignment; \"changed\" would indicate the event has already occurred).</li> <li>We must be prepared for the possibility that no value has been assigned to the delegate-type member variable yet (i.e., there are no subscribers). Calling it in such cases would cause an exception, so we must always check if the member variable is <code>null</code> before invoking it.</li> <li>When triggering the event, the <code>null</code> check can be done in a more elegant, concise, and thread-safe manner using the \"<code>?.</code>\" null-conditional operator (available from C# 6):</li> </ul> <pre><code>if (AgeChanging != null)\n    AgeChanging(age, value);\n</code></pre> <p>can be replaced with:</p> <pre><code>AgeChanging?.Invoke(age, value);\n</code></pre> <p>This will only trigger the event if it is not <code>null</code>; otherwise, it does nothing.</p> </li> <li> <p>Strictly speaking, we should only trigger the event if the age actually changes. In the property setter, we should check if the new value is the same as the old one. A solution is to return immediately at the beginning of the setter if the new value equals the old one:</p> <pre><code>if (age == value) \n    return;\n\u2026\n</code></pre> </li> <li> <p>We have completed the <code>Person</code> class code. Now, let's move on to the subscriber! First, we need to extend the <code>Program</code> class with a new function.</p> <pre><code>class Program\n{\n    // ...\n\n    private static void PersonAgeChanging(int oldAge, int newAge)\n    {\n        Console.WriteLine(oldAge + \" =&gt; \" + newAge);\n    }\n}\n</code></pre> <p>Tip</p> <p>Make sure to place the new function in the correct scope! While we placed the delegate type outside the class (but inside the namespace), we place the function inside the class!</p> </li> <li> <p>Finally, subscribe to the change tracking in the <code>Main</code> function.</p> <pre><code>static void Main(string[] args)\n{\n  Person p = new Person();\n  p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\n  // ...\n</code></pre> </li> <li> <p>Run the program!</p> <p>For example, place a breakpoint on the line <code>AgeChanging?.Invoke(age, value);</code>, run the application in debug mode, and step through the code to observe that the event is triggered every time the setter runs, including the initial assignment and increments.</p> </li> <li> <p>Extend the <code>Main</code> function to subscribe multiple times (use the <code>+=</code> operator to add additional subscribers), then run the program.</p> <pre><code>p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += PersonAgeChanging; // More concise syntax\n</code></pre> <p>Notice that every time the value changes, all three registered/\"subscribed\" functions execute. This is because delegate-type member variables do not merely store a single function reference but actually maintain a list of function references.</p> <p>Observe in the third line above that function references can be written in a more concise syntax than previously seen: we simply provide the function name after the <code>+=</code> operator without <code>new AgeChangingDelegate(...)</code>. However, behind the scenes, an <code>AgeChangingDelegate</code> object still wraps the <code>PersonAgeChanging</code> function. In practice, this more concise syntax is preferred.</p> </li> <li> <p>Try unsubscribing at any chosen point, then run the program.</p> <pre><code>p.AgeChanging -= PersonAgeChanging;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-3-event","title":"Task 3 \u2013 Event","text":"<p>Just as properties provide a cleaner alternative to getter and setter methods, the delegate mechanism we saw earlier offers a more refined syntax compared to Java's Event Listeners. However, our previous solution still violates several key object-oriented principles (encapsulation, information hiding). We can demonstrate these issues with the following two examples.</p> <ol> <li> <p>The event can actually be triggered externally (by operations in other classes). This is problematic because it allows false event triggers with incorrect data, misleading all subscribers. To illustrate this issue, insert the following line at the end of the <code>Main</code> function:</p> <pre><code>p.AgeChanging(67, 12);\n</code></pre> <p>Here, we have triggered an invalid age change event on the <code>p</code> <code>Person</code> object, misleading all subscribers. The correct solution would be to ensure that only <code>Person</code> class operations can trigger the event.</p> </li> <li> <p>Another issue arises because, although <code>+=</code> and <code>-=</code> respect the list of subscribed functions, the <code>=</code> operator allows complete overwriting (and deletion) of other subscriptions. Try this by inserting the following line (right after the subscription and unsubscription lines):</p> <pre><code>p.AgeChanging = null;\n</code></pre> </li> <li> <p>Use the <code>event</code> keyword to modify the <code>AgeChanging</code> member variable in <code>Person.cs</code>:</p> Person.cs<pre><code>public event AgeChangingDelegate AgeChanging;\n</code></pre> <p>The aim of the <code>event</code> keyword is to enforce object-oriented principles by preventing the two issues described above.</p> </li> <li> <p>Try compiling the program. We will notice that the compiler now treats our previous violations as compilation errors.</p> <p></p> </li> <li> <p>Remove the three incorrect lines (note that even the first direct assignment is now an error), then recompile and run the application!</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-4-attributes","title":"Task 4 \u2013 Attributes","text":""},{"location":"labor/2-nyelvi-eszkozok/index_eng/#customizing-serialization-with-attributes","title":"Customizing serialization with attributes","text":"<p>Attributes allow us to declaratively add metadata to our source code. An attribute is essentially a class that we attach to a specific program element (such as a type, class, interface, method, etc.). These metadata can be read at runtime using the reflection mechanism. Attributes in .NET are similar to annotations in Java.</p> <p>property vs. attribute vs. static</p> <p>A common question is whether a class characteristic should be defined as a property or an attribute. Properties relate to the instance of an object, whereas attributes describe the class itself (or one of its members).</p> <p>In this sense, attributes are closer to static properties, but it is still worth considering whether to define a given piece of data as a static member or an attribute. Attributes provide a more declarative approach, preventing unnecessary details from appearing in the public interface of a class.</p> <p>.NET defines numerous built-in attributes with various functionalities. The attributes in the following example communicate metadata to the XML serializer.</p> <ol> <li> <p>Insert the following code snippet at the end of the <code>Main</code> function and run the program:</p> <pre><code>var serializer = new XmlSerializer(typeof(Person));\nvar stream = new FileStream(\"person.txt\", FileMode.Create);\nserializer.Serialize(stream, p);\nstream.Close();\nProcess.Start(new ProcessStartInfo\n{\n    FileName = \"person.txt\",\n    UseShellExecute = true,\n});\n</code></pre> <p>The <code>Process.Start</code> function call above is not part of the serialization logic, it simply opens the generated file in the default text viewer on Windows. This may not work in all environments due to OS or .NET runtime limitations. If an error occurs, comment out this part and manually locate and open the <code>person.txt</code> file (found in the *\\bin\\Debug* folder alongside the executable).</p> </li> <li> <p>Examine the generated XML file structure. Notice how each property is mapped to an XML element with a matching name.</p> </li> <li> <p>.NET attributes allow us to provide our <code>Person</code> class with metadata that directly modifies the serialization behavior. The <code>XmlRoot</code> attribute allows renaming the root element. Add it above the <code>Person</code> class:</p> <pre><code>[XmlRoot(\"MyPerson\")] //Instead of \"MyPerson\" you can use \"Person\" in your language\npublic class Person \n{\n    // ...\n}\n</code></pre> </li> <li> <p>The <code>XmlAttribute</code> attribute instructs the serializer to map a property to an XML attribute instead of an element. Apply this to the <code>Age</code> property (and NOT the variable!):</p> <pre><code>[XmlAttribute(\"MyAge\")] //Instead of \"MyAge\" you can use \"Age\" in your language\npublic int Age { get; set; }\n</code></pre> </li> <li> <p>The <code>XmlIgnore</code> attribute tells the serializer to completely exclude a property from the output. Try it on the <code>Name</code> property:</p> <pre><code>[XmlIgnore]\npublic string Name { get; set; }\n</code></pre> </li> <li> <p>Run the program again and compare the output with the previous version.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-5-delegate-2","title":"Task 5 \u2013 Delegate 2","text":"<p>In Tasks 2 and 3, we used delegates to implement event-driven messaging. In another typical use case for delegates, function references are used to pass an implementation of an undefined step to an algorithm or more complex operation.</p> <p>For example, the built-in generic list class (<code>List&lt;T&gt;</code>) has a <code>FindAll</code> method that can return a new list containing all elements that meet a given condition. The specific filtering condition is provided as a function, or more precisely, as a delegate parameter (which <code>FindAll</code> calls for each element), which will return true for all elements that we want to see in the result list. The type of the function's parameter is the following predefined delegate type (no need to type/create it, as it already exists):</p> <pre><code>public delegate bool Predicate&lt;T&gt;(T obj)\n</code></pre> <p>Note</p> <p>To view the full definition above, simply type the <code>Predicate</code> type name somewhere, such as at the end of the <code>Main</code> function, click on it with the mouse, and navigate to its definition using the ++F12++ key.</p> <p>In other words, it expects an input of the same type as the list elements and returns a boolean (<code>bool</code>) value. To demonstrate this, we will extend our previous program with a filtering operation that keeps only the odd numbers from the list.</p> <ol> <li> <p>Implement a filter function in our application that returns only odd numbers:</p> <pre><code>private static bool MyFilter(int n)\n{\n    return n % 2 == 1;\n}\n</code></pre> </li> <li> <p>Extend our previously written code by applying our filter function:</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nlist = list.FindAll(MyFilter);\n\nforeach (int n in list)\n{\n    Console.WriteLine($\"Value: {n}\");\n}\n</code></pre> </li> <li> <p>Run the application. Observe that only odd numbers appear on the console.</p> </li> <li>As an interesting experiment, we can place a breakpoint inside the <code>MyFilter</code> function and observe that it gets called separately for each element in the list.</li> </ol> <p>Collection initializer syntax</p> <p>For any class that implements the <code>IEnumerable</code> interface and has an <code>Add</code> method (typically collections), the collection initializer syntax can be used as follows:</p> <pre><code>var list = new List&lt;int&gt;() { 1, 2, 3 };\n</code></pre> <p>Starting from C# 12, an even simpler syntax (so-called collection expression) can be used to initialize a collection, provided that the compiler can infer that the variable is a collection. For example:</p> <pre><code>List&lt;int&gt; list = [1, 2, 3];\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-6-lambda-expressions","title":"Task 6 \u2013 Lambda expressions","text":"<p>The relevant topics are covered in detail in the lecture materials, so we will not repeat them here. See the \"Lambda expression\" chapter in the \"Lecture 02 - Language tools.pdf\" document. The key element is the <code>=&gt;</code> (lambda operator), which allows the definition of lambda expressions, i.e., anonymous functions.</p> <p><code>Action and Func</code></p> <p>Due to time constraints, we will not cover the built-in <code>.NET</code> generic delegate types <code>Func</code> and <code>Action</code> here. However, they are still part of the core material!</p> <p>We will solve the previous Task 5 in the following way: instead of defining a separate filtering function, we will pass the filtering logic as a lambda expression directly to the <code>FindAll</code> method.</p> <p>We only need to modify one line:</p> <pre><code>list = list.FindAll((int n) =&gt; { return n % 2 == 1; });\n</code></pre> <p>We defined and passed an anonymous function to the <code>FindAll</code> method:</p> <ul> <li>This is a lambda expression.</li> <li>On the left side of <code>=&gt;</code>, we specified the function parameters (only one in this case).</li> <li>On the right side of <code>=&gt;</code>, we defined the function body (which is the same as the previous <code>MyFilter</code> function body).</li> </ul> <p>The above line can be written in a much simpler and more readable form:</p> <pre><code>list = list.FindAll(n =&gt; n % 2 == 1);\n</code></pre> <p>The following simplifications were made:</p> <ul> <li>We omitted the parameter type: the compiler can infer it from the <code>FindAll</code> delegate parameter type, which is the previously examined <code>Predicate</code>.</li> <li>We removed the parentheses around the parameter (since there is only one parameter).</li> <li>We omitted the <code>{}</code> curly brackets and the <code>return</code> statement on the right side of <code>=&gt;</code> (since the function body consists of a single expression, which is returned implicitly).</li> </ul>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-7-additional-language-constructs","title":"Task 7 - Additional language constructs","text":"<p>Below, we take a look at some C# language features that are increasingly used in daily programming tasks. There may not be enough time to cover these during the laboratory.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#expression-bodied-members","title":"Expression-bodied members","text":"<p>Sometimes, we write very short functions, and particularly often, very short get/set/init definitions for properties that consist of a single expression. In such cases, the function body or the get/set/init body of a property can be defined using the so-called expression-bodied members syntax with <code>=&gt;</code>. This can be done regardless of whether the context has a return value (<code>return</code> statement) or not.</p> <p>As we will see in the examples, using expression-bodied members is merely a minor syntactic \"twist\" to minimize boilerplate code in such simple cases.</p> <p>Let's first look at a function example (assuming the class contains an <code>Age</code> field or property):</p> <pre><code>public int GetAgeInDogYear() =&gt; Age * 7; \npublic void DisplayName() =&gt; Console.WriteLine(ToString());\n</code></pre> <p>As seen, we omitted the <code>{}</code> curly brackets and the <code>return</code> statement, making the syntax more concise.</p> <p>Important</p> <p>Although we use the <code>=&gt;</code> token here, it has nothing to do with the previously discussed lambda expressions. It is simply a case where the C# language uses the same <code>=&gt;</code> token (symbol pair) for two entirely different purposes.</p> <p>Example of defining a property getter:</p> <pre><code>public int AgeInDogYear { get =&gt; Age * 7; }\n</code></pre> <p>Moreover, if the property has only a getter, we can also omit the <code>get</code> keyword and the curly brackets.</p> <pre><code>public int AgeInDogYear =&gt; Age * 7;\n</code></pre> <p>This differs from the similar syntax used for functions in that we did not include parentheses.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#object-initializer","title":"Object initializer","text":"<p>The initialization of public properties/fields can be combined with constructor invocation using a syntax called object initializer. When using this approach, after calling the constructor, we open a block with curly brackets <code>{}</code> where we can set the values of public properties/fields using the following syntax.</p> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Luke\",\n};\n</code></pre> <p>The initialization of properties/fields occurs after the constructor runs (if the class has a constructor). This syntax is advantageous because it counts as a single expression (as opposed to creating an uninitialized <code>Person</code> object and then assigning values to the <code>Age</code> and <code>Name</code> fields in two additional steps). This way, an initialized object can be directly passed as a function argument without needing to declare a separate variable.</p> <pre><code>void Foo(Person p)\n{\n    // do something with p\n}\n</code></pre> <pre><code>Foo(new Person() { Age = 17, Name = \"Luke\" });\n</code></pre> <p>The syntax is also copy-paste friendly, as, as shown in the previous examples, it does not matter whether there is a comma after the last property value or not.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#properties-init-only-setter","title":"Properties - Init only setter","text":"<p>The object initializer syntax from the previous point is very convenient, but it requires the property to be public. If we want a property's value to be set only during the creation of the object, we need to introduce a constructor parameter and assign it to a read-only  property (has only a getter). A simpler solution to this problem is the Init only setter syntax, where we can create a 'setter' using the <code>init</code> keyword, which allows assignment only in the constructor or when using the object initializer syntax from the previous chapter, and is no longer allowed afterward.</p> <pre><code>public string Name { get; init; }\n</code></pre> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Luke\",\n};\n\np.Name = \"Test\"; // build error, cannot be changed afterwards\n</code></pre> <p>Furthermore, we can enforce the requirement for the <code>init only setter</code> by applying the <code>required</code> keyword to the property. In this case, the property value must be provided in the object initializer syntax; otherwise, a compilation error will occur.</p> <pre><code>public required string Name { get; init; }\n</code></pre> <p>This is also useful because if we want to publish properties from the class and also want to support the object initializer syntax, we can avoid the need for mandatory constructor parameters.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_eng/#task-8-generic-classes","title":"Task 8 \u2013 Generic classes","text":"<p>Note: There may not be time for this task. In that case, it is advisable to complete the task at home for practice.</p> <p>.NET's generic classes are similar to C++ template classes, but they are closer to the generic classes already known in Java. With their help, we can create general-purpose (working with multiple types) but type-safe classes. Without generic classes, if we want to handle a problem in a general way, we use <code>object</code> type data (since in .NET, every class inherits from the <code>object</code> class). This is the case, for example, with <code>ArrayList</code>, which is a general-purpose collection capable of storing elements of any <code>object</code> type. Let's look at an example of using <code>ArrayList</code>:</p> <pre><code>var list = new ArrayList();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    // You have to cast, otherwise it won't compile\n    int i = (int)list[n];\n    Console.WriteLine($\"Value: {i}\");\n}\n</code></pre> <p>The above solution raises the following issues:</p> <ul> <li>The <code>ArrayList</code> stores each element as an <code>object</code>.</li> <li>When we want to access an element in the list, we always need to cast it to the appropriate type.</li> <li>It is not type-safe. In the above example, nothing prevents (and no error message is shown) from inserting an object of a different type into the list alongside <code>int</code> type data. In this case, we would only encounter an error during the list traversal, when trying to cast a non-<code>int</code> type to <code>int</code>. With generic collections, such errors are detected at compile-time.</li> <li>When storing value types, the list works slower because the value type needs to be boxed first to be stored as an <code>object</code> (i.e., as a reference type).</li> </ul> <p>The solution to the above problem is to use a generic list, as shown below (during the practice, just modify the highlighted lines in the previously typed example):</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    int i = list[n]; // No need to cast\n    Console.WriteLine($\"Value: {i}\");\n}\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/","title":"2. Sprachliche Mittel","text":""},{"location":"labor/2-nyelvi-eszkozok/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>W\u00e4hrend der \u00dcbung lernen die Studenten die wichtigsten modernen Sprachelementen kennen, die auch in der .NET-Umgebung verf\u00fcgbar sind. Es wird vorausgesetzt, dass der/die Student/in den objektorientierten Ansatz in seinem/ihrem bisherigen Studium beherrscht und mit den grundlegenden Konzepten der Objektorientierung vertraut ist. In dieser \u00dcbung werden wir uns auf die Sprachelemente in .NET konzentrieren, die \u00fcber den allgemeinen objektorientierten Ansatz hinausgehen, aber wesentlich zur Erstellung von transparentem und wartbarem Code beitragen. Diese sind:</p> <ul> <li>Eigenschaft (property)</li> <li>Delegat (delegate, Methodenreferenz)</li> <li>Ereignis (event)</li> <li>Attribut (attribute)</li> <li>Lambda-Ausdruck (lambda expression)</li> <li>Generischer Typ (generic type)</li> <li>Einige zus\u00e4tzliche Sprachkonstruktionen</li> </ul> <p>Zugeh\u00f6rige Vorlesungen: Vorlesung 2 und Anfang der Vorlesung 3 - Sprachliche Mittel.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung der \u00dcbung ben\u00f6tigten Werkzeuge:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>\u00dcbung unter Linux oder macOS</p> <p>Das \u00dcbungsmaterial ist grunds\u00e4tzlich f\u00fcr Windows und Visual Studio gedacht, kann aber auch auf anderen Betriebssystemen mit anderen Entwicklungswerkzeugen (z.B. VS Code, Rider, Visual Studio f\u00fcr Mac) oder sogar mit einem Texteditor und CLI (Kommandozeilen)-Tools durchgef\u00fchrt werden. Dies wird dadurch erm\u00f6glicht, dass die Beispiele im Kontext einer einfachen Konsolenanwendung pr\u00e4sentiert werden (keine Windows-spezifischen Elemente) und das .NET SDK auf Linux und macOS unterst\u00fctzt wird. Hello World unter Linuxon</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Ausblick</p> <p>Dieser Leitfaden enth\u00e4lt an mehreren Stellen zus\u00e4tzliche Informationen und Erkl\u00e4rungen, die in derselben Farbe wie dieser Hinweis und mit demselben Symbol umrahmt sind. Dies sind n\u00fctzliche Erkenntnisse, die jedoch nicht Teil des Kernlehrmaterial sind.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#losung","title":"L\u00f6sung","text":"Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist auf GitHub [hier] verf\u00fcgbar (https://github.com/bmeviauab00/lab-nyelvieszkozok-megoldas). Der einfachste Weg, es herunterzuladen, ist, es von der Kommandozeile aus mit dem Befehl <code>git clone</code> auf Ihren Computer zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-nyelvieszkozok-megoldas</code></p> <p>Sie m\u00fcssen Git auf Ihrem Computer installiert haben, weitere Informationen hier.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#0-aufgabe-schlusselwort-var-implizit-typisierte-lokale-variablen-implicitly-typed-local-variables","title":"0. Aufgabe - Schl\u00fcsselwort var - Implizit typisierte lokale Variablen  (implicitly typed local variables)","text":"<p>Wir beginnen mit einer einfachen Aufw\u00e4rm\u00fcbung. Im folgenden Beispiel erstellen wir eine Klasse namens <code>Person</code>, die eine Person darstellt.</p> <ol> <li>Erstellen wir eine neue C#-Konsolenanwendung. .NET-Basis (d.h. nicht.NET Framework):<ul> <li>Ein Beispiel daf\u00fcr haben wir in der ersten \u00dcbung gesehen, die im Leitfaden beschrieben wird.</li> <li>Das Kontrollk\u00e4stchen \"Do not use top level statements\" ist bei der Projekterstellung aktiviert.</li> </ul> </li> <li>F\u00fcgen wir eine neue Klasse mit dem Namen <code>Person</code> zu unserer Anwendung hinzu.     (Um eine neue Klasse im Solution Explorer hinzuzuf\u00fcgen, klicken wir mit der rechten Maustaste auf die Projektdatei und w\u00e4hlen wir Add / Class. \u00c4ndern wir den Namen der zu erstellenden Datei im erscheinenden Fenster auf <code>Person.cs</code>und klicken wir auf Add.)</li> <li> <p>Lassen wir uns die Klasse \u00f6ffentlich machen. Dazu m\u00fcssen wir das Schl\u00fcsselwort <code>public</code> vor dem Klassennamen eingeben. Diese \u00c4nderung w\u00e4re hier eigentlich nicht n\u00f6tig, aber eine sp\u00e4tere Aufgabe wird eine \u00f6ffentliche Klasse erfordern.</p> <pre><code>public class Person\n{\n}\n</code></pre> </li> <li> <p>Erg\u00e4nzen wir die Funktion <code>Main</code> in der Datei <code>Program.cs</code>, um unsere neue Klasse zu testen.</p> <pre><code>static void Main(string[] args)\n{\n    Person p = new Person();\n}\n</code></pre> </li> <li> <p>Anstatt den Typ der lokalen Variablen explizit anzugeben, k\u00f6nnen wir das Schl\u00fcsselwort <code>var</code> verwenden:</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n}\n</code></pre> <p>Dies wird als implicitly typed local variables bezeichnet, auf Deutsch implizit typisierte lokale Variablen genannt. In diesem Fall versucht der Compiler, den Typ der Variablen aus dem Kontext, aus der rechten Seite des Gleichheitszeichens zu erkennen. In diesem Fall ist es <code>Person</code>.  Es ist wichtig anzumerken, dass die Sprache dadurch statisch typisiert bleibt (es funktioniert also nicht wie das JavaScript-Schl\u00fcsselwort <code>var</code> ), da der Typ der <code>p</code> -Variable sp\u00e4ter nicht mehr ge\u00e4ndert werden kann. Es ist nur ein einfaches syntaktisches Bonbon, um die Definition lokaler Variablen kompakter zu machen (keine Notwendigkeit, den Typ \"zweimal\" anzugeben, auf der linken und auf der rechten Seite von <code>=</code> ).</p> <p>Target-typed <code>new</code> expressions</p> <p>Ein weiterer Ansatz k\u00f6nnte die Target-typed <code>new</code> expressions in C# 9 sein, wo der Typ f\u00fcr den neuen Operator weggelassen werden kann, wenn er vom Compiler aus dem Kontext erkannt werden kann (z.B.: linke Seite eines Wertes, Typ eines Parameters, etc.). Unser obiger <code>Person</code> -Konstruktor w\u00fcrde wie folgt aussehen:</p> <pre><code>Person p = new();\n</code></pre> <p>Der Vorteil dieses Ansatzes gegen\u00fcber <code>var</code> ist, dass er auch f\u00fcr Membervariablen verwendet werden kann.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#1-aufgabe-eigenschaft-property","title":"1. Aufgabe - Eigenschaft (property)","text":"<p>Eigenschaften erlauben uns typischerweise (aber nicht ausschlie\u00dflich, wie wir noch sehen werden) den Zugriff auf Membervariablen von Klassen auf eine syntaktisch \u00e4hnliche Weise wie den Zugriff auf eine traditionelle Membervariable. Beim Zugriff haben wir jedoch die M\u00f6glichkeit, anstelle einer einfachen Wertabfrage oder Einstellung eine methoden\u00e4hnliche Art des Zugriffs auf die Variable zu implementieren, und wir k\u00f6nnen sogar die Sichtbarkeit der Abfrage und der Einstellung separat definieren.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#syntax-von-eigenschaften","title":"Syntax von Eigenschaften","text":"<p>Im folgenden Beispiel erstellen wir eine Klasse namens <code>Person</code>, die eine Person darstellt. Sie hat zwei Mitgliedsvariablen, <code>name</code> und <code>age</code>. Auf Mitgliedsvariablen kann nicht direkt zugegriffen werden (da sie privat sind), sie k\u00f6nnen nur \u00fcber die \u00f6ffentlichen Eigenschaften <code>Name</code> und <code>Age</code> verwaltet werden. Das Beispiel veranschaulicht, dass die .NET-Eigenschaften eindeutig den aus C++ und Java bekannten  Methoden <code>SetX(\u2026)</code> und <code>GetX()</code> entsprechen, aber die sind auf einheitlichere Weise, auf Sprachebene unterst\u00fctzt.</p> <ol> <li> <p>Erstellen wir in der Klasse <code>Person</code>, die in der vorherigen Aufgabe erstellt war, eine Membervariable des Typs <code>int</code> mit dem Namen <code>age</code> und eine Eigenschaft <code>Age</code>, die sie verf\u00fcgbar macht.</p> <pre><code>public class Person\n{\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set { age = value; }\n    }\n}\n</code></pre> <p>Visual Studio Snippets</p> <p>Obwohl wir die gesamte Eigenschaft im Labor zu \u00dcbungszwecken manuell eingegeben haben, stellt Visual Studio Code Snippets zur Verf\u00fcgung, um h\u00e4ufig vorkommende Codeteile zu erstellen, mit denen wir allgemeine Sprachkonstrukte als Vorlagen verwenden k\u00f6nnen. Der obige Eigenschaftscodeschnipsel kann mit dem Schnipsel <code>propfull</code> abgerufen werden. Geben Sie den Namen des Schnipsels ein (<code>propfull</code>) und dr\u00fccken Sie dann die Tab -Taste, bis der Schnipsel aktiviert ist (normalerweise 2x).</p> <p>Weitere erw\u00e4hnenswerte Schnipseln sind unter anderem:</p> <ul> <li><code>ctor</code>: Konstruktor</li> <li><code>for</code>: f\u00fcr Zyklus</li> <li><code>foreach</code>: foreach-Schleife</li> <li><code>prop</code>: automatische Eigenschaft (siehe sp\u00e4ter)</li> <li><code>switch</code>: Schaltbefehl</li> <li><code>cw</code>: Console.WriteLine</li> </ul> <p>Wir k\u00f6nnen solche Schnipseln herstellen.</p> </li> <li> <p>Ergn\u00e4nzen wir die Funktion <code>Main</code> in der Datei <code>Program.cs</code>, um unsere neue Eigenschaft zu testen.</p> <pre><code>static void Main(string[] args)\n{\n    var p = new Person();\n    p.Age = 17;\n    p.Age++;\n    Console.WriteLine(p.Age);\n}\n</code></pre> </li> <li> <p>F\u00fchren wir unseren Programm aus (F5)</p> <p>Wir sehen, dass die Eigenschaft auf \u00e4hnliche Weise wie die Mitgliedsvariablen verwendet werden kann. Wenn die Eigenschaft abgefragt wird, wird der in der Eigenschaft definierte Teil <code>get</code> ausgef\u00fchrt und der Wert der Eigenschaft ist der durch return zur\u00fcckgegebene Wert. Wenn die Eigenschaft gesetzt ist, wird der in der Eigenschaft definierte Abschnitt <code>set</code> ausgef\u00fchrt, und der Wert der speziellen Variablen <code>value</code> in diesem Abschnitt entspricht dem als Eigenschaftswert angegebenen Ausdruck.</p> <p>Beachten wir in der obigen L\u00f6sung, wie elegant wir ein Jahr zum Alter einer Person hinzuf\u00fcgen k\u00f6nnen. In Java- oder C++-Code h\u00e4tte ein \u00e4hnlicher Vorgang in der Form <code>p.setAge(p.getAge() + 1)</code> geschrieben werden k\u00f6nnen, was eine wesentlich umst\u00e4ndlichere und schwieriger zu lesende Syntax ist als die Obige. Der Hauptvorteil der Verwendung von Eigenschaften besteht darin, dass unser Code syntaktisch sauberer ist und Wertzuweisungen/-abfragen in den meisten F\u00e4llen gut von tats\u00e4chlichen Funktionsaufrufen getrennt sind.</p> </li> <li> <p>\u00dcberpr\u00fcfen wir, dass unser Programm wirklich <code>get</code> und <code>set</code> aufruft. Dazu setzen wir Haltepunkte (breakpoints) innerhalb der Getter- und Setter-Bl\u00f6cke, dazu klicken wir auf den grauen Balken am linken Rand des Code-Editors.</p> </li> <li> <p>F\u00fchren wir das Programm Schritt f\u00fcr Schritt aus. Starten wir dazu das Programm mit F11 statt F5, und dr\u00fccken wir dann erneut F11, um es Zeile f\u00fcr Zeile ablaufen zu lassen.</p> <p>Wir sehen, dass unser Programm tats\u00e4chlich jedes Mal den Getter aufruft, wenn ein Wert abgefragt wird, und den Setter, wenn ein Wert gesetzt wird.</p> </li> <li> <p>Ein wichtiges Merkmal von Setter-Funktionen ist, dass sie die M\u00f6glichkeit der Wert\u00fcberpr\u00fcfung bieten. F\u00fcgen wir in diesem Sinne dem Setter der Eigenschaft <code>Age</code> etwas hinzu.</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"Ung\u00fcltiges Alter!\");\n        age = value; \n    }\n}\n</code></pre> <p>Beachten wir, dass bei einfachen Gettern und Settern die Abfrage bzw. das Setzen von Werten in einer Zeile erfolgt, w\u00e4hrend sie bei komplexeren Stammdaten auf mehrere Zeilen aufgeteilt wird.</p> </li> <li> <p>Um die Anwendung zu testen, ordnen wir dem Alter einen negativen Wert in der Funktion <code>Main</code> der Klasse <code>Program</code> zu.</p> <pre><code>p.Age = -2;\n</code></pre> </li> <li> <p>F\u00fchren wir das Programm aus, um es zu testen, ob die Pr\u00fcfung korrekt funktioniert, und korrigieren wir dann den Fehler, \u00e4ndern wir das eingestellte Alter auf positiv.</p> <pre><code>p.Age = 2;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#auto-implementierte-eigenschaft-auto-implemented-property","title":"Auto-implementierte Eigenschaft (auto-implemented property)","text":"<p>In unserer t\u00e4glichen Arbeit begegnen wir auch einer viel kompakteren Syntax von Eigenschaften. Diese Syntax kann verwendet werden, wenn wir eine Eigenschaft erstellen m\u00f6chten, in der:</p> <ul> <li>wir wollen keine zus\u00e4tzliche Logik zu den Getter- und Setter-Methoden hinzuf\u00fcgen,</li> <li>m\u00fcssen wir nicht direkt auf die private Mitgliedsvariable zugreifen.</li> </ul> <p>Nachfolgend ein Beispiel daf\u00fcr.</p> <ol> <li> <p>F\u00fcgen wir eine solche automatisch implementierte Eigenschaft (auto-implemented property) zu unserer Klasse <code>Person</code> hinzu. Erstellen wir eine Eigenschaft vom Typ <code>string</code> mit dem Namen <code>Name</code>. </p> <pre><code>public string Name { get; set; }\n</code></pre> <p>Der syntaktische Unterschied zu den vorherigen ist, dass weder der get- noch der set-Zweig implementiert wurden (keine Klammern). Im Falle einer automatisch implementierten Eigenschaft erzeugt der Compiler eine versteckte Variable in der Klasse, auf die vom Code aus nicht zugegriffen werden kann und die zum Speichern des aktuellen Werts der Eigenschaft verwendet wird. Es sollte betont werden, dass dies nicht die zuvor eingef\u00fchrte <code>name</code> Mitgliedsvariable (die gel\u00f6scht werden k\u00f6nnte) anh\u00e4lt und abfragt, sondern auf eine versteckte, neue Variable wirkt!</p> </li> <li> <p>\u00dcberpr\u00fcfen wir nun ihre Funktionalit\u00e4t, und erg\u00e4nzen wir die Funktion <code>Main</code>.</p> <pre><code>static void Main(string[] args)\n{\n    // ...\n    p.Name = \"Lukas\";\n    // ...\n    Console.WriteLine(p.Name);\n}\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#standardwert-default-value","title":"Standardwert (default value)","text":"<p>F\u00fcr automatisch implementierte Eigenschaften k\u00f6nnen wir bei der Deklaration auch deren Anfangswert angeben.</p> <ol> <li> <p>Geben wir der Eigenschaft <code>Name</code> einen Anfangswert.</p> <pre><code>public string Name { get; set; } = \"anonymous\";\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#sichtbarkeit-von-eigenschaften","title":"Sichtbarkeit von Eigenschaften","text":"<p>Ein gro\u00dfer Vorteil der Eigenschaften, neben der v\u00f6llig freien Implementierung, ist, dass die Sichtbarkeit des Getters und des Setters getrennt eingestellt werden kann.</p> <ol> <li> <p>Setzen wir die Sichtbarkeit des Setters der Eigenschaft <code>Name</code> auf privat.</p> <pre><code>public string Name { get; private set; }\n</code></pre> <p>In diesem Fall wird ein \u00dcbersetzungsfehler in der Klasse <code>Program</code> f\u00fcr die Richtlinie <code>p.Name = \"Luke\";</code> zur\u00fcckgegeben. Die Grundregel ist, dass Getter und Setter die Sichtbarkeit der Eigenschaft erben, die weiter eingeschr\u00e4nkt, aber nicht gelockert werden kann. Die Sichtbarkeitskontrolle kann sowohl f\u00fcr autoimplementierte als auch f\u00fcr nicht autoimplementierte Eigenschaften verwendet werden.</p> </li> <li> <p>Stellen wir die Sichtbarkeit wieder her (entfernen wir das Schl\u00fcsselwort <code>private</code> aus dem Property Setter <code>Name</code> ), um den \u00dcbersetzungsfehler zu vermeiden.</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#nur-lese-eigenschaft-readonly-property","title":"Nur-Lese-Eigenschaft (readonly property)","text":"<p>Der Setter kann weggelassen werden, um eine schreibgesch\u00fctzte Eigenschaft zu erhalten. F\u00fcr eine automatisch implementierte Eigenschaft kann auch ein Anfangswert angegeben werden: Dies ist nur in einem Konstruktor oder durch Angabe eines Standardwerts (siehe oben) m\u00f6glich, im Gegensatz zu Eigenschaften mit einem privaten Setter, deren Setter von jeder Mitgliedsfunktion der Klasse aufgerufen werden kann.</p> <p>Die Definition einer schreibgesch\u00fctzten Eigenschaft wird in den folgenden Codeschnipseln veranschaulicht (implementieren wir sie NICHT in unserem Code):</p> <p>a) Autoimplementierter Fall</p> <pre><code>public string Name { get; }\n</code></pre> <p>b) Nicht automatisch implementierter Fall</p> <pre><code>private string name;\n...\npublic string Name { get {return name; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#berechneter-wert-calculated-value","title":"Berechneter Wert (calculated value)","text":"<p>Eigenschaften mit nur Getter haben eine andere Verwendung. Sie kann auch verwendet werden, um einen berechneten Wert zu ermitteln, der immer einen Wert auf der Grundlage einer bestimmten Logik berechnet, aber im Gegensatz zur \"Nur-Lese-Eigenschaft\" verf\u00fcgt sie nicht \u00fcber ein Datenelement direkt hinter ihr. Dies wird im folgenden Codeschnipsel veranschaulicht (\u00fcbernehmen wir ihn NICHT in unserem Code):</p> <pre><code>public int AgeInDogYear { get { return Age * 7; } }\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#2-aufgabe-delegat-delegate-methodenreferenz","title":"2. Aufgabe - Delegat (delegate, Methodenreferenz)","text":"<p>Stellen wir sicher, dass der Code kompilierbar ist!</p> <p>Die folgenden \u00dcbungen bauen auf den Ergebnissen der vorherigen \u00dcbungen auf. Wenn Ihr Programm nicht abst\u00fcrzt oder nicht richtig funktioniert, melden Sie dies Ihrem/er \u00dcbungsleiter/in am Ende der Aufgaben, damit er/sie Ihnen bei der Behebung des Problems helfen kann.</p> <p>Delegate sind Methodenreferenzen in .NET, das moderne \u00c4quivalent zu C/C++-Funktionszeigern. Ein Delegat ist eine M\u00f6glichkeit, einen Variablentyp zu definieren, der verwendet werden kann, um auf Methoden zu verweisen. Nicht irgendein Zeiger, sondern - \u00e4hnlich wie bei C++-Funktionszeigern - solche, deren Typ (Parameterliste und R\u00fcckgabewert) dem Typ des Delegaten entspricht. Durch das \"Aufrufen\" der Delegatvariable wird die als Wert angegebene (registrierte) Methode automatisch aufgerufen. Ein Vorteil der Verwendung von Delegaten ist, dass wir zur Laufzeit entscheiden k\u00f6nnen, welche von mehreren Methoden wir aufrufen m\u00f6chten.</p> <p>Einige Beispiele f\u00fcr den Einsatz von Delegaten:</p> <ul> <li>die Funktion, die die Elemente vergleicht, als Parameter an eine universelle Ordnungsfunktion \u00fcbergeben,</li> <li>ist die Implementierung einer universellen Filterlogik f\u00fcr eine allgemeine Sammlung, bei der eine Funktion als Delegat in einem Parameter \u00fcbergeben wird, um zu entscheiden, ob ein Element in die gefilterte Liste aufgenommen werden soll,</li> <li>Implementierung des Publish-Subscribe-Musters, bei dem bestimmte Objekte andere Objekte \u00fcber sich selbst betreffender Ereignisse informieren.</li> </ul> <p>Im folgenden Beispiel werden wir Objekten der zuvor erstellten Klasse <code>Person</code> erlauben, Objekte anderer Klassen frei zu benachrichtigen, wenn sich das Alter einer Person ge\u00e4ndert hat. Zu diesem Zweck f\u00fchren wir einen Delegatentyp (<code>AgeChangingDelegate</code>) ein, der den aktuellen und neuen Wert des Alters der Person in seiner Parameterliste \u00fcbergeben kann. Als N\u00e4chstes erstellen wir eine \u00f6ffentliche Mitgliedsvariable des Typs <code>AgeChangingDelegate</code> in der Klasse <code>Person</code>, die es einer externen Partei erm\u00f6glicht, die Funktion anzugeben, \u00fcber die sie die Benachrichtigung \u00fcber \u00c4nderungen an der Instanz <code>Person</code> anfordern wird.</p> <ol> <li> <p>Erstellen wir einen neuen Delegatentyp, der auf solche Funktionen verweisen kann, die <code>void</code> zur\u00fcckgeben und  zwei <code>int</code> Parameter annehmen. \u00dcberpr\u00fcfen wir, dass der neue Typ vor der Klasse <code>Person</code> definiert ist, direkt im G\u00fcltigkeitsbereich des Namespaces!</p> <pre><code>namespace PropertyDemo\n{\n    public delegate void AgeChangingDelegate(int oldAge, int newAge);\n\n    public class Person\n    {\n        // ...\n</code></pre> <p><code>AgeChangingDelegate</code> ist ein Typ (man beachte auch die VS-F\u00e4rbung), der \u00fcberall dort verwendet werden kann, wo ein Typ gesetzt werden kann (z.B. kann man eine Membervariable, eine lokale Variable, einen Funktionsparameter, etc. auf dieser Basis erstellen).</p> </li> <li> <p>Erm\u00f6glichen wir Objekten in <code>Person</code>, auf jede Funktion zu zeigen, die der obigen Signatur entspricht. Erstellen wir dazu eine Membervariable vom Typ <code>AgeChangingDelegate</code> in der Klasse <code>Person</code>! </p> <pre><code>public class Person\n{\n    public AgeChangingDelegate AgeChanging;\n</code></pre> <p>Wie objektorientiert ist das?</p> <p>Die Methodenreferenz, die als \u00f6ffentliche Membervariable erstellt wurde, verst\u00f6\u00dft (vorerst) gegen die Grunds\u00e4tze der objektorientierten Einheitsbegrenzung/Informationsverschleierung. Wir werden sp\u00e4ter darauf zur\u00fcckkommen.</p> </li> <li> <p>Rufen wir die Funktion jedes Mal auf, wenn sich das Alter unseres Person \u00e4ndert. Dazu f\u00fcgen wir dem Setter der Eigenschaft <code>Age</code> Folgendes hinzu.</p> <pre><code>public int Age\n{\n    get { return age; }\n    set \n    {\n        if (value &lt; 0)\n            throw new ArgumentException(\"Ung\u00fcltiges Alter!\");\n        if (AgeChanging != null)\n            AgeChanging(age, value);\n        age = value; \n    }\n}\n</code></pre> <p>Die obige Codezeile veranschaulichen mehrere wichtige Regeln:</p> <ul> <li>Die Validierungslogik geht in der Regel der Meldungslogik voraus.</li> <li>Es h\u00e4ngt von der Art der Meldelogik ab, ob sie vor oder nach der Auswertung ausgef\u00fchrt wird (in diesem Fall, da sich das Wort \"changing\" auf etwas in Arbeit befindliches bezieht, geht die Meldung der Auswertung voraus, das Vorkommen wird durch die Vergangenheitsform angezeigt: \"changed\")</li> <li>Beachten wir, dass noch niemand der Mitgliedsvariablen vom Typ Delegat einen Wert zugewiesen hat (kein Abonnent/Teilnehmer). In solchen F\u00e4llen w\u00fcrde der Aufruf zu einer Ausnahme f\u00fchren. \u00dcberpr\u00fcfen wir daher immer, ob die Mitgliedsvariable <code>null</code> ist, bevor wir sie aufrufen.</li> <li>Wenn das Ereignis ausgel\u00f6st wird, k\u00f6nnen wir auch die \u00dcberpr\u00fcfung von <code>null</code> und die Ausl\u00f6sung des Ereignisses auf elegantere, kompaktere und thread-sichere Weise mit dem \"<code>?.</code>\" Null-Bedingungs-Operator durchf\u00fchren (C# 6 und h\u00f6her):</li> </ul> <p>statt</p> <pre><code>if (AgeChanging != null)\n    AgeChanging(age, value);\n</code></pre> <p>k\u00f6nnen wir</p> <pre><code>AgeChanging?.Invoke(age, value);\n</code></pre> <p>schreiben.</p> <p>Das Ereignis wird nur ausgel\u00f6st, wenn es nicht <code>null</code> ist, ansonsten geschieht nichts.</p> </li> <li> <p>Genauer gesehen, sollte das Ereignis nur ausgel\u00f6st werden, wenn sich das Alter tats\u00e4chlich \u00e4ndert, d. h. die Verzweigung der Eigenschaft set sollte pr\u00fcfen, ob der neue Wert mit dem alten \u00fcbereinstimmt. Eine L\u00f6sung k\u00f6nnte darin bestehen, in der ersten Zeile des Setters sofort zur\u00fcckzukehren, wenn der neue Wert mit dem alten \u00fcbereinstimmt:</p> <pre><code>if (age == value) \n    return;\n\u2026\n</code></pre> </li> <li> <p>Wir sind fertig mit dem Code f\u00fcr die Klasse <code>Person</code>.  Kommen wir zum Abonnenten! Als erstes m\u00fcssen wir der Klasse <code>Program</code> eine neue Funktion hinzuf\u00fcgen.</p> <pre><code>class Program\n{\n    // ...\n\n    private static void PersonAgeChanging(int oldAge, int newAge)\n    {\n        Console.WriteLine(oldAge + \" =&gt; \" + newAge);\n    }\n}\n</code></pre> <p>Tipp</p> <p>\u00dcberpr\u00fcfen Sie, dass die neue Funktion im richtigen Bereich platziert ist! W\u00e4hrend der Delegatentyp au\u00dferhalb der Klasse (aber innerhalb des Namespace) platziert ist, befindet sich die Funktion innerhalb der Klasse!</p> </li> <li> <p>Melden wir uns schlie\u00dflich f\u00fcr die \u00c4nderungsverfolgung in der Funktion <code>Main</code> an!</p> <pre><code>static void Main(string[] args)\n{\n  Person p = new Person();\n  p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\n  // ...\n</code></pre> </li> <li> <p>Starten wir das Programm!</p> <p>Wenn wir z. B. einen Haltepunkt in der Zeile <code>AgeChanging?.Invoke(age, value);</code> setzen, die Anwendung debuggen und den Code schrittweise ausf\u00fchrem, k\u00f6nnen wir feststellen, dass das Ereignis bei jedem Setter-Durchlauf ausgef\u00fchrt wird, sowohl bei der ersten Wertzuweisung als auch beim Inkrement.</p> </li> <li> <p>F\u00fcgen wir der Funktion <code>Main</code> mehrere Abonnenten hinzu (mit dem Operator <code>+=</code> k\u00f6nnen wir neue Abonnenten zu den bereits vorhandenen hinzuf\u00fcgen) und f\u00fchren wir das Programm dann aus.</p> <pre><code>p.AgeChanging = new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += new AgeChangingDelegate(PersonAgeChanging);\np.AgeChanging += PersonAgeChanging; // Kompaktere Syntax\n</code></pre> <p>Es ist zu erkennen, dass alle drei registrierten/\"abonnierten\" Funktionen bei jeder Wert\u00e4nderung ausgef\u00fchrt werden. Dies ist m\u00f6glich, weil die Mitgliedsvariablen des Delegatentyps nicht nur eine Funktionsreferenz, sondern eine Funktionsreferenzliste enthalten (und pflegen).</p> <p>Beachten wir in der dritten Zeile oben, dass wir Funktionsreferenzen mit einer kompakteren Syntax schreiben k\u00f6nnen, als wir sie beim ersten Mal gesehen haben: Geben wir einfach den Namen der Funktion nach dem <code>+=</code> Operator an, ohne das <code>new AgeChangingDelegate(...)</code>.  Unabh\u00e4ngig davon wird ein <code>AgeChangingDelegate</code> -Objekt die <code>PersonAgeChanging</code> -Funktionen hinter den Kulissen umh\u00fcllen. In der Praxis verwenden wir diese kompaktere Syntax.</p> </li> <li> <p>Versuchen wir auch, uns abzumelden (an einem Punkt unserer Wahl) und starten wir dann das Programm.</p> <pre><code>p.AgeChanging -= PersonAgeChanging;\n</code></pre> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#3-aufgabe-ereignis-event","title":"3. Aufgabe - Ereignis (event)","text":"<p>So wie Eigenschaften eine syntaktisch schlankere Alternative zu Getter- und Setter-Methoden sind, bietet der oben beschriebene Delegat-Mechanismus eine schlankere Alternative zu den aus Java bekannten Event Listenern. Allerdings verst\u00f6\u00dft unsere obige L\u00f6sung immer noch erheblich gegen einige OO-Prinzipien (Einheiteneinschr\u00e4nkung, Verbergen von Informationen). Wir k\u00f6nnen dies anhand der folgenden zwei Beispiele veranschaulichen.</p> <ol> <li> <p>Das Ereignis kann auch von au\u00dfen ausgel\u00f6st werden (durch die Operationen anderer Klassen). Das ist ungl\u00fccklich, denn so kann das Ereignis f\u00e4lschlicherweise ausgel\u00f6st werden, auch wenn es in Wirklichkeit nicht eingetreten ist, und alle Teilnehmer werden get\u00e4uscht. Um dies zu demonstrieren, f\u00fcgen wir die folgende Zeile am Ende der Funktion <code>Main</code> ein.</p> <pre><code>p.AgeChanging(67, 12);\n</code></pre> <p>Hier haben wir ein gef\u00e4lschtes Alters\u00e4nderungsereignis f\u00fcr das Objekt <code>p</code> <code>Person</code> ausgel\u00f6st und damit alle Abonnenten get\u00e4uscht. Eine gute L\u00f6sung w\u00e4re, wenn das Ereignis nur durch Aktionen der Klasse <code>Person</code> ausgel\u00f6st werden k\u00f6nnte.</p> </li> <li> <p>Ein weiteres Problem ist das folgende. W\u00e4hrend <code>+=</code> und <code>-=</code> andere Funktionen, die die Liste abonniert haben, respektieren, k\u00f6nnen wir die Abonnements anderer jederzeit mit dem Operator <code>=</code> \u00fcberschreiben (l\u00f6schen). Versuchen wir dies, indem wir die folgende Zeile einf\u00fcgen (direkt nach den An- und Abmeldungen).</p> <pre><code>p.AgeChanging = null;\n</code></pre> </li> <li> <p>F\u00fcgen wir das Schl\u00fcsselwort <code>event</code> zur <code>AgeChanging</code> Member-Variable <code>Person.cs</code>hinzu!</p> Person.cs<pre><code>public event AgeChangingDelegate AgeChanging;\n</code></pre> <p>Das Schl\u00fcsselwort <code>event</code> ist eigentlich dazu gedacht, unser Programm zur\u00fcck auf den objektorientierten Weg zu zwingen und die beiden oben genannten Probleme auszuschlie\u00dfen.</p> </li> <li> <p>Lassen wir uns versuchen, das Programm zu \u00fcbersetzen. wir werden sehen, dass der \u00dcbersetzer unsere fr\u00fcheren \u00dcbertretungen jetzt als \u00dcbersetzungsfehler behandelt.</p> <p></p> </li> <li> <p>Entfernen wir die drei fehlerhaften Codezeilen (beachten wir, dass die erste direkte Wertzuweisung bereits ein Fehler ist), kompilieren wir dann und f\u00fchren wir unsere Anwendung aus!</p> </li> </ol>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#4-aufgabe-attribute","title":"4. Aufgabe - Attribute","text":""},{"location":"labor/2-nyelvi-eszkozok/index_ger/#anpassen-der-serialisierung-nach-attribut","title":"Anpassen der Serialisierung nach Attribut","text":"<p>Attribute sind ein deklarativer Weg, um Metadaten f\u00fcr Ihren Quellcode bereitzustellen. Ein Attribut ist eigentlich eine Klasse, die an ein bestimmtes Element des Programms (Typ, Klasse, Schnittstelle, Methode usw.) angeh\u00e4ngt ist. Diese Metainformationen k\u00f6nnen von jedem (auch von uns selbst) gelesen werden, w\u00e4hrend das Programm l\u00e4uft, und zwar \u00fcber einen Mechanismus, der Reflection genannt wird. Die Attribute k\u00f6nnen auch als das .NET-\u00c4quivalent zu den Java-Annotationen betrachtet werden.</p> <p>property vs. attribute vs. static</p> <p>Es stellt sich die Frage, welche Klasseneigenschaften in properties und welche in attributes einer Klasse untergebracht werden sollten. Eigenschaften beziehen sich auf die Objektinstanz selbst, w\u00e4hrend sich ein Attribut auf die Klasse (oder ein Mitglied der Klasse) bezieht, die das Objekt beschreibt.</p> <p>In dieser Hinsicht sind Attribute n\u00e4her an statischen Eigenschaften, aber es lohnt sich immer noch eine \u00dcberlegung, ob man ein bestimmtes Datenelement als statisches Mitglied oder als Attribut definiert. Mit einem Attribut ist die Beschreibung deklarativer, und wir verschmutzen den Code nicht mit Details, die nicht in der \u00f6ffentlichen Schnittstelle der Klasse erscheinen sollten.</p> <p>.NET definiert viele eingebaute Attribute, die eine gro\u00dfe Vielfalt an Funktionen haben k\u00f6nnen. Die im folgenden Beispiel verwendeten Attribute kommunizieren beispielsweise verschiedene Metainformationen mit dem XML-Serialisierer.</p> <ol> <li> <p>F\u00fcgen wir den folgenden Zeilen am Ende der Funktion <code>Main</code> ein und f\u00fchren wir dann unser Programm aus!</p> <pre><code>var serializer = new XmlSerializer(typeof(Person));\nvar stream = new FileStream(\"person.txt\", FileMode.Create);\nserializer.Serialize(stream, p);\nstream.Close();\nProcess.Start(new ProcessStartInfo\n{\n    FileName = \"person.txt\",\n    UseShellExecute = true,\n});\n</code></pre> <p>Der letzte Funktionsaufruf <code>Process.Start</code> im obigen Beispiel ist nicht Teil der Serialisierungslogik, sondern lediglich sondern nur eine kluge Methode, um die resultierende Datendatei mit dem Windows-Standardtextdateibetrachter zu \u00f6ffnen. Wir k\u00f6nnen dies versuchen, aber es h\u00e4ngt davon ab, welche .NET-Laufzeitumgebung wir verwenden und ob diese von unserem Betriebssystem unterst\u00fctzt wird. Ist dies nicht der Fall, erhalten wir bei der Ausf\u00fchrung eine Fehlermeldung. In diesem Fall lassen wir es unkommentiert und \u00f6ffnen wir die Datei <code>person.txt</code> manuell im Dateisystem (sie befindet sich in unserem Visual Studio Ordner unter \\bin\\Debug\\ neben unserer .exe Anwendung). <li> <p>Schauen wir uns die Struktur der resultierenden Datei an. Beachten wir, dass jede Eigenschaft auf das XML-Element abgebildet wird, das ihrem Namen entspricht.</p> </li> <li> <p>.NET-Attribute erm\u00f6glichen es uns, unsere Klasse <code>Person</code> mit Metadaten zu versehen, die das Verhalten der Serialisierung direkt ver\u00e4ndern. Das Attribut <code>XmlRoot</code> bietet die M\u00f6glichkeit, das Wurzelelement umzubenennen. Platzieren wir es \u00fcber der Klasse <code>Person</code>! </p> <pre><code>[XmlRoot(\"deutsche Person\")]\npublic class Person \n{\n    // ...\n}\n</code></pre> </li> <li> <p>Das <code>XmlAttribute</code> -Attribut zeigt dem Serialisier an, dass die markierte Eigenschaft auf ein xml-Attribut und nicht auf ein xml-Element abgebildet werden soll. Machen wir daraus die Eigenschaft <code>Age</code> (und nicht die Member-Variable!)!</p> <pre><code>[XmlAttribute(\"Alter\")]\npublic int Age\n</code></pre> </li> <li> <p>Das Attribut <code>XmlIgnore</code> zeigt dem Serialiser an, dass die markierte Eigenschaft vollst\u00e4ndig aus dem Ergebnis ausgelassen werden soll. Versuchen wir es \u00fcber die Eigenschaft <code>Name</code>. </p> <pre><code>[XmlIgnore]\npublic string Name { get; set; }\n</code></pre> </li> <li> <p>F\u00fchren wir unsere App aus! Vergleichen wir die Ergebnisse mit den vorherigen Ergebnissen.</p> </li>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#5-aufgabe-delegaten-2","title":"5. Aufgabe - Delegaten 2.","text":"<p>In den Aufgaben 2 und 3 haben wir ereignisbasierte Nachrichten\u00fcbermittlung mit Delegaten implementiert. Als einer anderen typischen Verwendung von Delegaten ist ihre Verwendung als Funktionsreferenzen, um eine Implementierung eines undefinierten Schritts an einen Algorithmus oder eine komplexere Operation zu \u00fcbergeben.</p> <p>Zum Beispiel kann die eingebaute generische Listenklasse (<code>List&lt;T&gt;</code>) mit der Funktion <code>FindAll</code> eine neue Liste mit allen Elementen zur\u00fcckgeben, die eine bestimmte Bedingung erf\u00fcllen. Die spezifische Filterbedingung kann als Funktion angegeben werden, genauer gesagt als Delegate-Parameter (dies ruft <code>FindAll</code> f\u00fcr jedes Element auf), der f\u00fcr jedes Element, das wir in der Ergebnisliste sehen wollen, true zur\u00fcckgibt. Der Typ des Funktionsparameters ist der folgende vordefinierte Delegatentyp (er muss nicht eingegeben/erstellt werden, er existiert bereits):</p> <pre><code>public delegate bool Predicate&lt;T&gt;(T obj)\n</code></pre> <p>Note</p> <p>Um die vollst\u00e4ndige Definition oben anzuzeigen, geben Sie einfach <code>Predicate</code> irgendwo ein, z. B. am Ende der Funktion <code>Main</code>, klicken Sie mit der Maus darauf, und verwenden Sie F12, um zur Definition zu navigieren.</p> <p>Das hei\u00dft, sie nimmt als Eingabe eine Variable des gleichen Typs wie der Typ des Listenelements und als Ausgabe einen logischen (booleschen) Wert. Um dies zu veranschaulichen, f\u00fcgen wir unserem vorherigen Programm einen Filter hinzu, der nur die ungeraden Eintr\u00e4ge in der Liste beh\u00e4lt.</p> <ol> <li> <p>Stellen wir in unserer Anwendung eine Filterfunktion bereit, die ungerade Zahlen zur\u00fcckgibt:</p> <pre><code>private static bool MyFilter(int n)\n{\n    return n % 2 == 1;\n}\n</code></pre> </li> <li> <p>Vervollst\u00e4ndigen wir den Code, den wir zuvor geschrieben haben, mit unserer Filterfunktion:</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nlist = list.FindAll(MyFilter);\n\nforeach (int n in list)\n{\n    Console.WriteLine($\"Wert: {n}\");\n}\n</code></pre> </li> <li> <p>F\u00fchren wir die Anwendung aus. Beachten wir, dass in der Konsole nur ungerade Zahlen angezeigt werden.</p> </li> <li>Als Kuriosit\u00e4t k\u00f6nnen wir einen Haltepunkt innerhalb unserer Funktion <code>MyFilter</code> setzen und beobachten, dass die Funktion tats\u00e4chlich f\u00fcr jedes Listenelement einzeln aufgerufen wird.</li> </ol> <p>Collection initializer syntax</p> <p>F\u00fcr alle Klassen (typischerweise Sammlungen) mit der Methode <code>Add</code>, die die Schnittstelle <code>IEnumerable</code> implementieren, lautet die Syntax f\u00fcr die Sammlungsinitialisierung wie folgt:</p> <pre><code>var list = new List&lt;int&gt;() { 1, 2, 3 };\n</code></pre> <p>Ab C# 12 kann eine noch einfachere Syntax (sogenannte collection expression) verwendet werden, um eine Sammlung zu initialisieren, wenn der Compiler aus dem Typ der Variablen schlie\u00dfen kann, dass es sich um eine Sammlung handelt. Z.B.:</p> <pre><code>List&lt;int&gt; list = [1, 2, 3];\n</code></pre>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#6-aufgabe-lambda-begriffe","title":"6. Aufgabe - Lambda-Begriffe","text":"<p>Die entsprechenden Themen werden in dem Vorlesungsmaterial ausf\u00fchrlich behandelt, sie werden hier nicht wiederholt. Siehe das Kapitel \"Lambda-Ausdruck\" im Dokument \"Vorlesung 02 - Sprachwerkzeuge.pdf\". Das Schl\u00fcsselelement ist <code>=&gt;</code> (Lambda-Operator), das die Definition von Lambda-Ausdr\u00fccken, d. h. anonymen Funktionen, erm\u00f6glicht.</p> <p><code>Action und Func</code></p> <p>Die in .NET eingebauten generischen Delegatentypen <code>Func</code> und <code>Action</code> werden hier aus Zeitgr\u00fcnden nicht behandelt. Sie sind immer noch Teil des grundlegende Kenntnisse!</p> <p>Die vorherige Aufgabe 5 wird wie folgt gel\u00f6st: Geben wir keine separate Filterfunktion an, sondern spezifizieren wir die Filterlogik in Form eines Lambda-Ausdrucks f\u00fcr die Operation <code>FindAll</code>. </p> <p>Wir brauchen nur eine Zeile zu \u00e4ndern:</p> <pre><code>list = list.FindAll((int n) =&gt; { return n % 2 == 1; });\n</code></pre> <p>Eine unbenannte Funktion wird definiert und an die Funtkion <code>FindAll</code> \u00fcbergeben:</p> <ul> <li>dies ist ein Lambda-Term,</li> <li>auf der linken Seite von <code>=&gt;</code> haben wir die Parameter der Operation angegeben (hier gab es nur einen),</li> <li>auf der rechten Seite von <code>=&gt;</code> haben wir der Stamm der Operation angegeben (die gleiche wie der Stamm der vorherigen <code>MyFilter</code> ).</li> </ul> <p>Die obige Zeile kann in einer viel einfacheren und klareren Form geschrieben werden:</p> <pre><code>list = list.FindAll(n =&gt; n % 2 == 1);\n</code></pre> <p>Es wurden die folgenden Vereinfachungen vorgenommen:</p> <ul> <li>wird der Typ des Parameters nicht geschrieben: der Compiler kann ihn aus dem Typ des Delegatenparameters von <code>FindAll</code> ableiten, der <code>Predicate</code>ist.</li> <li>die Klammern um den Parameter k\u00f6nnen weggelassen werden (da es nur einen Parameter gibt)</li> <li>auf der rechten Seite von <code>=&gt;</code> k\u00f6nnten wir die Klammern und <code>return</code> weglassen (weil es nur einen Ausdruck im Funktionsrumpf gab, der von der Funktion zur\u00fcckgegeben wird).</li> </ul>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#7-andere-sprachkonstruktionen","title":"7. Andere Sprachkonstruktionen","text":"<p>Im Folgenden werfen wir einen Blick auf einige der C#-Sprachelemente, die bei allt\u00e4glichen Programmieraufgaben immer h\u00e4ufiger verwendet werden. W\u00e4hrend der \u00dcbung kann es sein, dass keine Zeit bleibt, diese zu \u00fcberpr\u00fcfen.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#ausdruckskorpermember-expression-bodied-members","title":"Ausdrucksk\u00f6rpermember (Expression-bodied members)","text":"<p>Manchmal schreiben wir kurze Funktionen oder, im Falle von Eigenschaften, sehr oft kurze get/set/init-Definitionen, die aus einem einzigen Ausdruck bestehen. In diesem Fall kann der get/set/init-Stamm einer Funktion oder Eigenschaft unter Verwendung der Syntax f\u00fcr sogenannten Ausdrucksk\u00f6rpermember (expression-bodied members) angegeben werden, unter <code>=&gt;</code>.  Dies kann unabh\u00e4ngig davon geschehen, ob es im Kontext einen R\u00fcckgabewert (Return-Anweisung) gibt oder nicht.</p> <p>In den Beispielen werden wir sehen, dass die Verwendung von Ausdrucks-Tags nichts weiter als eine kleine syntaktische \"Wendung\" ist, um die Notwendigkeit zu minimieren, so viel umgebenden Code wie m\u00f6glich in solch einfachen F\u00e4llen zu schreiben.</p> <p>Schauen wir uns zun\u00e4chst ein Funktionsbeispiel an (angenommen, die Klasse hat eine Mitgliedsvariable oder eine Eigenschaft <code>Age</code> ):</p> <p><pre><code>public int GetAgeInDogYear() =&gt; Age * 7; \npublic void DisplayName() =&gt; Console.WriteLine(ToString());\n</code></pre> Wie wir sehen k\u00f6nnen, haben wir die Klammern und die Anweisung <code>return</code> entfernt, so dass die Syntax kompakter ist.</p> <p>Wichtig</p> <p>Obwohl hier das Token <code>=&gt;</code> verwendet wird, hat dies nichts mit den zuvor besprochenen Lambda-Ausdr\u00fccken zu tun: Es ist einfach so, dass dasselbe <code>=&gt;</code> Token (Symbolpaar) von C# f\u00fcr zwei v\u00f6llig unterschiedliche Dinge verwendet wird.</p> <p>Beispiel f\u00fcr die Angabe eines Property Getters:</p> <pre><code>public int AgeInDogYear { get =&gt; Age * 7; }\n</code></pre> <p>Wenn wir nur einen Getter f\u00fcr die Eigenschaft haben, k\u00f6nnen wir sogar das Schl\u00fcsselwort <code>get</code> und die Klammern weglassen.</p> <pre><code>public int AgeInDogYear =&gt; Age * 7;\n</code></pre> <p>Der Unterschied zur \u00e4hnlichen Syntax der bisherigen Funktionen ist, dass wir die geschweifte Klammern nicht ausgeschrieben haben.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#objektinitialisierer-object-initializer","title":"Objektinitialisierer (Object initializer)","text":"<p>Die Initialisierung von \u00f6ffentlichen Eigenschaften/Mitgliedsvariablen und der Aufruf des Konstruktors k\u00f6nnen mit einer Syntax kombiniert werden, die als Objektinitialisierung bezeichnet wird. Dazu wird nach dem Konstruktoraufruf ein Block mit geschweifte Klammern ge\u00f6ffnet, in dem der Wert der \u00f6ffentlichen Eigenschaften/Mitgliedsvariablen unter Verwendung der folgenden Syntax angegeben werden kann.</p> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Lukas\",\n};\n</code></pre> <p>Eigenschaften/Mitglieder werden initialisiert, nachdem der Konstruktor ausgef\u00fchrt wurde (wenn die Klasse einen Konstruktor hat). Diese Syntax ist auch deshalb vorteilhaft, weil sie als ein Ausdruck z\u00e4hlt (im Gegensatz zu drei Ausdr\u00fccken, wenn wir ein nicht initialisiertes Objekt <code>Person</code> erstellen und dann in zwei weiteren Schritten Werte an <code>Age</code> und <code>Name</code> \u00fcbergeben). Auf diese Weise k\u00f6nnen wir ein initialisiertes Objekt direkt als Parameter f\u00fcr einen Funktionsaufruf \u00fcbergeben, ohne eine separate Variable deklarieren zu m\u00fcssen.</p> <pre><code>void Foo(Person p)\n{\n    // etwas mit p machen\n}\n</code></pre> <pre><code>Foo(new Person() { Age = 17, Name = \"Lukas\" });\n</code></pre> <p>Die Syntax ist auch zum Kopieren und Einf\u00fcgen geeignet, denn wie wir in den obigen Beispielen sehen k\u00f6nnen, spielt es keine Rolle, ob nach der letzten Eigenschaft ein Komma steht oder nicht.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#eigenschaften-init-only-setter","title":"Eigenschaften - Init only setter","text":"<p>Die Syntax f\u00fcr die Objektinitialisierung im vorigen Abschnitt ist sehr praktisch, erfordert aber, dass die Eigenschaft \u00f6ffentlich ist. Wenn wir m\u00f6chten, dass eine Eigenschaft nur bei der Erstellung des Objekts auf einen Wert gesetzt wird, m\u00fcssen wir einen Konstruktorparameter einf\u00fchren und ihn auf eine Nur-Lesbare-Eigenschaft (Getter-Only) setzen. Eine einfachere L\u00f6sung f\u00fcr dieses Problem ist die so genannte Init only setter-Syntax, bei der wir mit dem Schl\u00fcsselwort <code>init</code> einen \"Setter\" erstellen k\u00f6nnen, der nur im Konstruktor und in der im vorigen Kapitel beschriebenen Syntax f\u00fcr die Objektinitialisierung gesetzt werden darf, nicht aber danach.</p> <pre><code>public string Name { get; init; }\n</code></pre> <pre><code>var p = new Person()\n{\n    Age = 17,\n    Name = \"Lukas\",\n};\n\np.Name = \"Test\"; // Erstellungsfehler, kann nicht nachtr\u00e4glich ge\u00e4ndert werden\n</code></pre> <p>Wir k\u00f6nnen auch den init only setter als obligatorisch festlegen, indem wir das Schl\u00fcsselwort <code>required</code> f\u00fcr die Eigenschaft verwenden. In diesem Fall muss der Wert der Eigenschaft in der Syntax der Objektinitialisierung angegeben werden, da sonst ein \u00dcbersetzungsfehler auftritt.</p> <pre><code>public required string Name { get; init; }\n</code></pre> <p>Dies ist auch deshalb n\u00fctzlich, weil wir die obligatorischen Konstruktorparameter speichern k\u00f6nnen, wenn wir die Eigenschaften der Klasse ohnehin ver\u00f6ffentlichen und die Syntax der Objektinitialisierung unterst\u00fctzen wollen.</p>"},{"location":"labor/2-nyelvi-eszkozok/index_ger/#8-aufgabe-generische-klassen","title":"8. Aufgabe - Generische Klassen","text":"<p>Hinweis: Die Zeit f\u00fcr diese \u00dcbung reicht wahrscheinlich nicht aus. In diesem Fall ist es ratsam, die \u00dcbung zu Hause zu machen.</p> <p>Generische Klassen in .NET \u00e4hneln den Template-Klassen in C++, sind aber n\u00e4her an den bereits bekannten generischen Klassen in Java. Sie k\u00f6nnen verwendet werden, um generische (Multi-Typ), aber typsichere Klassen zu erstellen. Wenn wir ohne generische Klassen ein Problem allgemein behandeln wollen, verwenden wir Daten des Typs <code>object</code> (da in .NET alle Klassen von der Klasse <code>object</code> abgeleitet sind). Dies ist z. B. bei <code>ArrayList</code>der Fall, einer Allzwecksammlung zum Speichern beliebiger Elemente des Typs <code>object</code>.  Schauen wir uns ein Beispiel f\u00fcr die Verwendung von <code>ArrayList</code> an:</p> <pre><code>var list = new ArrayList();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    //cast ist n\u00f6tig, sonder es kann nicht kompiliert werden\n    int i = (int)list[n];\n    Console.WriteLine($\"Wert: {i}\");\n}\n</code></pre> <p>Bei der obigen L\u00f6sung ergeben sich folgende Probleme:</p> <ul> <li><code>ArrayList</code> speichert jedes Element als <code>object</code>.</li> <li>Wenn wir auf ein Element in der Liste zugreifen wollen, m\u00fcssen wir es immer in den richtigen Typ umwandeln.</li> <li>Nicht typsicher. Im obigen Beispiel hindert wir nichts (und keine Fehlermeldung) daran, ein Objekt eines anderen Typs in die Liste neben dem Typ <code>int</code> einzuf\u00fcgen. In diesem Fall w\u00fcrden wir nur dann einen Fehler erhalten, wenn wir versuchen, den Typ, der nicht <code>int</code> ist, auf <code>int</code> zu \u00fcbertragen. Bei der Verwendung generischer Sammlungen werden solche Fehler w\u00e4hrend der \u00dcbersetzung erkannt.</li> <li>Bei der Speicherung von Daten des Typs \"Wert\" ist die Liste langsamer, da der Typ \"Wert\" zun\u00e4chst in eine Box eingeschlossen werden muss, um als <code>object</code>(d. h. als Referenztyp) gespeichert werden zu k\u00f6nnen.</li> </ul> <p>Die L\u00f6sung des obigen Problems unter Verwendung einer allgemeinen Liste sieht wie folgt aus (in der \u00dcbung wird nur die hervorgehobene Zeile im zuvor eingegebenen Beispiel ge\u00e4ndert):</p> <pre><code>var list = new List&lt;int&gt;();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nfor (int n = 0; n &lt; list.Count; n++)\n{\n    int i = list[n]; // Kein cast erforderlich\n    Console.WriteLine($\"Wert: {i}\");\n}\n</code></pre>"},{"location":"labor/3-felhasznaloi-felulet/","title":"3. A felhaszn\u00e1l\u00f3i fel\u00fclet kialak\u00edt\u00e1sa","text":""},{"location":"labor/3-felhasznaloi-felulet/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9lja megismerkedni a vastagkliens alkalmaz\u00e1sok fejleszt\u00e9s\u00e9nek alapjaival a deklarat\u00edv XAML fel\u00fcletle\u00edr\u00f3 technol\u00f3gi\u00e1n kereszt\u00fcl. Az itt tanult alapok az \u00f6sszes XAML dialektusra (WinUI, WPF, UWP, Xamarin.Forms, MAUI) igazak lesznek, vagy nagyon hasonl\u00f3an lehet \u0151ket alkalmazni, mi viszont a mai \u00f3r\u00e1n specifikusan a WinAppSDK / WinUI 3 keretrendszeren kereszt\u00fcl fogjuk haszn\u00e1lni a XAML-t.</p>"},{"location":"labor/3-felhasznaloi-felulet/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A labor elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> </ul> <p>A sz\u00fcks\u00e9ges fejleszt\u0151k\u00f6rnyezetr\u0151l itt tal\u00e1lhat\u00f3 le\u00edr\u00e1s.</p> <p>Fejleszt\u0151k\u00f6rnyezet WinUI 3 fejleszt\u00e9shez</p> <p>A kor\u00e1bbi laborokhoz k\u00e9pest plusz komponensek telep\u00edt\u00e9se sz\u00fcks\u00e9ges. A fenti oldal eml\u00edti, hogy sz\u00fcks\u00e9g van a \".NET desktop development\" Visual Studio Workload telep\u00edt\u00e9s\u00e9re, valamint ugyanitt az oldal alj\u00e1n van egy \"WinUI t\u00e1mogat\u00e1s\" fejezet, az itt megadott l\u00e9p\u00e9seket is mindenk\u00e9ppen meg kell tenni!</p>"},{"location":"labor/3-felhasznaloi-felulet/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el a <code>megoldas</code> \u00e1gon. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre a <code>megoldas</code> \u00e1gat:</p> <p><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo -b megoldas</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/3-felhasznaloi-felulet/#kiindulo-projekt","title":"Kiindul\u00f3 projekt","text":"<p>Az els\u0151 feladatban kialak\u00edtjuk a k\u00f6rnyezetet, amelyben a tov\u00e1bbiakban a XAML nyelv \u00e9s a WinUI keretrendszer m\u0171k\u00f6d\u00e9s\u00e9t vizsg\u00e1ljuk. A kiindul\u00f3 projektet a Visual Studi\u00f3val is legener\u00e1lhatn\u00e1nk (WinUI 3 projekt, Blank App, Packaged (WinUI 3 in Desktop) t\u00edpus), de az \u00f3ra g\u00f6rd\u00fcl\u00e9kenys\u00e9ge \u00e9rdek\u00e9ben az el\u0151re elk\u00e9sz\u00edtett projektet fogjuk haszn\u00e1lni.</p> <p>A projektet a k\u00f6vetkez\u0151 parancs kiad\u00e1s\u00e1val tudjuk lekl\u00f3nozni a g\u00e9p\u00fcnkre:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo.git\n</code></pre> <p>Nyissuk meg a <code>HelloXaml.sln</code>-t.</p> <p>Tekints\u00fck \u00e1t milyen f\u00e1jlokat tartalmaz a projekt:</p> <ul> <li>App<ul> <li>K\u00e9t f\u00e1jl <code>App.xaml</code> \u00e9s <code>App.xaml.cs</code>(k\u00e9s\u0151bb tiszt\u00e1zzuk, k\u00e9t f\u00e1jl tartozik hozz\u00e1)</li> <li>Alkalmaz\u00e1s bel\u00e9p\u00e9si pontja: <code>OnLaunched</code> fel\u00fcldefini\u00e1lt met\u00f3dus az <code>App.xaml.cs</code>-ben</li> <li>Eset\u00fcnkben itt inicializ\u00e1ljuk az alkalmaz\u00e1s egyetlen ablak\u00e1t a <code>MainWindow</code>-t</li> </ul> </li> <li>MainWindow<ul> <li>Alkalmaz\u00e1sunk f\u0151ablak\u00e1hoz tartoz\u00f3 .xaml \u00e9s .xaml.cs f\u00e1jlok.</li> </ul> </li> </ul> Tov\u00e1bbi solution elemek <p>A kiindul\u00f3 VS solution a k\u00f6vetkez\u0151 elemeket tartalmazza m\u00e9g:</p> <ul> <li>Dependencies<ul> <li>Frameworks<ul> <li><code>Microsoft.AspNetCore.App</code>: .NET SDK metapackage (Microsoft .NET \u00e9s SDK alapcsomagokat hivatkozza be)</li> <li>Windows specifikus .NET SDK</li> </ul> </li> <li>Packages<ul> <li>Windows SDK Build Tools</li> <li>WindowsAppSDK</li> </ul> </li> </ul> </li> <li>Assets<ul> <li>Alkalmaz\u00e1s log\u00f3i</li> </ul> </li> <li>app.manifest, Package.appxmanifest<ul> <li>Az alkalmaz\u00e1s metaadatait tartalmaz\u00f3 XML \u00e1llom\u00e1ny, melyben t\u00f6bbek k\u00f6z\u00f6tt megadhatjuk a log\u00f3kat, vagy pl. Androidhoz hasonl\u00f3an itt kell jogot k\u00e9rj\u00fcnk a biztons\u00e1gkritikus rendszerer\u0151forr\u00e1sokhoz.</li> </ul> </li> </ul> <p>Futtassuk az alkalmaz\u00e1st!</p>"},{"location":"labor/3-felhasznaloi-felulet/#xaml-bevezetes","title":"XAML bevezet\u00e9s","text":"<p>A fel\u00fclet le\u00edr\u00e1s\u00e1t egy XML alap\u00fa le\u00edr\u00f3 nyelvben, XAML-ben (ejtsd: zem\u00f6l) fogjuk megadni.</p> <p>Grafikus designer fel\u00fclet</p> <p>Bizonyos XAML dialektusok eset\u00e9ben (pl.: WPF) rendelkez\u00e9s\u00fcnkre \u00e1ll grafikus designer eszk\u00f6z is a fel\u00fclet kialak\u00edt\u00e1s\u00e1hoz, de az \u00e1ltal\u00e1ban kev\u00e9sb\u00e9 hat\u00e9kony XAML le\u00edr\u00e1st szokott gener\u00e1lni. R\u00e1ad\u00e1sul m\u00e1r a Visual Studio is t\u00e1mogatja a Hot Reload m\u0171k\u00f6d\u00e9st XAML esetben, \u00edgy nem sz\u00fcks\u00e9ges le\u00e1ll\u00edtani az alkalmaz\u00e1st a XAML szerkeszt\u00e9se k\u00f6zben, a v\u00e1ltoztat\u00e1sokat pedig azonnal l\u00e1thatjuk a fut\u00f3 alkalmaz\u00e1sban. Ez\u00e9rt WinUI eset\u00e9ben m\u00e1r nem is kapunk designer t\u00e1mogat\u00e1st a Visual Studioban. A tapasztalatok alapj\u00e1n vannak limit\u00e1ci\u00f3i, \"nagyobb\" l\u00e9pt\u00e9k\u0171 v\u00e1ltoztat\u00e1sok eset\u00e9n sz\u00fcks\u00e9g van az alkalmaz\u00e1s \u00fajraind\u00edt\u00e1s\u00e1ra.</p>"},{"location":"labor/3-felhasznaloi-felulet/#xaml-nyelvi-alapok","title":"XAML nyelvi alapok","text":"<p>A XAML nyelv:</p> <ul> <li>Objektump\u00e9ld\u00e1nyos\u00edt\u00f3 nyelv</li> <li>Szabv\u00e1nyos XML</li> <li>XML elemek/tagek: objektumokat p\u00e9ld\u00e1nyos\u00edtanak, melyek oszt\u00e1lyai szabv\u00e1nyos .NET oszt\u00e1lyok</li> <li>XML attrib\u00fatumok: tulajdons\u00e1gokat (dependency property-ket) \u00e1ll\u00edtanak be</li> <li>Deklarat\u00edv</li> </ul> <p>N\u00e9zz\u00fck meg, milyen XAML-t gener\u00e1lt a projekt sablon (<code>MainWindow.xaml</code>). L\u00e1thatjuk, hogy a XAML-ben minden vez\u00e9rl\u0151h\u00f6z l\u00e9trehozott egy XML elemet/taget. A vez\u00e9rl\u0151k tagjein pedig be vannak \u00e1ll\u00edtva a vez\u00e9rl\u0151 tulajdons\u00e1gai. Pl. <code>HorizontalAlignment</code>: igaz\u00edt\u00e1s a kont\u00e9neren (eset\u00fcnkben ablakon) bel\u00fcl. Vez\u00e9rl\u0151k tartalmazhatnak m\u00e1s vez\u00e9rl\u0151ket, \u00edgy vez\u00e9rl\u0151kb\u0151l \u00e1ll\u00f3 fa j\u00f6n l\u00e9tre.</p> <p>N\u00e9zz\u00fck meg r\u00e9szletesebben a <code>MainWindow.xaml</code>-t:</p> <ul> <li>Gy\u00f6k\u00e9r tagen n\u00e9vterek: meghat\u00e1rozz\u00e1k, hogy az XML-ben milyen tageket \u00e9s attrib\u00fatumokat haszn\u00e1lhatunk<ul> <li>Alap\u00e9rtelmezett n\u00e9vt\u00e9r: XAML elemek/vez\u00e9rl\u0151k (pl. <code>Button</code>, <code>TextBox</code> stb.) n\u00e9vtere</li> <li><code>x</code> n\u00e9vt\u00e9r: XAML parser n\u00e9vtere (pl.: <code>x:Class</code>, <code>x:Name</code>)</li> <li>Egy\u00e9b tetsz\u0151leges n\u00e9vterek hivatkozhat\u00f3k</li> </ul> </li> <li><code>Window</code> gy\u00f6k\u00e9r tag<ul> <li>Az ablakunk/oldalunk alapj\u00e1n egy .NET oszt\u00e1ly j\u00f6n l\u00e9tre, mely a <code>Window</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazik.</li> <li>A lesz\u00e1rmaztatott oszt\u00e1lyunk nev\u00e9t az <code>x:Class</code> attrib\u00fatum hat\u00e1rozza meg: az <code>x:Class=\"HelloXaml.MainWindow\"</code> alapj\u00e1n egy <code>HelloXaml</code> n\u00e9vt\u00e9rben egy <code>MainWindow</code> nev\u0171 oszt\u00e1ly lesz.</li> <li>Ez egy partial class, az oszt\u00e1ly \"m\u00e1sik fele\" az ablakhoz/oldalhoz tartoz\u00f3 \u00fan. a code-behind f\u00e1jlban (<code>MainWindow.xaml.cs</code>) tal\u00e1lhat\u00f3. L\u00e1sd k\u00f6vetkez\u0151 pont.</li> </ul> </li> <li>Code-behind f\u00e1jl (<code>MainWindow.xaml.cs</code>):<ul> <li>A partial classunk m\u00e1sik \"fele\": ellen\u0151rizz\u00fck, hogy itt az oszt\u00e1ly neve \u00e9s n\u00e9vtere megegyezik a .xaml f\u00e1jlban megadottal (partial class!).</li> <li>Esem\u00e9nykezel\u0151 \u00e9s seg\u00e9df\u00fcggv\u00e9nyeket tessz\u00fck ide (t\u00f6bbek k\u00f6z\u00f6tt).</li> <li><code>this.InitializeComponent();</code>: a konstruktorban mindig meg kell h\u00edvni, ez olvassa majd be fut\u00e1s k\u00f6zben a XAML-t, ez p\u00e9ld\u00e1nyos\u00edtja, inicializ\u00e1lja az ablak/oldal tartalm\u00e1t (vagyis a XAML-f\u00e1jlban megadott vez\u00e9rl\u0151ket az ott meghat\u00e1rozott tulajdons\u00e1gokkal).</li> </ul> </li> </ul> <p>T\u00f6r\u00f6lj\u00fck ki a <code>Window</code> tartalm\u00e1t \u00e9s a code-behind f\u00e1jlb\u00f3l az esem\u00e9nykezel\u0151t (<code>myButton_Click</code> f\u00fcggv\u00e9ny). Most k\u00e9zzel fogunk XAML-t \u00edrni \u00e9s ezzel a fel\u00fcletet kialak\u00edtani. Vegy\u00fcnk fel egy <code>Grid</code>-et a <code>Window</code>-ba, mellyel a k\u00e9s\u0151bbiekben egy t\u00e1bl\u00e1zatos elrendez\u00e9st (layout) fogunk tudunk kialak\u00edtani:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Window\n    x:Class=\"HelloXaml.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:HelloXaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid&gt;\n\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>Futtassuk az alkalmaz\u00e1st (pl. az F5 billenty\u0171vel). A <code>Grid</code> most kit\u00f6lti a teljes ablakot, a sz\u00edne megegyezik az ablak h\u00e1tt\u00e9rsz\u00edn\u00e9vel, ez\u00e9rt szemmel nem tudjuk megk\u00fcl\u00f6nb\u00f6ztetni.</p> <p>A k\u00f6vetkez\u0151 feladatok sor\u00e1n hagyjuk futni az alkalmaz\u00e1st, hogy azonnal l\u00e1thassuk a fel\u00fcleten eszk\u00f6z\u00f6lt m\u00f3dos\u00edt\u00e1sainkat.</p> <p>Hot Reload limit\u00e1ci\u00f3k</p> <p>Tartsuk szem el\u0151tt a Hot Reload limit\u00e1ci\u00f3it: ha egy v\u00e1ltoz\u00e1sunk nem akar a fut\u00f3 alkalmaz\u00e1s fel\u00fclet\u00e9n megjelenni, akkor ind\u00edtsuk majd \u00fajra az alkalmaz\u00e1st!</p>"},{"location":"labor/3-felhasznaloi-felulet/#objektum-peldanyok-es-tulajdonsagaik","title":"Objektum p\u00e9ld\u00e1nyok \u00e9s tulajdons\u00e1gaik","text":"<p>Most azt n\u00e9zz\u00fck meg, hogyan tudunk XAML alapokon objektumokat p\u00e9ld\u00e1nyos\u00edtani \u00e9s ezen objektumok tulajdons\u00e1gait be\u00e1ll\u00edtani.</p> <p>Vegy\u00fcnk fel a <code>Grid</code> belsej\u00e9be egy <code>Button</code>-t. A <code>Content</code> tulajdons\u00e1ggal adhatjuk meg a gomb sz\u00f6veg\u00e9t, pontosabban a tartalm\u00e1t.</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>Ez azon a helyen, ahol deklar\u00e1ltuk, fut\u00e1s k\u00f6zben l\u00e9trehoz egy <code>Button</code> objektumot, \u00e9s a <code>Content</code> tulajdons\u00e1g\u00e1t a \"Hello WinUI App!\" sz\u00f6vegre \u00e1ll\u00edtja. Ezt megtehett\u00fck volna a code-behind f\u00e1jlban C# nyelven is k\u00f6vetkez\u0151k\u00e9ppen (de ez kev\u00e9sb\u00e9 olvashat\u00f3 k\u00f3dot eredm\u00e9nyezne):</p> <pre><code>// Pl. a konstruktor v\u00e9g\u00e9re be\u00edrva:\n\nButton b = new Button();\nb.Content = \"Hello WinUI App!\";\nrootGrid.Children.Add(b); \n// Az el\u0151z\u0151 a sorhoz XAML f\u00e1jlban a Gridnek meg kellene adni az x:Name=\"rootGrid\" \n// attrib\u00fatumot, hogy rootGrid n\u00e9ven el\u00e9rhet\u0151 legyen a code-behind f\u00e1jlban\n</code></pre> <p> Ez a p\u00e9lda nagyon j\u00f3l szeml\u00e9lteti, hogy a XAML alapvet\u0151en egy objektump\u00e9ld\u00e1nyos\u00edt\u00f3 nyelv, \u00e9s t\u00e1mogatja objektumok tulajdons\u00e1gainak be\u00e1ll\u00edt\u00e1s\u00e1t.</p> <p>A <code>Content</code> tulajdons\u00e1g k\u00fcl\u00f6nleges, nem csak XML attrib\u00fatumban lehet megadni, hanem tagen (XML elemen) bel\u00fcl is.</p> <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre> <p>S\u0151t! A gombra nem csak feliratot rakhatunk, hanem tetsz\u0151leges m\u00e1s elemet. Pl. rakjunk bele egy piros k\u00f6rt. A k\u00f6r 10 pixel sz\u00e9les, 10 pixel magas, a sz\u00edn (<code>Fill</code>) pedig piros.</p> <pre><code>&lt;Button&gt;\n    &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n&lt;/Button&gt;\n</code></pre> <p>Ezt kor\u00e1bbi .NET UI technol\u00f3gi\u00e1k eset\u00e9ben (pl. Windows Forms) nem lett volna ilyen egyszer\u0171 megval\u00f3s\u00edtani.</p> <p>Legyen most a piros k\u00f6r mellett a Record felirat (hogy \u00e9rtelme is legyen a piros k\u00f6r\u00f6s gombnak). A gombnak csak egy gyereke lehet, ez\u00e9rt egy layout vez\u00e9rl\u0151be (pl. egy <code>StackPanel</code>-be) kell beraknunk a k\u00f6rt \u00e9s a sz\u00f6veget (<code>TextBlock</code>). Adjunk egy bal oldali marg\u00f3t is a <code>TextBlock</code>-nak, hogy ne \u00e9rjenek \u00f6ssze.</p> <pre><code>&lt;Button&gt;\n    &lt;StackPanel Orientation=\"Horizontal\"&gt;\n        &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n        &lt;TextBlock Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n    &lt;/StackPanel&gt;\n&lt;/Button&gt;\n</code></pre> <p>A <code>StackPanel</code> egy egyszer\u0171, vez\u00e9rl\u0151k elrendez\u00e9s\u00e9re szolg\u00e1l\u00f3 layout panel:  a tartalmazott vez\u00e9rl\u0151ket <code>Horizontal</code> <code>Orientation</code> megad\u00e1sa eset\u00e9n egym\u00e1s mell\u00e9, <code>Vertical</code> <code>Orientation</code> eset\u00e9n egym\u00e1s al\u00e1 helyezi el. \u00cdgy a p\u00e9ld\u00e1nkban egyszer\u0171en egym\u00e1s mell\u00e9 teszi a k\u00e9t vez\u00e9rl\u0151t.</p> <p>Az eredm\u00e9ny a k\u00f6vetkez\u0151:</p> <p></p> <p>XAML vektorgrafikus vez\u00e9rl\u0151k</p> <p>L\u00e9nyeges, hogy a XAML vez\u00e9rl\u0151k nagy r\u00e9sze vektorgrafikus. Ez a gomb ugyanolyan \u00e9lesen fog kin\u00e9zni (nem tapasztalunk \"pixelesed\u00e9st\") b\u00e1rmilyen DPI ill. nagy\u00edt\u00e1s mellett n\u00e9zz\u00fck.</p> <p>A XAML-ben p\u00e9ld\u00e1nyos\u00edtott vez\u00e9rl\u0151k tulajdons\u00e1gainak megad\u00e1s\u00e1ra h\u00e1rom lehet\u0151s\u00e9g van (ezeket r\u00e9szben haszn\u00e1ltuk is m\u00e1r):</p> <ul> <li>Property ATTRIBUTE syntax</li> <li>Property ELEMENT syntax</li> <li>Property CONTENT syntax</li> </ul> <p>Tekints\u00fck \u00e1t most r\u00e9szletesebben ezeket a lehet\u0151s\u00e9geket:</p> <ol> <li> <p>Property ATTRIBUTE syntax.  M\u00e1r alkalmaztuk, m\u00e9gpedig a legels\u0151 p\u00e9ld\u00e1nkban:</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>Az elnevez\u00e9s onnan ered, hogy a tulajdons\u00e1got XML attrib\u00fatum form\u00e1j\u00e1ban adjuk meg. Seg\u00edts\u00e9g\u00e9vel - mivel XML attrib\u00fatum csak string lehet! - csak sztring form\u00e1ban megadott egyszer\u0171 sz\u00e1m/sztring/stb. \u00e9rt\u00e9k, ill. code-behind f\u00e1jlban defini\u00e1lt tagv\u00e1ltoz\u00f3, esem\u00e9nykezel\u0151 \u00e9rhet\u0151 el. De t\u00edpuskonverterek seg\u00edts\u00e9g\u00e9vel \"\u00f6sszetett\" objektumok is megadhat\u00f3k. Err\u0151l sok sz\u00f3 nem lesz, de a be\u00e9p\u00edtett t\u00edpuskonvertereket sokszor haszn\u00e1ljuk, gyakorlatilag \"\u00f6szt\u00f6n\u00f6sen\". P\u00e9lda:</p> <p>Vegy\u00fcnk fel a <code>Grid</code>-re egy h\u00e1tt\u00e9rsz\u00ednt:</p> <pre><code>&lt;Grid Background=\"Azure\"&gt;\n</code></pre> <p>Vagy megadhatjuk hex\u00e1ban is:</p> <pre><code>&lt;Grid Background=\"#FFF0FFFF\"&gt;\n</code></pre> <p>A marg\u00f3 (<code>Margin</code>) is egy \u00f6sszetett \u00e9rt\u00e9k, a hozz\u00e1 tartoz\u00f3 t\u00edpuskonveter vessz\u0151vel (vagy sz\u00f3k\u00f6zzel) elv\u00e1lasztva v\u00e1rja a n\u00e9gy oldalra vonatkoz\u00f3 \u00e9rt\u00e9keket (bal, fent, jobb, lent). M\u00e1r haszn\u00e1ltuk is a <code>Record</code> felirat\u00fa TextBlockunk eset\u00e9ben. Megjegyz\u00e9s: marg\u00f3nak egyetlen sz\u00e1m is megadhat\u00f3, akkor mind a n\u00e9gy oldalra ugyanazt fogja alkalmazni.</p> </li> <li> <p>Property ELEMENT syntax. Seg\u00edts\u00e9g\u00e9vel egy tulajdons\u00e1got t\u00edpuskonverterek n\u00e9lk\u00fcl tudjuk egy \u00f6sszetett m\u00f3don p\u00e9ld\u00e1nyos\u00edtott/felparam\u00e9terezett objektumra \u00e1ll\u00edtani. N\u00e9zz\u00fck egy p\u00e9ld\u00e1n kereszt\u00fcl.</p> <ul> <li>A fenti p\u00e9ld\u00e1ban <code>Background</code> tulajdons\u00e1g be\u00e1ll\u00edt\u00e1sakor az <code>Azure</code> val\u00f3j\u00e1ban egy <code>SolidColorBrush</code>-t hoz l\u00e9tre, melynek a sz\u00edn\u00e9t vil\u00e1gosk\u00e9kre \u00e1ll\u00edtja. Ezt t\u00edpuskonverter alkalmaz\u00e1sa n\u00e9lk\u00fcl az al\u00e1bbi m\u00f3don lehet megadni:</li> </ul> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush Color=\"Azure\" /&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p>Ez a <code>Grid</code> <code>Background</code> tulajdons\u00e1g\u00e1t \u00e1ll\u00edtja be a megadott <code>SolidColorBrush</code>-ra. Ez az \u00fan. \"property element syntax\" alap\u00fa tulajdons\u00e1gmegad\u00e1s.</p> <ul> <li>A n\u00e9v onnan ered, hogy a tulajdons\u00e1got egy XML elem (\u00e9s pl. nem XML attrib\u00fatum) form\u00e1j\u00e1ban adjuk meg.</li> <li> Itt a <code>&lt;Grid.Background&gt;</code> elem nem objektump\u00e9ld\u00e1nyt hoz l\u00e9tre, hanem az adott (eset\u00fcnkben <code>Background</code>) property \u00e9rt\u00e9k\u00e9t \u00e1ll\u00edtja be a megfelel\u0151 objektum p\u00e9ld\u00e1ny\u00e1ra (eset\u00fcnkben egy <code>SolidColorBrush</code>-ra). Ezt az XML elem nev\u00e9ben lev\u0151 pont alapj\u00e1n lehet tudni.</li> <li>Ez \"terjeng\u0151sebb\" forma tulajdons\u00e1g megad\u00e1s\u00e1ra, de teljes rugalmass\u00e1got biztos\u00edt. </li> </ul> <p>Cser\u00e9lj\u00fck le a <code>SolidColorBrush</code>-t egy sz\u00edn\u00e1tmenetes <code>Brush</code>-ra (<code>LinearGradientBrush</code>):</p> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;LinearGradientBrush&gt;\n            &lt;LinearGradientBrush.GradientStops&gt;\n                &lt;GradientStop Color=\"Black\" Offset=\"0\" /&gt;\n                &lt;GradientStop Color=\"White\" Offset=\"1\" /&gt;\n            &lt;/LinearGradientBrush.GradientStops&gt;\n        &lt;/LinearGradientBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p><code>LinearGradientBrush</code>-ra nincs t\u00edpuskonverter, ezt csak az element syntax seg\u00edts\u00e9g\u00e9vel tudtuk megadni!</p> <p>K\u00e9rd\u00e9s, hogyan lehets\u00e9ges az, hogy a <code>Grid</code> vez\u00e9rl\u0151 <code>Background</code> tulajdons\u00e1g\u00e1nak <code>SolidColorBrush</code> \u00e9s <code>LinearGradientBrush</code> t\u00edpus\u00fa ecsetet is meg tudtunk adni? A v\u00e1lasz nagyon egyszer\u0171, a polimorfizmus teszi ezt lehet\u0151v\u00e9:</p> <ul> <li>A <code>SolidColorBrush</code> \u00e9s <code>LinearGradientBrush</code> oszt\u00e1lyok a be\u00e9p\u00edtett <code>Brush</code> oszt\u00e1ly lesz\u00e1rmazottai.</li> <li>A <code>Background</code> tulajdons\u00e1g egy <code>Brush</code> t\u00edpus\u00fa property, \u00edgy a polimorfizmus miatt b\u00e1rmely lesz\u00e1rmazottj\u00e1t lehet haszn\u00e1lni.</li> </ul> Note <ul> <li>A fenti p\u00e9ld\u00e1kban a <code>Color</code> (sz\u00edn) megad\u00e1s\u00e1n\u00e1l pl. a <code>Color=\"Azure\"</code> esetben az <code>Azure</code> sz\u00f3b\u00f3l is t\u00edpuskonverter k\u00e9sz\u00edt k\u00e9k <code>Color</code> p\u00e9ld\u00e1nyt. \u00cdgy n\u00e9zne a kor\u00e1bbi, <code>SolidColorBrush</code> alap\u00fa p\u00e9ld\u00e1nk teljesen kifejtve: <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush&gt;\n            &lt;SolidColorBrush.Color&gt;\n                &lt;Color&gt;#FFF0FFFF&lt;/Color&gt;\n            &lt;/SolidColorBrush.Color&gt;\n        &lt;/SolidColorBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre></li> <li>Ahol t\u00e1mogatott, \u00e9rdemes kihaszn\u00e1lni a t\u00edpuskonvertereket, \u00e9s attribute syntaxot haszn\u00e1lni, hogy ne legyen terjeng\u0151s a XAML le\u00edr\u00e1sunk.</li> <li>\u00c9rt\u00e9kt\u00edpusokn\u00e1l (<code>struct</code>), mint amilyen a <code>Color</code> is, m\u00e1r az objektum p\u00e9ld\u00e1nyos\u00edt\u00e1sakor (\"konstruktor id\u0151ben\") kell megadni az \u00e9rt\u00e9ket, ez\u00e9rt itt nem lehet a propertyket k\u00fcl\u00f6n \u00e1ll\u00edtgatni, musz\u00e1j t\u00edpuskonverterre b\u00edzni magunkat.</li> </ul> </li> <li> <p>Property CONTENT syntax. Annak \u00e9rdek\u00e9ben, hogy jobban meg\u00e9rts\u00fck, n\u00e9zz\u00fck meg, milyen h\u00e1romf\u00e9le m\u00f3don tudjuk be\u00e1ll\u00edtani egy gomb <code>Content</code> tulajdons\u00e1g\u00e1t valamilyen sz\u00f6vegre (ezt laboron nem kell megtenni, el\u00e9g, ha jelen \u00fatmutat\u00f3ban n\u00e9zz\u00fck k\u00f6z\u00f6sen):</p> <ul> <li>Property attribute syntax (m\u00e1r haszn\u00e1ltuk):     <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre></li> <li>\u00c1ll\u00edtsuk be az el\u0151z\u0151 pontban tanult property element syntax alapj\u00e1n:    <pre><code>&lt;Button&gt;\n    &lt;Button.Content&gt;\n    Hello WinUI App!\n    &lt;/Button.Content&gt;\n&lt;/Button&gt;\n</code></pre></li> <li>Minden vez\u00e9rl\u0151 meghat\u00e1rozhat mag\u00e1r\u00f3l egy kit\u00fcntetett \"Content\" tulajdons\u00e1got, melyn\u00e9l nem kell ki\u00edrni a nyit\u00f3 \u00e9s csuk\u00f3 tag-eket. Vagyis az el\u0151z\u0151 p\u00e9ld\u00e1ban alkalmazott <code>&lt;Button.Content&gt;</code> nyit\u00f3 \u00e9s z\u00e1r\u00f3 tag-ek enn\u00e9l az egy tulajdons\u00e1gn\u00e1l elhagyhat\u00f3k:    <pre><code>&lt;Button&gt;\n    Hello WinUI App!\n&lt;/Button&gt;\n</code></pre>    Vagy egy sorba \u00edrva:    <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre>    Ez ismer\u0151s, l\u00e1ttuk a bevezet\u0151 p\u00e9ld\u00e1nkban: ez az \u00fan. Property CONTENT syntax alap\u00fa tulajdons\u00e1gmegad\u00e1s. Az elnevez\u00e9s is sugallja, hogy ezt az egy tulajdons\u00e1got a vez\u00e9rl\u0151 \"tartalmi\" r\u00e9sz\u00e9ben, contentj\u00e9ben is megadhatjuk. Nem minden vez\u00e9rl\u0151 eset\u00e9ben <code>Content</code> ezen kit\u00fcntetett tulajdons\u00e1g neve:  <code>StackPanel</code>-n\u00e9l \u00e9s <code>Grid</code>-n\u00e9l <code>Children</code> a neve. Eml\u00e9kezz\u00fcnk vissza, ill. n\u00e9zz\u00fck meg a k\u00f3dot: ezeket m\u00e1r haszn\u00e1ltuk is:  ugyanakkor, nem \u00edrtuk ki a <code>StackPanel.Children</code>, ill. <code>Grid.Children</code> XML elemeket a <code>StackPanel</code>, ill. <code>Grid</code> belsej\u00e9nek megad\u00e1sakor (de megtehett\u00fck volna!)</li> </ul> </li> </ol> <p>\u00cdrjuk vissza a <code>Grid</code> h\u00e1tter\u00e9t valami szimpatikusan egyszer\u0171re, vagy t\u00f6r\u00f6lj\u00fck ki a h\u00e1tt\u00e9rsz\u00edn megad\u00e1s\u00e1t.</p>"},{"location":"labor/3-felhasznaloi-felulet/#esemenykezeles","title":"Esem\u00e9nykezel\u00e9s","text":"<p>A XAML applik\u00e1ci\u00f3k esem\u00e9nyvez\u00e9relt alkalmaz\u00e1sok. Minden felhaszn\u00e1l\u00f3i interakci\u00f3r\u00f3l esem\u00e9nyek seg\u00edts\u00e9g\u00e9vel \u00e9rtes\u00fcl\u00fcnk, ezek hat\u00e1s\u00e1ra friss\u00edthetj\u00fck a fel\u00fcletet.</p> <p>Most kezelj\u00fck le a gombon t\u00f6rt\u00e9n\u0151 kattint\u00e1st.</p> <p>El\u0151k\u00e9sz\u00edt\u0151 l\u00e9p\u00e9sk\u00e9nt adjunk nevet a <code>TextBlock</code> vez\u00e9rl\u0151nknek, hogy a code-behind f\u00e1jlb\u00f3l hivatkozni tudjunk majd r\u00e1 a k\u00e9s\u0151bbiekben:</p> <pre><code>&lt;TextBlock x:Name=\"recordTextBlock\" Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n</code></pre> <p>Az <code>x:Name</code> a XAML parsernek sz\u00f3l, \u00e9s ezen a n\u00e9ven fog l\u00e9trehozni egy tagv\u00e1ltoz\u00f3t az oszt\u00e1lyunkban, mely az adott vez\u00e9rl\u0151 referenci\u00e1j\u00e1t tartalmazza.  Gondoljuk \u00e1t: mivel tagv\u00e1ltoz\u00f3 lesz, a code-behind f\u00e1jlban el tudjuk \u00e9rni, hiszen az egy \"partial r\u00e9sze\" ugyanazon oszt\u00e1lynak!</p> <p>Elnevezett vez\u00e9rl\u0151k</p> <p>Ne adjunk nevet azoknak a vez\u00e9rl\u0151knek, melyekre nem akarunk hivatkozni. (Szoktassuk magunkat arra, hogy csak arra hivatkozunk k\u00f6zvetlen\u00fcl, amire nagyon musz\u00e1j. Ebben az adatk\u00f6t\u00e9s is seg\u00edt majd.)</p> <p>Kiv\u00e9tel: Ha nagyon bonyolult a vez\u00e9rl\u0151hierarchi\u00e1nk, seg\u00edthetnek a nevek a k\u00f3d \u00e1tl\u00e1that\u00f3bb\u00e1 t\u00e9tel\u00e9ben, mivel a Live Visual Tree ablakban megjelennek, illetve a gener\u00e1lt esem\u00e9nykezel\u0151-nevek is ehhez igazodnak.</p> <p>Kezelj\u00fck le a gomb <code>Click</code> esem\u00e9ny\u00e9t, majd pr\u00f3b\u00e1ljuk ki a k\u00f3dot.</p> MainWindow.xaml-be<pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> MainWindow.xaml.cs-be<pre><code>private void RecordButton_Click(object sender, RoutedEventArgs e)\n{\n    recordTextBlock.Text = \"Recording...\";\n}\n</code></pre> <p>Esem\u00e9nykezel\u0151k l\u00e9trehoz\u00e1sa</p> <p>Ha az esem\u00e9nykezel\u0151kn\u00e9l nem a New Event Handler-t v\u00e1lasztjuk, hanem be\u00edrjuk k\u00e9zzel a k\u00edv\u00e1nt nevet, majd F12-t nyomunk, vagy a jobb gomb / Go to Definition-t v\u00e1lasztjuk, az esem\u00e9nykezel\u0151 legener\u00e1l\u00e1sra ker\u00fcl a code-behind f\u00e1jlban.</p> <p>Az esem\u00e9nykezel\u0151nek k\u00e9t param\u00e9tere van: a k\u00fcld\u0151 objektum (<code>object sender</code>) \u00e9s az esem\u00e9ny param\u00e9tereit/k\u00f6r\u00fclm\u00e9nyeit tartalmaz\u00f3 param\u00e9ter (<code>EventArgs e</code>). N\u00e9zz\u00fck ezeket r\u00e9szletesebben:</p> <ul> <li><code>object sender</code>: Az esem\u00e9ny kiv\u00e1lt\u00f3ja. Eset\u00fcnkben ez maga a gomb, <code>Button</code>-ra kasztolva haszn\u00e1lhatn\u00e1nk is. Ritk\u00e1n haszn\u00e1ljuk ezt a param\u00e9tert.</li> <li>A m\u00e1sodik param\u00e9ter mindig <code>EventArgs</code> t\u00edpus\u00fa, vagy annak lesz\u00e1rmazottja (ez az esem\u00e9ny t\u00edpus\u00e1t\u00f3l f\u00fcgg), melyben az esem\u00e9ny param\u00e9tereit kapjuk meg. A <code>Click</code> esem\u00e9ny eset\u00e9ben ez <code>RoutedEventArgs</code> t\u00edpus\u00fa.</li> </ul> <p>Esem\u00e9nyargumentumok</p> <p>N\u00e9h\u00e1ny esem\u00e9nyargumentum t\u00edpus:</p> <ul> <li><code>RoutedEventArgs</code>: pl. a <code>Click</code> esem\u00e9ny est\u00e9ben haszn\u00e1land\u00f3, ahogy a p\u00e9ld\u00e1nkban is volt. Az <code>OriginalSource</code> tulajdons\u00e1gban megkapjuk azt a vez\u00e9rl\u0151t, melyn\u00e9l el\u0151sz\u00f6r kiv\u00e1lt\u00f3dott az esem\u00e9ny.<ul> <li>Megjegyz\u00e9s: a fenti esetben ez maga a gomb, de ha pl. egy eg\u00e9rlenyom\u00e1s esem\u00e9nyt (nem a <code>Click</code>, hanem <code>PointerPressed</code>) kezeln\u00e9nk pl. a <code>StackPanel</code>-en, akkor lehet, hogy az egyik gyerekelem\u00e9t kapn\u00e1nk meg, ha arra kattintottak.</li> </ul> </li> <li><code>KeyRoutedEventArgs</code>: pl. <code>KeyDown</code> (billenty\u0171 lenyom\u00e1sa) esem\u00e9ny eset\u00e9ben megkapjuk benne a lenyomott billenty\u0171t.</li> <li><code>PointerRoutedEventArgs</code>: pl. <code>PointerPressed</code> (eg\u00e9r/toll lenyom\u00e1sa) esem\u00e9ny eset\u00e9ben haszn\u00e1ljuk, rajta kereszt\u00fcl lek\u00e9rdezhet\u0151k - t\u00f6bbek k\u00f6z\u00f6tt - a kattint\u00e1s koordin\u00e1t\u00e1i.</li> </ul> <p>A XAML esem\u00e9nykezel\u0151k teljes eg\u00e9sz\u00e9ben a C# nyelv esem\u00e9nyeire \u00e9p\u00fclnek (<code>event</code> kulcssz\u00f3, l\u00e1sd el\u0151z\u0151 gyakorlat):</p> <p>Pl. a</p> <pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> <p>erre k\u00e9pz\u0151dik le:</p> <pre><code>Button b = new Button();\nb.Click += RecordButton_Click;\n</code></pre>"},{"location":"labor/3-felhasznaloi-felulet/#layout-elrendezes","title":"Layout, elrendez\u00e9s","text":"<p>A vez\u00e9rl\u0151k elrendez\u00e9s\u00e9t k\u00e9t dolog hat\u00e1rozza meg:</p> <ol> <li>Layout (panel) vez\u00e9rl\u0151k \u00e9s kapcsolhat\u00f3 tulajdons\u00e1gaik (attached property)</li> <li>Sz\u00fcl\u0151 vez\u00e9rl\u0151n bel\u00fcli \u00e1ltal\u00e1nos poz\u00edci\u00f3 tulajdons\u00e1gok (pl. marg\u00f3, igaz\u00edt\u00e1s f\u00fcgg\u0151legesen vagy v\u00edzszintesen)</li> </ol> <p>Be\u00e9p\u00edtett layout vez\u00e9rl\u0151k p\u00e9ld\u00e1ul:</p> <ul> <li><code>StackPanel</code>: elemek egym\u00e1s alatt vagy mellett</li> <li><code>Grid</code>: defini\u00e1lhatunk egy r\u00e1csot, melyhez igazodnak az elemek</li> <li><code>Canvas</code>: explicit poz\u00edcion\u00e1lhat\u00f3k az elemek az X \u00e9s Y koordin\u00e1t\u00e1juk megad\u00e1s\u00e1val</li> <li><code>RelativePanel</code>: elemek egym\u00e1shoz k\u00e9pesti viszony\u00e1t hat\u00e1rozhatjuk meg k\u00e9nyszerekkel</li> </ul> <p>A <code>Grid</code>-et fogjuk kipr\u00f3b\u00e1lni (\u00e1ltal\u00e1ban ezt haszn\u00e1ljuk az ablakunk/oldalunk alapelrendez\u00e9s\u00e9nek kialak\u00edt\u00e1s\u00e1ra). Egy olyan fel\u00fcletet k\u00e9sz\u00edt\u00fcnk el, melyen szem\u00e9lyeket lehet egy list\u00e1ba felvenni, nev\u00fck \u00e9s \u00e9letkoruk megad\u00e1s\u00e1val. A k\u00f6vetkez\u0151 elrendez\u00e9s kialak\u00edt\u00e1sa a v\u00e9gs\u0151 c\u00e9lunk:</p> <p></p> <p>P\u00e1r l\u00e9nyeges viselked\u00e9sbeli megk\u00f6t\u00e9s:</p> <ul> <li>Az ablak \u00e1tm\u00e9retez\u00e9sekor az \u0171rlap fix sz\u00e9less\u00e9g\u0171 legyen, \u00e9s maradjon k\u00f6z\u00e9pre igaz\u00edtva.</li> <li>Az Age sorban a + gombbal n\u00f6velhet\u0151, a - gombbal cs\u00f6kkenthet\u0151 az \u00e9letkor.</li> <li>Az Add gombbal a fent meghat\u00e1rozott adatokkal felveszi a szem\u00e9lyt az als\u00f3 list\u00e1ba (az \u00e1br\u00e1n az als\u00f3 list\u00e1ban k\u00e9t szem\u00e9ly adatai l\u00e1that\u00f3k).</li> </ul> <p>Defini\u00e1ljunk a gy\u00f6k\u00e9r <code>Grid</code>-en 4 sort \u00e9s 2 oszlopot. Az els\u0151 oszlop\u00e1ba ker\u00fcljenek a c\u00edmk\u00e9k, a m\u00e1sodik oszlopba pedig a beviteli mez\u0151k. A megl\u00e9v\u0151 gombunkat is rakjuk a 3. sorba, \u00e9s \u00edrjuk \u00e1t a tartalm\u00e1t Add-ra, a k\u00f6r helyett pedig vegy\u00fcnk fel egy <code>SymbolIcon</code>-t. A 4. sorban pedig list\u00e1t helyezz\u00fcnk el, ami 2 oszlopot is foglaljon el.</p> <pre><code>&lt;Grid x:Name=\"rootGrid\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbName\"/&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\" /&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\"/&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>A sor- \u00e9s oszlopdefin\u00edci\u00f3k eset\u00e9ben megadhatjuk, hogy az adott sor vegye fel a tartalm\u00e1nak a m\u00e9ret\u00e9t (<code>Auto</code>), vagy t\u00f6ltse ki a marad\u00e9k helyet (<code>*</code>), de ak\u00e1r fix sz\u00e9less\u00e9get is megadhatn\u00e1nk pixelben (<code>Width</code> tulajdons\u00e1g). Ha t\u00f6bb <code>*</code> is szerepel a defin\u00edci\u00f3kban, akkor azok ar\u00e1nyos\u00edthat\u00f3ak pl.: <code>*</code> \u00e9s <code>*</code> 1:1-es ar\u00e1nyt jelent, m\u00edg a <code>*</code> \u00e9s <code>3*</code> 1:3-at.</p> <p>A <code>Grid.Row</code>, <code>Grid.Column</code> \u00fagynevezett Attached Property-k (csatolt tulajdons\u00e1gok). Ez azt jelenti, hogy a vez\u00e9rl\u0151, melyn\u00e9l alkalmazzuk, nem rendelkezik ilyen tulajdons\u00e1ggal, \u00e9s ezt az inform\u00e1ci\u00f3t csak \u201ehozz\u00e1csatoljuk\u201d. Ez az inform\u00e1ci\u00f3 eset\u00fcnkben a <code>Grid</code>-nek lesz fontos, hogy el tudja helyezni a gyerekeit. A <code>Grid.Row</code> \u00e9s <code>Grid.Column</code> alap\u00e9rtelmezett \u00e9rt\u00e9ke a 0, teh\u00e1t ezt ki sem k\u00e9ne \u00edrnunk.</p> <p>Imperat\u00edv UI le\u00edr\u00e1s</p> <p>M\u00e1s UI keretrendszerekben, ahol imperat\u00edv a fel\u00fclet \u00f6ssze\u00e1ll\u00edt\u00e1sa, ezt egyszer\u0171en megoldj\u00e1k f\u00fcggv\u00e9nyparam\u00e9terekkel \u2013 pl.: <code>myPanel.Add(new TextBox(), 0, 1)</code>.</p> <p>M\u00e9g magyar\u00e1zatra szorulhat a <code>ListView</code>-n\u00e1l megadott <code>Grid.ColumnSpan=\"2\"</code> csatolt tulajdons\u00e1g: a <code>ColumnSpan</code> \u00e9s <code>RowSpan</code> azt hat\u00e1rozz\u00e1k meg, h\u00e1ny oszlopon illetve soron \"\u00e1t\u00edvel\u0151en\" helyezkedjen el a vez\u00e9rl\u0151. A p\u00e9ld\u00e1nkban a <code>ListView</code> mindk\u00e9t oszlopot kit\u00f6lti.</p> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st (ha nem fordul a k\u00f3d, akkor t\u00f6r\u00f6lj\u00fck a code behind f\u00e1jlban a <code>RecordButton_Click</code> esem\u00e9nykezel\u0151t).</p> <p>Jelen \u00e1llapot\u00e1ban a <code>Grid</code> kit\u00f6lti a teljes teret v\u00edzszintesen \u00e9s f\u00fcgg\u0151legesen is. Mi ennek az oka? A vez\u00e9rl\u0151k elrendez\u00e9s\u00e9nek egyik alappill\u00e9re a <code>HorizontalAlignment</code> \u00e9s <code>VerticalAlignment</code>  tulajdons\u00e1guk. Ezek azt hat\u00e1rozz\u00e1k meg, hogy v\u00edzszintesen \u00e9s f\u00fcgg\u0151legesen hol helyezkedjen el az adott vez\u00e9rl\u0151 az \u0151t tartalmaz\u00f3 kont\u00e9nerben (vagyis a sz\u00fcl\u0151 vez\u00e9rl\u0151ben). A lehets\u00e9ges \u00e9rt\u00e9kek:</p> <ul> <li><code>VerticalAlignment</code>: <code>Top</code>, <code>Center</code>, <code>Bottom</code>, <code>Stretch</code> (fel\u00fclre, k\u00f6z\u00e9pre, alulra igaz\u00edtva, vagy t\u00e9r kit\u00f6lt\u00e9se f\u00fcgg\u0151legesen)</li> <li><code>HorizontalAlignment</code>: <code>Left</code>, <code>Center</code>, <code>Right</code>, <code>Stretch</code> (balra, k\u00f6z\u00e9pre, jobbra igaz\u00edtva, vagy t\u00e9r kit\u00f6lt\u00e9se v\u00edzszintesen)</li> </ul> <p>(Megjegyz\u00e9s: a Stretch eset\u00e9ben sz\u00fcks\u00e9ges, hogy ne legyen a <code>Height</code> ill. <code>Width</code> tujadons\u00e1g megadva a vez\u00e9rl\u0151re.)</p> <p>A <code>Grid</code>-\u00fcnknek nem adtunk meg <code>HorizontalAlignment</code> \u00e9s <code>VerticalAlignment</code> tulajdons\u00e1got, \u00edgy annak \u00e9rt\u00e9ke a Grid eset\u00e9ben alap\u00e9rtelmezett <code>Stretch</code>, emiatt a <code>Grid</code> mindk\u00e9t ir\u00e1nyban kit\u00f6lti a teret a sz\u00fcl\u0151 kont\u00e9ner\u00e9ben, vagyis az ablakban.</p> <p>A fel\u00fclet\u00fcnk m\u00e9g nem \u00fagy n\u00e9z ki, mint amit szeretn\u00e9nk, finom\u00edtsunk kicsit a kin\u00e9zet\u00e9n. Az eszk\u00f6zlend\u0151 v\u00e1ltoz\u00e1sok:</p> <ul> <li>Ne t\u00f6ltse ki az eg\u00e9sz k\u00e9perny\u0151t a t\u00e1bl\u00e1zat, hanem legyen v\u00edzszintesen k\u00f6z\u00e9pen<ul> <li><code>HorizontalAlignment=\"Center\"</code></li> </ul> </li> <li>Legyen 300px sz\u00e9les<ul> <li><code>Width=\"300\"</code></li> </ul> </li> <li>Legyen a sorok k\u00f6z\u00f6tt 5px, az oszlopok k\u00f6z\u00f6tt 10px a t\u00e1vols\u00e1g \u00e9s tartsunk 20px t\u00e1vols\u00e1got a kont\u00e9ner sz\u00e9l\u00e9t\u0151l<ul> <li><code>RowSpacing=\"5\" ColumnSpacing=\"10\" Margin=\"20\"</code></li> </ul> </li> <li>Igaz\u00edtsuk a c\u00edmk\u00e9ket (<code>TextBlock</code>) f\u00fcgg\u0151legesen k\u00f6z\u00e9pre<ul> <li><code>VerticalAlignment=\"Center\"</code></li> </ul> </li> <li>Igaz\u00edtsuk a gombot jobbra<ul> <li><code>HorizontalAlignment=\"Right\"</code></li> </ul> </li> <li>Tegy\u00fck beazonos\u00edthat\u00f3v\u00e1 a list\u00e1t<ul> <li><code>BorderThickness=\"1\"</code> \u00e9s <code>BorderBrush=\"DarkGray\"</code></li> </ul> </li> </ul> <pre><code>&lt;Grid x:Name=\"rootGrid\"\n      Width=\"300\"\n      HorizontalAlignment=\"Center\"\n      Margin=\"20\"\n      RowSpacing=\"5\"\n      ColumnSpacing=\"10\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbName\" /&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\" HorizontalAlignment=\"Right\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\"/&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\" /&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\"\n              Grid.Column=\"0\"\n              Grid.ColumnSpan=\"2\"\n              BorderThickness=\"1\"\n              BorderBrush=\"DarkGray\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>B\u0151v\u00edts\u00fck ki m\u00e9g k\u00e9t gombbal az \u0171rlapunkat (\u00b1 gombok az \u00e9letkorhoz, l\u00e1sd kor\u00e1bbi anim\u00e1lt k\u00e9perny\u0151k\u00e9p):</p> <ul> <li>\u2019-\u2019: a <code>TextBox</code> bal oldal\u00e1n</li> <li>\u2019+\u2019 a<code>TextBox</code> jobb oldal\u00e1n</li> </ul> <p>Ehhez vegy\u00fcnk fel a</p> <pre><code>&lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n</code></pre> <p>sor hely\u00e9re (azt kit\u00f6r\u00f6lve) egy 1 soros, 3 oszloppal rendelkez\u0151 <code>Grid</code>-et:</p> <pre><code>&lt;Grid Grid.Row=\"1\" Grid.Column=\"1\" ColumnSpacing=\"5\"&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"0\" Content=\"-\" /&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbAge\" /&gt;\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"2\" Content=\"+\" /&gt;\n&lt;/Grid&gt;\n</code></pre> <p>T\u00f6bb layout vez\u00e9rl\u0151 egym\u00e1sba \u00e1gyaz\u00e1sa</p> <p>Feltehetj\u00fck a k\u00e9rd\u00e9st, hogy mi\u00e9rt nem a k\u00fcls\u0151 <code>Grid</code>-ben vett\u00fcnk fel plusz oszlopokat \u00e9s sorokat (a <code>ColumnSpan</code> megfelel\u0151 alkalmaz\u00e1s\u00e1val a megl\u00e9v\u0151 vez\u00e9rl\u0151kre). Helyette egys\u00e9gbez\u00e1r\u00e1s elv\u00e9t k\u00f6vett\u00fck: az \u00fajonnan bevezetett vez\u00e9rl\u0151k alapvet\u0151en egybe tartoz\u00f3 elemek, \u00edgy \u00e1tl\u00e1that\u00f3bb megold\u00e1st kaptunk az\u00e1ltal, hogy k\u00fcl\u00f6n <code>Grid</code> vez\u00e9rl\u0151be tett\u00fck \u0151ket. A k\u00fcls\u0151 <code>Grid</code> b\u0151v\u00edt\u00e9se akkor lenne indokolt, ha sp\u00f3rolni akarn\u00e1nk a vez\u00e9rl\u0151k l\u00e9trehoz\u00e1s\u00e1val, teljes\u00edtm\u00e9nyokok miatt. Eset\u00fcnkben ez nem indokolt.</p> <p>K\u00e9szen is vagyunk az egyszer\u0171 \u0171rlapunk kin\u00e9zet\u00e9nek kialak\u00edt\u00e1s\u00e1val.</p>"},{"location":"labor/3-felhasznaloi-felulet/#adatkotes","title":"Adatk\u00f6t\u00e9s","text":""},{"location":"labor/3-felhasznaloi-felulet/#binding","title":"Binding","text":"<p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben azt oldjuk meg, hogy az el\u0151bb elk\u00e9sz\u00edtett kis \u0171rlapon egy szem\u00e9ly adatait lehessen megadni, m\u00f3dos\u00edtani. Ehhez m\u00e1r el\u0151 van k\u00e9sz\u00edtve egy <code>Person</code> oszt\u00e1ly a projekt <code>Models</code> mapp\u00e1j\u00e1ban, n\u00e9zz\u00fcnk ezt meg.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <p>Azt itt l\u00e9v\u0151 k\u00e9t tulajdons\u00e1got akarjuk a <code>TextBox</code> vez\u00e9rl\u0151kh\u00f6z k\u00f6tni, ehhez adatk\u00f6t\u00e9st fogunk alkalmazni. Az ablakunk code-behind f\u00e1jlj\u00e1ban vezess\u00fcnk be egy propertyt, mely egy <code>Person</code> objektumra hivatkozik, \u00e9s adjunk ennek kezd\u0151\u00e9rt\u00e9ket a konstruktorban:</p> <pre><code>public Person NewPerson { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n}\n</code></pre> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben a fenti <code>NewPerson</code> objektum</p> <ul> <li><code>Name</code> tulajdons\u00e1g\u00e1t k\u00f6ss\u00fck hozz\u00e1 a <code>tbName</code> <code>Textbox</code> <code>Text</code> tulajdons\u00e1g\u00e1hoz</li> <li><code>Age</code> tulajdons\u00e1g\u00e1t k\u00f6ss\u00fck hozz\u00e1 a <code>tbAge</code> <code>Textbox</code> <code>Text</code> tulajdons\u00e1g\u00e1hoz , m\u00e9gpedig adatk\u00f6t\u00e9ssel (data binding):</li> </ul> <p><pre><code>Text=\"{x:Bind NewPerson.Name}\"\nText=\"{x:Bind NewPerson.Age}\"\n</code></pre> (a <code>tbName</code> ill. <code>tbAge</code> <code>TextBox</code>-ok soraiba vegy\u00fck fel a fenti 1-1 tulajdons\u00e1g be\u00e1ll\u00edt\u00e1st)</p> <p>Fontos</p> <p>Az adatk\u00f6t\u00e9snek az a l\u00e9nyege, hogy nem k\u00e9zzel, a code-behind f\u00e1jlb\u00f3l \u00e1ll\u00edtgatjuk a fel\u00fcleten megjelen\u0151 vez\u00e9rl\u0151k tulajdons\u00e1gait (eset\u00fcnkben a sz\u00f6veg\u00e9t), hanem \u00f6sszerendelj\u00fck/ \u00f6sszek\u00f6tj\u00fck a tulajdons\u00e1gokat a platform adatk\u00f6t\u00e9s mechanizmus\u00e1val. \u00cdgy azt is el\u00e9rhetj\u00fck, hogyha az egyik tulajdons\u00e1g megv\u00e1ltozik, akkor a m\u00e1sik is automatikusan v\u00e1ltozzon meg!</p> <p>A <code>Text=\"{x:Bind}\"</code> szintaktika az \u00fagynevezett markup extension: ez speci\u00e1lis jelent\u00e9ssel rendelkezik a XAML feldolgoz\u00f3 sz\u00e1m\u00e1ra. Els\u0151sorban emiatt haszn\u00e1lunk XAML \u00e9s nem sima XML-t. Lehet\u0151s\u00e9g\u00fcnk van ak\u00e1r saj\u00e1t Markup Extension-t is k\u00e9sz\u00edteni, de ez nem tananyag.</p> <p>Futtassuk! L\u00e1that\u00f3, hogy az adatk\u00f6t\u00e9s miatt automatikusan beker\u00fclt a k\u00e9t <code>TextBox</code> <code>Text</code> tulajdons\u00e1g\u00e1ba a <code>NewPerson</code> objektum (mint adatforr\u00e1s) <code>Name</code> \u00e9s <code>Age</code> tulajdons\u00e1gaiban megadott n\u00e9v \u00e9s \u00e9letkor.</p>"},{"location":"labor/3-felhasznaloi-felulet/#valtozasertesites","title":"V\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9s","text":"<p>Implement\u00e1ljuk a \u00b1 gombok <code>Click</code> esem\u00e9nykezel\u0151it.</p> <pre><code>&lt;Button Grid.Row=\"1\" Grid.Column=\"0\" Content=\"-\" Click=\"DecreaseButton_Click\"/&gt;\n&lt;!-- ... --&gt;\n&lt;Button Grid.Row=\"1\" Grid.Column=\"2\" Content=\"+\" Click=\"IncreaseButton_Click\"/&gt;\n</code></pre> <pre><code>private void DecreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age--;\n}\n\nprivate void IncreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age++;\n}\n</code></pre> <p>A kor\u00e1bbi pontban bevezetett adatk\u00f6t\u00e9s miatt azt v\u00e1rn\u00e1nk, hogy ha a <code>NewPerson</code> adatforr\u00e1s <code>Age</code> tulajdons\u00e1g\u00e1t v\u00e1ltoztatjuk a fenti esem\u00e9nykezel\u0151kben, akkor a fel\u00fclet\u00fcnk\u00f6n a <code>tbAge</code> <code>Textbox</code> vez\u00e9rl\u0151nk ezt lek\u00f6veti. Pr\u00f3b\u00e1ljuk ki! Ez m\u00e9g egyel\u0151re nem m\u0171k\u00f6dik, ugyanis ehhez sz\u00fcks\u00e9g van m\u00e9g az <code>INotifyPropertyChanged</code> interf\u00e9sz megval\u00f3s\u00edt\u00e1s\u00e1ra is.</p> <ol> <li> <p>Implement\u00e1ljuk az <code>INotifyPropertyChanged</code> interf\u00e9szt a <code>Person</code> oszt\u00e1lyunkban. Ha adatk\u00f6t\u00fcnk ehhez az oszt\u00e1lyhoz, akkor a rendszer a <code>PropertyChanged</code> esem\u00e9nyre fog feliratkozni, ennek az esem\u00e9nynek a els\u00fct\u00e9s\u00e9vel tudjuk \u00e9rtes\u00edteni a bindingot, ha egy property megv\u00e1ltozott.</p> <pre><code>public class Person : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set\n        {\n            if (name != value)\n            {\n                name = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n            }\n        }\n    }\n\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set\n        {\n            if (age != value)\n            {\n                age = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Age)));\n            }\n        }\n    }\n}\n</code></pre> <p>Terjeng\u0151s a k\u00f3d?</p> <p>A k\u00e9s\u0151bbiekben ezt a logik\u00e1t ki is szervezhetn\u00e9nk egy \u0151soszt\u00e1lyba, de ez m\u00e1r az MVVM mint\u00e1t vezetn\u00e9 el\u0151, mely egy k\u00e9s\u0151bbi tematik\u00e1hoz kapcsol\u00f3dik. Teh\u00e1t ne ijedj\u00fcnk meg ett\u0151l a kiss\u00e9 cs\u00fany\u00e1cska k\u00f3dt\u00f3l.</p> </li> <li> <p>Az adatk\u00f6t\u00e9sen kapcsoljuk be a v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st a <code>Mode</code> <code>OneWay</code>-re t\u00f6rt\u00e9n\u0151 m\u00f3dos\u00edt\u00e1s\u00e1val, mivel az <code>x:Bind</code> alap\u00e9rtelmezett m\u00f3dja a <code>OneTime</code>, mely csak egyszeri adatk\u00f6t\u00e9st jelent.</p> <pre><code>Text=\"{x:Bind NewPerson.Age, Mode=OneWay}\"\n</code></pre> </li> </ol> <p>Pr\u00f3b\u00e1ljuk ki! Az esem\u00e9nykezel\u0151k v\u00e1ltoztatj\u00e1k az adatforr\u00e1st (<code>NewPerson</code>), ennek hat\u00e1s\u00e1ra most m\u00e1r v\u00e1ltozik a fel\u00fclet is a megfelel\u0151en el\u0151k\u00e9sz\u00edtett adatk\u00f6t\u00e9s miatt.</p>"},{"location":"labor/3-felhasznaloi-felulet/#ketiranyu-adatkotes","title":"K\u00e9tir\u00e1ny\u00fa adatk\u00f6t\u00e9s","text":"<p>Az <code>Age</code> mint\u00e1j\u00e1ra, a <code>Name</code> tulajdons\u00e1gra vonatkoz\u00f3 adatk\u00f6t\u00e9st is \u00e1ll\u00edtsuk egyir\u00e1ny\u00fara:</p> <pre><code>Text=\"{x:Bind NewPerson.Name, Mode=OneWay}\"\n</code></pre> <p>Ind\u00edtsuk el az alkalmaz\u00e1st, majd ezt k\u00f6vet\u0151en tegy\u00fcnk egy t\u00f6r\u00e9spontot a <code>Person</code> oszt\u00e1ly <code>Name</code> tulajdons\u00e1g\u00e1nak setter\u00e9be (<code>if (name != value)</code> sor) , \u00e9s pr\u00f3b\u00e1ljuk, hogy vissza ir\u00e1nyba is m\u0171k\u00f6dik-e az adatk\u00f6t\u00e9s: ha megv\u00e1ltoztatjuk az egyik <code>TextBox</code> \u00e9rt\u00e9k\u00e9t, megv\u00e1ltozik-e a <code>NewPerson</code> objektum <code>Name</code> tulajdons\u00e1ga? G\u00e9pelj\u00fcnk valamit a Name-hez tartoz\u00f3 sz\u00f6vegdobozba, majd kattintsunk \u00e1t egy m\u00e1sik mez\u0151be: ekkor a Textbox tartalma \"v\u00e9gleges\u00edt\u0151dik\", tartalma vissza kellene \u00edr\u00f3djon az adatforr\u00e1sba, de m\u00e9gsem t\u00f6rt\u00e9nik meg, nem fut r\u00e1 a k\u00f3d a t\u00f6r\u00e9spontunkra.</p> <p>Ez az\u00e9rt van \u00edgy, mert fentebb <code>OneWay</code> adatk\u00f6t\u00e9st haszn\u00e1ltunk, mely csak az adatforr\u00e1sb\u00f3l a fel\u00fcletre ir\u00e1ny\u00fa adatk\u00f6t\u00e9st jelent. Ha azt szeretn\u00e9nk, hogy az adatk\u00f6t\u00e9s a m\u00e1sik ir\u00e1nyba is m\u0171k\u00f6dj\u00f6n (vez\u00e9rl\u0151b\u0151l adatforr\u00e1sba), ahhoz  <code>TwoWay</code>-re kell \u00e1ll\u00edtsuk az adatk\u00f6t\u00e9s m\u00f3dj\u00e1t. Ezt k\u00e9tir\u00e1ny\u0171 adatk\u00f6t\u00e9snek nevezz\u00fck.</p> <pre><code>Text=\"{x:Bind Name, Mode=TwoWay}\"\nText=\"{x:Bind Age, Mode=TwoWay}\"\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki! \u00cdgy az adatk\u00f6t\u00e9s m\u00e1r mindk\u00e9t ir\u00e1nyba m\u0171k\u00f6dik:</p> <ul> <li>Ha a forr\u00e1stulajdons\u00e1g (pl. <code>NewPerson.Name</code>) v\u00e1ltozik, akkor a vez\u00e9rl\u0151 k\u00f6t\u00f6tt tulajdons\u00e1ga (pl. <code>TextBox.Text</code>) ezzel szinkronban marad.</li> <li>Ha a c\u00e9l (vez\u00e9rl\u0151) tulajdons\u00e1g v\u00e1ltozik (pl. <code>TextBox.Text</code>), akkor az forr\u00e1stulajdons\u00e1g (pl. <code>NewPerson.Name</code>) ezzel szinkronban marad.</li> </ul>"},{"location":"labor/3-felhasznaloi-felulet/#listak","title":"List\u00e1k","text":"<p>A k\u00f6vetkez\u0151kben a list\u00e1s adatk\u00f6t\u00e9s alkalmaz\u00e1s\u00e1t fogjuk gyakorolni. Vegy\u00fck fel a <code>Person</code>-\u00f6k list\u00e1j\u00e1t a n\u00e9zet\u00fcnk code-behind f\u00e1jlj\u00e1ba, a konstruktor elej\u00e9n pedig adjunk neki kezd\u0151\u00e9rt\u00e9ket.</p> <pre><code>public List&lt;Person&gt; People { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n\n    People = new List&lt;Person&gt;()\n    {\n      new Person() { Name = \"Peter Griffin\", Age = 40 },\n      new Person() { Name = \"Homer Simpson\", Age = 42 },\n    };\n}\n</code></pre> <p>Adatk\u00f6t\u00e9ssel \u00e1ll\u00edtsuk be a <code>ListView</code> vez\u00e9rl\u0151 <code>ItemsSource</code> tulajdons\u00e1g\u00e1n kereszt\u00fcl, milyen adatforr\u00e1sb\u00f3l dolgozzon.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"/&gt;\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p>L\u00e1tjuk, hogy megjelent k\u00e9t elem a list\u00e1ban. Persze nem az van ki\u00edrva, amit mi szeretn\u00e9nk, de ezen k\u00f6nnyen seg\u00edthet\u00fcnk. Alap\u00e9rtelmezetten ugyanis a <code>ListView</code> <code>ToString()</code>-et h\u00edv a listaelemeken, ami ha nem defini\u00e1ljuk fel\u00fcl, akkor az oszt\u00e1ly t\u00edpus\u00e1nak <code>FullName</code> tulajdons\u00e1ga (vagyis a t\u00edpus neve).</p> <p>\u00c1ll\u00edtsunk be a <code>ListView</code>-unk <code>ItemTemplate</code> tulajdons\u00e1g\u00e1t (a m\u00e1r j\u00f3l ismert property element syntax-szal), mely a listaelem megjelen\u00e9s\u00e9t adja meg egy sablon seg\u00edts\u00e9g\u00e9vel: eset\u00fcnkben legyen ez egycell\u00e1s <code>Grid</code>, ahol a <code>TextBlock</code>-ok a <code>Person</code> tulajdons\u00e1gait jelen\u00edtik meg, a nevet balra, az \u00e9letkort jobbra igaz\u00edtva.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"&gt;\n    &lt;ListView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Person\"&gt;\n            &lt;Grid&gt;\n                &lt;TextBlock Text=\"{x:Bind Name}\" /&gt;\n                &lt;TextBlock Text=\"{x:Bind Age}\" HorizontalAlignment=\"Right\" /&gt;\n            &lt;/Grid&gt;\n        &lt;/DataTemplate&gt;\n    &lt;/ListView.ItemTemplate&gt;\n&lt;/ListView&gt;\n</code></pre> <p>A <code>DataTemplate</code> egy olyan fel\u00fcletsablon, melyet a <code>ListView</code> (ha megadjuk az <code>ItemTemplate</code> tulajdons\u00e1g\u00e1nak) minden elem\u00e9re alkalmazni fog a megjelen\u00edt\u00e9s sor\u00e1n.</p> <p>Mivel az <code>x:Bind</code> ford\u00edt\u00e1s idej\u0171 adatk\u00f6t\u00e9s, ez\u00e9rt az adatok t\u00edpus\u00e1t is meg kell adnunk az adatsablonban az <code>x:DataType</code> attrib\u00fatummal. A fenti p\u00e9ld\u00e1ban a <code>model:Person</code>-t adtuk meg, vagyis azt szeretn\u00e9nk, hogy a <code>model</code> prefix a k\u00f3dunk <code>HelloXaml.Models</code> n\u00e9vter\u00e9re k\u00e9pz\u0151dj\u00f6n le (hiszen ebben van a <code>Person</code> oszt\u00e1ly). Ehhez a XAML f\u00e1jlunk elej\u00e9n a <code>Window</code> tag attrib\u00fatumaihoz fel kell vegy\u00fck a k\u00f6vetkez\u0151 n\u00e9vt\u00e9r deklar\u00e1ci\u00f3t is: <code>xmlns:model=\"using:HelloXaml.Models\"</code> (ezt k\u00f6vet\u0151en a <code>model</code> prefix haszn\u00e1lhat\u00f3 lesz). Ezt megtehetj\u00fck k\u00e9zzel, vagy a Visual Studio seg\u00edts\u00e9g\u00e9vel is: csak kattintsunk bele az al\u00e1h\u00fazott (hib\u00e1snak megjel\u00f6lt) <code>model:Person</code>sz\u00f6vegbe, majd kattintsunk a sor elej\u00e9n megjelen\u0151 l\u00e1mp\u00e1csk\u00e1ra (vagy <code>Ctrl</code> + <code>.</code> billenty\u0171kombin\u00e1ci\u00f3), \u00e9s v\u00e1lasszuk ki a megjelen\u0151 \"Add xmlns using:HelloXaml.Models\" elemet.</p> <p>Pr\u00f3b\u00e1ljuk ki! Most m\u00e1r j\u00f3l jelennek meg a list\u00e1ban az elemek.</p> <p>Az Add gomb hat\u00e1s\u00e1ra rakjuk bele a list\u00e1ba az \u0171rlapon tal\u00e1lhat\u00f3 szem\u00e9ly adataival egy \u00faj <code>Person</code> m\u00e1solat\u00e1t, majd t\u00f6r\u00f6lj\u00fck ki az \u0171rlap adatait a <code>NewPerson</code> objektumunkban.</p> <p>Ehhez vezess\u00fcnk be egy <code>Click</code> esem\u00e9nykezel\u0151t az Add gombunkra:</p> <pre><code>&lt;Button ... Click=\"AddButton_Click\"&gt;\n</code></pre> <pre><code>private void AddButton_Click(object sender, RoutedEventArgs e)\n{\n    People.Add(new Person()\n    { \n        Name = NewPerson.Name,\n        Age = NewPerson.Age,\n    });\n\n    NewPerson.Name = string.Empty;\n    NewPerson.Age = 0;\n}\n</code></pre> <p>Nem jelenik meg a list\u00e1ban az \u00faj elem, mert a <code>ListView</code> nem \u00e9rtes\u00fcl arr\u00f3l, hogy \u00faj elem ker\u00fclt a list\u00e1ba. Ezt k\u00f6nnyen orvosolhatjuk: a <code>List&lt;Persont&gt;</code>-t cser\u00e9lj\u00fck le <code>ObservableCollection&lt;Person&gt;</code>-re:</p> <pre><code>public ObservableCollection&lt;Person&gt; People { get; set; }\n</code></pre> <p><code>ObservableCollection&lt;T&gt;</code></p> <p>Fontos, hogy itt nem maga a <code>People</code> tulajdons\u00e1g \u00e9rt\u00e9ke v\u00e1ltozott, hanem a <code>List&lt;Person&gt;</code> objektum tartalma, ez\u00e9rt nem az <code>INotifyPropertyChanged</code> interf\u00e9sz a megold\u00e1s, hanem az <code>INotifyCollectionChanged</code> interf\u00e9sz, melyet az <code>ObservableCollection</code> implement\u00e1l.</p> <p>Teh\u00e1t m\u00e1r k\u00e9t v\u00e1ltoz\u00e1skezel\u00e9st t\u00e1mogat\u00f3 interf\u00e9szt ismer\u00fcnk \u00e9s haszn\u00e1lunk, melyek az adatk\u00f6t\u00e9st t\u00e1mogatj\u00e1k: <code>INotifyPropertyChanged</code> \u00e9s <code>INotifyCollectionChanged</code>.</p>"},{"location":"labor/3-felhasznaloi-felulet/#kitekintes-klasszikus-binding","title":"Kitekint\u00e9s: Klasszikus Binding","text":"<p>Az adatk\u00f6t\u00e9snek a klasszikus form\u00e1j\u00e1t a <code>Binding</code> markup extension jelenti.</p> <p>A legfontosabb k\u00fcl\u00f6nbs\u00e9gek az <code>x:Bind</code>-hoz k\u00e9pest:</p> <ul> <li>A <code>Binding</code> alap\u00e9rtelmezett m\u00f3dja a <code>OneWay</code> \u00e9s nem a <code>OneTime</code>: teh\u00e1t figyeli a v\u00e1ltoz\u00e1sokat alap\u00e9rtelmezetten, m\u00edg az <code>x:Bind</code>-n\u00e9l ezt explicit meg kell adni.</li> <li>A <code>Binding</code> alap\u00e9rtelmezetten a <code>DataContext</code>-b\u0151l dolgozik, de lehet\u0151s\u00e9g van \u00e1ll\u00edtani az adatk\u00f6t\u00e9s forr\u00e1s\u00e1t. M\u00edg az <code>x:Bind</code> alap\u00e9rtelmezetten a n\u00e9zet\u00fcnk oszt\u00e1ly\u00e1b\u00f3l (xaml.cs) k\u00f6t.</li> <li>A <code>Binding</code> fut\u00e1sid\u0151ben dolgozik reflection seg\u00edts\u00e9g\u00e9vel, \u00edgy egyr\u00e9szt nem kapunk ford\u00edt\u00e1s idej\u0171 hib\u00e1kat, ha valamit el\u00edrtunk volna, m\u00e1sr\u00e9szt pedig sok adatk\u00f6t\u00e9s (1000-es nagys\u00e1grend) jelent\u0151sen lass\u00edthatja az alkalmaz\u00e1sunkat.</li> <li>Az <code>x:Bind</code> ford\u00edt\u00e1s idej\u0171, \u00edgy a ford\u00edt\u00f3 ellen\u0151rzi, hogy a megadott tulajdons\u00e1gok l\u00e9teznek-e. Adatsablonokban nyilatkozni kell a <code>DataTemplate</code> megad\u00e1sa sor\u00e1n, hogy az milyen adatokon fog dolgozni az <code>x:DataType</code> attrib\u00fatummal.</li> <li>Az <code>x:Bind</code> eset\u00e9ben lehet\u0151s\u00e9g van met\u00f3dusokat is k\u00f6tni, m\u00edg a <code>Binding</code>-n\u00e9l csak konvertereket lehet haszn\u00e1lni. F\u00fcggv\u00e9nyek k\u00f6t\u00e9se eset\u00e9n a v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9s a param\u00e9terek v\u00e1ltoz\u00e1s\u00e1ra is m\u0171k\u00f6dik.</li> </ul> <p>Aj\u00e1nl\u00e1s</p> <p>\u00d6k\u00f6lszab\u00e1lyk\u00e9nt elmondhat\u00f3, hogy pr\u00f3b\u00e1ljunk prefer\u00e1ltan <code>x:Bind</code>-ot haszn\u00e1lni, mert gyorsabb, \u00e9s ford\u00edt\u00e1s idej\u0171 hib\u00e1kat kapunk, viszont ha valami\u00e9rt probl\u00e9m\u00e1ba \u00fctk\u00f6zn\u00e9nk az <code>x:Bind</code>-dal, akkor <code>Binding</code>-ra \u00e9rdemes \u00e1tt\u00e9rni.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/","title":"3. The design of the user interface","text":""},{"location":"labor/3-felhasznaloi-felulet/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>The goal of this laboratory is to familiarize ourselves with the basics of thick-client application development using the declarative XAML markup technology. The foundational knowledge learned here applies to all XAML dialects (WinUI, WPF, UWP, Xamarin.Forms, MAUI) or can be applied in a very similar way. However, in today\u2019s session, we will specifically use XAML through the WinAppSDK / WinUI 3 framework.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools required for the lab:</p> <ul> <li>Windows 10 or Windows 11 operating system (Linux and macOS are not suitable)</li> </ul> <p>A description of the necessary development environment can be found here.</p> <p>Development environment for WinUI3</p> <p>Compared to previous labs, additional components need to be installed. The above page mentions that the \".NET desktop development\" Visual Studio Workload needs to be installed. Additionally, at the bottom of the same page, there is a \"WinUI support\" section where all specified steps must be completed!</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#solution","title":"Solution","text":"Download the completed solution <p> It is essential to work following the instructor during the lab, it is forbidden (and pointless) to download the final solution in advance. However, during subsequent independent practice, it can be useful to review the final solution, so we make it available.</p> <p>The solution is available on GitHub under the <code>megoldas</code> branch. The easiest way to download it is by cloning the <code>megoldas</code> branch using the <code>git clone</code> command in the terminal:</p> <p><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo -b megoldas</code></p> <p>For this, command-line Git must be installed on your computer. More information can be found here.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#starter-project","title":"Starter project","text":"<p>In the first task, we will set up the environment where we will explore the XAML language and the WinUI framework. We could generate the initial project using Visual Studio (WinUI 3 project, Blank App, Packaged (WinUI 3 in Desktop) type), but for the sake of efficiency, we will use a pre-prepared project.</p> <p>You can clone the project to your local machine by running the following command:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo.git\n</code></pre> <p>Open <code>HelloXaml.sln</code>.</p> <p>Let's review the files included in the project:</p> <ul> <li>App<ul> <li>Contains two files: <code>App.xaml</code> and <code>App.xaml.cs</code> (we will clarify later why there are two files)</li> <li>Application entry point: <code>OnLaunched</code> overridden method in <code>App.xaml.cs</code></li> <li>In this case, we initialize the application's only window, <code>MainWindow</code>, here</li> </ul> </li> <li>MainWindow<ul> <li>The <code>.xaml</code> and <code>.xaml.cs</code> files for the main window of our application.</li> </ul> </li> </ul> Additional solution elements <p>The initial Visual Studio solution also contains the following elements:</p> <ul> <li>Dependencies<ul> <li>Frameworks<ul> <li><code>Microsoft.AspNetCore.App</code>: .NET SDK metapackage (includes references to core Microsoft .NET and SDK components)</li> <li>Windows-specific .NET SDK</li> </ul> </li> <li>Packages<ul> <li>Windows SDK Build Tools</li> <li>WindowsAppSDK</li> </ul> </li> </ul> </li> <li>Assets<ul> <li>Application logos</li> </ul> </li> <li>app.manifest, Package.appxmanifest<ul> <li>XML files containing application metadata, where we can specify logos and, similar to Android, request permissions for security-critical system resources.</li> </ul> </li> </ul> <p>Run the application! </p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#introduction-to-xaml","title":"Introduction to XAML","text":"<p>We will define the user interface using an XML-based markup language called XAML.</p> <p>Graphical designer interface</p> <p>In some XAML dialects (e.g. WPF), a graphical designer tool is available for UI design. However, it often generates less efficient XAML code. Moreover, Visual Studio now supports Hot Reload for XAML, so there is no need to stop the application while editing XAML, and changes can be seen immediately in the running application. Because of this, WinUI does not provide a designer tool in Visual Studio. However, there are limitations, 'more significant' changes may require restarting the application.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#xaml-language-basics","title":"Xaml language basics","text":"<p>The XAML language:</p> <ul> <li>An object instantiation language</li> <li>Standard XML</li> <li>XML elements/tags instantiate objects, whose classes are standard .NET classes</li> <li>XML attributes set properties (dependency properties)</li> <li>Declarative</li> </ul> <p>Let's examine the XAML generated by the project template (<code>MainWindow.xaml</code>). We can see that every control is represented as an XML element/tag in XAML. Each control's properties are set using attributes on its tag, e.g., <code>HorizontalAlignment</code>, which aligns the control within its container (in this case, the window). Controls can contain other controls, forming a hierarchical tree structure.</p> <p>Let's analyze <code>MainWindow.xaml</code> in more detail:</p> <ul> <li>Root tag namespaces: Define what tags and attributes can be used in the XML.<ul> <li>Default namespace: Contains XAML elements/controls (e.g., <code>Button</code>, <code>TextBox</code>).</li> <li><code>x</code> namespace: The namespace for the XAML parser (e.g., <code>x:Class</code>, <code>x:Name</code>).</li> <li>Other custom namespaces can be referenced.</li> </ul> </li> <li><code>Window</code> root tag:<ul> <li>A .NET class is generated based on our window/page, inheriting from the <code>Window</code> class.</li> <li>The name of the derived class is defined by the <code>x:Class</code> attribute. For example, <code>x:Class=\"HelloXaml.MainWindow\"</code> means the class will be <code>MainWindow</code> inside the <code>HelloXaml</code> namespace.</li> <li>This is a partial class, its \"other half\" is located in the so-called code-behind file (<code>MainWindow.xaml.cs</code>). See the next point.</li> </ul> </li> <li>Code-behind file (<code>MainWindow.xaml.cs</code>):<ul> <li>The other \"half\" of the partial class: check that the class name and namespace match what is defined in the <code>.xaml</code> file (partial class!).</li> <li>Event handlers and helper functions are placed here (among others).</li> <li><code>this.InitializeComponent();</code>: it must always be called in the constructor. It reads the XAML at runtime, instantiates, and initializes the window/page content (i.e., the controls defined in the XAML file with their specified properties).</li> </ul> </li> </ul> <p>Let's delete the contents of the <code>Window</code> and remove the event handler (<code>myButton_Click</code> function) from the code-behind file. Now, we will manually write XAML to define the user interface. Let's add a <code>Grid</code> inside the <code>Window</code>, which will later help us create a table-based layout:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Window\n    x:Class=\"HelloXaml.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:HelloXaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid&gt;\n\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>Run the application (e.g., by pressing F5). The <code>Grid</code> now fills the entire window, and its color matches the window's background, making it indistinguishable visually.</p> <p>During the next tasks, keep the application running so that we can immediately see the changes we make to the UI.</p> <p>Hot Reload limitations</p> <p>Keep in mind the limitations of Hot Reload: if a change does not appear on the running application's UI, restart the application!</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#object-instances-and-their-properties","title":"Object instances and their properties","text":"<p>Now, let's see how to instantiate objects and set their properties using XAML.</p> <p>Add a <code>Button</code> inside the <code>Grid</code>. The <code>Content</code> property allows us to specify the button's text, or more precisely, its content.</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>At runtime, this declaration creates a <code>Button</code> object at the specified location and sets its <code>Content</code> property to \"Hello WinUI App!\". We could achieve the same result in the code-behind file using C#, but it would result in less readable code:</p> <pre><code>// For example, adding this at the end of the constructor:\n\nButton b = new Button();\nb.Content = \"Hello WinUI App!\";\nrootGrid.Children.Add(b); \n// To make the above line work, the Grid in the XAML file must have the attribute \n// x:Name=\"rootGrid\" so that it can be accessed in the code-behind file.\n</code></pre> <p> This example clearly illustrates that XAML is fundamentally an object instantiation language and supports setting object properties.</p> <p>The <code>Content</code> property is special, it can be specified not only as an XML attribute but also within a tag (XML element).</p> <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre> <p>Moreover! We can place not only text on the button but also any other element. For example, let's add a red circle inside it. The circle is 10 pixels wide, 10 pixels high, and its color (<code>Fill</code>) is red.</p> <pre><code>&lt;Button&gt;\n    &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n&lt;/Button&gt;\n</code></pre> <p>In earlier .NET UI technologies (e.g., Windows Forms), this would not have been so easy to implement.</p> <p>Now, let's place the Record label next to the red circle (so that the button has meaning). The button can only have one child, so we need to place the circle and the text (<code>TextBlock</code>) inside a layout control (such as a <code>StackPanel</code>). Let's also add a left margin to the <code>TextBlock</code> so that it does not touch the circle.</p> <pre><code>&lt;Button&gt;\n    &lt;StackPanel Orientation=\"Horizontal\"&gt;\n        &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n        &lt;TextBlock Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n    &lt;/StackPanel&gt;\n&lt;/Button&gt;\n</code></pre> <p>The <code>StackPanel</code> is a simple layout panel used for arranging controls: it arranges the contained controls side by side when the <code>Orientation</code> is set to <code>Horizontal</code>, or one below the other when the <code>Orientation</code> is set to <code>Vertical</code>. In our example, it simply places the two controls next to each other.</p> <p>The result is as follows:</p> <p></p> <p>XAML vector graphic controls</p> <p>It's important to note that most XAML controls are vector-based. This button will appear sharp (without any \"pixelation\") regardless of the DPI or zoom level.</p> <p>There are three ways to specify properties for controls instantiated in XAML (which we have already partially used):</p> <ul> <li>Property ATTRIBUTE syntax</li> <li>Property ELEMENT syntax</li> <li>Property CONTENT syntax</li> </ul> <p>Let's now take a closer look at these options:</p> <ol> <li> <p>Property ATTRIBUTE syntax. We have already used this, specifically in our first example:</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>The name comes from the fact that the property is specified in the form of an XML attribute. Since XML attributes can only be strings, it can only be used to access simple number/string/etc. values in string form, or member variables and event handlers defined in a code-behind file. However, using type converters, it is possible to specify \"complex\" objects as well. Although we won't go into much detail here, the built-in type converters are often used, almost \"instinctively.\" Example:</p> <p>Let's add a background color to the <code>Grid</code>:</p> <pre><code>&lt;Grid Background=\"Azure\"&gt;\n</code></pre> <p>Or, we can also specify it in hexadecimal format:</p> <pre><code>&lt;Grid Background=\"#FFF0FFFF\"&gt;\n</code></pre> <p>The margin (<code>Margin</code>) is also a complex value, and the associated type converter expects the values for the four sides (left, top, right, bottom) separated by commas (or spaces). We have already used this for the <code>TextBlock</code> with the <code>Record</code> label. Note: A single number can also be used for the margin, which will apply the same value to all four sides.</p> </li> <li> <p>Property ELEMENT syntax. This allows us to set a property to a complex object that is instantiated/parameterized without using type converters. Let's look at an example.</p> <ul> <li>In the previous example, when setting the <code>Background</code> property to <code>Azure</code>, it actually creates a <code>SolidColorBrush</code> and sets its color to light blue. This can be done without using a type converter as follows:</li> </ul> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush Color=\"Azure\" /&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p>This sets the <code>Background</code> property of the <code>Grid</code> to the specified <code>SolidColorBrush</code>. This is known as \"property element syntax\" for setting a property.</p> <ul> <li>The name comes from the fact that the property is set in the form of an XML element (rather than an XML attribute).</li> <li> Here, the <code>&lt;Grid.Background&gt;</code> element does not create an object instance but rather sets the value of the specified property (<code>Background</code>) to an instance of a given object (in this case, a <code>SolidColorBrush</code>). This can be identified by the dot notation in the XML element name.</li> <li>This is a more verbose way of setting properties, but it offers full flexibility.</li> </ul> <p>Now, let's replace the <code>SolidColorBrush</code> with a gradient color <code>Brush</code> (<code>LinearGradientBrush</code>):</p> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;LinearGradientBrush&gt;\n            &lt;LinearGradientBrush.GradientStops&gt;\n                &lt;GradientStop Color=\"Black\" Offset=\"0\" /&gt;\n                &lt;GradientStop Color=\"White\" Offset=\"1\" /&gt;\n            &lt;/LinearGradientBrush.GradientStops&gt;\n        &lt;/LinearGradientBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p>A <code>LinearGradientBrush</code> doesn't have a type converter, so we could only specify it using the element syntax.</p> <p>The question is, how can we set both a <code>SolidColorBrush</code> and a <code>LinearGradientBrush</code> for the <code>Grid</code> control's <code>Background</code> property? The answer is simple, polymorphism makes this possible:</p> <ul> <li>Both <code>SolidColorBrush</code> and <code>LinearGradientBrush</code> are subclasses of the built-in <code>Brush</code> class.</li> <li>The <code>Background</code> property is of type <code>Brush</code>, so polymorphism allows any subclass of <code>Brush</code> to be used.</li> </ul> Note <ul> <li>In the examples above, when specifying the <code>Color</code> - e.g. <code>Color=\"Azure\"</code> - the word <code>Azure</code> is converted by the type converter into a blue <code>Color</code> instance. Here\u2019s how the previous <code>SolidColorBrush</code> example would look fully expanded:</li> </ul> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush&gt;\n            &lt;SolidColorBrush.Color&gt;\n                &lt;Color&gt;#FFF0FFFF&lt;/Color&gt;\n            &lt;/SolidColorBrush.Color&gt;\n        &lt;/SolidColorBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <ul> <li>Where supported, it\u2019s worth taking advantage of type converters and use attribute syntax to keep the XAML concise.</li> <li>For value types (<code>struct</code>), such as <code>Color</code>, the value must be set at object instantiation (\"constructor time\"). Therefore, the properties cannot be set separately, and we must rely on a type converter.</li> </ul> </li> <li> <p>Property CONTENT syntax. To better understand this, let\u2019s look at the three ways we can set a <code>Content</code> property of a button to some text (you don\u2019t need to do this in the lab; it's enough to look at it together in this guide):</p> <ul> <li>Property attribute syntax (we\u2019ve already used it): <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre></li> <li>Set it using the property element syntax learned in the previous section: <pre><code>&lt;Button&gt;\n    &lt;Button.Content&gt;\n        Hello WinUI App!\n    &lt;/Button.Content&gt;\n&lt;/Button&gt;\n</code></pre></li> <li>Every control can define a dedicated \"Content\" property, which allows us to skip the opening and closing tags. So, the <code>&lt;Button.Content&gt;</code> opening and closing tags in the previous example can be omitted for this one property:  <pre><code>&lt;Button&gt;\n    Hello WinUI App!\n&lt;/Button&gt;\n</code></pre>  Or written on one line:  <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre>  This is familiar \u2014 we saw it in our introductory example: this is the Property CONTENT syntax for setting properties. The name itself suggests that we can specify this one property directly in the control's \"content\" section. Not every control uses <code>Content</code> as this dedicated property name: for example, <code>StackPanel</code> and <code>Grid</code> use <code>Children</code>. Let\u2019s recall and check the code: we\u2019ve already used them, but we didn\u2019t write out the <code>StackPanel.Children</code> or <code>Grid.Children</code> XML elements when specifying the contents of <code>StackPanel</code> or <code>Grid</code> (though we could have!).</li> </ul> </li> </ol> <p>Now, let's either simplify the background of the <code>Grid</code> to something simple or remove the background color specification entirely.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#event-handling","title":"Event handling","text":"<p>XAML applications are event-driven applications. We get notified of every user interaction through events, and based on these, we can update the interface.</p> <p>Now let's handle the button click event.</p> <p>As a first step, let's give the <code>TextBlock</code> control a name so that we can reference it from the code-behind file later:</p> <pre><code>&lt;TextBlock x:Name=\"recordTextBlock\" Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n</code></pre> <p>The <code>x:Name</code> \"speaks\" to the XAML parser, it will create a member variable in our class with this name, which holds the reference to the corresponding control.  Let's think about it: since it will be a member variable, we can access it from the code-behind file because it is a \"partial part\" of the same class!</p> <p>Named controls</p> <p>Don't give names to controls that you don't intend to reference. (We should get used to only referencing those that are absolutely necessary. Data binding will also help with this.)</p> <p>Exception: If the control hierarchy is very complex, names can help make the code clearer, as they will appear in the Live Visual Tree window, and the generated event handler names will align with them.</p> <p>Let's handle the button <code>Click</code> event and then try out the code.</p> MainWindow.xaml<pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> MainWindow.xaml.cs<pre><code>private void RecordButton_Click(object sender, RoutedEventArgs e)\n{\n    recordTextBlock.Text = \"Recording...\";\n}\n</code></pre> <p>Creating event handlers</p> <p>If we don't select New Event Handler for event handlers, but instead manually type the desired name and then press F12 or right-click / Go to Definition, the event handler will be generated in the code-behind file.</p> <p>An event handler has two parameters: the sender object (<code>object sender</code>) and the parameter containing the event details/circumstances (<code>EventArgs e</code>). Let's take a closer look at these:</p> <ul> <li><code>object sender</code>: The object that triggered the event. In our case, it is the button itself, and we could cast it to <code>Button</code>. We rarely use this parameter.</li> <li>The second parameter is always of type <code>EventArgs</code> or one of its descendants (depending on the event type), which contains the event's details. In the case of the <code>Click</code> event, this is of type <code>RoutedEventArgs</code>.</li> </ul> <p>Event arguments</p> <p>Some types of event arguments:</p> <ul> <li><code>RoutedEventArgs</code>: Used for events like the <code>Click</code> event, as shown in our example. The <code>OriginalSource</code> property gives us the control where the event was first triggered.<ul> <li>Note: In the above case, it is the button itself, but for example, if we were handling a mouse-down event (not the <code>Click</code> but <code>PointerPressed</code>) on a <code>StackPanel</code>, we might get one of its child elements if it was clicked.</li> </ul> </li> <li><code>KeyRoutedEventArgs</code>: Used for events like <code>KeyDown</code> (key press), and it provides the key that was pressed.</li> <li><code>PointerRoutedEventArgs</code>: Used for events like <code>PointerPressed</code> (mouse/stylus press), through which we can query, among other things, the click coordinates.</li> </ul> <p>XAML event handlers are entirely built on C# events (<code>event</code> keyword, see previous practice):</p> <p>For example:</p> <pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> <p>is mapped to:</p> <pre><code>Button b = new Button();\nb.Click += RecordButton_Click;\n</code></pre>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#layout-arrangement","title":"Layout, arrangement","text":"<p>The arrangement of controls is determined by two factors:</p> <ol> <li>Layout (panel) controls and their attached properties</li> <li>General positioning properties within the parent control (e.g., margin, vertical or horizontal alignment)</li> </ol> <p>Built-in layout controls include:</p> <ul> <li><code>StackPanel</code>: arranges elements vertically or horizontally.</li> <li><code>Grid</code>: allows defining a grid structure to align elements accordingly.</li> <li><code>Canvas</code>: enables explicit positioning of elements by specifying X and Y coordinates.</li> <li><code>RelativePanel</code>: defines the relationship between elements with constraints.</li> </ul> <p>We will try out the <code>Grid</code> control (as it is typically used to structure the main layout of a window or page). We will create an interface where users can add people to a list by specifying their name and age. The final layout should look like this:</p> <p></p> <p>Key behavioral constraints:</p> <ul> <li>When resizing the window, the form should have a fixed width and remain centered.</li> <li>In the Age row, the \"+\" button should increase the age, while the \"-\" button should decrease it.</li> <li>Clicking the Add button should add the specified person to the list below (in the image, two people have already been added to the list).</li> </ul> <p>We define 4 rows and 2 columns in the root <code>Grid</code>. The first column contains labels, while the second column holds input fields. We also move our existing button to the third row, change its text to Add, and replace the circle with a <code>SymbolIcon</code>. The fourth row will contain a list that spans two columns.</p> <pre><code>&lt;Grid x:Name=\"rootGrid\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbName\"/&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\" /&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\"/&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Row and column definitions can specify that a row/column should take the size of its content (<code>Auto</code>), fill the remaining space (<code>*</code>), or have a fixed size in pixels (using the <code>Width</code> property). If multiple <code>*</code> values are used in definitions, they can be proportioned. For example, <code>*</code> and <code>*</code> represent a 1:1 ratio, while <code>*</code> and <code>3*</code> represent a 1:3 ratio.</p> <p>The <code>Grid.Row</code> and <code>Grid.Column</code> properties are known as attached properties. This means that the control where they are applied does not have these properties, and the information is simply \"attached\" to it. In this case, this information is essential for the <code>Grid</code> to position its child elements correctly. The default value of <code>Grid.Row</code> and <code>Grid.Column</code> is <code>0</code>, meaning that explicitly specifying them is not necessary.</p> <p>Imperative UI description</p> <p>In other UI frameworks where the UI is constructed imperatively, this is often handled with function parameters, such as <code>myPanel.Add(new TextBox(), 0, 1)</code>.</p> <p>Another property requiring explanation is <code>Grid.ColumnSpan=\"2\"</code> in the <code>ListView</code> definition. The <code>ColumnSpan</code> and <code>RowSpan</code> properties determine how many columns or rows a control spans. In our example, the <code>ListView</code> spans across both columns.</p> <p>Run the application (if the code does not compile, remove the <code>RecordButton_Click</code> event handler from the code-behind file).</p> <p>At this stage, the <code>Grid</code> stretches to fill the entire space both horizontally and vertically. Why is this happening? One of the key pillars of control arrangement is the <code>HorizontalAlignment</code> and <code>VerticalAlignment</code> properties. These determine where a given control is positioned within its parent container (or parent control) horizontally and vertically. Possible values:</p> <ul> <li><code>VerticalAlignment</code>: <code>Top</code>, <code>Center</code>, <code>Bottom</code>, <code>Stretch</code> (aligns at the top, center, bottom, or stretches vertically).</li> <li><code>HorizontalAlignment</code>: <code>Left</code>, <code>Center</code>, <code>Right</code>, <code>Stretch</code> (aligns to the left, center, right, or stretches horizontally).</li> </ul> <p>(Note: For <code>Stretch</code> to work, the control must not have explicit <code>Height</code> and <code>Width</code> values.)</p> <p>Since we did not set <code>HorizontalAlignment</code> or <code>VerticalAlignment</code> for our <code>Grid</code>, so their value is the default <code>Stretch</code> (in case of <code>Grid</code>), causing our <code>Grid</code> to fill the entire available space in both directions within the parent container, which is the window.</p> <p>Our interface does not yet look as intended, so let\u2019s refine its appearance with the following changes:</p> <ul> <li>The table should not fill the entire screen width but be centered horizontally:<ul> <li><code>HorizontalAlignment=\"Center\"</code></li> </ul> </li> <li>Set a fixed width of 300px:<ul> <li><code>Width=\"300\"</code></li> </ul> </li> <li>Make the distance between the rows 5px, between the columns 10px and keep 20px distance from the edge of the container:<ul> <li><code>RowSpacing=\"5\" ColumnSpacing=\"10\" Margin=\"20\"</code></li> </ul> </li> <li>Align labels (<code>TextBlock</code>) vertically centered:<ul> <li><code>VerticalAlignment=\"Center\"</code></li> </ul> </li> <li>Align the button to the right:<ul> <li><code>HorizontalAlignment=\"Right\"</code></li> </ul> </li> <li>Make the list visually distinct:<ul> <li><code>BorderThickness=\"1\"</code> and <code>BorderBrush=\"DarkGray\"</code></li> </ul> </li> </ul> <pre><code>&lt;Grid x:Name=\"rootGrid\"\n      Width=\"300\"\n      HorizontalAlignment=\"Center\"\n      Margin=\"20\"\n      RowSpacing=\"5\"\n      ColumnSpacing=\"10\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbName\" /&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\" HorizontalAlignment=\"Right\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\"/&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\" /&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\"\n              Grid.Column=\"0\"\n              Grid.ColumnSpan=\"2\"\n              BorderThickness=\"1\"\n              BorderBrush=\"DarkGray\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Let's extend our form with two more buttons (\u00b1 buttons for age, see the previous animated screenshot):</p> <ul> <li><code>-</code>: on the left side of the <code>TextBox</code></li> <li><code>+</code>: on the right side of the <code>TextBox</code></li> </ul> <p>For this, let's replace the following line:</p> <pre><code>&lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n</code></pre> <p>with a <code>Grid</code> that has 1 row and 3 columns:</p> <pre><code>&lt;Grid Grid.Row=\"1\" Grid.Column=\"1\" ColumnSpacing=\"5\"&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"0\" Content=\"-\" /&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbAge\" /&gt;\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"2\" Content=\"+\" /&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Nesting layout controls</p> <p>We might ask why we didn\u2019t add extra columns and rows in the outer <code>Grid</code> (by properly using <code>ColumnSpan</code> on the existing controls). Instead, we followed the principle of unit encapsulation: the newly introduced controls are fundamentally related elements, so we achieved a more transparent solution by placing them in a separate <code>Grid</code> control. Expanding the outer <code>Grid</code> would be justified if we wanted to save on creating controls, for performance reasons. In our case, this is not necessary.</p> <p>We are now done with designing the layout of our simple form.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#data-binding","title":"Data binding","text":""},{"location":"labor/3-felhasznaloi-felulet/index_eng/#binding","title":"Binding","text":"<p>In the next step, we will solve the problem of entering and modifying a person's data on the form we just created. For this, a <code>Person</code> class is already prepared in the project's <code>Models</code> folder, let's take a look at it.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <p>We want to bind the two properties here to the <code>TextBox</code> controls, for which we will use data binding. In the code-behind file of our window, let's introduce a property that references a <code>Person</code> object and set its initial value in the constructor:</p> <pre><code>public Person NewPerson { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n}\n</code></pre> <p>In the next step, bind (using data binding) the following properties of the <code>NewPerson</code> object:</p> <ul> <li>Bind the <code>Name</code> property to the <code>Text</code> property of the <code>tbName</code> <code>TextBox</code></li> <li>Bind the <code>Age</code> property to the <code>Text</code> property of the <code>tbAge</code> <code>TextBox</code></li> </ul> <pre><code>Text=\"{x:Bind NewPerson.Name}\"\nText=\"{x:Bind NewPerson.Age}\"\n</code></pre> <p>(Add the above property settings in the rows of <code>tbName</code> and <code>tbAge</code> <code>TextBox</code> controls.)</p> <p>Important</p> <p>The essence of data binding is that we do not manually set the properties (in this case, the text) of controls appearing on the UI from the code-behind file. Instead, we link the properties using the platform's data binding mechanism. This way, when one property changes, the other changes automatically as well!</p> <p>The <code>Text=\"{x:Bind}\"</code> syntax is a so-called markup extension: it has a special meaning for the XAML processor. This is why we use XAML instead of regular XML. It is even possible to create our own Markup Extensions, but that is beyond the scope of this lesson.</p> <p>Let's run it! As a result of data binding, the <code>Text</code> properties of the two <code>TextBox</code> controls automatically contain the name and age values given in the <code>Name</code> and <code>Age</code> properties of the <code>NewPerson</code> object (used as a data source).</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#change-notification","title":"Change notification","text":"<p>Let's implement the <code>Click</code> event handlers for the \u00b1 buttons.</p> <pre><code>&lt;Button Grid.Row=\"1\" Grid.Column=\"0\" Content=\"-\" Click=\"DecreaseButton_Click\"/&gt;\n&lt;!-- ... --&gt;\n&lt;Button Grid.Row=\"1\" Grid.Column=\"2\" Content=\"+\" Click=\"IncreaseButton_Click\"/&gt;\n</code></pre> <pre><code>private void DecreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age--;\n}\n\nprivate void IncreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age++;\n}\n</code></pre> <p>Due to the data binding introduced earlier, we would expect that if we change the <code>Age</code> property of the <code>NewPerson</code> data source in the above event handlers, the <code>tbAge</code> <code>TextBox</code> control in the UI should reflect this change. Let's try it! This doesn't work yet because the <code>INotifyPropertyChanged</code> interface needs to be implemented as well.</p> <ol> <li> <p>Implement the <code>INotifyPropertyChanged</code> interface in the <code>Person</code> class. When binding to this class, the system will subscribe to the <code>PropertyChanged</code> event. By triggering this event, we can notify the binding mechanism that a property has changed.</p> <pre><code>public class Person : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set\n        {\n            if (name != value)\n            {\n                name = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n            }\n        }\n    }\n\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set\n        {\n            if (age != value)\n            {\n                age = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Age)));\n            }\n        }\n    }\n}\n</code></pre> <p>Is the code lengthy?</p> <p>In the future, we could move this logic to a base class, but that would introduce the MVVM pattern, which belongs to a later topic. So don't be alarmed by this slightly messy code.</p> </li> <li> <p>In the data binding, enable change notification by modifying the <code>Mode</code> to <code>OneWay</code>, since the default mode for <code>x:Bind</code> is <code>OneTime</code>, which means a one-time data binding.</p> <pre><code>Text=\"{x:Bind NewPerson.Age, Mode=OneWay}\"\n</code></pre> </li> </ol> <p>Let's try it! The event handlers modify the data source (<code>NewPerson</code>), and now, as a result, the UI changes as well, thanks to the properly set up data binding.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#two-way-data-binding","title":"Two-way data binding","text":"<p>As with <code>Age</code>, set the data binding for the <code>Name</code> property to one-way as well:</p> <pre><code>Text=\"{x:Bind NewPerson.Name, Mode=OneWay}\"\n</code></pre> <p>Start the application, then set a breakpoint in the setter of the <code>Name</code> property in the <code>Person</code> class (<code>if (name != value)</code> line), and let's check if the data binding works in the reverse direction: if we change the value in the <code>TextBox</code> field, does the <code>NewPerson</code> object's <code>Name</code> property change as well? Type something into the <code>Name</code> field, then click on another field: at this point, the content of the <code>TextBox</code> should be \"finalized\", and it should be written back into the data source. However, this is not happening, and the code doesn't hit our breakpoint.</p> <p>This happens because earlier we used <code>OneWay</code> data binding, which only means data binding from the data source to the UI. If we want the data binding to work in the reverse direction as well (from control to data source), we need to set the binding mode to <code>TwoWay</code>. This is called two-way data binding.</p> <pre><code>Text=\"{x:Bind Name, Mode=TwoWay}\"\nText=\"{x:Bind Age, Mode=TwoWay}\"\n</code></pre> <p>Try it out! Now the data binding works in both directions:</p> <ul> <li>If the source property (e.g., <code>NewPerson.Name</code>) changes, the bound control property (e.g., <code>TextBox.Text</code>) stays in sync with it.</li> <li>If the target (control) property changes (e.g., <code>TextBox.Text</code>), the source property (e.g., <code>NewPerson.Name</code>) stays in sync with it.</li> </ul>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#lists","title":"Lists","text":"<p>Next, we will practice the use of list data binding. Let's add a list of <code>Person</code> objects to the code-behind file of the view, and assign it an initial value in the constructor.</p> <pre><code>public List&lt;Person&gt; People { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n\n    People = new List&lt;Person&gt;()\n    {\n      new Person() { Name = \"Peter Griffin\", Age = 40 },\n      new Person() { Name = \"Homer Simpson\", Age = 42 },\n    };\n}\n</code></pre> <p>Let's set the <code>ItemsSource</code> property of the <code>ListView</code> control via data binding to specify the data source it should work with.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"/&gt;\n</code></pre> <p>Let's try it out!</p> <p>We see that two items have appeared in the list. Of course, it's not displaying what we want, but this can be easily fixed. By default, the <code>ListView</code> calls <code>ToString()</code> on the list items, which, if not overridden, shows the <code>FullName</code> property (i.e., the type name) of the class type .</p> <p>Let's set the <code>ItemTemplate</code> property of our <code>ListView</code> (using the familiar property element syntax), which defines the appearance of the list item through a template. In our case, this will be a single-cell <code>Grid</code>, where the <code>TextBlock</code>s display the properties of <code>Person</code> , with the name left-aligned and the age right-aligned.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"&gt;\n    &lt;ListView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Person\"&gt;\n            &lt;Grid&gt;\n                &lt;TextBlock Text=\"{x:Bind Name}\" /&gt;\n                &lt;TextBlock Text=\"{x:Bind Age}\" HorizontalAlignment=\"Right\" /&gt;\n            &lt;/Grid&gt;\n        &lt;/DataTemplate&gt;\n    &lt;/ListView.ItemTemplate&gt;\n&lt;/ListView&gt;\n</code></pre> <p>A <code>DataTemplate</code> is a layout template that the <code>ListView</code> will apply to every item for display when we set it in the <code>ItemTemplate</code> property.</p> <p>Since <code>x:Bind</code> is a compile-time data binding, we also need to specify the data type in the data template using the <code>x:DataType</code> attribute. In the above example, we specified <code>model:Person</code>, meaning we want the <code>model</code> prefix to be mapped to the <code>HelloXaml.Models</code> namespace in our code (since it contains the <code>Person</code> class). To do this, we must include the following namespace declaration in the attributes of the <code>Window</code> tag at the beginning of our XAML file: <code>xmlns:model=\"using:HelloXaml.Models\"</code> (after this, the <code>model</code> prefix will be usable). We can do this manually or with Visual Studio's help: just click on the underlined (marked as erroneous) <code>model:Person</code> text, then click on the lightbulb that appears at the beginning of the line (or press <code>Ctrl</code> + <code>.</code>), and select the \"Add xmlns using:HelloXaml.Models\" option that appears.</p> <p>Let's try it out! Now the items are correctly displayed in the list.</p> <p>When the Add button is clicked, let's add a new <code>Person</code> object to the list with the data from the form, then clear the form data in our <code>NewPerson</code> object.</p> <p>To do this, we will introduce a <code>Click</code> event handler for the Add button:</p> <pre><code>&lt;Button ... Click=\"AddButton_Click\"&gt;\n</code></pre> <pre><code>private void AddButton_Click(object sender, RoutedEventArgs e)\n{\n    People.Add(new Person()\n    { \n        Name = NewPerson.Name,\n        Age = NewPerson.Age,\n    });\n\n    NewPerson.Name = string.Empty;\n    NewPerson.Age = 0;\n}\n</code></pre> <p>The new item is not appearing in the list because the <code>ListView</code> is not notified that a new item has been added to the list. This can be easily fixed: we can replace the <code>List&lt;Person&gt;</code> with an <code>ObservableCollection&lt;Person&gt;</code>:</p> <pre><code>public ObservableCollection&lt;Person&gt; People { get; set; }\n</code></pre> <p><code>ObservableCollection&lt;T&gt;</code></p> <p>It is important to note that here the value of the <code>People</code> property hasn't changed, but rather the content of the <code>List&lt;Person&gt;</code> object has been altered, which is why <code>INotifyPropertyChanged</code> is not the solution, but rather the <code>INotifyCollectionChanged</code> interface, which is implemented by <code>ObservableCollection</code>.</p> <p>So, we are now familiar with and using two interfaces that support change notification using data binding: <code>INotifyPropertyChanged</code> and <code>INotifyCollectionChanged</code>.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_eng/#outlook-classic-binding","title":"Outlook: Classic Binding","text":"<p>The classic form of data binding is represented by the <code>Binding</code> markup extension.</p> <p>The main differences compared to <code>x:Bind</code> are:</p> <ul> <li>The default mode of <code>Binding</code> is <code>OneWay</code>, not <code>OneTime</code>: It automatically observes changes, whereas with <code>x:Bind</code> this needs to be explicitly set.</li> <li><code>Binding</code> by default works with the <code>DataContext</code>, but you can change the data binding source. Whereas <code>x:Bind</code> binds to the class of the view (xaml.cs) by default.</li> <li><code>Binding</code> works at runtime using reflection, so on one hand, it doesn't give us compile-time errors if something is misspelled, but on the other hand, a large number of bindings (order of 1000) can significantly slow down our application.</li> <li><code>x:Bind</code> is compile-time, so the compiler checks whether the specified properties exist. In data templates, we need to declare which data the template will work with by using the <code>x:DataType</code> attribute.</li> <li>In <code>x:Bind</code>, it's possible to bind methods, whereas <code>Binding</code> can only use converters. When binding functions, the change notification works with changes in the parameters as well.</li> </ul> <p>Recommendation</p> <p>As a rule of thumb, it is recommended to prefer using <code>x:Bind</code> because it is faster, and it provides compile-time errors. However, if you encounter issues with <code>x:Bind</code>, it\u2019s worth switching to <code>Binding</code>.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/","title":"3. Entwurf der Benutzeroberfl\u00e4che","text":""},{"location":"labor/3-felhasznaloi-felulet/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>Das Ziel der \u00dcbung ist, die Grundlagen der Entwicklung von Thick-Client-Anwendungen unter Verwendung der deklarativen XAML-Oberfl\u00e4chebeschreibungstechnologie zu erlernen. Die hier gelernten Grundlagen gelten f\u00fcr alle XAML-Dialekte (WinUI, WPF, UWP, Xamarin.Forms, MAUI) oder k\u00f6nnen auf sehr \u00e4hnliche Weise angewendet werden, aber wir werden XAML in der heutigen \u00dcbung speziell \u00fcber das WinAppSDK / WinUI 3-Framework verwenden.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung des Labors ben\u00f6tigten Werkzeuge:</p> <ul> <li>Betriebssystem Windows 10 oder Windows 11 (Linux und macOS nicht geeignet)</li> <li>Visual Studio 2022</li> <li> <p>Windows Desktop Entwicklung Workload</p> <p></p> </li> </ul>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#losung","title":"L\u00f6sung","text":"Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist auf GitHub im <code>megoldas</code>-Zweig verf\u00fcgbar. Der einfachste Weg, es herunterzuladen, ist, mit dem <code>git clone</code>-Befehl von der Kommandozeile aus zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo -b megoldas</code></p> <p>Sie m\u00fcssen Git auf Ihrem Rechner installiert haben, weitere Informationen hier.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#ursprungliches-projekt","title":"Urspr\u00fcngliches Projekt","text":"<p>In der ersten Aufgabe werden wir die Umgebung einrichten, in der wir die Funktionalit\u00e4t der XAML-Sprache und des WinUI-Frameworks untersuchen werden. Das anf\u00e4ngliche Projekt k\u00f6nnte mit Visual Studio erstellt werden (WinUI 3 Projekt, Blank App, Packaged (WinUI 3 in Desktop) type), aber um den Ablauf der \u00dcbung zu vereinfachen, werden wir das vorgefertigte Projekt verwenden.</p> <p>Wir k\u00f6nnen das Projekt auf unseren Rechner klonen, mit dem folgenden Befehl:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-xaml-kiindulo.git\n</code></pre> <p>\u00d6ffnen wir <code>HelloXaml.sln</code>.</p> <p>Schauen wir uns an, welche Dateien in dem Projekt enthalten sind:</p> <ul> <li>App<ul> <li>Zwei Dateien <code>App.xaml</code> und <code>App.xaml.cs</code>(sp\u00e4ter zu kl\u00e4rende zwei Dateien geh\u00f6ren dazu)</li> <li>Eintrittspunkt in die Anwendung: <code>OnLaunched</code> \u00fcberschriebene Method in <code>App.xaml.cs</code></li> <li>In unserem Fall initialisieren wir das einzige Fenster der Anwendung hier <code>MainWindow</code></li> </ul> </li> <li>MainWindow<ul> <li>Zu dem Hauptfenster unserer Anwendung geh\u00f6rende .xaml und .xaml.cs Dateien.</li> </ul> </li> </ul> Zus\u00e4tzliche L\u00f6sungselemente <p>Die urspr\u00fcngliche VS-L\u00f6sung enth\u00e4lt auch die folgenden Elemente:</p> <ul> <li>Dependencies<ul> <li>Frameworks<ul> <li><code>Microsoft.AspNetCore.App</code>: .NET SDK-Metapaket (verweist auf Microsoft .NET und SDK-Basispakete)</li> <li>Windows-spezifisches .NET SDK</li> </ul> </li> <li>Packages<ul> <li>Windows SDK Build Tools</li> <li>WindowsAppSDK</li> </ul> </li> </ul> </li> <li>Assets<ul> <li>Anwendungslogos</li> </ul> </li> <li>app.manifest, Package.appxmanifest<ul> <li>Eine XML-Datei mit den Metadaten der Anwendung, in der wir, unter anderem, Logos angeben oder, wie bei Android, den Zugriff auf sicherheitskritische Systemressourcen anfordern k\u00f6nnen.</li> </ul> </li> </ul> <p>Starten wir die Anwendung!</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#xaml-einfuhrung","title":"XAML-Einf\u00fchrung","text":"<p>Die Schnittstelle wird in einer XML-basierten Beschreibungssprache, XAML (ausgesprochen: zem\u00f6l), beschrieben.</p> <p>Grafische Designeroberfl\u00e4che</p> <p>Bei einigen XAML-Dialekten (z.B.: WPF) steht auch ein grafisches Designer-Tool f\u00fcr die Gestaltung der Oberfl\u00e4che zur Verf\u00fcgung, das jedoch in der Regel eine weniger effiziente XAML-Beschreibung erzeugt. Dar\u00fcber hinaus unterst\u00fctzt Visual Studio bereits Hot Reload f\u00fcr XAML, so dass die Anwendung w\u00e4hrend der Bearbeitung der XAML nicht angehalten werden muss und die \u00c4nderungen sofort in der laufenden Anwendung sichtbar sind. Daher gibt es f\u00fcr WinUI keine Designer-Unterst\u00fctzung mehr in Visual Studio. Die Erfahrung hat gezeigt, dass es Grenzen gibt, wobei \"gr\u00f6\u00dfere\" \u00c4nderungen einen Neustart der Anwendung erfordern.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#grundlagen-der-xaml-sprache","title":"Grundlagen der XAML-Sprache","text":"<p>Die XAML-Sprache:</p> <ul> <li>Sprache f\u00fcr Objektinstanziierung</li> <li>Standard-XML</li> <li>XML-Elemente/Tags: instanziieren Objekte, deren Klassen Standard-.NET-Klassen sind</li> <li>XML-Attribute: Eigenschaften (dependency properties) werden festgelegt</li> <li>Deklarativ</li> </ul> <p>Schauen wir uns die von der Projektvorlage generierte XAML (<code>MainWindow.xaml</code>) an. Wir k\u00f6nnen sehen, dass f\u00fcr jedes Steuerelement in der XAML ein XML-Element/Tag erstellt wurde. Und die Eigenschaften der Steuerelementen werden auf die Tags der Steuerelementen gesetzt. Z.B. <code>HorizontalAlignment</code>: Ausrichtung innerhalb eines Containers (in unserem Fall Fenster). Steuerelemente k\u00f6nnen andere Steuerelemente enthalten, wodurch ein Baum von Steuerelementen entsteht.</p> <p>Schauen wir uns <code>MainWindow.xaml</code>genauer an:</p> <ul> <li>Namensr\u00e4ume auf dem Root-Tag: definieren, welche Tags und Attribute in XML verwendet werden k\u00f6nnen<ul> <li>Standardnamensraum: Namensraum der XAML-Elemente/Steuerelemente (z. B. <code>Button</code>, <code>TextBox</code> usw.)</li> <li><code>x</code> Namensraum: XAML-Parser-Namensraum (z. B.: <code>x:Class</code>, <code>x:Name</code>)</li> <li>Andere beliebige Namespaces k\u00f6nnen referenziert werden</li> </ul> </li> <li><code>Window</code> Wurzelelement:<ul> <li>Auf der Grundlage unseres Fensters/unserer Seite erstellen wir eine .NET-Klasse, die von der Klasse <code>Window</code> abgeleitet ist.</li> <li>Der Name unserer abgeleiteten Klasse wird durch das Attribut <code>x:Class</code> definiert: Auf der Grundlage von <code>x:Class=\"HelloXaml.MainWindow\"</code> wird eine Klasse namens <code>MainWindow</code> im Namensraum <code>HelloXaml</code> erstellt.</li> <li>Dies ist eine Teilklasse, die \"andere H\u00e4lfte\" der Klasse befindet sich in der Code-Behind-Datei (<code>MainWindow.xaml.cs</code>) f\u00fcr das Fenster/die Seite. Siehe n\u00e4chster Punkt.</li> </ul> </li> <li>Code-Behind-Datei (<code>MainWindow.xaml.cs</code>):<ul> <li>Die andere \"H\u00e4lfte\" unserer partiellen Klasse: \u00dcberpr\u00fcfen wir, ob der Name und der Namensraum der Klasse hier derselbe ist wie in der .xaml-Datei (partielle Klasse!).</li> <li>Hier werden u.a. Ereignishandler und Hilfsfunktionen untergebracht.</li> <li><code>this.InitializeComponent();</code> muss immer im Konstruktor aufgerufen werden, er liest die XAML zur Laufzeit ein, er initialisiert den Inhalt des Fensters/der Seite (d.h. die in der XAML-Datei angegebenen Controls mit den dort definierten Eigenschaften).</li> </ul> </li> </ul> <p>L\u00f6schen wir den Inhalt von <code>Window</code> und den Ereignishandler aus der Code-Behind-Datei (Funktion<code>myButton_Click</code> ). Jetzt werden wir XAML manuell schreiben, um die Oberfl\u00e4che0 zu erstellen. F\u00fcgen wir ein <code>Grid</code>zu <code>Window</code>hinzu, mit dem wir sp\u00e4ter ein Tabellenlayout erstellen k\u00f6nnen:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Window\n    x:Class=\"HelloXaml.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:HelloXaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid&gt;\n\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>F\u00fchren wir die Anwendung aus (z. B. mit F5 ). Die <code>Grid</code> f\u00fcllt das gesamte Fenster aus, ihre Farbe ist dieselbe wie die Hintergrundfarbe des Fensters, so dass man sie mit dem Auge nicht mehr unterscheiden kann.</p> <p>In den folgenden Aufgaben lassen wir die Anwendung laufen, damit wir die \u00c4nderungen, die wir an der Schnittstelle vorgenommen haben, sofort sehen k\u00f6nnen.</p> <p>Hot Reload Limitations</p> <p>Beachten wir die Einschr\u00e4nkungen von Hot Reload: Wenn eine \u00c4nderung nicht in der laufenden Anwendung erscheinen soll, m\u00fcssen wir die Anwendung neu starten!</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#objektinstanzen-und-ihre-eigenschaften","title":"Objektinstanzen und ihre Eigenschaften","text":"<p>Sehen wir uns an, wie wir Objekte auf der Grundlage von XAML instanziieren und die Eigenschaften dieser Objekte festlegen k\u00f6nnen.</p> <p>F\u00fcgen wir <code>Button</code>innerhalb der <code>Grid</code> hinzu. Die Eigenschaft <code>Content</code> wird verwendet, um den Text des Knopfs, genauer gesagt seinen Inhalt, anzugeben.</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>Dadurch wird zur Laufzeit ein Objekt <code>Button</code> an der Stelle erzeugt, an der es deklariert ist, und die Eigenschaft <code>Content</code> auf \"Hello WinUI App!\" gesetzt. Dies h\u00e4tte in C# in der Code-Behind-Datei wie folgt geschehen k\u00f6nnen (was jedoch zu weniger lesbarem Code f\u00fchren w\u00fcrde):</p> <pre><code>// z.B. am Ende des Konstruktors geschrieben:\n\nButton b = new Button();\nb.Content = \"Hello WinUI App!\";\nrootGrid.Children.Add(b); \n// F\u00fcr die vorherige Zeile sollte das Attribut x:Name=\"rootGrid\" des Grids in der XAML-Datei angegeben\n// werden, um das Grid mit dem Namen rootGrid aus dem Code-Behind-Datai zu erreichen.\n</code></pre> <p> Dieses Beispiel verdeutlicht sehr gut, dass XAML im Grunde eine Objektinstanziirungs-Sprache ist und das Setzen von Eigenschaften von Objekten unterst\u00fctzt.</p> <p>Die Eigenschaft <code>Content</code> ist eine Besonderheit: Sie kann nicht nur in einem XML-Attribut, sondern auch innerhalb eines Tags (XML-Element) angegeben werden.</p> <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre> <p>Sogar! Wir k\u00f6nnen nicht nur eine Beschriftung auf die Taste setzen, sondern auch jedes andere Element, das wir m\u00f6chten. F\u00fcgen wir zum Beispiel einen roten Kreis ein. Der Kreis ist 10 Pixel breit, 10 Pixel hoch und die Farbe (<code>Fill</code>) ist rot.</p> <pre><code>&lt;Button&gt;\n    &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n&lt;/Button&gt;\n</code></pre> <p>Dies konnte mit fr\u00fcheren .NET UI-Technologien (z. B. Windows Forms) nicht so einfach erreichen.</p> <p>Neben dem roten Kreis steht nun Record (um den Sinn der roten Kreistaste zu verdeutlichen). Die Taste kann nur ein untergeordnetes Element haben, daher m\u00fcssen wir den Kreis und den Text (<code>TextBlock</code>) in ein Layout-Steuerelement (z. B. ein <code>StackPanel</code>) einf\u00fcgen. F\u00fcgen wir au\u00dferdem einen linken Rand zu <code>TextBlock</code>hinzu, damit sie sich nicht ber\u00fchren.</p> <pre><code>&lt;Button&gt;\n    &lt;StackPanel Orientation=\"Horizontal\"&gt;\n        &lt;Ellipse Width=\"10\" Height=\"10\" Fill=\"Red\" /&gt;\n        &lt;TextBlock Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n    &lt;/StackPanel&gt;\n&lt;/Button&gt;\n</code></pre> <p><code>StackPanel</code> ist ein einfaches Layout-Panel f\u00fcr die Anordnung von Steuerelementen: Die darin enthaltenen Steuerelemente werden nebeneinander angeordnet, wenn <code>Horizental</code> <code>Orientation</code> angegeben ist, und untereinander, wenn <code>Vertical</code> <code>Orientation</code> angegeben ist. In unserem Beispiel legen wir also einfach die beiden Steuerelemente nebeneinander.</p> <p>Das Ergebnis ist:</p> <p></p> <p>XAML-Vektorgrafik-Controller</p> <p>Es ist wichtig zu beachten, dass die meisten XAML-Controller Vektorgrafiken sind. Diese Taste sieht bei jeder DPI oder Vergr\u00f6\u00dferung genauso scharf aus (keine \"Verpixelung\").</p> <p>Es gibt drei Optionen f\u00fcr die Angabe von Eigenschaften von XAML-instanziierten Steuerelementen (von denen wir einige bereits verwendet haben):</p> <ul> <li>Property ATTRIBUTE syntax</li> <li>Property ELEMENT syntax</li> <li>Property CONTENT syntax</li> </ul> <p>Schauen wir uns diese Optionen nun genauer an:</p> <ol> <li> <p>Property ATTRIBUTE syntax.  Wir haben sie bereits in unserem allerersten Beispiel verwendet:</p> <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre> <p>Der Name kommt daher, dass die Eigenschaft als XML-Attribut angegeben wird. Da XML-Attribute nur Strings sein k\u00f6nnen, k\u00f6nnen sie nur f\u00fcr den Zugriff auf einfache Zahlen-, String- usw. Werte in Stringform oder auf Mitgliedsvariablen und Ereignishandler, die in einer Code-Behind-Datei definiert sind, verwendet werden. Wir k\u00f6nnen aber auch \"komplexe\" Objekte mit Hilfe von Typkonvertern angeben. Wir werden nicht viel dar\u00fcber reden, aber wir benutzen die eingebauten Typkonverter sehr oft, praktisch \"instinktiv\". Beispiel:</p> <p>F\u00fcgen wir eine Hintergrundfarbe zu <code>Grid</code>hinzu:</p> <pre><code>&lt;Grid Background=\"Azure\"&gt;\n</code></pre> <p>Oder wir k\u00f6nnen es in Hexadezimal angeben:</p> <pre><code>&lt;Grid Background=\"#FFF0FFFF\"&gt;\n</code></pre> <p>Der Rand (<code>Margin</code>) ist ebenfalls ein zusammengesetzter Wert, wobei der zugeh\u00f6rige Typkonverter durch ein Komma (oder ein Leerzeichen) getrennt ist und Werte f\u00fcr die vier Seiten (links, oben, rechts, unten) erwartet werden. Wir haben es bereits f\u00fcr unseren TextBlock mit <code>Record</code> verwendet. Hinweis: wir k\u00f6nnen eine einzige Zahl f\u00fcr den Rand angeben, die dann f\u00fcr alle vier Seiten gleich ist.</p> </li> <li> <p>Property ELEMENT syntax. Es erm\u00f6glicht uns, eine Eigenschaft auf ein komplex instanziiertes/parametrisiertes Objekt zu setzen, ohne Typkonverter zu verwenden. Schauen wir uns das anhand eines Beispiels an.</p> <ul> <li>Im obigen Beispiel wird durch die Einstellung der Eigenschaft <code>Background</code> auf <code>Azure</code> tats\u00e4chlich ein <code>SolidColorBrush</code>mit der Farbe hellblau erstellt. Dies kann ohne Verwendung eines Typkonverters wie folgt angegeben werden:</li> </ul> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush Color=\"Azure\" /&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p>Damit wird die Eigenschaft <code>Grid</code> <code>Background</code> auf die angegebene <code>SolidColorBrush</code>gesetzt. Dabei handelt es sich um die so genannte \"property element syntax\"-basierte Eigenschafts\u00fcbermittlung.</p> <ul> <li>Der Name kommt daher, dass die Eigenschaft in Form eines XML-Elements (und nicht eines XML-Attributs) angegeben wird.</li> <li> Hier erstellt <code>&lt;Grid.Background&gt;</code> keine Objektinstanz, sondern setzt den Wert der angegebenen Eigenschaft (in diesem Fall <code>Background</code>) auf die entsprechende Objektinstanz (in diesem Fall <code>SolidColorBrush</code>). Sie erkennen dies an dem Punkt im Namen des XML-Elements.</li> <li>Dadurch erh\u00e4lt man eine \"expansivere\" Formeigenschaft, jedoch mit voller Flexibilit\u00e4t. </li> </ul> <p>Ersetzen wir <code>SolidColorBrush</code>durch eine <code>Brush</code> mit Farb\u00fcbergang (<code>LinearGradientBrush</code>):</p> <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;LinearGradientBrush&gt;\n            &lt;LinearGradientBrush.GradientStops&gt;\n                &lt;GradientStop Color=\"Black\" Offset=\"0\" /&gt;\n                &lt;GradientStop Color=\"White\" Offset=\"1\" /&gt;\n            &lt;/LinearGradientBrush.GradientStops&gt;\n        &lt;/LinearGradientBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre> <p>F\u00fcr <code>LinearGradientBrush</code> gibt es keinen Typkonverter, er kann nur mit der Elementsyntax angegeben werden!</p> <p>Es ist eine Frage, wie ist es m\u00f6glich, dass die <code>Background</code> Eigenschaft des <code>Grid</code> Steuerelements sowohl <code>SolidColorBrush</code> und <code>LinearGradientBrush</code> Pinsel haben k\u00f6nnte? Die Antwort ist ganz einfach: Polymorphismus macht dies m\u00f6glich:</p> <ul> <li>Die Klassen <code>SolidColorBrush</code> und <code>LinearGradientBrush</code> sind beide aus der eingebauten Klasse <code>Brush</code> abgeleitet. </li> <li>Die Eigenschaft <code>Background</code> ist eine Eigenschaft des Typs <code>Brush</code>, so dass aufgrund der Polymorphie jeder Nachkomme dieser Eigenschaft verwendet werden kann.</li> </ul> Note <ul> <li>Wenn in den obigen Beispielen <code>Color</code> (Farbe) angegeben ist, z. B. <code>Color=\"Azure\"</code>, erstellt der Typkonverter auch eine blaue <code>Color</code> -Instanz von <code>Azure</code>.  So w\u00fcrde unser vorheriges Beispiel, das auf <code>SolidColorBrush</code> basiert, vollst\u00e4ndig erkl\u00e4rt aussehen: <pre><code>&lt;Grid&gt;\n    &lt;Grid.Background&gt;\n        &lt;SolidColorBrush&gt;\n            &lt;SolidColorBrush.Color&gt;\n                &lt;Color&gt;#FFF0FFFF&lt;/Color&gt;\n            &lt;/SolidColorBrush.Color&gt;\n        &lt;/SolidColorBrush&gt;\n    &lt;/Grid.Background&gt;\n    ...\n</code></pre></li> <li>Wo unterst\u00fctzt, lohnt es sich, die Vorteile von Typkonvertern zu nutzen und die Attributsyntax zu verwenden, um eine ausf\u00fchrliche XAML-Beschreibung zu vermeiden.</li> <li>Bei Werttypen (<code>struct</code>), wie z. B. <code>Color</code>, muss der Wert bei der Instanziierung des Objekts (\"Konstruktorzeit\") angegeben werden, d. h. hier k\u00f6nnen wir die Eigenschaften nicht separat festlegen, sondern m\u00fcssen sich auf die Typkonverter verlassen.</li> </ul> </li> <li> <p>Property CONTENT syntax. Um das besser zu verstehen, schauen wir uns die drei M\u00f6glichkeiten an, die <code>Content</code> Eigenschaft einer Taste auf einen Text zu setzen (wir m\u00fcssen das nicht im Labor machen, schauen wir es sich einfach zusammen in diesem Leitfaden an):</p> <ul> <li>Property attribute syntax (bereits verwendet):     <pre><code>&lt;Button Content=\"Hello WinUI App!\"/&gt;\n</code></pre></li> <li>Richten wir sie mit der property element syntax ein, die wir im vorigen Abschnitt gelernt haben:    <pre><code>&lt;Button&gt;\n    &lt;Button.Content&gt;\n    Hello WinUI App!\n    &lt;/Button.Content&gt;\n&lt;/Button&gt;\n</code></pre></li> <li>Jedes Steuerelement kann f\u00fcr sich selbst eine spezielle Eigenschaft \"Content\" definieren, f\u00fcr die die \u00f6ffnenden und schlie\u00dfenden Tags nicht gedruckt werden m\u00fcssen. Das hei\u00dft, die \u00f6ffnenden und schlie\u00dfenden Tags <code>&lt;Button.Content&gt;</code>, die im vorigen Beispiel verwendet wurden, k\u00f6nnen f\u00fcr diese eine Eigenschaft weggelassen werden:    <pre><code>&lt;Button&gt;\n    Hello WinUI App!\n&lt;/Button&gt;\n</code></pre>    Oder in einer einzigen Zeile geschrieben werden:    <pre><code>&lt;Button&gt;Hello WinUI App!&lt;/Button&gt;\n</code></pre>    Dies ist bekannt, wir haben es in unserem Einf\u00fchrungsbeispiel gesehen: dies ist die so genannte Property CONTENT syntax-basierte Eigenschaftsdeklaration. Der Name deutet auch darauf hin, dass diese eine Eigenschaft im \"Content\"-Teil des Steuerelements angegeben werden kann. Nicht alle Steuerelemente haben <code>Content</code> als Namen f\u00fcr diese besondere Eigenschaft:  <code>StackPanel</code>und <code>Grid</code>haben <code>Children</code> als Namen. Erinnern wir uns, oder schauen wir uns den Code an: wir haben diese bereits verwendet: allerdings haben wir die XML-Elemente <code>StackPanel.Children</code> oder <code>Grid.Children</code> nicht ausgeschrieben, wenn wir das Innere von <code>StackPanel</code> oder <code>Grid</code> angegeben haben (aber wir h\u00e4tten es tun k\u00f6nnen!)</li> </ul> </li> </ol> <p>\u00c4ndern wir den Hintergrund von <code>Grid</code> wieder in etwas sympathisch Einfaches, oder l\u00f6schen wir die Hintergrundfarbe.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#ereignis-management","title":"Ereignis-Management","text":"<p>XAML-Anwendungen sind ereignisgesteuerte Anwendungen. Alle Benutzerinteraktionen werden durch Ereignisse gemeldet, die zur Aktualisierung der Oberfl\u00e4che verwendet werden k\u00f6nnen.</p> <p>Jetzt geht es um das Klicken auf die Taste.</p> <p>Als vorbereitenden Schritt geben wir unserem <code>TextBlock</code> Steuerelement einen Namen, damit wir sp\u00e4ter in der Code-Behind-Datei darauf verweisen k\u00f6nnen:</p> <pre><code>&lt;TextBlock x:Name=\"recordTextBlock\" Text=\"Record\" Margin=\"10,0,0,0\" /&gt;\n</code></pre> <p>Die <code>x:Name</code> ist f\u00fcr den XAML-Parser und erstellt eine Member-Variable in unserer Klasse mit diesem Namen, die den Verweis auf das angegebene Steuerelement enth\u00e4lt.  Denken wir dar\u00fcber nach: da es sich um eine Membervariable ist, k\u00f6nnen wir es in der Code-Behind-Datei erreichen, da es sich einen \"partiellen Teil\" der gleichen Klasse ist!</p> <p>Benannte Steuerelemente</p> <p>Benennen wir keine Steuerelemente, auf die wir nicht verweisen wollen. (Wir sollten uns angew\u00f6hnen, nur auf das zu verweisen, was wir wirklich brauchen. Auch die Datenverkn\u00fcpfung ist hilfreich)</p> <p>Eine Ausnahme: Wenn wir eine sehr komplexe Kontrollhierarchie haben, k\u00f6nnen Namen helfen, den Code transparenter zu machen, da sie im Live Visual Tree-Fenster erscheinen und die generierten Ereignishandlernamen ebenfalls daran ausgerichtet sind.</p> <p>Behandeln wir das Ereignis <code>Click</code> der Taste und probieren wir dann den Code aus.</p> MainWindow.xaml<pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> MainWindow.xaml.cs<pre><code>private void RecordButton_Click(object sender, RoutedEventArgs e)\n{\n    recordTextBlock.Text = \"Recording...\";\n}\n</code></pre> <p>Erstellen von Ereignishandlern</p> <p>Wenn wir f\u00fcr die Ereignishandler nicht New Event Handler w\u00e4hlen, sondern manuell den gew\u00fcnschten Namen eingeben und F12dr\u00fccken oder Rechtsklick / Go to Definition w\u00e4hlen, wird der Ereignishandler in der Code-Behind-Datei generiert.</p> <p>Der Ereignishandler hat zwei Parameter: das sendende Objekt (<code>object sender</code>) und den Parameter, der die Parameter/Bedingungen des Ereignisses enth\u00e4lt (<code>EventArgs e</code>). Schauen wir uns diese im Detail an:</p> <ul> <li><code>object sender</code>: Der Ausl\u00f6ser des Ereignisses. In diesem Fall handelt es sich um die Taste selbst, die unter <code>Button</code>zu finden ist. Wir verwenden diesen Parameter nur selten.</li> <li>Der zweite Parameter ist immer vom Typ <code>EventArgs</code> oder dessen Nachkomme (je nach Art des Ereignisses), in dem die Parameter des Ereignisses zur\u00fcckgegeben werden. F\u00fcr das Ereignis <code>Click</code> ist dies der Typ <code>RoutedEventArgs</code>. </li> </ul> <p>Ereignisargumente</p> <p>Einige Ereignisargumenttypen:</p> <ul> <li>routedEventArgs\": wird z. B. im Falle des Ereignisses \"Click\" verwendet, wie in unserem Beispiel. In der Eigenschaft \"OriginalSource\" wird das Steuerelement angegeben, in dem das Ereignis zuerst ausgel\u00f6st wurde.<ul> <li>Beachten wir, dass es im obigen Fall die Taste selbst ist, aber wenn wir ein Mausklick-Ereignis (nicht <code>Click</code>, sondern <code>PointerPressed</code>) auf z.B. <code>StackPanel</code> behandeln w\u00fcrden, k\u00f6nnten wir eines seiner Kindelemente erhalten, wenn es angeklickt wird.</li> </ul> </li> <li>keyRoutedEventArgs\": z.B. f\u00fcr ein \"KeyDown\"-Ereignis (Tastendruck), erhalten wir die gedr\u00fcckte Taste darin.</li> <li>pointerRoutedEventArgs\": wird z.B. f\u00fcr das \"PointerPressed\"-Ereignis (Maus-/Stiftdruck) verwendet und kann u.a. dazu verwendet werden, die Koordinaten des Klicks zu ermitteln.</li> </ul> <p>Die XAML-Ereignishandler basieren vollst\u00e4ndig auf C#-Ereignissen (Schl\u00fcsselwort<code>event</code>, siehe vorherige \u00dcbung):</p> <p>Z.B. eine</p> <pre><code>&lt;Button Click=\"RecordButton_Click\"&gt;\n</code></pre> <p>ist daf\u00fcr ausgebildet:</p> <pre><code>Button b = new Button();\nb.Click += RecordButton_Click;\n</code></pre>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#layout-gestaltung","title":"Layout, Gestaltung","text":"<p>Die Anordnung der Steuerelemente wird durch zwei Faktoren bestimmt:</p> <ol> <li>Layout-Steuerelemente (panel) und ihre angef\u00fcgte Eigenschaften (attached property)</li> <li>Allgemeine Positionseigenschaften innerhalb des \u00fcbergeordneten Steuerelements (z. B. Rand, vertikale oder horizontale Ausrichtung)</li> </ol> <p>Eingebaute Layout-Steuerelemente zum Beispiel:</p> <ul> <li><code>StackPanel</code>: Elemente untereinander oder nebeneinander</li> <li><code>Grid</code>: Wir k\u00f6nnen ein Raster festlegen, an dem sich die Elemente ausrichten</li> <li><code>Canvas</code>: Wir positionieren die Elemente explizit durch Angabe ihrer X- und Y-Koordinaten</li> <li><code>RelativePanel</code>: Die Beziehung der Elemente zueinander kann durch Nebenbedingungen definiert werden</li> </ul> <p>Versuchen wir es mit <code>Grid</code>(wir verwenden dies normalerweise, um das grundlegende Layout unseres Fensters/unserer Seite einzurichten). Wir werden eine Oberfl\u00e4che erstellen, \u00fcber die man Personen zu einer Liste hinzuf\u00fcgen kann, indem man ihren Namen und ihr Alter eingeben kann. Unser Ziel ist es, das folgende Layout zu erstellen:</p> <p></p> <p>Einige wichtige Verhaltensbeschr\u00e4nkungen:</p> <ul> <li>Wenn die Gr\u00f6\u00dfe des Fensters ge\u00e4ndert wird, sollte das Formular eine feste Breite haben und zentriert bleiben.</li> <li>In der Zeile Alter erh\u00f6ht die Taste + das Alter, die Taste - verringert es.</li> <li>Die Taste Hinzuf\u00fcgen f\u00fcgt die Person mit den oben angegebenen Daten zur unteren Liste hinzu (die Abbildung zeigt die Daten von zwei Personen in der unteren Liste).</li> </ul> <p>Definieren wir die Wurzel <code>Grid</code>als 4 Zeilen und 2 Spalten. Die erste Spalte sollte die Bezeichnungen und die zweite Spalte die Eingabefelder enthalten. Setzen wir unsere vorhandene Taste in Zeile 3 und \u00e4ndern wir ihren Inhalt auf Add, und ersetzen wir den Kreis durch <code>SymbolIcon</code>. Geben wir in Zeile 4 eine Liste ein, die 2 Spalten einnehmen sollte.</p> <pre><code>&lt;Grid x:Name=\"rootGrid\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" /&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" /&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\" /&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\"/&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>F\u00fcr die Zeilen- und Spaltendefinitionen k\u00f6nnen wir angeben, ob die Zeile die Gr\u00f6\u00dfe ihres Inhalts einnehmen soll (<code>Auto</code>) oder den verbleibenden Platz ausf\u00fcllen soll (<code>*</code>), oder sogar eine feste Breite in Pixeln (<code>Width</code> Eigenschaft). Wenn es mehrere <code>*</code> in den Definitionen gibt, k\u00f6nnen sie skaliert werden, z.B. <code>*</code> und <code>*</code> haben ein Verh\u00e4ltnis von 1:1, w\u00e4hrend <code>*</code> und <code>3*</code> ein Verh\u00e4ltnis von 1:3 haben.</p> <p>Die <code>Grid.Row</code>, <code>Grid.Column</code> werden als Attached Properties (angef\u00fcgte Eigneschaften) bezeichnet. Das bedeutet, dass der Controller, auf den sie angewendet wird, diese Eigenschaft nicht besitzt und diese Information nur \"angeh\u00e4ngt\" wird. In unserem Fall sind diese Informationen f\u00fcr <code>Grid</code>wichtig, um Ihre Kinder unterzubringen. Der Standardwert f\u00fcr <code>Grid.Row</code> und <code>Grid.Column</code> ist 0, so dass wir dies gar nicht schreiben sollten.</p> <p>Imperative UI-Beschreibung</p> <p>In anderen UI-Frameworks, in denen die UI imperativ ist, wird dies einfach mit Funktionsparametern gel\u00f6st - z.B.: <code>myPanel.Add(new TextBox(), 0, 1)</code>.</p> <p>Die angef\u00fcgte Eigenschaft <code>Grid.ColumnSpan=\"2\"</code> unter <code>ListView</code>bedarf vielleicht einer Erkl\u00e4rung: <code>ColumnSpan</code> und <code>RowSpan</code> definieren die Anzahl der Spalten und Zeilen, die das Steuerelement \"umspannen\". In unserem Beispiel f\u00fcllt <code>ListView</code> beide Spalten.</p> <p>Probieren wir die Anwendung aus (wenn der Code nicht funktioniert, l\u00f6schen wir den Ereignishandler im Code hinter der Datei <code>RecordButton_Click</code> ).</p> <p>In seinem derzeitigen Zustand f\u00fcllt <code>Grid</code> den gesamten Raum sowohl horizontal als auch vertikal aus. Was ist der Grund daf\u00fcr? Eines der grundlegenden Merkmale des Layouts der Steuerelemente sind ihre Eigenschaften <code>HorizontalAlignment</code> und <code>VerticalAlignment</code>.   Diese bestimmen, wo der Controller horizontal und vertikal in dem ihn enthaltenden Container (d. h. dem \u00fcbergeordneten Controller) positioniert werden soll. Die m\u00f6glichen Werte:</p> <ul> <li><code>VerticalAlignment</code>: <code>Top</code>, <code>Center</code>, <code>Bottom</code>, <code>Stretch</code>(oben, mittig, unten ausgerichtet oder vertikal ausf\u00fcllen)</li> <li><code>HorizontalAlignment</code>: <code>Left</code>, <code>Center</code>, <code>Right</code>, <code>Stretch</code> (links-, zentriert-, rechtsb\u00fcndig oder horizontal ausf\u00fcllen)   </li> </ul> <p>(Hinweis: F\u00fcr Stretch ist es erforderlich, dass die Eigenschaft <code>Height</code> oder <code>Width</code> f\u00fcr den Controller nicht angegeben ist)</p> <p>Unserem <code>Grid</code>wurden die Eigenschaften <code>HorizontalAlignment</code> und <code>VerticalAlignment</code> nicht zugewiesen, so dass sein Wert standardm\u00e4\u00dfig <code>Stretch</code> f\u00fcr das Raster ist, weshalb <code>Grid</code> den Raum im \u00fcbergeordneten Container, dem Fenster, in beide Richtungen f\u00fcllt.</p> <p>Unsere Oberfl\u00e4che sieht nicht so aus, wie wir sie haben wollen, also m\u00fcssen wir sie noch ein wenig optimieren. Die vorzunehmenden \u00c4nderungen:</p> <ul> <li>Die Tabelle muss nicht den ganzen Bildschirm ausf\u00fcllen, sondern sollte horizontal in der Mitte liegen<ul> <li><code>HorizontalAlignment=\"Center\"</code></li> </ul> </li> <li>300px breit machen<ul> <li><code>Width=\"300\"</code></li> </ul> </li> <li>Halten wir 5px zwischen den Zeilen, 10px zwischen den Spalten und 20px vom Rand des Containers<ul> <li><code>RowSpacing=\"5\" ColumnSpacing=\"10\" Margin=\"20\"</code></li> </ul> </li> <li>Richten wir die Bezeichnungen (<code>TexBlock</code>) vertikal in der Mitte aus<ul> <li><code>VerticalAlignment=\"Center\"</code></li> </ul> </li> <li>Richten wir die Taste nach rechts aus<ul> <li><code>HorizontalAlignment=\"Right\"</code></li> </ul> </li> <li>Machen wir die Liste identifizierbar<ul> <li><code>BorderThickness=\"1\"</code> und <code>BorderBrush=\"DarkGray\"</code></li> </ul> </li> </ul> <pre><code>&lt;Grid x:Name=\"rootGrid\"\n      Width=\"300\"\n      HorizontalAlignment=\"Center\"\n      Margin=\"20\"\n      RowSpacing=\"5\"\n      ColumnSpacing=\"10\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbName\" /&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"Age\" VerticalAlignment=\"Center\"/&gt;\n    &lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n\n    &lt;Button Grid.Row=\"2\" Grid.Column=\"1\" HorizontalAlignment=\"Right\"&gt;\n        &lt;StackPanel Orientation=\"Horizontal\"&gt;\n            &lt;SymbolIcon Symbol=\"Add\"/&gt;\n            &lt;TextBlock Text=\"Add\" Margin=\"5,0,0,0\" /&gt;\n        &lt;/StackPanel&gt;\n    &lt;/Button&gt;\n\n    &lt;ListView Grid.Row=\"3\"\n              Grid.Column=\"0\"\n              Grid.ColumnSpan=\"2\"\n              BorderThickness=\"1\"\n              BorderBrush=\"DarkGray\"/&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Erweitern wir unser Formular um zwei weitere Tasten (\u00b1 Tasten f\u00fcr das Alter, siehe vorheriges animiertes Bildschirmfoto):</p> <ul> <li>-': auf der linken Seite von <code>TextBox</code> </li> <li>+' auf der rechten Seite von<code>TextBox</code> </li> </ul> <p>Dazu nehmen wir anstatt die Zeile (mit L\u00f6schen)</p> <pre><code>&lt;TextBox Grid.Row=\"1\" Grid.Column=\"1\" x:Name=\"tbAge\"/&gt;\n</code></pre> <p>ein <code>Grid</code> mit 1 Zeile und 3 Spalten :</p> <pre><code>&lt;Grid Grid.Row=\"1\" Grid.Column=\"1\" ColumnSpacing=\"5\"&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition Width=\"*\" /&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"0\" Content=\"-\" /&gt;\n    &lt;TextBox Grid.Row=\"0\" Grid.Column=\"1\" x:Name=\"tbAge\" /&gt;\n    &lt;Button Grid.Row=\"0\" Grid.Column=\"2\" Content=\"+\" /&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Verschachtelung mehrerer Layout-Steuerelemente</p> <p>Sie fragen sich vielleicht, warum wir nicht zus\u00e4tzliche Spalten und Zeilen in das externe <code>Grid</code>(durch Anwendung von <code>ColumnSpan</code> auf die vorhandenen Steuerelemente) eingef\u00fcgt haben. Stattdessen folgten wir dem Prinzip der Vereinheitlichung: Die neu eingef\u00fchrten Steuerelemente sind im Wesentlichen ein Element, so dass wir eine transparentere L\u00f6sung erhielten, indem wir sie in ein separates <code>Grid</code> Steuerelement einf\u00fcgten. Die Erweiterung des externen <code>Grid</code> w\u00e4re gerechtfertigt, wenn wir aufgrund von Leistungsproblemen bei der Erstellung von Steuerelementen sparen wollten. In unserem Fall ist dies nicht gerechtfertigt.</p> <p>Wir sind fertig mit dem Aussehen unseres einfachen Formulars.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#datenverbindung","title":"Datenverbindung","text":""},{"location":"labor/3-felhasznaloi-felulet/index_ger/#binding","title":"Binding","text":"<p>Im n\u00e4chsten Schritt soll es m\u00f6glich sein, die Daten einer Person in das soeben erstellte kleine Formular einzugeben und zu \u00e4ndern. Erstellen wir dazu zun\u00e4chst eine Datenklasse namens <code>Person</code> in einem neu erstellten Ordner <code>Models</code> im Projekt.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <p>Wir wollen die beiden Eigenschaften hier an die <code>TextBox</code> Steuerelemente binden, also verwenden wir die Datenbindung. F\u00fchren wir in der Code-Behind-Datei unseres Fensters eine Eigenschaft ein, die auf ein Objekt <code>Person</code> verweist, und geben wir ihr im Konstruktor einen Anfangswert:</p> <pre><code>public Person NewPerson { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n}\n</code></pre> <p>Im n\u00e4chsten Schritt werden die Eigenschaften des oben genannten Objekts <code>NewPerson</code> zu die <code>Text</code> Eigenschaft der geigneten Textfelder gebunden:</p> <ul> <li>die Eigenschaft <code>Name</code> zu die <code>Text</code> Eigenschaft von <code>tbName</code> <code>Textbox</code> </li> <li>die Eigenschaft <code>Age</code> zu die <code>Text</code> Eigenschaft von <code>tbAge</code> <code>Textbox</code> </li> </ul> <p>Wir verwenden Datenverbindung (data binding) daf\u00fcr:</p> <p><pre><code>Text=\"{x:Bind NewPerson.Name}\"\nText=\"{x:Bind NewPerson.Age}\"\n</code></pre> (f\u00fcgen wir die oben genannten 1-1 Eigenschaftseinstellungen in die Zeilen von <code>tbName</code> und <code>tbAge</code> <code>TextBox</code>ein)</p> <p>Wichtig</p> <p>Bei der Datenverbindung geht es darum, dass anstatt die Eigenschaften (in unserem Fall den Text) der Steuerelemente in der Oberfl\u00e4che von der Code-Behind-Datei aus manuell einstellen, werden die Eigenschaften mit dem Datenverbindungsmechanismus der Plattform zusammengesetzt/verbunden. So k\u00f6nnen wir auch daf\u00fcr sorgen, dass sich bei einer \u00c4nderung einer Eigenschaft die andere automatisch \u00e4ndert!</p> <p>Die Syntax <code>Text=\"{x:Bind}\"</code> wird als Markup Extension bezeichnet: Sie hat eine besondere Bedeutung f\u00fcr den XAML-Prozessor. Dies ist der Hauptgrund, warum wir XAML und nicht einfaches XML verwenden. Es ist auch m\u00f6glich, eine eigene Markup Extension zu erstellen, aber dies ist kein Material des Kurses.</p> <p>Laufen wir die Anwendung! Es ist zu erkennen, dass den Namen und das Alter, die in den Eigenschaften <code>Name</code> und <code>Age</code> des Objekts <code>NewPerson</code> (als Datenquelle) angegeben sind, wegem der Datenverbindung automatisch in die <code>Text</code> Eigenschaften beider <code>TextBox</code>  \u00fcbernommen wurden.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#benachrichtigung-uber-anderungen","title":"Benachrichtigung \u00fcber \u00c4nderungen","text":"<p>Implementieren wir die <code>Click</code> Ereignishandler f\u00fcr die Tasten \u00b1 . </p> <pre><code>&lt;Button Grid.Row=\"1\" Grid.Column=\"0\" Content=\"-\" Click=\"DecreaseButton_Click\"/&gt;\n&lt;!-- ... --&gt;\n&lt;Button Grid.Row=\"1\" Grid.Column=\"2\" Content=\"+\" Click=\"IncreaseButton_Click\"/&gt;\n</code></pre> <pre><code>private void DecreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age--;\n}\n\nprivate void IncreaseButton_Click(object sender, RoutedEventArgs e)\n{\n    NewPerson.Age++;\n}\n</code></pre> <p>Aufgrund der Datenverbindung, die im vorherigen Abschnitt eingef\u00fchrt wurde, w\u00fcrden wir erwarten, dass, wenn wir die Eigenschaft <code>Age</code> der Datenquelle <code>NewPerson</code> in den obigen Ereignishandlern \u00e4ndern, unser Steuerelement <code>tbAge</code> <code>Textbox</code> auf unserer Oberfl\u00e4che dies verfolgen w\u00fcrde. Probieren wir es aus! Dies funktioniert noch nicht, da es die Implementierung der Schnittstelle <code>INotifyPropertyChanged</code> erfordert.</p> <ol> <li> <p>Implementieren wir die Schnittstelle <code>INotifyPropertyChanged</code> in unserer Klasse <code>Person</code>.  Wenn wir Daten an diese Klasse binden, abonniert das System das Ereignis <code>PropertyChanged</code>. Durch Ausl\u00f6sen dieses Ereignisses k\u00f6nnen wir die Verbindung benachrichtigen, wenn sich eine Eigenschaft ge\u00e4ndert hat.</p> <pre><code>public class Person : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set\n        {\n            if (name != value)\n            {\n                name = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n            }\n        }\n    }\n\n    private int age;\n    public int Age\n    {\n        get { return age; }\n        set\n        {\n            if (age != value)\n            {\n                age = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Age)));\n            }\n        }\n    }\n}\n</code></pre> <p>Ist der Code zu viel?</p> <p>In Zukunft k\u00f6nnte diese Logik in einer Klasse von Vorg\u00e4ngern organisiert werden, aber das w\u00fcrde zum MVVM-Muster f\u00fchren, das mit einem sp\u00e4teren Thema verkn\u00fcpft ist. Lassen wir uns also nicht von diesem etwas h\u00e4sslichen Code abschrecken.</p> </li> <li> <p>Bei der Datenverbindung schalten wir die \u00c4nderungsbenachrichtigung ein, indem wir sie auf <code>Mode</code> <code>OneWay</code>\u00e4ndern, da der Standardmodus f\u00fcr <code>x:Bind</code> <code>OneTime</code> ist, was eine einmalige Datenbindung darstellt.</p> <pre><code>Text=\"{x:Bind NewPerson.Age, Mode=OneWay}\"\n</code></pre> </li> </ol> <p>Probieren wir es aus! Die Ereignishandler \u00e4ndern die Datenquelle (<code>NewPerson</code>), die nun auch die Oberfl\u00e4che aufgrund der richtig vorbereiteten Datenverbindung \u00e4ndert.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#ruckwartige-datenbindung-vom-controller-zur-datenquelle","title":"R\u00fcckw\u00e4rtige Datenbindung (vom Controller zur Datenquelle)","text":"<p>Wie Age sollte auch die Datenbindung f\u00fcr die Eigenschaft Name auf einseitig eingestellt werden:</p> <pre><code>Text=\"{x:Bind NewPerson.Name, Mode=OneWay}\"\n</code></pre> <p>Starten wir die Anwendung und setzen wir dann einen Haltepunkt im Setter der Eigenschaft <code>Name</code> der Klasse <code>Person</code> (Zeile<code>if (name != value)</code> ), und sehen wir nach, ob die Datenverbindung in umgekehrter Richtung funktioniert: Wenn wir den Wert eines der <code>TextBox</code> \u00e4ndern, \u00e4ndert sich dann die Eigenschaft <code>Name</code> des Objekts <code>NewPerson</code>?  Geben wir etwas in das Textfeld ein, das mit dem Namen verkn\u00fcpft ist, und klicken wir dann auf ein anderes Feld: Der Inhalt des Textfelds wird dann \"abgeschlossen\", sein Inhalt sollte in die Datenquelle zur\u00fcckgeschrieben werden, wird aber nicht, der Code l\u00e4uft nicht an unserem Haltepunkt.</p> <p>Das liegt daran, dass wir oben die Datenverbindung <code>OneWay</code> verwendet haben, die nur eine Datenbindung von der Datenquelle zur Oberfl\u00e4che ist. F\u00fcr den Weg zur\u00fcck soll der Datenbindungsmodus auf <code>TwoWay</code> eingestellt werden.</p> <pre><code>Text=\"{x:Bind Name, Mode=TwoWay}\"\nText=\"{x:Bind Age, Mode=TwoWay}\"\n</code></pre> <p>Probieren wir es aus! Auf diese Weise funktioniert die R\u00fcckw\u00e4rts-Datenverbindung: Die angegebene Eigenschaft des Controllers (in unserem Fall Text) und die Datenquelle bleiben bei jeder Richtungs\u00e4nderung synchron.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#listen","title":"Listen","text":"<p>Im Folgenden werden wir die Listenverbindung \u00fcben. F\u00fcgen wir eine Liste von <code>Person</code>-Objekten in die Code-Behind-Datei unserer Ansicht ein und geben wir ihr am Ende des Konstruktors einen Anfangswert.</p> <pre><code>public List&lt;Person&gt; People { get; set; }\n\npublic MainWindow()\n{\n    InitializeComponent();\n\n    NewPerson = new Person()\n    {\n        Name = \"Eric Cartman\",\n        Age = 8\n    };\n\n    People = new List&lt;Person&gt;()\n    {\n      new Person() { Name = \"Peter Griffin\", Age = 40 },\n      new Person() { Name = \"Homer Simpson\", Age = 42 },\n    };\n}\n</code></pre> <p>Verwenden wir die Datenverbindung, um die Datenquelle des Steuerelements <code>ListView</code> festzulegen. Dazu sollen wir die Eigenschaft <code>ItemsSource</code> des Steuerelements <code>ListView</code> einstellen.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"/&gt;\n</code></pre> <p>Probieren wir es aus!</p> <p>Wir sehen, dass zwei Eintr\u00e4ge in der Liste erschienen sind. Nat\u00fcrlich ist es nicht das, was wir wollen, aber das ist leicht zu \u00e4ndern. Standardm\u00e4\u00dfig ruft <code>ListView</code> <code>ToString()</code>bei Listenelementen auf, was die Eigenschaft <code>FullName</code> des Klassentyps (d.h. der Typname) ist, wenn <code>ToString()</code> nicht \u00fcberschrieben wird.</p> <p>Legen wir die Eigenschaft <code>ItemTemplate</code> von <code>ListView</code>fest (unter Verwendung der bekannten property element syntax), die das Aussehen des Listenelementes unter Verwendung einer Vorlage verleiht: In unserem Fall machen wir daraus ein einzelliges <code>Grid</code>, wobei <code>TextBlock</code>s die Eigenschaften von <code>Person</code> anzeigt, wobei der Name links und das Alter rechts ausgerichtet ist.</p> <pre><code>&lt;ListView Grid.Row=\"3\" Grid.ColumnSpan=\"2\" ItemsSource=\"{x:Bind People}\"&gt;\n    &lt;ListView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Person\"&gt;\n            &lt;Grid&gt;\n                &lt;TextBlock Text=\"{x:Bind Name}\" /&gt;\n                &lt;TextBlock Text=\"{x:Bind Age}\" HorizontalAlignment=\"Right\" /&gt;\n            &lt;/Grid&gt;\n        &lt;/DataTemplate&gt;\n    &lt;/ListView.ItemTemplate&gt;\n&lt;/ListView&gt;\n</code></pre> <p><code>DataTemplate</code> ist eine Oberfl\u00e4chenschablone, die von der <code>ListView</code> (er ist gegeben durch <code>ItemTemplate</code> eigenschaft) auf alle Elemente w\u00e4hrend der Anzeige angewendet wird.</p> <p>Da <code>x:Bind</code> eine Datenverbindung zur \u00dcbersetzungszeit ist, m\u00fcssen wir auch den Datentyp in der Datenvorlage mit dem Attribut <code>x:DataType</code> angeben. Im obigen Beispiel haben wir <code>model:Person</code>angegeben, so dass das Pr\u00e4fix <code>model</code> dem Namensraum <code>HelloXaml.Models</code> unseres Codes zugeordnet werden soll (der die Klasse <code>Person</code> enth\u00e4lt). Dazu m\u00fcssen wir die folgende Namensraumdeklaration zu den Attributen des Tags <code>Window</code> am Anfang unserer XAML-Datei hinzuf\u00fcgen: <code>xmlns:model=\"using:HelloXaml.Models\"</code> (danach wird das Pr\u00e4fix <code>model</code> verwendet). Dies kann manuell oder mit Visual Studio erfolgen: Klicken wir einfach auf den unterstrichenen (als fehlerhaft markierten) <code>model:Person</code>Text, dann auf die Lampe am Anfang der Zeile (oder die Tastenkombination <code>Ctrl</code> + <code>.</code> ) und w\u00e4hlen wir das angezeigte Element \"Add xmlns using:HelloXaml.Models\".</p> <p>Probieren wir es aus! Die Eintr\u00e4ge erscheinen nun gut in der Liste.</p> <p>Klicken wir auf die Taste Add, um eine neue Kopie von <code>Person</code> mit den Daten der Person des Formilar zur Liste hinzuzuf\u00fcgen, und l\u00f6schen wir dann die Formulardaten in unserem Objekt <code>NewPerson</code>. </p> <p>F\u00fcgen wir dazu unserer Taste Add einen <code>Click</code> Ereignishandler hinzu:</p> <pre><code>&lt;Button ... Click=\"AddButton_Click\"&gt;\n</code></pre> <pre><code>private void AddButton_Click(object sender, RoutedEventArgs e)\n{\n    People.Add(new Person()\n    { \n        Name = NewPerson.Name,\n        Age = NewPerson.Age,\n    });\n\n    NewPerson.Name = string.Empty;\n    NewPerson.Age = 0;\n}\n</code></pre> <p>Der neue Eintrag erscheint nicht in der Liste, da <code>ListView</code> nicht dar\u00fcber informiert wird, dass ein neuer Eintrag in die Liste aufgenommen wurde. Dies kann leicht behoben werden, indem <code>List&lt;Person&gt;</code>durch <code>ObservableCollection&lt;Person&gt;</code>ersetzt wird:</p> <pre><code>public ObservableCollection&lt;Person&gt; People { get; set; }\n</code></pre> <p><code>ObservableCollection&lt;T&gt;</code></p> <p>Es ist wichtig zu beachten, dass sich hier nicht der Wert der Eigenschaft <code>People</code> selbst ge\u00e4ndert hat, sondern der Inhalt des Objekts <code>List&lt;Person&gt;</code>. Die L\u00f6sung ist also nicht die Schnittstelle <code>INotifyPropertyChanged</code>, sondern die Schnittstelle <code>INotifyCollectionChanged</code>, die von <code>ObservableCollection</code> implementiert wird.</p> <p>Wir kennen und verwenden also bereits zwei Schnittstellen, die die Datenverbindung unterst\u00fctzen: <code>INotifyPropertyChanged</code> und <code>INotifyCollectionChanged</code>.</p>"},{"location":"labor/3-felhasznaloi-felulet/index_ger/#ausblick-klassische-bindung","title":"Ausblick: Klassische Bindung","text":"<p>Die klassische Form der Datenverbindung ist die <code>Binding</code> Markup Extension.</p> <p>Die wichtigsten Unterschiede im Vergleich zu <code>x:Bind</code>sind:</p> <ul> <li>Der Standardmodus f\u00fcr <code>Binding</code> ist <code>OneWay</code> und nicht <code>OneTime</code>: Er \u00fcberwacht also standardm\u00e4\u00dfig \u00c4nderungen, w\u00e4hrend dies f\u00fcr <code>x:Bind</code>ausdr\u00fccklich angegeben werden muss.</li> <li><code>Binding</code> arbeitet standardm\u00e4\u00dfig mit <code>DataContext</code>, aber es ist m\u00f6glich, die Quelle f\u00fcr die Datenbindung festzulegen. W\u00e4hrend <code>x:Bind</code> standardm\u00e4\u00dfig von unserer Ansichtsklasse (xaml.cs) gebunden wird.</li> <li><code>Binding</code> arbeitet zur Laufzeit mit Reflection, so dass Sie einerseits keine Kompilierfehler bekommen, wenn Sie etwas falsch schreiben, und andererseits k\u00f6nnen viele Datenbindungen (in der Gr\u00f6\u00dfenordnung von 1000) Ihre Anwendung verlangsamen.</li> <li><code>x:Bind</code> ist kompilierbar, d. h. der Compiler pr\u00fcft, ob die angegebenen Eigenschaften vorhanden sind. In Datenvorlagen m\u00fcssen Sie bei der Angabe von <code>DataTemplate</code> mit dem Attribut <code>x:DataType</code> angeben, mit welchen Daten sie arbeiten werden.</li> <li>F\u00fcr <code>x:Bind</code> ist es m\u00f6glich, Methoden zu binden, w\u00e4hrend f\u00fcr <code>Binding</code>nur Konverter verwendet werden k\u00f6nnen. Bei gebundenen Funktionen funktioniert die \u00c4nderungsbenachrichtigung auch bei \u00c4nderungen von Parametern.</li> </ul> <p>Empfehlung</p> <p>Als Faustregel gilt, dass Sie vorzugsweise <code>x:Bind</code>verwenden sollten, da Sie so schneller und zeitnaher Fehler erhalten. Wenn Sie jedoch aus irgendeinem Grund Probleme mit <code>x:Bind</code>haben, sollten Sie zu <code>Binding</code>wechseln.</p>"},{"location":"labor/4-tobbszalu/","title":"4. T\u00f6bbsz\u00e1l\u00fa alkalmaz\u00e1sok k\u00e9sz\u00edt\u00e9se","text":""},{"location":"labor/4-tobbszalu/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9lja, hogy megismertesse a hallgat\u00f3kat a t\u00f6bbsz\u00e1las programoz\u00e1s sor\u00e1n k\u00f6vetend\u0151 alapelvekkel. \u00c9rintett t\u00e9mak\u00f6r\u00f6k (t\u00f6bbek k\u00f6z\u00f6tt):</p> <ul> <li>Sz\u00e1lak ind\u00edt\u00e1sa (<code>Thread</code>)</li> <li>Sz\u00e1lak le\u00e1ll\u00edt\u00e1sa</li> <li>Sz\u00e1lbiztos (thread safe) oszt\u00e1lyok k\u00e9sz\u00edt\u00e9se a <code>lock</code> kulcssz\u00f3 alkalmaz\u00e1s\u00e1val</li> <li><code>ThreadPool</code> haszn\u00e1lata</li> <li>Jelz\u00e9s \u00e9s jelz\u00e9sre v\u00e1rakoz\u00e1s sz\u00e1l szinkroniz\u00e1ci\u00f3 <code>ManualResetEvent</code> seg\u00edts\u00e9g\u00e9vel (<code>WaitHandle</code>)</li> <li>WinUI sz\u00e1lkezel\u00e9si saj\u00e1toss\u00e1gok (<code>DispatcherQueue</code>)</li> </ul> <p>Term\u00e9szetesen, mivel a t\u00e9mak\u00f6r hatalmas, csak alapszint\u0171 tud\u00e1st fogunk szerezni, de e tud\u00e1s birtok\u00e1ban m\u00e1r k\u00e9pesek lesz\u00fcnk \u00f6n\u00e1ll\u00f3an is elindulni a bonyolultabb feladatok megval\u00f3s\u00edt\u00e1s\u00e1ban.</p> <p>A kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok: Konkurens (t\u00f6bbsz\u00e1l\u00fa) alkalmaz\u00e1sok fejleszt\u00e9se.</p>"},{"location":"labor/4-tobbszalu/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> </ul>"},{"location":"labor/4-tobbszalu/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre a <code>megoldas</code> \u00e1gat:</p> <p><code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo -b megoldas</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/4-tobbszalu/#bevezeto","title":"Bevezet\u0151","text":"<p>A p\u00e1rhuzamosan fut\u00f3 sz\u00e1lak kezel\u00e9se kiemelt fontoss\u00e1g\u00fa ter\u00fclet, melyet minden szoftverfejleszt\u0151nek legal\u00e1bb alapszinten ismernie kell. A gyakorlat sor\u00e1n alapszint\u0171, de kiemelt fontoss\u00e1g\u00fa probl\u00e9m\u00e1kat oldunk meg, ez\u00e9rt t\u00f6rekedn\u00fcnk kell arra, hogy ne csak a v\u00e9geredm\u00e9nyt, hanem az elv\u00e9gzett m\u00f3dos\u00edt\u00e1sok \u00e9rtelm\u00e9t \u00e9s indokait is meg\u00e9rts\u00fck.</p> <p>A feladat sor\u00e1n egyszer\u0171 WinUI alkalmaz\u00e1st fogunk felruh\u00e1zni t\u00f6bbsz\u00e1las k\u00e9pess\u00e9gekkel, egyre komplexebb feladatokat megoldva. Az alapprobl\u00e9ma a k\u00f6vetkez\u0151: van egy f\u00fcggv\u00e9ny\u00fcnk, mely hossz\u00fa ideig fut, s mint l\u00e1tni fogjuk, ennek \u201edirektben\u201d t\u00f6rt\u00e9n\u0151 h\u00edv\u00e1sa a fel\u00fcletr\u0151l kellemetlen k\u00f6vetkezm\u00e9nyekkel j\u00e1r. A megold\u00e1s sor\u00e1n egy megl\u00e9v\u0151 alkalmaz\u00e1st fogunk kieg\u00e9sz\u00edteni saj\u00e1t k\u00f3dr\u00e9szletekkel. Az \u00fajonnan besz\u00farand\u00f3 sorokat az \u00fatmutat\u00f3ban kiemelt h\u00e1tt\u00e9r jelzi.</p>"},{"location":"labor/4-tobbszalu/#0-feladat-ismerkedes-a-kiindulo-alkalmazassal-elokeszites","title":"0. Feladat - Ismerked\u00e9s a kiindul\u00f3 alkalmaz\u00e1ssal, el\u0151k\u00e9sz\u00edt\u00e9s","text":"<p>Kl\u00f3nozzuk le a 4. gyakorlathoz tartoz\u00f3 kiindul\u00f3 alkalmaz\u00e1s repositoryj\u00e1t:</p> <ul> <li>Nyissunk egy command prompt-ot</li> <li>Navig\u00e1ljunk el egy tetsz\u0151leges mapp\u00e1ba, p\u00e9ld\u00e1ul c:\\work\\NEPTUN</li> <li>Adjuk ki a k\u00f6vetkez\u0151 parancsot: <code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo.git</code></li> <li>Nyissuk meg a SuperCalculator.sln solutiont Visual Studio-ban.</li> </ul> <p>A feladatunk az, hogy egy bin\u00e1ris form\u00e1ban megkapott algoritmus futtat\u00e1s\u00e1hoz WinUI technol\u00f3gi\u00e1val felhaszn\u00e1l\u00f3i fel\u00fcletet k\u00e9sz\u00edts\u00fcnk. A bin\u00e1ris forma .NET eset\u00e9ben egy .dll kiterjeszt\u00e9s\u0171 f\u00e1jlt jelent, ami programoz\u00f3i szemmel egy oszt\u00e1lyk\u00f6nyvt\u00e1r.  A f\u00e1jl neve eset\u00fcnkben Algorithms.dll, megtal\u00e1lhat\u00f3 a lekl\u00f3nozott Git repositoryban.</p> <p>A kiindul\u00f3 alkalmaz\u00e1sban a felhaszn\u00e1l\u00f3i fel\u00fclet el\u0151 is van k\u00e9sz\u00edtve. Futtassuk az alkalmaz\u00e1st:</p> <p></p> <p>Az alkalmaz\u00e1s fel\u00fclet\u00e9n meg tudjuk adni az algoritmus bemen\u0151 param\u00e9tereit (<code>double</code> sz\u00e1mok t\u00f6mbje): a p\u00e9ld\u00e1nkban mindig k\u00e9t <code>double</code> sz\u00e1m param\u00e9terrel h\u00edvjuk az algoritmust, ezt a k\u00e9t fels\u0151 sz\u00f6vegmez\u0151ben lehet megadni. A feladatunk az, hogy a Calculate Result gombra kattint\u00e1s sor\u00e1n futtassuk az algoritmust a megadott param\u00e9terekkel, majd, ha v\u00e9gzett, akkor a Result alatti list\u00e1z\u00f3 mez\u0151 \u00faj sor\u00e1ban jelen\u00edts\u00fck meg a kapott eredm\u00e9nyt a bemen\u0151 param\u00e9terekkel egy\u00fctt.</p> <p>K\u00f6vetkez\u0151 l\u00e9p\u00e9sben ismerkedj\u00fcnk meg a let\u00f6lt\u00f6tt Visual Studio solutionnel:</p> <p>A keretalkalmaz\u00e1s egy WinUI 3 alap\u00fa alkalmaz\u00e1s. A fel\u00fclet alapvet\u0151en k\u00e9sz, defin\u00edci\u00f3ja a <code>MainWindow.xaml</code> f\u00e1jlban tal\u00e1lhat\u00f3. Ez sz\u00e1munkra a gyakorlat c\u00e9lj\u00e1t tekintve kev\u00e9sb\u00e9 izgalmas, de otthon a gyakorl\u00e1s kedv\u00e9\u00e9rt \u00e9rdemes \u00e1ttekinteni.</p> Fel\u00fclet kialak\u00edt\u00e1sa a <code>MainWindow.xaml</code>-ben <p>Az ablakfel\u00fclet kialak\u00edt\u00e1s\u00e1nak alapjai:</p> <ul> <li>A gy\u00f6k\u00e9relem (root) \"szok\u00e1sosan\" egy <code>Grid</code>. </li> <li>A gy\u00f6k\u00e9r <code>Grid</code>  fels\u0151 sor\u00e1ban tal\u00e1lhat\u00f3 a k\u00e9t <code>TextBox</code>-ot \u00e9s a <code>Button</code>-t tartalmaz\u00f3 <code>StackPanel</code>.</li> <li>A gy\u00f6k\u00e9r <code>Grid</code> als\u00f3 sor\u00e1ban egy m\u00e1sik <code>Grid</code> tal\u00e1lhat\u00f3. A <code>TextBox</code>-szal ellent\u00e9tben a <code>ListBox</code> nem rendelkezik <code>Header</code> tulajdons\u00e1ggal, \u00edgy ezt nek\u00fcnk kellett egy k\u00fcl\u00f6n\u00e1ll\u00f3 \"Result\" sz\u00f6veg\u0171 <code>TextBlock</code> form\u00e1j\u00e1ban bevezetni. Ezt a <code>Grid</code>-et az\u00e9rt vezett\u00fck be (egy \"egyszer\u0171bb\" <code>StackPanel</code> helyett), mert \u00edgy lehetett el\u00e9rni, hogy a fels\u0151 sor\u00e1ban a \"Result\" <code>TextBlock</code> fix magass\u00e1g\u00fa legyen, az als\u00f3 sorban pedig a <code>ListBox</code> t\u00f6ltse ki a teljes marad\u00f3 helyet (a fels\u0151 sor magass\u00e1ga <code>Auto</code>, az als\u00f3 sor magass\u00e1ga <code>*</code>).</li> <li>A \"Calculate Result\" sz\u00f6veg\u0171 gomb sz\u00e9p p\u00e9lda arra, hogy a <code>Button</code> <code>Content</code>-j\u00e9nek sokszor nemcsak egy egyszer\u0171 sz\u00f6veget adunk meg. A p\u00e9ld\u00e1ban egy <code>SymbolIcon</code> \u00e9s a <code>TextBlock</code> kompoz\u00edci\u00f3ja (<code>StackPanel</code> seg\u00edts\u00e9g\u00e9vel megval\u00f3s\u00edtva), ez\u00e1ltal tudjunk a egy megfelel\u0151 ikont/szimb\u00f3lumot rendelni, mely feldobja a megjelen\u00e9s\u00e9t.</li> <li>Arra is l\u00e1tunk p\u00e9ld\u00e1t, hogy a <code>ListBox</code> hogyan tehet\u0151 g\u00f6rgethet\u0151v\u00e9, ha m\u00e1r sok elem van benne (vagy t\u00fal sz\u00e9lesek az elemek). Ehhez a <code>ScrollViewer</code>-\u00e9t kell megfelel\u0151en param\u00e9terezni.</li> <li>A <code>ListBox</code> <code>ItemContainerStyle</code> tulajdons\u00e1g\u00e1val a <code>ListBox</code> elemre adhatunk meg st\u00edlusokat. A p\u00e9ld\u00e1ban a <code>Padding</code>-et vett\u00fck kisebbre az alap\u00e9rtelmezettn\u00e9l, en\u00e9lk\u00fcl a <code>ListBox</code> elemek magass\u00e1ga helypazarl\u00f3an nagy lenne.</li> </ul> <p>A <code>MainWindow.xaml.cs</code> forr\u00e1sf\u00e1jl a f\u0151ablakhoz tartoz\u00f3 code behind f\u00e1jl, ezt tekints\u00fck \u00e1t, f\u0151bb elemei a k\u00f6vetkez\u0151k:</p> <ul> <li>Az eredm\u00e9ny \u00e9s a param\u00e9terek <code>ListBox</code>-ba t\u00f6rt\u00e9n\u0151 napl\u00f3z\u00e1s\u00e1hoz tal\u00e1lunk egy <code>ShowResult</code> nev\u0171 seg\u00e9df\u00fcggv\u00e9nyt.</li> <li>A <code>CalculateResultButton_Click</code> a gomb a Calculate Result gomb kattint\u00e1s\u00e1hoz tartoz\u00f3 esem\u00e9nykezel\u0151. Azt l\u00e1tjuk, hogy a k\u00e9t sz\u00f6vegdobozb\u00f3l kiolvassa a param\u00e9terek \u00e9rt\u00e9k\u00e9t, \u00e9s megpr\u00f3b\u00e1lja sz\u00e1mm\u00e1 alak\u00edtani. Ha siker\u00fcl, akkor itt t\u00f6rt\u00e9nik majd az algoritmus h\u00edv\u00e1sa (ez nincs m\u00e9g megval\u00f3s\u00edtva), illetve, ha nem siker\u00fcl, akkor a <code>DisplayInvalidElementDialog</code> seg\u00edts\u00e9g\u00e9vel egy \u00fczenetablakban t\u00e1j\u00e9koztatja a felhaszn\u00e1l\u00f3t az \u00e9rv\u00e9nytelen param\u00e9terekr\u0151l.</li> <li>A konstruktorb\u00f3l h\u00edvott <code>AddKeyboardAcceleratorToChangeTheme</code> f\u00fcggv\u00e9ny sz\u00e1munkra nem relev\u00e1ns, a vil\u00e1gos \u00e9s s\u00f6t\u00e9t t\u00e9ma k\u00f6z\u00f6tti v\u00e1lt\u00e1st teszi lehet\u0151v\u00e9 (fut\u00e1s k\u00f6zben \u00e9rdemes kipr\u00f3b\u00e1lni, Ctrl+T billenty\u0171kombin\u00e1ci\u00f3).</li> </ul>"},{"location":"labor/4-tobbszalu/#a-dll-ben-levo-kod-felhasznalasa","title":"A DLL-ben lev\u0151 k\u00f3d felhaszn\u00e1l\u00e1sa","text":"<p>A kiindul\u00f3 projektben megtal\u00e1ljuk a Algorithm.dll-t. Ebben leford\u00edtott form\u00e1ban egy <code>Algorithms</code> n\u00e9vt\u00e9rben lev\u0151 <code>SuperAlgorithm</code> nev\u0171 oszt\u00e1ly tal\u00e1lhat\u00f3, melynek egy <code>Calculate</code> nev\u0171 statikus m\u0171velete van. Ahhoz, hogy egy projektben fel tudjuk haszn\u00e1lni a DLL-ben lev\u0151 oszt\u00e1lyokat, a DLL-re a projekt\u00fcnkben egy \u00fan. referenci\u00e1t kell felvegy\u00fcnk.</p> <ol> <li> <p>Solution Explorerben a projekt\u00fcnk Dependencies node-j\u00e1ra jobbklikkelve v\u00e1lasszuk az Add Project reference opci\u00f3t!</p> <p></p> <p>K\u00fcls\u0151 referenci\u00e1k</p> <p>Itt val\u00f3j\u00e1ban nem egy m\u00e1sik Visual Studio projektre adunk referenci\u00e1t, de \u00edgy a legegyszer\u0171bb el\u0151hozni ezt az ablakot.</p> <p>Megeml\u00edtend\u0151 m\u00e9g, hogy k\u00fcls\u0151 oszt\u00e1lyk\u00f6nyvt\u00e1rak eset\u00e9ben m\u00e1r nem DLL-eket szoktunk refer\u00e1lni egy rendes projektben, hanem a .NET csomagkezel\u0151 rendszer\u00e9b\u0151l a NuGet-r\u0151l szok\u00e1s a k\u00fcls\u0151 csomagokat beszerezni. Most az Algorithm.dll eset\u00fcnkben nincs NuGet-en publik\u00e1lva, ez\u00e9rt kell k\u00e9zzel felvegy\u00fck azt.</p> </li> <li> <p>Az el\u0151ugr\u00f3 ablak jobb als\u00f3 sarokban tal\u00e1lhat\u00f3 Browse gomb seg\u00edts\u00e9g\u00e9vel keress\u00fck meg \u00e9s v\u00e1lasszuk ki projekt External almapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 Algorithms.dll f\u00e1jlt, majd hagyjuk j\u00f3v\u00e1 a hozz\u00e1ad\u00e1st az OK gombbal!</p> </li> </ol> <p>A Solution Explorerben egy projekt alatti Dependencies csom\u00f3pontot lenyitva l\u00e1thatjuk a hivatkozott k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9geket. Itt most m\u00e1r megjelenik az Assemblyk k\u00f6z\u00f6tt el\u0151bb felvett Algorithms referencia is. A Frameworks kateg\u00f3ri\u00e1ban a .NET keretrendszer csomagjait tal\u00e1ljuk. Az Analyzerek pedig statikus k\u00f3delemz\u0151 eszk\u00f6z\u00f6k ford\u00edt\u00e1s id\u0151ben. Illetve itt lenn\u00e9nek m\u00e9g a projekt vagy a NuGet referenci\u00e1k is.</p> <p></p> <p>Kattintsunk Algorithms referenci\u00e1n jobb gombbal \u00e9s v\u00e1lasszuk a View in Object Browser funkci\u00f3t. Ekkor megny\u00edlik az Object Browser tabf\u00fcl, ahol megtekinthetj\u00fck, hogy az adott DLL-ben milyen n\u00e9vterek, oszt\u00e1lyok tal\u00e1lhat\u00f3k, illetve ezeknek milyen tagjaik (tagv\u00e1ltoz\u00f3, tagf\u00fcggv\u00e9ny, property, event) vannak. Ezeket a Visual Studio a DLL metaadataib\u00f3l az \u00fan. reflection mechanizmus seg\u00edts\u00e9g\u00e9vel olvassa ki (ilyen k\u00f3dot ak\u00e1r mi is \u00edrhatunk).</p> <p>Az al\u00e1bbi \u00e1br\u00e1nak megfelel\u0151en az Object Browserben baloldalt keress\u00fck ki az Algorithms csom\u00f3pontot, nyissuk le, \u00e9s l\u00e1that\u00f3v\u00e1 v\u00e1lik, hogy egy <code>Algorithms</code> n\u00e9vt\u00e9r van benne, abban pedig egy <code>SuperAlgorithm</code> oszt\u00e1ly. Ezt kiv\u00e1lasztva k\u00f6z\u00e9pen megjelennek az oszt\u00e1ly f\u00fcggv\u00e9nyei, itt egy f\u00fcggv\u00e9nyt kiv\u00e1lasztva pedig az adott f\u00fcggv\u00e9ny pontos szignat\u00far\u00e1ja:</p> <p></p>"},{"location":"labor/4-tobbszalu/#1-feladat-muvelet-futtatasa-a-foszalon","title":"1. Feladat \u2013 M\u0171velet futtat\u00e1sa a f\u0151sz\u00e1lon","text":"<p>Most m\u00e1r r\u00e1t\u00e9rhet\u00fcnk az algoritmus futtat\u00e1s\u00e1ra. Els\u0151 l\u00e9p\u00e9sben ezt az alkalmaz\u00e1sunk f\u0151 sz\u00e1l\u00e1n tessz\u00fck meg.</p> <ol> <li> <p>A f\u0151ablakon l\u00e9v\u0151 gomb <code>Click</code> esem\u00e9nykezel\u0151j\u00e9ben h\u00edvjuk meg a sz\u00e1mol\u00f3 f\u00fcggv\u00e9ny\u00fcnket. Ehhez a Solution Explorerben nyissuk meg a <code>MainWindow.xaml.cs</code> code behind f\u00e1jlt, \u00e9s keress\u00fck meg a <code>CalculateResultButton_Click</code> esem\u00e9nykezel\u0151t. Eg\u00e9sz\u00edts\u00fck ki a k\u00f3dot az \u00fajonnan behivatkozott algoritmus megh\u00edv\u00e1s\u00e1val.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n        ShowResult(parameters, result);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, \u00e9s vegy\u00fck \u00e9szre, hogy az ablak a sz\u00e1mol\u00e1s ideje alatt nem reag\u00e1l a mozgat\u00e1sra, \u00e1tm\u00e9retez\u00e9sre, a fel\u00fclet gyakorlatilag befagy.</p> </li> </ol> <p>Az alkalmaz\u00e1sunk esem\u00e9nyvez\u00e9relt, mint minden Windows alkalmaz\u00e1s. Az oper\u00e1ci\u00f3s rendszer a k\u00fcl\u00f6nb\u00f6z\u0151 interakci\u00f3kr\u00f3l (pl. mozgat\u00e1s, \u00e1tm\u00e9retez\u00e9s, eg\u00e9rkattint\u00e1s) \u00e9rtes\u00edti az alkalmaz\u00e1sunkat: mivel a gombnyom\u00e1st k\u00f6vet\u0151en az alkalmaz\u00e1sunk egyetlen sz\u00e1la a kalkul\u00e1ci\u00f3val van elfoglalva, nem tudja azonnal feldolgozni a tov\u00e1bbi felhaszn\u00e1l\u00f3i utas\u00edt\u00e1sokat. Amint a sz\u00e1m\u00edt\u00e1s lefutott (\u00e9s az eredm\u00e9nyek megjelennek a list\u00e1ban) a kor\u00e1bban kapott parancsok is v\u00e9grehajt\u00e1sra ker\u00fclnek.</p>"},{"location":"labor/4-tobbszalu/#2-feladat-vegezzuk-a-szamitast-kulon-szalban","title":"2. Feladat \u2013 V\u00e9gezz\u00fck a sz\u00e1m\u00edt\u00e1st k\u00fcl\u00f6n sz\u00e1lban","text":"<p>K\u00f6vetkez\u0151 l\u00e9p\u00e9sben a sz\u00e1m\u00edt\u00e1s elv\u00e9gz\u00e9s\u00e9re egy k\u00fcl\u00f6n sz\u00e1lat fogunk ind\u00edtani, hogy az ne blokkolja a felhaszn\u00e1l\u00f3i fel\u00fcletet.</p> <ol> <li> <p>K\u00e9sz\u00edts\u00fcnk egy \u00faj f\u00fcggv\u00e9nyt a <code>MainWindow</code> oszt\u00e1lyban, mely a feldolgoz\u00f3 sz\u00e1l bel\u00e9p\u00e9si pontja lesz.</p> <pre><code>private void CalculatorThread(object arg)\n{\n    var parameters = (double[])arg;\n    var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n    ShowResult(parameters, result);\n}\n</code></pre> </li> <li> <p>Ind\u00edtsuk el a sz\u00e1lat a gomb <code>Click</code> esem\u00e9nykezel\u0151j\u00e9ben. Ehhez cser\u00e9lj\u00fck le a kor\u00e1bban hozz\u00e1adott k\u00f3dot:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var th = new Thread(CalculatorThread);\n        th.Start(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>A Thread objektum <code>Start</code> m\u0171velet\u00e9ben \u00e1tadott param\u00e9tert kapja meg a <code>CalculatorThread</code> sz\u00e1lf\u00fcggv\u00e9ny\u00fcnk.</p> </li> <li> <p>Futtassuk az alkalmaz\u00e1st F5-tel (most fontos, hogy \u00edgy, a debuggerben futtassuk)! The application called an interface that was marshalled for a different thread. (0x8001010E (RPC_E_WRONG_THREAD)) hiba\u00fczenetet kapunk a <code>ShowResult</code> met\u00f3dusban, ugyanis nem abb\u00f3l a sz\u00e1lb\u00f3l pr\u00f3b\u00e1lunk hozz\u00e1f\u00e9rni a UI elemhez / vez\u00e9rl\u0151h\u00f6z, amelyik l\u00e9trehozta (a vez\u00e9rl\u0151t). A k\u00f6vetkez\u0151 feladatban ezt a probl\u00e9m\u00e1t analiz\u00e1ljuk \u00e9s oldjuk meg.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/#3-feladat-a-dispatcherqueuehasthreadaccess-es-dispatcherqueuetryenqueue-hasznalata","title":"3. Feladat \u2013 a <code>DispatcherQueue.HasThreadAccess</code> \u00e9s <code>DispatcherQueue.TryEnqueue</code> haszn\u00e1lata","text":"<p>Az el\u0151z\u0151 pontban a probl\u00e9m\u00e1t a k\u00f6vetkez\u0151 okozza. WinUI alkalmaz\u00e1sokn\u00e1l \u00e9l az al\u00e1bbi szab\u00e1ly: az ablakok/fel\u00fcletelemek/vez\u00e9rl\u0151elemek alapvet\u0151en nem sz\u00e1lv\u00e9dett (thread safe) objektumok, \u00edgy egy ablakhoz/fel\u00fcletelemhez/vez\u00e9rl\u0151h\u00f6z csak abb\u00f3l a sz\u00e1lb\u00f3l szabad hozz\u00e1f\u00e9rni (pl. propertyj\u00e9t olvasni, \u00e1ll\u00edtani, m\u0171velet\u00e9t megh\u00edvni), amelyik sz\u00e1l az adott ablakot/fel\u00fcletelemet/vez\u00e9rl\u0151t l\u00e9trehozta, m\u00e1sk\u00fcl\u00f6nben kiv\u00e9telt kapunk. Alkalmaz\u00e1sunkban az\u00e9rt kaptunk kiv\u00e9telt, mert a <code>resultListBox</code> vez\u00e9rl\u0151t a f\u0151 sz\u00e1lban hoztuk l\u00e9tre, a <code>ShowResult</code> met\u00f3dusban az eredm\u00e9ny megjelen\u00edt\u00e9sekor viszont egy m\u00e1sik sz\u00e1lb\u00f3l f\u00e9r\u00fcnk hozz\u00e1 (<code>resultListBox.Items.Add</code> m\u0171velet h\u00edv\u00e1sa).</p> <p>K\u00e9rd\u00e9s, hogyan lehet m\u00e9gis valamilyen m\u00f3don ezekhez a fel\u00fcletelemekhez/vez\u00e9rl\u0151kh\u00f6z egy m\u00e1sik sz\u00e1lb\u00f3l hozz\u00e1f\u00e9rni. A megold\u00e1st a <code>DispatcherQueue</code> alkalmaz\u00e1sa jelenti, mely abban ny\u00fajt seg\u00edts\u00e9get, hogy a vez\u00e9rl\u0151kh\u00f6z mindig a megfelel\u0151 sz\u00e1lb\u00f3l t\u00f6rt\u00e9njen a hozz\u00e1f\u00e9r\u00e9s:</p> <ul> <li><code>DispatcherQueue</code> objektum <code>TryEnqueue</code> f\u00fcggv\u00e9nye a vez\u00e9rl\u0151elemet l\u00e9trehoz\u00f3 sz\u00e1lon futtatja le a sz\u00e1m\u00e1ra param\u00e9terk\u00e9nt megadott f\u00fcggv\u00e9nyt (mely f\u00fcggv\u00e9nyb\u0151l \u00edgy m\u00e1r k\u00f6zvetlen\u00fcl hozz\u00e1f\u00e9rhet\u00fcnk a vez\u00e9rl\u0151h\u00f6z).</li> <li>A <code>DispatcherQueue</code> objektum <code>HasThreadAccess</code> tulajdons\u00e1ga azt seg\u00edt eld\u00f6nteni, sz\u00fcks\u00e9g van-e egy\u00e1ltal\u00e1n az el\u0151z\u0151 pontban eml\u00edtett <code>TryEnqueue</code> alkalmaz\u00e1s\u00e1ra. Ha a tulajdons\u00e1g \u00e9rt\u00e9ke<ul> <li>igaz, akkor a vez\u00e9rl\u0151h\u00f6z k\u00f6zvetlen\u00fcl is hozz\u00e1f\u00e9rhet\u00fcnk (mert az aktu\u00e1lis sz\u00e1l megegyezik a vez\u00e9rl\u0151t l\u00e9trehoz\u00f3 sz\u00e1llal), ellenben ha</li> <li>hamis, akkor a vez\u00e9rl\u0151h\u00f6z csak \"ker\u00fcl\u0151 \u00faton\", a <code>DispatcherQueue</code> objektum <code>TryEnqueue</code> seg\u00edts\u00e9g\u00e9vel f\u00e9rhet\u00fcnk hozz\u00e1 (mert az aktu\u00e1lis sz\u00e1l NEM egyezik a vez\u00e9rl\u0151t l\u00e9trehoz\u00f3 sz\u00e1llal).</li> </ul> </li> </ul> <p>A <code>DispatcherQueue</code> seg\u00edts\u00e9g\u00e9vel teh\u00e1t el tudjuk ker\u00fclni kor\u00e1bbi kiv\u00e9tel\u00fcnket (a vez\u00e9rl\u0151h\u00f6z, eset\u00fcnkben a <code>resultListBox</code>-hoz val\u00f3 hozz\u00e1f\u00e9r\u00e9st a megfelel\u0151 sz\u00e1lra tudjuk \"ir\u00e1ny\u00edtani\"). Ezt fogjuk a k\u00f6vetkez\u0151kben megtenni.</p> <p>Note</p> <p>A <code>DispatcherQueue</code> objektum a Window oszt\u00e1ly lesz\u00e1rmazottakban \u00e9rhet\u0151 el a<code>DispatcherQueue</code> tulajdons\u00e1g\u00e1n kereszt\u00fcl (m\u00e1s oszt\u00e1lyokban pedig a <code>DispatcherQueue.GetForCurrentThread()</code> statikus m\u0171velet seg\u00edts\u00e9g\u00e9vel szerezhet\u0151 meg).</p> <p>M\u00f3dos\u00edtanunk kell a <code>ShowResult</code> met\u00f3dust annak \u00e9rdek\u00e9ben, hogy mell\u00e9ksz\u00e1lb\u00f3l t\u00f6rt\u00e9n\u0151 h\u00edv\u00e1s eset\u00e9n se dobjon kiv\u00e9telt.</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    // Closing the window the DispatcherQueue property may return null, so we have to perform a null check\n    if (this.DispatcherQueue == null)\n        return;\n\n    if (this.DispatcherQueue.HasThreadAccess)\n    {\n        var item = new ListBoxItem()\n        {\n            Content = $\"{parameters[0]} #  {parameters[1]} = {result}\"\n        };\n        resultListBox.Items.Add(item);\n        resultListBox.ScrollIntoView(item);\n    }\n    else\n    {\n        this.DispatcherQueue.TryEnqueue( () =&gt; ShowResult(parameters, result) );\n    }\n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p>Ez a megold\u00e1s m\u00e1r m\u0171k\u00f6d\u0151k\u00e9pes, f\u0151bb elemei a k\u00f6vetkez\u0151k:</p> <ul> <li>A <code>DispatcherQueue</code> <code>null</code> vizsg\u00e1lat szerepe: a f\u0151ablak bez\u00e1r\u00e1sa ut\u00e1n a <code>DispatcherQueue</code> m\u00e1r <code>null</code>, nem haszn\u00e1lhat\u00f3.</li> <li>A <code>DispatcherQueue.HasThreadAccess</code> seg\u00edts\u00e9g\u00e9vel megn\u00e9zz\u00fck, hogy a h\u00edv\u00f3 sz\u00e1l hozz\u00e1f\u00e9rhet-e k\u00f6zvetlen\u00fcl a vez\u00e9rl\u0151kh\u00f6z (eset\u00fcnkben a <code>ListBox</code>-hoz):<ul> <li>Ha igen, minden \u00fagy t\u00f6rt\u00e9nik, mint eddig, a <code>ListBox</code>-ot kezel\u0151 k\u00f3d v\u00e1ltozatlan.</li> <li>Ha nem, a <code>DispatcherQueue.TryEnqueue</code> seg\u00edts\u00e9g\u00e9vel f\u00e9r\u00fcnk hozz\u00e1 a vez\u00e9rl\u0151h\u00f6z. A k\u00f6vetkez\u0151 tr\u00fckk\u00f6t alkalmazzuk. A <code>TryEnqueue</code> f\u00fcggv\u00e9nynek egy olyan param\u00e9ter n\u00e9lk\u00fcli, egysoros f\u00fcggv\u00e9nyt adunk meg lambda kifejez\u00e9s form\u00e1j\u00e1ban, mellyel a <code>ShowResult</code> f\u00fcggv\u00e9ny\u00fcnket h\u00edvja meg (gyakorlatilag rekurz\u00edvan), a param\u00e9tereket tov\u00e1bb passzolva sz\u00e1m\u00e1ra. Ez nek\u00fcnk az\u00e9rt j\u00f3, mert ez a <code>ShowResult</code> h\u00edv\u00e1s m\u00e1r azon a sz\u00e1lon t\u00f6rt\u00e9nik, mely a vez\u00e9rl\u0151t l\u00e9trehozta (az alkalmaz\u00e1s f\u0151 sz\u00e1la), ebben a <code>HasThreadAccess</code> \u00e9rt\u00e9ke m\u00e1r igaz, \u00e9s hozz\u00e1 tudunk f\u00e9rni k\u00f6zvetlen\u00fcl a <code>ListBox</code>-unkhoz. Ez a rekurz\u00edv megk\u00f6zel\u00edt\u00e9s egy bevett minta a redund\u00e1ns k\u00f3dok elker\u00fcl\u00e9s\u00e9re.</li> </ul> </li> </ul> <p>Tegy\u00fcnk t\u00f6r\u00e9spontot a <code>ShowResult</code> m\u0171velet els\u0151 sor\u00e1ra, \u00e9s az alkalmaz\u00e1st futtatva gy\u0151z\u0151dj\u00fcnk meg arr\u00f3l, hogy a <code>ShowResult</code> m\u0171velet els\u0151 h\u00edv\u00e1sakor <code>HasThreadAccess</code> m\u00e9g hamis (\u00edgy megt\u00f6rt\u00e9nik a <code>TryEnqueue</code> h\u00edv\u00e1sa), majd ennek hat\u00e1s\u00e1ra m\u00e9g egyszer megh\u00edv\u00f3dik a <code>ShowResult</code>, de ekkor a <code>HasThreadAccess</code> \u00e9rt\u00e9ke m\u00e1r igaz.</p> <p>Vegy\u00fck ki a t\u00f6r\u00e9spontot, \u00edgy futtassuk az alkalmaz\u00e1st: vegy\u00fck \u00e9szre, hogy am\u00edg egy sz\u00e1m\u00edt\u00e1s fut, \u00fajabbakat is ind\u00edthatunk, hiszen a fel\u00fclet\u00fcnk v\u00e9gig reszponz\u00edv maradt (a kor\u00e1bban tapasztalt hiba pedig m\u00e1r nem jelentkezik).</p>"},{"location":"labor/4-tobbszalu/#4-feladat-muvelet-vegzese-threadpool-szalon","title":"4. feladat \u2013 M\u0171velet v\u00e9gz\u00e9se Threadpool sz\u00e1lon","text":"<p>Az el\u0151z\u0151 megold\u00e1s egy jellemz\u0151je, hogy mindig \u00faj sz\u00e1lat hoz l\u00e9tre a m\u0171velethez. Eset\u00fcnkben ennek nincs k\u00fcl\u00f6n\u00f6sebb jelent\u0151s\u00e9ge, de ez a megk\u00f6zel\u00edt\u00e9s egy olyan kiszolg\u00e1l\u00f3 alkalmaz\u00e1s eset\u00e9ben, amely nagysz\u00e1m\u00fa k\u00e9r\u00e9st szolg\u00e1l ki \u00fagy, hogy minden k\u00e9r\u00e9shez k\u00fcl\u00f6n sz\u00e1lat ind\u00edt, m\u00e1r probl\u00e9m\u00e1s lehet. K\u00e9t okb\u00f3l is:</p> <ul> <li>Ha a sz\u00e1lf\u00fcggv\u00e9ny gyorsan lefut (egy kliens kiszolg\u00e1l\u00e1sa gyors), akkor a CPU nagy r\u00e9sz\u00e9t arra pazaroljuk, hogy sz\u00e1lakat ind\u00edtsunk \u00e9s \u00e1ll\u00edtsunk le, ezek ugyanis \u00f6nmagukban is er\u0151forr\u00e1sig\u00e9nyesek.</li> <li>T\u00fal nagy sz\u00e1m\u00fa sz\u00e1l is l\u00e9trej\u00f6het, ennyit kell \u00fctemeznie az oper\u00e1ci\u00f3s rendszernek, ami feleslegesen pazarolja az er\u0151forr\u00e1sokat.</li> </ul> <p>Egy m\u00e1sik probl\u00e9ma jelen megold\u00e1sunkkal: mivel a sz\u00e1m\u00edt\u00e1s \u00fan. el\u0151t\u00e9rsz\u00e1lon fut (az \u00fajonnan l\u00e9trehozott sz\u00e1lak alap\u00e9rtelmez\u00e9sben el\u0151t\u00e9rsz\u00e1lak), hi\u00e1ba z\u00e1rjuk be az alkalmaz\u00e1st, a program tov\u00e1bb fut a h\u00e1tt\u00e9rben mindaddig, am\u00edg v\u00e9gre nem hajt\u00f3dik az utolj\u00e1ra ind\u00edtott sz\u00e1mol\u00e1s is: egy processz fut\u00e1sa ugyanis akkor fejez\u0151dik csak be, ha m\u00e1r nincs fut\u00f3 el\u0151t\u00e9rsz\u00e1la.</p> <p>M\u00f3dos\u00edtsuk a gomb esem\u00e9nykezel\u0151j\u00e9t, hogy \u00faj sz\u00e1l ind\u00edt\u00e1sa helyett threadpool sz\u00e1lon futtassa a sz\u00e1m\u00edt\u00e1st. Ehhez csak a gombnyom\u00e1s esem\u00e9nykezel\u0151j\u00e9t kell ism\u00e9t \u00e1t\u00edrni.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        ThreadPool.QueueUserWorkItem(CalculatorThread, parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, \u00e9s vegy\u00fck \u00e9szre, hogy az alkalmaz\u00e1s az ablak bez\u00e1r\u00e1sakor azonnal le\u00e1ll, nem foglalkozik az esetlegesen m\u00e9g fut\u00f3 sz\u00e1lakkal (mert a threadpool sz\u00e1lak h\u00e1tt\u00e9r sz\u00e1lak).</p>"},{"location":"labor/4-tobbszalu/#5-feladat-termelo-fogyaszto-alapu-megoldas","title":"5. Feladat \u2013 Termel\u0151-fogyaszt\u00f3 alap\u00fa megold\u00e1s","text":"<p>Az el\u0151z\u0151 feladatok megold\u00e1sa sor\u00e1n \u00f6nmag\u00e1ban egy j\u00f3l m\u0171k\u00f6d\u0151 komplett megold\u00e1s\u00e1t kaptuk az eredeti probl\u00e9m\u00e1nak, mely lehet\u0151v\u00e9 teszi, hogy ak\u00e1r t\u00f6bb munkasz\u00e1l is p\u00e1rhuzamosan dolgozzon a h\u00e1tt\u00e9rben a sz\u00e1m\u00edt\u00e1son, ha a gombot sokszor egym\u00e1s ut\u00e1n megnyomjuk. A k\u00f6vetkez\u0151kben \u00fagy fogjuk m\u00f3dos\u00edtani az alkalmaz\u00e1sunkat, hogy a gombnyom\u00e1sra ne mindig keletkezzen \u00faj sz\u00e1l, hanem a feladatok beker\u00fcljenek egy feladatsorba, ahonnan t\u00f6bb, a h\u00e1tt\u00e9rben folyamatosan fut\u00f3 sz\u00e1l egym\u00e1s ut\u00e1n fogja kivenni \u0151ket \u00e9s v\u00e9grehajtani. Ez a feladat a klasszikus termel\u0151-fogyaszt\u00f3 probl\u00e9ma, mely a gyakorlatban is sokszor el\u0151fordul, a m\u0171k\u00f6d\u00e9s\u00e9t az al\u00e1bbi \u00e1bra szeml\u00e9lteti.</p> <p></p> <p>Termel\u0151 fogyaszt\u00f3 vs <code>ThreadPool</code></p> <p>Ha belegondolunk, a <code>ThreadPool</code> is egy speci\u00e1lis, a .NET \u00e1ltal sz\u00e1munkra biztos\u00edtott termel\u0151-fogyaszt\u00f3 \u00e9s \u00fctemez\u0151 mechanizmus. A k\u00f6vetkez\u0151kben egy m\u00e1s jelleg\u0171 termel\u0151-fogyaszt\u00f3 megold\u00e1st dolgozunk ki annak \u00e9rdek\u00e9ben, hogy bizonyos sz\u00e1lkezel\u00e9ssel kapcsolatos konkurencia probl\u00e9m\u00e1kkal tal\u00e1lkozhassunk.</p> <p>A f\u0151sz\u00e1lunk a termel\u0151, a Calculate result gombra kattintva hoz l\u00e9tre egy \u00faj feladatot. Fogyaszt\u00f3/feldolgoz\u00f3 munkasz\u00e1lb\u00f3l az\u00e9rt ind\u00edtunk majd t\u00f6bbet, mert \u00edgy t\u00f6bb CPU magot is ki tudunk haszn\u00e1lni, valamint a feladatok v\u00e9grehajt\u00e1s\u00e1t p\u00e1rhuzamos\u00edtani tudjuk.</p> <p>A feladatok ideiglenes t\u00e1rol\u00e1s\u00e1ra a kiindul\u00f3 projekt\u00fcnkben m\u00e1r n\u00e9mik\u00e9ppen el\u0151k\u00e9sz\u00edtett <code>DataFifo</code> oszt\u00e1lyt tudjuk haszn\u00e1lni (a Solution Explorerben a <code>Data</code> mapp\u00e1ban tal\u00e1lhat\u00f3). N\u00e9zz\u00fck meg a forr\u00e1sk\u00f3dj\u00e1t. Egy egyszer\u0171 FIFO sort val\u00f3s\u00edt meg, melyben <code>double[]</code> elemeket t\u00e1rol. A <code>Put</code> met\u00f3dus hozz\u00e1f\u0171zi a bels\u0151 lista v\u00e9g\u00e9hez az \u00faj p\u00e1rokat, m\u00edg a <code>TryGet</code> met\u00f3dus visszaadja (\u00e9s elt\u00e1vol\u00edtja) a bels\u0151 lista els\u0151 elem\u00e9t. Amennyiben a lista \u00fcres, a f\u00fcggv\u00e9ny nem tud visszaadni elemet. Ilyenkor a <code>false</code> visszat\u00e9r\u00e9si \u00e9rt\u00e9kkel jelzi ezt.</p> <ol> <li> <p>M\u00f3dos\u00edtsuk a gomb esem\u00e9nykezel\u0151j\u00e9t, hogy ne <code>ThreadPool</code>ba dolgozzon, hanem a FIFO-ba:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        _fifo.Put(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>K\u00e9sz\u00edts\u00fck el az \u00faj sz\u00e1lkezel\u0151 f\u00fcggv\u00e9ny naiv implement\u00e1ci\u00f3j\u00e1t az \u0171rlap oszt\u00e1lyunkban:</p> <pre><code>private void WorkerThread()\n{\n    while (true)\n    {\n        if (_fifo.TryGet(out var data))\n        {\n            double result = Algorithms.SuperAlgorithm.Calculate(data);\n            ShowResult(data, result);\n        }\n\n        Thread.Sleep(500);\n    }\n}\n</code></pre> <p>A <code>Thread.Sleep</code> bevezet\u00e9s\u00e9re az\u00e9rt van sz\u00fcks\u00e9g, mert e n\u00e9lk\u00fcl a munkasz\u00e1lak \u00fcres FIFO eset\u00e9n folyamatosan feleslegesen p\u00f6r\u00f6gn\u00e9nek, semmi hasznos m\u0171veletet nem v\u00e9gezve is 100%-ban kiterheln\u00e9nek egy-egy CPU magot. Megold\u00e1sunk nem ide\u00e1lis, k\u00e9s\u0151bb tov\u00e1bbfejlesztj\u00fck.</p> </li> <li> <p>Hozzuk l\u00e9tre, \u00e9s ind\u00edtsuk el a feldolgoz\u00f3 sz\u00e1lakat a konstruktorban:</p> <pre><code>new Thread(WorkerThread) { Name = \"Worker thread 1\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 2\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 3\" }.Start();\n</code></pre> </li> <li> <p>Ind\u00edtsuk el az alkalmaz\u00e1st, majd z\u00e1rjuk is be azonnal an\u00e9lk\u00fcl, hogy a Calculate Result gombra kattintan\u00e1nk. Az tapasztaljuk, hogy az ablakunk bez\u00e1r\u00f3dik ugyan, de a processz\u00fcnk tov\u00e1bb fut, az alkalmaz\u00e1s bez\u00e1r\u00e1s\u00e1ra csak a Visual Studiob\u00f3l, vagy a Task Managerb\u0151l van lehet\u0151s\u00e9g:</p> <p></p> <p>A feldolgoz\u00f3 sz\u00e1lak el\u0151t\u00e9rsz\u00e1lak, kil\u00e9p\u00e9skor megakad\u00e1lyozz\u00e1k a processz megsz\u0171n\u00e9s\u00e9t. Az egyik megold\u00e1s az lehetne, ha a sz\u00e1lak <code>IsBackground</code> tulajdons\u00e1g\u00e1t <code>true</code>-ra \u00e1ll\u00edtan\u00e1nk a l\u00e9trehoz\u00e1sukat k\u00f6vet\u0151en. A m\u00e1sik megold\u00e1s, hogy kil\u00e9p\u00e9skor gondoskodunk a feldolgoz\u00f3 sz\u00e1lak kil\u00e9ptet\u00e9s\u00e9r\u0151l. Egyel\u0151re tegy\u00fck f\u00e9lre ezt a probl\u00e9m\u00e1t, k\u00e9s\u0151bb visszat\u00e9r\u00fcnk r\u00e1.</p> </li> <li> <p>Ind\u00edtsuk el az alkalmaz\u00e1st. Azt tapasztaljuk, hogy miut\u00e1n kattintunk a Calculate Result gombon (csak egyszer kattintsunk rajta) nagy val\u00f3sz\u00edn\u0171s\u00e9ggel kiv\u00e9telt fogunk kapni. A probl\u00e9ma az, hogy a <code>DataFifo</code> nem sz\u00e1lbiztos, inkonzisztens\u00e9 v\u00e1lt. K\u00e9t ered\u0151 ok is h\u00faz\u00f3dik a h\u00e1tt\u00e9rben:</p> </li> </ol>"},{"location":"labor/4-tobbszalu/#problema-1","title":"Probl\u00e9ma 1","text":"<p>N\u00e9zz\u00fck a k\u00f6vetkez\u0151 forgat\u00f3k\u00f6nyvet:</p> <ol> <li>A sor \u00fcres. A feldolgoz\u00f3 sz\u00e1lak egy <code>while</code> ciklusban folyamatosan pollozz\u00e1k a FIFO-t, vagyis h\u00edvj\u00e1k a <code>TryGet</code> met\u00f3dus\u00e1t.</li> <li>A felhaszn\u00e1l\u00f3 egy feladatot tesz a sorba.</li> <li>Az egyik feldolgoz\u00f3 sz\u00e1l a <code>TryGet</code> met\u00f3dusban azt l\u00e1tja, van adat a sorban, vagyis <code>if ( _innerList.Count &gt; 0 )</code> k\u00f3dsor felt\u00e9tele teljes\u00fcl, \u00e9s r\u00e1l\u00e9p a k\u00f6vetkez\u0151 k\u00f3dsorra. Tegy\u00fck fel, hogy ez a sz\u00e1l ebben a pillanatban elveszti a fut\u00e1si jog\u00e1t, m\u00e1r nincs ideje kivenni az adatot a sorb\u00f3l.</li> <li>Egy m\u00e1sik feldolgoz\u00f3 sz\u00e1l is \u00e9ppen ekkor ejti meg az <code>if ( _innerList.Count &gt; 0 )</code> vizsg\u00e1latot, n\u00e1la is teljes\u00fcl a felt\u00e9tel, \u00e9s ez a sz\u00e1l ki is veszi az adatot a sorb\u00f3l.</li> <li>Az els\u0151 sz\u00e1lunk \u00fajra \u00fctemez\u00e9sre ker\u00fcl, fel\u00e9bred, \u0151 is megpr\u00f3b\u00e1lja kivenni az adatot a sorb\u00f3l: a sor viszont m\u00e1r \u00fcres, a m\u00e1sik sz\u00e1lunk kivette az egyetlen adatot a sorb\u00f3l az orra el\u0151tt. \u00cdgy az <code>_innerList[0]</code> hozz\u00e1f\u00e9r\u00e9s kiv\u00e9telt eredm\u00e9nyez.</li> </ol> <p>Ezt a probl\u00e9m\u00e1t csak \u00fagy tudjuk elker\u00fclni, ha a sor \u00fcress\u00e9g\u00e9nek a vizsg\u00e1lat\u00e1t \u00e9s az elem kiv\u00e9tel\u00e9t \"oszthatatlann\u00e1\" tessz\u00fck: ez azt jelenti, hogy am\u00edg az egyik sz\u00e1l nem v\u00e9gzett mindkett\u0151vel, addig a t\u00f6bbi sz\u00e1lnak v\u00e1rnia kell!</p> <p>Thread.Sleep(500)</p> <p>Az \u00fcress\u00e9gvizsg\u00e1latot figyel\u0151 k\u00f3dsort k\u00f6vet\u0151 <code>Thread.Sleep(500);</code> k\u00f3dsornak csak az a szerepe a p\u00e9ldak\u00f3dunkban, hogy a fenti peches forgat\u00f3k\u00f6nyv bek\u00f6vetkez\u00e9s\u00e9nek a val\u00f3sz\u00edn\u0171s\u00e9g\u00e9t megn\u00f6velje, s \u00edgy a p\u00e9ld\u00e1t szeml\u00e9letesebb\u00e9 tegye (mivel ilyenkor szinte biztos, hogy \u00e1t\u00fctemez\u0151dik a sz\u00e1l). A k\u00e9s\u0151bbiekben ezt ki is fogjuk venni, egyel\u0151re hagyjuk benne.</p>"},{"location":"labor/4-tobbszalu/#problema-2","title":"Probl\u00e9ma 2","text":"<p>A <code>DataFifo</code> oszt\u00e1ly egyid\u0151ben t\u00f6bb sz\u00e1lb\u00f3l is hozz\u00e1f\u00e9rhet a <code>List&lt;double[]&gt;</code> t\u00edpus\u00fa <code>_innerList</code> tagv\u00e1ltoz\u00f3hoz. Ugyanakkor, ha megn\u00e9zz\u00fck a <code>List&lt;T&gt;</code> dokument\u00e1ci\u00f3j\u00e1t, azt tal\u00e1ljuk, hogy az oszt\u00e1ly nem sz\u00e1lbiztos (not thread safe). Ez esetben viszont ezt nem tehetj\u00fck meg, nek\u00fcnk kell a k\u00f6lcs\u00f6n\u00f6s kiz\u00e1r\u00e1st z\u00e1rakkal biztos\u00edtanunk: meg kell oldjuk, hogy a sz\u00e1laink egyid\u0151ben csak egy met\u00f3dus\u00e1hoz / tulajdons\u00e1g\u00e1hoz / tagv\u00e1ltoz\u00f3j\u00e1hoz f\u00e9rjenek hozz\u00e1 (pontosabban inkonzisztencia csak egyidej\u0171 \u00edr\u00e1s, illetve egyidej\u0171 \u00edr\u00e1s \u00e9s olvas\u00e1s eset\u00e9n l\u00e9phet fel, de az \u00edr\u00f3kat \u00e9s az olvas\u00f3kat a legt\u00f6bb esetben nem szoktuk megk\u00fcl\u00f6nb\u00f6ztetni, itt sem tessz\u00fck).</p> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben a <code>DataFifo</code> oszt\u00e1lyunkat sz\u00e1lbiztoss\u00e1 tessz\u00fck, amivel megakad\u00e1lyozzuk, hogy a fenti k\u00e9t probl\u00e9ma bek\u00f6vetkezhessen.</p>"},{"location":"labor/4-tobbszalu/#6-feladat-tegyuk-szalbiztossa-a-datafifo-osztalyt","title":"6. feladat \u2013 Tegy\u00fck sz\u00e1lbiztoss\u00e1 a DataFifo oszt\u00e1lyt","text":"<p>A <code>DataFifo</code> oszt\u00e1ly sz\u00e1lbiztoss\u00e1 t\u00e9tel\u00e9hez sz\u00fcks\u00e9g\u00fcnk van egy objektumra (ez b\u00e1rmilyen referencia t\u00edpus\u00fa objektum lehet), melyet kulcsk\u00e9nt haszn\u00e1lhatunk a z\u00e1rol\u00e1sn\u00e1l. Ezt k\u00f6vet\u0151en a <code>lock</code> kulcssz\u00f3 seg\u00edts\u00e9g\u00e9vel el tudjuk \u00e9rni, hogy egyszerre mindig csak egy sz\u00e1l tart\u00f3zkodjon az adott kulccsal v\u00e9dett blokkokban.</p> <ol> <li> <p>Vegy\u00fcnk fel egy <code>object</code> t\u00edpus\u00fa mez\u0151t <code>_syncRoot</code> n\u00e9ven a <code>DataFifo</code> oszt\u00e1lyba.</p> <pre><code>private object _syncRoot = new object();\n</code></pre> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>Put</code> \u00e9s a <code>TryGet</code> f\u00fcggv\u00e9nyeket a z\u00e1rol\u00e1ssal.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data); \n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            Thread.Sleep(500);\n\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            return true;\n        }\n    }\n    data = null;\n    return false;\n}\n</code></pre> <p>Surround with</p> <p>Haszn\u00e1ljuk a Visual Studio Surround with funkci\u00f3j\u00e1t a CTRL + K, CTRL + S billenty\u0171 kombin\u00e1ci\u00f3j\u00e1val a k\u00f6r\u00fclvenni k\u00edv\u00e1nt kijel\u00f6lt k\u00f3dr\u00e9szleten.</p> </li> </ol> <p>Most m\u00e1r nem szabad kiv\u00e9telt kapnunk.</p> <p>Ki is vehetj\u00fck a <code>TryGet</code> met\u00f3dusb\u00f3l a mesters\u00e9ges k\u00e9sleltet\u00e9st (<code>Thread.Sleep(500);</code> sor).</p> <p>Lockol\u00e1s <code>this</code>-en</p> <p>Felmer\u00fclhet a k\u00e9rd\u00e9s, hogy mi\u00e9rt vezett\u00fcnk be egy k\u00fcl\u00f6n <code>_syncRoot</code> tagv\u00e1ltoz\u00f3t \u00e9s haszn\u00e1ltuk ezt z\u00e1rol\u00e1sra a <code>lock</code> param\u00e9terek\u00e9nt, amikor a <code>this</code>-t is haszn\u00e1lhattuk volna helyette (a <code>DataFifo</code> referencia t\u00edpus, \u00edgy ennek nem lenne akad\u00e1lya). A <code>this</code> alkalmaz\u00e1sa azonban s\u00e9rten\u00e9 az oszt\u00e1lyunk egys\u00e9gbez\u00e1r\u00e1s\u00e1t! Ne feledj\u00fck: a <code>this</code> egy referencia az objektumunkra, de m\u00e1s oszt\u00e1lyoknak is van ugyanerre az objektumra referenci\u00e1juk (pl. eset\u00fcnkben a <code>MainWindow</code>-nak van referenci\u00e1ja a <code>DataFifo</code>-ra), \u00e9s ha ezek a k\u00fcls\u0151 oszt\u00e1lyok z\u00e1rat tesznek a <code>lock</code> seg\u00edts\u00e9g\u00e9vel az objektumra, akkor az \"interfer\u00e1l\" az \u00e1ltalunk az oszt\u00e1lyon bel\u00fck haszn\u00e1lt z\u00e1rol\u00e1ssal (mivel <code>this</code> alkalmaz\u00e1sa miatt a k\u00fcls\u0151 \u00e9s bels\u0151 <code>lock</code>-ok param\u00e9tere ugyanaz lesz). \u00cdgy pl. egy k\u00fcls\u0151 z\u00e1rral teljesen meg lehet \"b\u00e9n\u00edtani\" a <code>TryGet</code> \u00e9s <code>Put</code> m\u0171velet m\u0171k\u00f6d\u00e9s\u00e9t. Ezzel szemben az \u00e1ltalunk v\u00e1lasztott megold\u00e1sban a <code>lock</code> param\u00e9tere, a <code>_syncRoot</code> v\u00e1ltoz\u00f3 priv\u00e1t, ehhez m\u00e1r k\u00fcls\u0151 oszt\u00e1lyok nem f\u00e9rhetnek hozz\u00e1, \u00edgy nem is zavarhatj\u00e1k meg az oszt\u00e1lyunk bels\u0151 m\u0171k\u00f6d\u00e9s\u00e9t.</p>"},{"location":"labor/4-tobbszalu/#7-feladat-hatekony-jelzes-megvalositasa","title":"7. feladat \u2013 Hat\u00e9kony jelz\u00e9s megval\u00f3s\u00edt\u00e1sa","text":""},{"location":"labor/4-tobbszalu/#manualresetevent-hasznalata","title":"ManualResetEvent haszn\u00e1lata","text":"<p>A <code>WorkerThread</code>-ben folyamatosan fut\u00f3 <code>while</code> ciklus \u00fan. akt\u00edv v\u00e1rakoz\u00e1st val\u00f3s\u00edt meg, ami mindig ker\u00fclend\u0151. Ha a <code>Thread.Sleep</code>-et nem tett\u00fck volna a ciklusmagba, akkor ezzel maximumra ki is terheln\u00e9 a processzort. A <code>Thread.Sleep</code> megoldja ugyan a processzor terhel\u00e9s probl\u00e9m\u00e1t, de bevezet egy m\u00e1sikat: ha mindh\u00e1rom munkasz\u00e1lunk \u00e9ppen alv\u00f3 \u00e1llapotba l\u00e9pett, mikor be\u00e9rkezik egy \u00faj adat, akkor feleslegesen v\u00e1runk 500 ms-ot az adat feldolgoz\u00e1s\u00e1nak megkezd\u00e9s\u00e9ig.</p> <p>A k\u00f6vetkez\u0151kben \u00fagy fogjuk m\u00f3dos\u00edtani az alkalmaz\u00e1st, hogy blokkolva v\u00e1rakozzon, am\u00edg adat nem ker\u00fcl a FIFO-ba (amikor viszont adat ker\u00fcl bele, azonnal kezdje meg a feldolgoz\u00e1st). Annak jelz\u00e9s\u00e9re, hogy van-e adat a sorban egy <code>ManualResetEvent</code>-et fogunk haszn\u00e1lni.</p> <ol> <li> <p>Adjunk hozz\u00e1 egy <code>MaunalResetEvent</code> p\u00e9ld\u00e1nyt a <code>DataFifo</code> oszt\u00e1lyunkhoz <code>_hasData</code> n\u00e9ven.</p> <pre><code>// A false konstruktor param\u00e9ter eredm\u00e9nyek\u00e9ppen kezdetben az esem\u00e9ny nem jelzett (kapu csukva)\nprivate ManualResetEvent _hasData = new ManualResetEvent(false);\n</code></pre> </li> <li> <p>A <code>_hasData</code> alkalmaz\u00e1sunkban kapuk\u00e9nt viselkedik. Amikor adat ker\u00fcl a list\u00e1ba \u201ekinyitjuk\u201d, m\u00edg amikor ki\u00fcr\u00fcl a lista \u201ebez\u00e1rjuk\u201d.</p> <p>Az esem\u00e9ny szemantik\u00e1ja \u00e9s elnevez\u00e9se</p> <p>L\u00e9nyeges, hogy j\u00f3 v\u00e1lasszuk meg az esem\u00e9ny\u00fcnk szemantik\u00e1j\u00e1t \u00e9s ezt a v\u00e1ltoz\u00f3nk nev\u00e9vel pontosan ki is fejezz\u00fck. A p\u00e9ld\u00e1nkban a <code>_hasData</code> n\u00e9v j\u00f3l kifejezi, hogy pontosan akkor \u00e9s csak akkor jelzett az esem\u00e9ny\u00fcnk (nyitott a kapu), amikor van feldolgozand\u00f3 adat. Most m\u00e1r \"csak\" az a dolgunk, hogy ezt a szemantik\u00e1t megval\u00f3s\u00edtsuk: jelzettbe tegy\u00fck az esem\u00e9nyt, mikor adat ker\u00fcl a FIFO-ba, \u00e9s jelzetlenbe, amikor ki\u00fcr\u00fcl a FIFO.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data);\n        _hasData.Set();\n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true;\n        }\n    }\n    data = null;\n    return false;\n}\n</code></pre> </li> </ol>"},{"location":"labor/4-tobbszalu/#jelzesre-varakozas-blokkolo-a-get","title":"Jelz\u00e9sre v\u00e1rakoz\u00e1s (blokkol\u00f3 a Get)","text":"<p>Az el\u0151z\u0151 pontban megoldottuk a jelz\u00e9st, \u00e1m ez \u00f6nmag\u00e1ban nem sokat \u00e9r, hiszen nem v\u00e1rakoznak r\u00e1. Ennek megval\u00f3s\u00edt\u00e1sa j\u00f6n most.</p> <ol> <li> <p>M\u00f3dos\u00edtsuk a met\u00f3dust az al\u00e1bbiak szerint: sz\u00farjuk be a <code>_hasData</code> esem\u00e9nyre v\u00e1rakoz\u00e1st.</p> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        _hasData.WaitOne();\n\n        if (_innerList.Count &gt; 0)\n            // ...\n</code></pre> <p>A WaitOne m\u0171velet visszat\u00e9r\u00e9si \u00e9rt\u00e9ke</p> <p>A <code>WaitOne</code> m\u0171velet egy <code>bool</code> \u00e9rt\u00e9kkel t\u00e9r vissza, mely igaz, ha a <code>WaitOne</code> param\u00e9ter\u00e9ben megadott id\u0151korl\u00e1t el\u0151tt jelzett \u00e1llapotba ker\u00fcl az esem\u00e9ny (ill. ennek megfelel\u0151en hamis, ha lej\u00e1rt az id\u0151korl\u00e1t). A p\u00e9ld\u00e1nkban nem adtunk meg id\u0151korl\u00e1tot param\u00e9terben, mely v\u00e9gtelen id\u0151korl\u00e1t alkalmaz\u00e1s\u00e1t jelenti. Ennek megfelel\u0151en nem is vizsg\u00e1ljuk a visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u00e9t (mert v\u00e9gtelen ideig v\u00e1r jelz\u00e9sre).</p> </li> <li> <p>Ezzel a <code>Thread.Sleep</code> a <code>WorkerThread</code>-ben feleslegess\u00e9 v\u00e1lt, kommentezz\u00fck ki!</p> <p>A fenti megold\u00e1s futtat\u00e1sakor azt tapasztaljuk, hogy az alkalmaz\u00e1sunk fel\u00fclete az els\u0151 gombnyom\u00e1st k\u00f6vet\u0151en befagy. Az el\u0151z\u0151 megold\u00e1sunkban ugyanis egy amat\u0151r hib\u00e1t k\u00f6vett\u00fcnk el. A lock-olt k\u00f3dr\u00e9szleten bel\u00fcl v\u00e1rakozunk a <code>_hasData</code> jelz\u00e9s\u00e9re, \u00edgy a f\u0151sz\u00e1lnak lehet\u0151s\u00e9ge sincs arra, hogy a <code>Put</code> m\u0171veletben (egy szint\u00e9n <code>lock</code>-kal v\u00e9dett r\u00e9szen bel\u00fcl) jelz\u00e9st k\u00fcldj\u00f6n <code>_hasData</code>-val. Gyakorlatilag egy holtpont (deadlock) helyzet alakult ki. Fontos, hogy a k\u00f3dot n\u00e9zve gondoljuk \u00e1t r\u00e9szleteiben:</p> <ul> <li>A <code>TryGet</code>-ben az egyik munkasz\u00e1l (mely bejutott a <code>lock</code> blokkba a h\u00e1rom k\u00f6z\u00fcl), a <code>_hasData.WaitOne()</code> sorban arra v\u00e1r, hogy a f\u0151 sz\u00e1l <code>Put</code>-ban a <code>_hasData</code>-t jelzettbe \u00e1ll\u00edtsa.</li> <li>A <code>Put</code>-ban a <code>lock</code> sorban f\u0151 sz\u00e1l arra v\u00e1r, hogy az el\u0151z\u0151 pontban eml\u00edtett munkasz\u00e1l a <code>TryGet</code>-ben kil\u00e9pjen a <code>lock</code> blokkb\u00f3l.</li> </ul> <p>K\u00f6lcs\u00f6n\u00f6sen egym\u00e1sra v\u00e1rnak v\u00e9gtelen ideig, ez a holtpont/deadlock klasszikus esete.</p> <p>Pr\u00f3b\u00e1lkozhatn\u00e1nk egy id\u0151korl\u00e1t megad\u00e1s\u00e1val (ms) a v\u00e1rakoz\u00e1sn\u00e1l (ez nem kell megval\u00f3s\u00edtani):</p> <pre><code>if (_hasData.WaitOne(100))\n</code></pre> <p>Ez \u00f6nmag\u00e1ban sem lenne eleg\u00e1ns megold\u00e1s, r\u00e1ad\u00e1sul a folyamatosan polloz\u00f3 munkasz\u00e1lak jelent\u0151sen ki\u00e9heztetn\u00e9k a Put-ot h\u00edv\u00f3 sz\u00e1lat! Helyette, az eleg\u00e1ns \u00e9s k\u00f6vetend\u0151 minta az, hogy lock-on bel\u00fcl ker\u00fclj\u00fck a blokkolva v\u00e1rakoz\u00e1st.</p> <p>Jav\u00edt\u00e1sk\u00e9nt cser\u00e9lj\u00fck meg a <code>lock</code>-ot \u00e9s a <code>WaitOne</code>-t:</p> <pre><code>public bool TryGet(out double[] data)\n{\n    _hasData.WaitOne();\n\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true;\n        }\n    }\n    data = null;\n    return false;        \n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, most m\u00e1r j\u00f3l m\u0171k\u00f6dik.</p> </li> <li> <p>A <code>lock</code>-on bel\u00fcli \u00fcress\u00e9g-vizsg\u00e1lat szerepe.</p> <p>Az el\u0151z\u0151 l\u00e9p\u00e9sben a <code>TryGet</code>-ben bevezett\u00fcnk <code>_hasData</code> n\u00e9ven egy <code>MaunalResetEvent</code> objektumot. Ez pontosan akkor van jelzett \u00e1llapotban, amikor a FIFO-ban van adat. K\u00e9rd\u00e9s, sz\u00fcks\u00e9g van-e m\u00e9g most is a lock blokkban az sor \u00fcress\u00e9g vizsg\u00e1latra (<code>if (_innerList.Count &gt; 0)</code>). Els\u0151 \u00e9rz\u00e9sre redund\u00e1nsnak gondolhatjuk. De pr\u00f3b\u00e1ljuk ki, az <code>if</code>-ben az \u00fcress\u00e9gvizsg\u00e1lat helyett adjunk meg egy fix <code>true</code> \u00e9rt\u00e9ket, ezzel semleges\u00edtve az <code>if</code> hat\u00e1s\u00e1t (az\u00e9rt dolgozunk \u00edgy, hogy k\u00f6nny\u0171 legyen visszacsin\u00e1lni):</p> <pre><code>    ...\n    lock (_syncRoot)\n    {\n        if (true)\n        {\n            data = _innerList[0];\n            ...\n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki. Egy kiv\u00e9telt fogunk kapni, amikor kattintunk a gombon: \u00edgy m\u00e1r nem sz\u00e1lbiztos a megold\u00e1sunk. Vezess\u00fck le, mi\u00e9rt:</p> <ul> <li>Amikor elindul az alkalmaz\u00e1s, mindh\u00e1rom feldolgoz\u00f3 sz\u00e1l a <code>TryGet</code> <code>_hasData.WaitOne();</code> sor\u00e1n\u00e1l v\u00e1r arra, hogy adat ker\u00fclj\u00f6n a FIFO-ba.</li> <li>A gombra kattint\u00e1skor a <code>Put</code> m\u0171velet <code>_hasData</code>-t jelzettre \u00e1ll\u00edtja.</li> <li>A <code>TryGet</code> <code>_hasData.WaitOne();</code> sor\u00e1n mindh\u00e1rom sz\u00e1l \u00e1tjut (ez egy ManualResetEvent, ha jelezett, minden sz\u00e1l mehet tov\u00e1bb).</li> <li>A <code>TryGet</code> <code>lock</code> blokkj\u00e1ba egyetlen sz\u00e1l jut be, a m\u00e1sik kett\u0151 itt v\u00e1r (lock blokkban egyszerre egy sz\u00e1l lehet): ez a sz\u00e1l kiveszi az egyetlen elemet az <code>_innerList</code> list\u00e1b\u00f3l, majd elhagyja a <code>lock</code> blokkot.</li> <li>Most m\u00e1r be tud jutni a <code>lock</code>-n\u00e1l v\u00e1rakoz\u00f3 k\u00e9t sz\u00e1lb\u00f3l (ezek m\u00e1r kor\u00e1bban t\u00faljutottak a <code>hasData.WaitOne()</code> h\u00edv\u00e1son!!!) egy m\u00e1sik is a <code>lock</code> blokkba, az is megpr\u00f3b\u00e1lja a 0. elemet kivenni az <code>_innerList</code> list\u00e1b\u00f3l. De az m\u00e1r nincs ott (az el\u0151z\u0151 l\u00e9p\u00e9sben az els\u0151nek bejut\u00f3 sz\u00e1l elcsente az orra el\u0151l): ebb\u0151l lesz a kiv\u00e9tel.</li> </ul> <p>A megold\u00e1s: biztos\u00edtani kell a <code>lock</code> blockban, hogy ha id\u0151k\u00f6zben egy m\u00e1sik sz\u00e1l ki\u00fcr\u00edtette a sort, akkor a sz\u00e1lunk m\u00e1r ne pr\u00f3b\u00e1ljon elemet kivenni bel\u0151le. Vagyis vissza kell tenni a kor\u00e1bbi \u00fcress\u00e9g vizsg\u00e1latot. Tegy\u00fck is ezt meg! A megold\u00e1sunk \u00edgy j\u00f3l m\u0171k\u00f6dik. El\u0151fordulhat ugyan, hogy feleslegesen fordulunk a list\u00e1hoz, de ezzel \u00edgy most megel\u00e9gsz\u00fcnk.</p> </li> </ol> <p>\u00d6sszefoglalva: </p> <ul> <li>Az \u00fcress\u00e9g vizsg\u00e1latra a <code>ManualResetEvent</code> bevezet\u00e9se ut\u00e1n is sz\u00fcks\u00e9g van. </li> <li>A <code>ManualResetEvent</code> az a c\u00e9lja, hogy feleslegesen ne pollozzuk gyakran a sort, ha az \u00fcres, vagyis az \u00fan. akt\u00edv v\u00e1rakoz\u00e1st ker\u00fclj\u00fck el a seg\u00edts\u00e9g\u00e9vel.</li> </ul> <p>A konkurens, t\u00f6bbsz\u00e1l\u00fa k\u00f6rnyezetben val\u00f3 programoz\u00e1s neh\u00e9zs\u00e9gei</p> <p>J\u00f3l illusztr\u00e1lja a feladat, hogy milyen alapos \u00e1tgondol\u00e1st ig\u00e9nyel a konkurens, t\u00f6bbsz\u00e1l\u00fa k\u00f6rnyezetben val\u00f3 programoz\u00e1s. Tulajdonk\u00e9ppen m\u00e9g szerencs\u00e9nk is volt az el\u0151z\u0151ekben, mert j\u00f3l reproduk\u00e1lhat\u00f3an el\u0151j\u00f6tt a hiba. A gyakorlatban azonban ez ritk\u00e1n van \u00edgy. Sajnos sokkal gyakoribb, hogy a konkurenciahib\u00e1k id\u0151nk\u00e9nti, nem reproduk\u00e1lhat\u00f3 probl\u00e9m\u00e1kat okoznak. Az ilyen jelleg\u0171 feladatok megold\u00e1s\u00e1t mindig nagyon \u00e1t kell gondolni, nem lehet az \"addig-pr\u00f3b\u00e1lkozom-m\u00edg-j\u00f3-nem-lesz-a-k\u00e9zi-teszt-sor\u00e1n\" elv ment\u00e9n leprogramozni.</p> <p>System.Collections.Concurrent</p> <p>A .NET keretrendszerben t\u00f6bb be\u00e9p\u00edtett sz\u00e1lbiztoss\u00e1gra felk\u00e9sz\u00edtett oszt\u00e1ly is tal\u00e1lhat\u00f3 a <code>System.Collections.Concurrent</code> n\u00e9vt\u00e9rben. A fenti p\u00e9ld\u00e1ban a <code>DataFifo</code> oszt\u00e1lyt a <code>System.Collections.Concurrent.ConcurrentQueue</code> oszt\u00e1llyal kiv\u00e1lthattuk volna.</p>"},{"location":"labor/4-tobbszalu/#8-feladat-kulturalt-leallas","title":"8. feladat \u2013 Kultur\u00e1lt le\u00e1ll\u00e1s","text":"<p>Kor\u00e1bban f\u00e9lretett\u00fck azt a probl\u00e9m\u00e1t, hogy az ablakunk bez\u00e1r\u00e1sakor a processz\u00fcnk \u201eberagad\u201d, ugyanis a feldolgoz\u00f3 munkasz\u00e1lak el\u0151t\u00e9rsz\u00e1lak, kil\u00e9ptet\u00e9s\u00fcket eddig nem oldottuk meg. C\u00e9lunk, hogy a v\u00e9gtelen <code>while</code> ciklust kiv\u00e1ltva a munkasz\u00e1laink az alkalmaz\u00e1s bez\u00e1r\u00e1sakor kultur\u00e1lt m\u00f3don \u00e1lljanak le.</p> <ol> <li> <p>Egy <code>ManualResetEvent</code> seg\u00edts\u00e9g\u00e9vel jelezz\u00fck a le\u00e1ll\u00edt\u00e1st a FIFO-ban a <code>TryGet</code>-ben t\u00f6rt\u00e9n\u0151 v\u00e1rakoz\u00e1s sor\u00e1n. A FIFO-ban vegy\u00fcnk fel egy \u00faj <code>ManualResetEvent</code>-et, \u00e9s vezess\u00fcnk be egy <code>Release</code> m\u0171veletet, amellyel a v\u00e1rakoz\u00e1sainkat z\u00e1rhatjuk r\u00f6vidre (\u00faj esem\u00e9ny\u00fcnk jelzett \u00e1llapotba \u00e1ll\u00edthat\u00f3).</p> <pre><code>private ManualResetEvent _releaseTryGet = new ManualResetEvent(false);\n\npublic void Release()\n{\n    _releaseTryGet.Set();\n}\n</code></pre> </li> <li> <p>A <code>TryGet</code>-ben erre az esem\u00e9nyre is v\u00e1rakozzunk. A <code>WaitAny</code> met\u00f3dus akkor engedi tov\u00e1bb a futtat\u00e1st, ha a param\u00e9terk\u00e9nt megadott <code>WaitHandle</code> t\u00edpus\u00fa objektumok k\u00f6z\u00fcl valamelyik jelzett \u00e1llapotba ker\u00fcl, \u00e9s visszaadja annak t\u00f6mbb\u00e9li index\u00e9t. T\u00e9nyleges adatfeldolgoz\u00e1st pedig csak akkor szeretn\u00e9nk, ha a <code>_hasData</code> jelzett (amikor is a <code>WaitAny</code> 0-val t\u00e9r vissza).</p> <pre><code>public bool TryGet(out double[] data)\n{\n    if (WaitHandle.WaitAny(new[] { _hasData, _releaseTryGet }) == 0)\n    {\n        lock (_syncRoot)\n        {\n            if (_innerList.Count &gt; 0)\n            {\n                data = _innerList[0];\n                _innerList.RemoveAt(0);\n                if (_innerList.Count == 0)\n                {\n                    _hasData.Reset();\n                }\n\n                return true;\n            }\n        }\n    }\n\n    data = null;\n    return false;\n}\n</code></pre> </li> <li> <p><code>MainWindow.xaml.cs</code>-ban vegy\u00fcnk fel egy flag tagv\u00e1ltoz\u00f3t a bez\u00e1r\u00e1s jelz\u00e9s\u00e9re:</p> <pre><code>private bool _isClosed = false;\n</code></pre> </li> <li> <p>A f\u0151ablak bez\u00e1r\u00e1sakor \u00e1ll\u00edtsuk jelzettre az \u00faj esem\u00e9nyt \u00e9s billents\u00fcnk be a flag-et is: a <code>MainWindow</code> oszt\u00e1ly <code>Closed</code> esem\u00e9ny\u00e9re iratkozzunk fel a konstruktorban, \u00e9s \u00edrjuk meg a megfelel\u0151 esem\u00e9nykezel\u0151 f\u00fcggv\u00e9nyt:</p> <pre><code>public MainWindow()\n{\n    ...\n\n    Closed += MainWindow_Closed;\n}\n\nprivate void MainWindow_Closed(object sender, WindowEventArgs args)\n{\n    _isClosed = true;\n    _fifo.Release();\n}\n</code></pre> </li> <li> <p>\u00cdrjuk \u00e1t a while ciklust az el\u0151z\u0151 pontban felvett flag figyel\u00e9s\u00e9re.</p> <pre><code>private void WorkerThread()\n{\n    while (!_isClosed)\n    {\n</code></pre> </li> <li> <p>V\u00e9g\u00fcl biztos\u00edtsuk, hogy a m\u00e1r bez\u00e1r\u00f3d\u00f3 ablak eset\u00e9ben ne pr\u00f3b\u00e1ljunk \u00fczeneteket ki\u00edrni</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    if (_isClosed)\n        return;\n</code></pre> </li> <li> <p>Futtassuk az alkalmaz\u00e1st, \u00e9s ellen\u0151rizz\u00fck, kil\u00e9p\u00e9skor a processz\u00fcnk val\u00f3ban befejezi-e a fut\u00e1s\u00e1t.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/#kitekintes-task-async-await","title":"Kitekint\u00e9s: Task, async, await","text":"<p>A gyakorlat sor\u00e1n az alacsonyabb szint\u0171 sz\u00e1lkezel\u00e9si technik\u00e1kkal k\u00edv\u00e1ntunk megismerkedni. Ugyanakkor megold\u00e1sunkat (legal\u00e1bbis r\u00e9szben) \u00e9p\u00edthett\u00fck volna a .NET aszinkron programoz\u00e1st t\u00e1mogat\u00f3 magasabb szint\u0171 eszk\u00f6zeire \u00e9s mechanizmusaira, \u00fagymint <code>Task</code>/<code>Task&lt;T&gt;</code> oszt\u00e1lyok \u00e9s <code>async</code>/<code>await</code> kulcsszavak.</p>"},{"location":"labor/4-tobbszalu/index_eng/","title":"4. Developing multithreaded applications","text":""},{"location":"labor/4-tobbszalu/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>The aim of the laboratory is to familiarize students with the fundamental principles of multithreading. Covered topics include (among others):</p> <ul> <li>Starting threads (<code>Thread</code>)</li> <li>Stopping threads</li> <li>Creating thread-safe classes using the <code>lock</code> keyword</li> <li>Using <code>ThreadPool</code></li> <li>Signaling and waiting for signals with thread synchronization using <code>ManualResetEvent</code> (<code>WaitHandle</code>)</li> <li>WinUI-specific threading features (<code>DispatcherQueue</code>)</li> </ul> <p>Naturally, since this topic has a huge range, we will only gain basic knowledge, but with this foundation, we will be able to independently tackle more complex tasks.</p> <p>Related lectures: Developing concurrent (multithreaded) applications.</p>"},{"location":"labor/4-tobbszalu/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools needed to complete the laboratory:</p> <ul> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> <li>Windows 10 or Windows 11 operating system (Linux and macOS are not suitable)</li> </ul>"},{"location":"labor/4-tobbszalu/index_eng/#solution","title":"Solution","text":"Download the completed solution <p> It is essential to work following the instructor during the lab, it is forbidden (and pointless) to download the final solution. However, during subsequent independent practice, it can be useful to review the final solution, so we make it available.</p> <p>The solution is available on GitHub. The easiest way to download it is by cloning the <code>megoldas</code> branch using the <code>git clone</code> command in the terminal:</p> <p><code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo -b megoldas</code></p> <p>For this, command-line Git must be installed on your system. More information is available here.</p>"},{"location":"labor/4-tobbszalu/index_eng/#introduction","title":"Introduction","text":"<p>Managing concurrently running threads is a crucial topic that every software developer should be familiar with at least at a basic level. During this laboratory, we will solve fundamental but critical problems, so we should strive not only to achieve the final result but also to understand the purpose and reasoning behind the modifications made.</p> <p>In this task, we will enhance a simple WinUI application with multithreading capabilities, solving increasingly complex problems. The initial problem is the following: we have a function that takes a long time to execute, and as we will see, calling it \"directly\" from the UI leads to unpleasant consequences. As part of the solution, we will extend an existing application with custom code snippets. The newly inserted lines will be highlighted in the guide.</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-0-getting-familiar-with-the-starter-application-and-preparation","title":"Task 0 - Getting familiar with the starter application and preparation","text":"<p>Clone the repository for the 4<sup>th</sup> laboratory:</p> <ul> <li>Open a command prompt.</li> <li>Navigate to any folder, e.g., <code>c:\\work\\NEPTUN</code>.</li> <li>Execute the following command: <code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo.git</code>.</li> <li>Open the SuperCalculator.sln solution in Visual Studio.</li> </ul> <p>Our task is to create a user interface in WinUI to execute an algorithm provided in binary form. In .NET, binary format means a .dll file, which, from a programming perspective, is a class library. The file we will use is Algorithms.dll, located in the cloned Git repository (External folder).</p> <p>The user interface in the starter application is already prepared. Run the application:</p> <p></p> <p>In the application interface, we can specify the input parameters of the algorithm (an array of <code>double</code> numbers): in our example, the algorithm always takes two <code>double</code> numbers as parameters, which can be entered in the two upper text boxes. Our task is to execute the algorithm with the given parameters when clicking the Calculate Result button and then display the result along with the input parameters in a new row of the <code>ListBox</code> under Result.</p> <p>Next, let's get familiar with the downloaded Visual Studio solution:</p> <p>The framework application is a WinUI 3-based application. The interface is mostly complete, and its definition is in the <code>MainWindow.xaml</code> file. This aspect is less relevant for us according to the aim of the laboratory, but it is worth reviewing at home for further practice.</p> User interface setup in <code>MainWindow.xaml</code> <p>The basic structure of the window interface:</p> <ul> <li>The root element is a <code>Grid</code>, which is a common practice.</li> <li>The top row of the root <code>Grid</code> contains a <code>StackPanel</code> with two <code>TextBox</code> elements and a <code>Button</code>.</li> <li>The bottom row of the root <code>Grid</code> contains another <code>Grid</code>. Unlike <code>TextBox</code>, <code>ListBox</code> does not have a <code>Header</code> property, so we introduced a separate <code>TextBlock</code> labeled \"Result\" for this purpose. Using a <code>Grid</code> instead of a simpler <code>StackPanel</code> allows us to fix the height of the top row while letting the <code>ListBox</code> fill the remaining space (<code>Auto</code> height for the top row, <code>*</code> height for the bottom row).</li> <li>The \"Calculate Result\" button demonstrates that the <code>Content</code> property of a <code>Button</code> is often more than just plain text. In this example, it consists of a <code>SymbolIcon</code> and a <code>TextBlock</code> combined using a <code>StackPanel</code>, enhancing its appearance with an appropriate icon.</li> <li>We also see an example of how to make a <code>ListBox</code> scrollable if it already contains many items (or if the items are too wide). This is achieved by properly setting its <code>ScrollViewer</code>.</li> <li>The <code>ItemContainerStyle</code> property of <code>ListBox</code> is used to apply styles to its items. In this example, the <code>Padding</code> was reduced from its default value to avoid excessive spacing.</li> </ul> <p>The <code>MainWindow.xaml.cs</code> source file contains the code-behind for the main window. Key elements include:</p> <ul> <li>The <code>ShowResult</code> helper function, which logs results and parameters into the <code>ListBox</code>.</li> <li>The <code>CalculateResultButton_Click</code> event handler for the Calculate Result button. This reads values from the text boxes and attempts to convert them to numbers. If successful, this is where the algorithm will be called (not yet implemented). If conversion fails, the <code>DisplayInvalidElementDialog</code> function shows a message box informing the user about invalid parameters.</li> <li>The <code>AddKeyboardAcceleratorToChangeTheme</code> function, called from the constructor, is not relevant to us \u2014 it enables switching between light and dark themes (try pressing Ctrl+T during execution).</li> </ul>"},{"location":"labor/4-tobbszalu/index_eng/#using-the-code-in-the-dll","title":"Using the code in the DLL","text":"<p>The Algorithm.dll file is included in the starter project. It contains a <code>SuperAlgorithm</code> class within the <code>Algorithms</code> namespace, which provides a static method called <code>Calculate</code>. To use classes from a DLL in a project, we need to add a reference to it.</p> <ol> <li> <p>In Solution Explorer, right-click the Dependencies node of the project and select Add Project Reference.</p> <p></p> <p>External references</p> <p>Although we are not referencing another Visual Studio project, this is the easiest way to access this window.</p> <p>In real projects, external class libraries are typically not referenced as DLL files directly. Instead, they are obtained from NuGet, .NET's package management system. Since Algorithm.dll is not published on NuGet, we need to manually add it.</p> </li> <li> <p>In the pop-up window, use the Browse button in the bottom right corner to locate and select the Algorithms.dll file from the project's External subfolder. Confirm by clicking OK.</p> </li> </ol> <p>In Solution Explorer, under the project's Dependencies node, we can see the referenced external dependencies. The previously added <code>Algorithms</code> reference now appears under Assemblies. The Frameworks category lists .NET framework packages, and Analyzers contain static code analysis tools used during compilation. Normally, project or NuGet references would also appear here.</p> <p></p> <p>Right-click the <code>Algorithms</code> reference and select View in Object Browser. This opens the Object Browser tab, where we can inspect the namespaces, classes, and their members (fields, methods, properties, events) within the DLL. Visual Studio extracts this from metadata of the DLL using the reflection mechanism (which we can also use in our own code).</p> <p>In the Object Browser, expand the <code>Algorithms</code> node on the left, revealing a <code>SuperAlgorithm</code> class inside the <code>Algorithms</code> namespace. Selecting this class displays its methods in the middle panel, and choosing a method shows its exact signature:</p> <p></p>"},{"location":"labor/4-tobbszalu/index_eng/#task-1-running-the-operation-on-the-main-thread","title":"Task 1 \u2013 Running the operation on the main thread","text":"<p>Now we can move on to executing the algorithm. As a first step, we will run it on the main thread of our application.</p> <ol> <li> <p>Call the <code>Calculate</code> function within the <code>Click</code> event handler of the button on the main window. To do this, open the <code>MainWindow.xaml.cs</code> code-behind file in Solution Explorer and find the <code>CalculateResultButton_Click</code> event handler. Extend the code by calling the newly referenced algorithm.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n        ShowResult(parameters, result);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>Run and try the application! Notice that the window does not respond to movements or resizing during the calculation. The interface practically freezes.</p> </li> </ol> <p>Our application, like all Windows applications, is event-driven. The operating system notifies our application of various interactions (e.g., movement, resizing, mouse clicks). However, since the application\u2019s single thread is occupied with computation after pressing the button, it cannot immediately process additional user commands. Once the computation completes (and the results appear in the list), any previously issued commands will then be executed.</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-2-perform-the-calculation-in-a-separate-thread","title":"Task 2 \u2013 Perform the calculation in a separate thread","text":"<p>The next step is to run the computation on a separate thread so that it does not block the user interface.</p> <ol> <li> <p>Create a new function in the <code>MainWindow</code> class, which will serve as the entry point for the worker thread.</p> <pre><code>private void CalculatorThread(object arg)\n{\n    var parameters = (double[])arg;\n    var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n    ShowResult(parameters, result);\n}\n</code></pre> </li> <li> <p>Start the thread within the button's <code>Click</code> event handler. Replace the previously added code with the following:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var th = new Thread(CalculatorThread);\n        th.Start(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>The <code>CalculatorThread</code> function receives the parameter passed via the <code>Start</code> method of the <code>Thread</code> object.</p> </li> <li> <p>Run the application using F5 (it is important to run it with the debugger now). We receive the error message: The application called an interface that was marshalled for a different thread. (0x8001010E (RPC_E_WRONG_THREAD))    This error occurs in the <code>ShowResult</code> method because we are trying to access a UI element from a thread that did not create it. In the next task, we will analyze and resolve this issue.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_eng/#task-3-using-dispatcherqueuehasthreadaccess-and-dispatcherqueuetryenqueue","title":"Task 3 \u2013 Using <code>DispatcherQueue.HasThreadAccess</code> and <code>DispatcherQueue.TryEnqueue</code>","text":"<p>In the previous section, the issue is caused by the following rule in WinUI applications: Windows/UI elements/controls are by default not thread-safe objects. This means that a Window/UI element/control must only be accessed (e.g., reading/writing properties, invoking methods) from the thread that created it, otherwise, an exception will be thrown. In our application, the exception occurred because the <code>resultListBox</code> control was created on the main thread, but we tried to access it from a different thread within the <code>ShowResult</code> method (specifically, in the <code>resultListBox.Items.Add</code> call).  </p> <p>The question is how we can access these UI elements/controls from another thread. The solution is the use of <code>DispatcherQueue</code>, which helps ensure that access to the controls always occurs from the correct thread:</p> <ul> <li>The <code>TryEnqueue</code> function of the <code>DispatcherQueue</code> object runs the function provided as a parameter on the thread that created the control (so we can directly access the control from this function).</li> <li>The <code>HasThreadAccess</code> property the <code>DispatcherQueue</code> object helps determine whether it is necessary to use the <code>TryEnqueue</code> mentioned in the previous point. If the property value is:<ul> <li>true, then we can access the control directly (because the current thread is the same as the thread that created the control), but if it is</li> <li>false, then the control can only be accessed indirectly, through the <code>TryEnqueue</code> of the <code>DispatcherQueue</code> object (because the current thread is NOT the same as the thread that created the control).</li> </ul> </li> </ul> <p>With the help of <code>DispatcherQueue</code>, we can avoid the previous exception (we can \"redirect\" access to the control, in this case, <code>resultListBox</code>, to the appropriate thread). This is what we will do next.</p> <p>Note</p> <p>The <code>DispatcherQueue</code> object is available in subclasses of the <code>Window</code> class through the <code>DispatcherQueue</code> property (in other classes, it can be obtained using the <code>DispatcherQueue.GetForCurrentThread()</code> static method).</p> <p>We need to modify the <code>ShowResult</code> method to ensure that it does not throw an exception when called from a worker thread.</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    // Closing the window the DispatcherQueue property may return null, so we have to perform a null check\n    if (this.DispatcherQueue == null)\n        return;\n\n    if (this.DispatcherQueue.HasThreadAccess)\n    {\n        var item = new ListBoxItem()\n        {\n            Content = $\"{parameters[0]} #  {parameters[1]} = {result}\"\n        };\n        resultListBox.Items.Add(item);\n        resultListBox.ScrollIntoView(item);\n    }\n    else\n    {\n        this.DispatcherQueue.TryEnqueue( () =&gt; ShowResult(parameters, result) );\n    }\n}\n</code></pre> <p>Let's try it!</p> <p>This solution is now working, and its main elements are the followings:</p> <ul> <li>The role of the <code>DispatcherQueue</code> <code>null</code> check: after the main window is closed, the <code>DispatcherQueue</code> is <code>null</code> and cannot be used.</li> <li>Using <code>DispatcherQueue.HasThreadAccess</code>, we check whether the calling thread can directly access the controls (in our case, the <code>ListBox</code>):<ul> <li>If yes, everything happens as before, and the code handling the <code>ListBox</code> remains unchanged.</li> <li>If not, we access the control through <code>DispatcherQueue.TryEnqueue</code>. The following trick is used. We pass a parameterless, single-line function as a lambda expression to the <code>TryEnqueue</code> function, which invokes our <code>ShowResult</code> function (practically recursively), passing the parameters along. This is beneficial for us because this <code>ShowResult</code> call occurs on the thread that created the control (the main thread of the application), where the <code>HasThreadAccess</code> value is now <code>true</code>, and we can directly access our <code>ListBox</code>. This recursive approach is a common pattern for avoiding redundant code.</li> </ul> </li> </ul> <p>Let's set a breakpoint on the first line of the <code>ShowResult</code> method and, by running the application, make sure that when the <code>ShowResult</code> method is called for the first time, <code>HasThreadAccess</code> is still false (so the <code>TryEnqueue</code> is called), and as a result, <code>ShowResult</code> is called again, but this time <code>HasThreadAccess</code> is true.</p> <p>Now, remove the breakpoint and run the application again: notice that while one computation is running, we can start new ones as well, since our interface remains responsive throughout (and the previously experienced error no longer occurs).</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-4-performing-an-operation-on-a-threadpool-thread","title":"Task 4 \u2013 Performing an operation on a ThreadPool thread","text":"<p>A characteristic of the previous solution is that it always creates a new thread for the operation. In our case, this is not particularly significant, but this approach can be problematic for a server application that handles a large number of requests while creating a separate thread for each request. There are two main reasons for this:</p> <ul> <li>If the thread function completes quickly (i.e., serving a client is fast), a large portion of the CPU is wasted on creating and terminating threads, as these operations themselves are resource-intensive.</li> <li>Too many threads might be created, which the operating system must schedule, leading to unnecessary resource wastage.</li> </ul> <p>Another issue with our current solution is that, since the computation runs on a foreground thread (newly created threads are foreground threads by default), closing the application does not stop the program. It continues running in the background until the last computation completes. This happens because a process only terminates when no foreground threads are left running.</p> <p>Let's modify the button event handler so that, instead of starting a new thread, it runs the computation on a ThreadPool thread. To do this, we only need to rewrite the button click event handler again.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        ThreadPool.QueueUserWorkItem(CalculatorThread, parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>Try running the application, and notice that when the window is closed, the application shuts down immediately, without dealing with any threads that may still be running (because the thread pool threads are background threads).</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-5-producer-consumer-based-solution","title":"Task 5 \u2013 Producer-Consumer based solution","text":"<p>In the previous tasks, we arrived at a fully functional solution to the original problem, allowing multiple worker threads to run calculations in parallel if the button is pressed multiple times. Now, we will modify the application so that pressing the button does not always create a new thread. Instead, tasks will be added to a task queue, from which multiple, in the background continuously running, threads will sequentially retrieve and execute them. This problem is a classic producer-consumer scenario, which occurs frequently in practice. The following diagram illustrates how it works.</p> <p></p> <p>Producer-Consumer vs. <code>ThreadPool</code></p> <p>If we think about it, the <code>ThreadPool</code> itself is a specialized producer-consumer and scheduling mechanism provided by .NET. In the following, we will develop a different type of producer-consumer solution to encounter specific concurrency issues related to thread management.</p> <p>Our main thread acts as the producer, creating a new task whenever the Calculate result button is clicked. We will launch multiple consumer/worker threads to take advantage of multiple CPU cores and parallelize task execution.</p> <p>For temporary task storage, we can use the <code>DataFifo</code> class, which has already been partially prepared in our base project (found in the <code>Data</code> folder in the Solution Explorer). Let's examine its source code. It implements a simple FIFO queue that stores <code>double[]</code> elements. The <code>Put</code> method appends new items to the end of the internal list, while the <code>TryGet</code> method retrieves (and removes) the first element of the list. If the list is empty, the function cannot return an item and indicates this by returning <code>false</code>.</p> <ol> <li> <p>Modify the button event handler so that tasks are added to the FIFO queue instead of using the <code>ThreadPool</code>:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        _fifo.Put(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>Implement the new worker thread function in our form class:</p> <pre><code>private void WorkerThread()\n{\n    while (true)\n    {\n        if (_fifo.TryGet(out var data))\n        {\n            double result = Algorithms.SuperAlgorithm.Calculate(data);\n            ShowResult(data, result);\n        }\n\n        Thread.Sleep(500);\n    }\n}\n</code></pre> <p>The <code>Thread.Sleep</code> statement is necessary because, without it, worker threads would continuously spin when the FIFO is empty, unnecessarily consuming 100% of a CPU core without performing any useful work. Our solution is not ideal; we will improve it later.</p> </li> <li> <p>Create and start the worker threads in the constructor:</p> <pre><code>new Thread(WorkerThread) { Name = \"Worker thread 1\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 2\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 3\" }.Start();\n</code></pre> </li> <li> <p>Run the application and close it immediately without clicking the Calculate Result button. We observe that while the window closes, the process continues running. The application can only be terminated through Visual Studio or the Task Manager:</p> <p></p> <p>The worker threads are foreground threads, preventing the process from terminating upon exit. One possible solution is to set their <code>IsBackground</code> property to <code>true</code> after creation. Another solution is to explicitly ensure worker threads exit upon application shutdown. We will revisit this issue later.</p> </li> <li> <p>Run the application again, and after clicking the Calculate Result button (just once), we are likely to encounter an exception. The problem is that <code>DataFifo</code> is not thread-safe and has become inconsistent. Two underlying reasons contribute to this:</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_eng/#problem-1","title":"Problem 1","text":"<p>Let's consider the following scenario:</p> <ol> <li>The queue is empty. The worker threads continuously poll the FIFO in a <code>while</code> loop, i.e., they call the <code>TryGet</code> method.</li> <li>The user puts a task into the queue.</li> <li>One of the worker threads sees that there is data in the queue in the <code>TryGet</code> method, i.e., the condition <code>if (_innerList.Count &gt; 0)</code> is satisfied, and it proceeds to the next line of code. Let's assume this thread loses its execution right at this point and doesn't have time to remove the data from the queue.</li> <li>Another worker thread also evaluates the <code>if (_innerList.Count &gt; 0)</code> condition at the same time, and since the condition is still satisfied, it removes the data from the queue.</li> <li>The first thread is re-scheduled, it wakes up, and tries to remove data from the queue, but the queue is already empty as the second thread has already removed the only data. This results in an exception when accessing <code>_innerList[0]</code>.</li> </ol> <p>We can only avoid this problem by making the check for the emptiness of the queue and the removal of the item \"atomic\": this means that while one thread has not finished both operations, the other threads must wait!</p> <p>Thread.Sleep(500)</p> <p>The <code>Thread.Sleep(500);</code> line following the emptiness check is only there to increase the likelihood of the above unfortunate scenario happening in our example (as this makes it almost certain that the thread will be rescheduled). We will remove it later, but for now, let's leave it in.</p>"},{"location":"labor/4-tobbszalu/index_eng/#problem-2","title":"Problem 2","text":"<p>The <code>DataFifo</code> class allows concurrent access to the <code>_innerList</code> member variable, which is of type <code>List&lt;double[]&gt;</code>, from multiple threads. However, if we look at the <code>List&lt;T&gt;</code> documentation, we find that the class is not thread-safe. In this case, we cannot allow this; we need to ensure mutual exclusion with locks: we must ensure that only one thread can access a method/property/member variable at a time (specifically, inconsistency can occur only in cases of simultaneous writing or simultaneous writing and reading, but we usually don't differentiate between writers and readers, and we won't do that here either).</p> <p>In the next step, we will make the <code>DataFifo</code> class thread-safe, which will prevent the two problems described above from occurring.</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-6-make-the-datafifo-class-thread-safe","title":"Task 6 \u2013 Make the <code>DataFifo</code> class thread-safe","text":"<p>To make the <code>DataFifo</code> class thread-safe, we need an object (which can be any reference type object) that we can use as a key for locking. We can then use the <code>lock</code> keyword to ensure that only one thread is inside the locked code block at a time.</p> <ol> <li> <p>Add an <code>object</code> field named <code>_syncRoot</code> to the <code>DataFifo</code> class.</p> <pre><code>private object _syncRoot = new object();\n</code></pre> </li> <li> <p>Modify the <code>Put</code> and <code>TryGet</code> methods to use locking.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data); \n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            Thread.Sleep(500);\n\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            return true;\n        }\n\n        data = null;\n        return false;\n    }\n}\n</code></pre> <p>Surround with</p> <p>Use Visual Studio's Surround with feature by pressing CTRL + K, CTRL + S to wrap the selected code block.</p> </li> </ol> <p>Now, we should no longer receive exceptions.</p> <p>We can also remove the artificial delay (<code>Thread.Sleep(500);</code>) from the <code>TryGet</code> method.</p> <p>Locking on <code>this</code></p> <p>One might wonder why we introduced a separate <code>_syncRoot</code> field and used it for locking instead of using <code>this</code> (since <code>DataFifo</code> is a reference type, there would be no issue with that). However, using <code>this</code> would violate the encapsulation of our class! Remember: <code>this</code> is a reference to our object, but other classes may also have a reference to this same object (for example, in our case, <code>MainWindow</code> has a reference to <code>DataFifo</code>), and if these external classes place a lock on the object using <code>lock</code>, it will \"interfere\" with the internal locking mechanism (since using <code>this</code> the <code>lock</code> parameter will be the same for both the external and internal <code>lock</code>). For example, an external lock could completely \"freeze\" the <code>TryGet</code> and <code>Put</code> operations. In contrast, in our chosen solution, the <code>lock</code> parameter, the <code>_syncRoot</code> variable, is private, meaning external classes cannot access it and thus cannot disrupt the internal workings of our class.</p>"},{"location":"labor/4-tobbszalu/index_eng/#task-7-efficient-signaling-implementation","title":"Task 7 \u2013 Efficient signaling implementation","text":""},{"location":"labor/4-tobbszalu/index_eng/#using-manualresetevent","title":"Using <code>ManualResetEvent</code>","text":"<p>The continuous <code>while</code> loop running in the <code>WorkerThread</code> implements active waiting, which should always be avoided. Without <code>Thread.Sleep</code>, it would max out the CPU. While <code>Thread.Sleep</code> solves the CPU overload problem, it introduces another issue: if all three worker threads are asleep when new data arrives, there is unnecessary waiting (500ms) before processing the new data.</p> <p>Next, we will modify the application to wait blocked data is added to the FIFO (but start processing immediately once data is available). To signal whether there is data in the queue, we will use a <code>ManualResetEvent</code>.</p> <ol> <li> <p>Add a <code>ManualResetEvent</code> instance named <code>_hasData</code> to the <code>DataFifo</code> class.</p> <pre><code>// The 'false' constructor parameter means the event is initially non-signaled (gate closed)\nprivate ManualResetEvent _hasData = new ManualResetEvent(false);\n</code></pre> </li> <li> <p>The <code>_hasData</code> event acts as a gate in our application. When data is added to the list, we \"open\" it, and when the list becomes empty, we \"close\" it.</p> <p>The semantics and naming of the event</p> <p>It is essential to choose the semantics of our event correctly and to express this clearly with the variable name. In our example, the <code>_hasData</code> name accurately conveys that our event is signaled (gate open) precisely when and only when there is data to be processed. Now, our \"only\" task is to implement this semantics: set the event to signaled when data is added to the FIFO and reset it when the FIFO is emptied.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data);\n        _hasData.Set();\n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true;\n        }\n\n        data = null;\n        return false;\n    }\n}\n</code></pre> </li> </ol>"},{"location":"labor/4-tobbszalu/index_eng/#waiting-for-signal-blocking-get","title":"Waiting for signal (Blocking Get)","text":"<p>In the previous step, we implemented signaling, but this alone is not very useful since there are no waiting threads. Now, we will implement this.</p> <ol> <li> <p>Modify the method as follows: insert a wait for the <code>_hasData</code> event.</p> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        _hasData.WaitOne();\n\n        if (_innerList.Count &gt; 0)\n            // ...\n</code></pre> <p>Return value of the WaitOne method</p> <p>The <code>WaitOne</code> method returns a <code>bool</code> value, which is <code>true</code> if the event is signaled before the timeout specified in the <code>WaitOne</code> parameter (or <code>false</code> if the timeout expires). In our example, we did not specify a timeout parameter, which means an infinite timeout is applied. Accordingly, we do not check the return value (since it will wait indefinitely for a signal).</p> </li> <li> <p>This makes the <code>Thread.Sleep</code> in <code>WorkerThread</code> unnecessary, so comment it out!</p> <p>When running the above solution, we notice that the application's interface freezes after the first button press. This happens because we made a rookie mistake in our previous solution. We are waiting for the <code>_hasData</code> signal inside a locked section of code, which means the main thread has no chance to send a signal with <code>_hasData</code> in the <code>Put</code> method (which is also within a <code>lock</code>-protected section).  This results in a deadlock situation.  It's important to carefully analyze the code to understand why this happens:</p> <ul> <li>In <code>TryGet</code>, one of the worker threads (that entered the <code>lock</code> block among the three) waits at <code>_hasData.WaitOne()</code> for the main thread to signal <code>_hasData</code> in <code>Put</code>.</li> <li>Meanwhile, in <code>Put</code>, the main thread waits at the <code>lock</code> statement for the worker thread in <code>TryGet</code> to exit its <code>lock</code> block.</li> </ul> <p>They are mutually waiting for each other indefinitely, which is a classic deadlock scenario.</p> <p>We could try adding a timeout (in milliseconds) when waiting (this is just for illustration, not required to implement):</p> <pre><code>if (_hasData.WaitOne(100))\n</code></pre> <p>However, this would not be an elegant solution. Moreover, continuously polling worker threads would significantly starve the thread calling <code>Put</code>. Instead, the proper and recommended approach is to avoid blocking waits inside a <code>lock</code>.</p> <p>As a fix, swap the positions of <code>lock</code> and <code>WaitOne</code>:</p> <pre><code>public bool TryGet(out double[] data)\n{\n    _hasData.WaitOne();\n\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true;\n        }\n\n        data = null;\n        return false;\n    }\n}\n</code></pre> <p>Try running the application again, now it works correctly.</p> </li> <li> <p>The role of the empty check inside the <code>lock</code> block.</p> <p>In the previous step, we introduced a <code>ManualResetEvent</code> object named <code>_hasData</code> in <code>TryGet</code>. This is in a signaled state exactly when there is data in the FIFO. The question is: is the empty check (<code>if (_innerList.Count &gt; 0)</code>) still needed inside the <code>lock</code> block? At first glance, we might think it's redundant. Let's try replacing the empty check inside the <code>if</code> with a fixed <code>true</code> value, effectively neutralizing the <code>if</code> condition (we're doing it this way so that it's easy to reverse):</p> <pre><code>...\nlock (_syncRoot)\n{\n    if (true)\n    {\n        data = _innerList[0];\n        ...\n}\n</code></pre> <p>Let's try it. We will encounter an exception when we click the button: the solution is now not thread-safe. Let's break down why:</p> <ul> <li>When the application starts, all three worker threads wait for data to be placed in the FIFO at <code>_hasData.WaitOne()</code>.</li> <li>When the button is clicked, the <code>Put</code> method signals <code>_hasData</code>.</li> <li>In <code>TryGet</code>, all three threads pass through the line <code>_hasData.WaitOne();</code> (since this is a <code>ManualResetEvent</code>, once it's signaled, all threads can continue).</li> <li>Only one thread enters the <code>lock</code> block; the other two are waiting (only one thread can be inside the <code>lock</code> block at a time). This thread removes the first and only element from <code>_innerList</code> and then exits the <code>lock</code> block.</li> <li>Now, one of the two threads that was waiting at the <code>lock</code> can enter the block (they've already passed the <code>_hasData.WaitOne()</code>!!!), and it tries to remove the 0<sup>th</sup> element from <code>_innerList</code>. But it's no longer there (the first thread already took it), which results in an exception.</li> </ul> <p>The solution: We need to ensure inside the <code>lock</code> block that if another thread empties the list in the meantime, our thread does not try to remove an element. So, we need to reintroduce the previous empty check. Let's do that! Now our solution works correctly. It might still happen that we check the list unnecessarily, but for now, we're okay with that.</p> </li> </ol> <p>In summary:</p> <ul> <li>The empty check is still necessary even after introducing the <code>ManualResetEvent</code>.</li> <li> <p>The purpose of the <code>ManualResetEvent</code> is to prevent unnecessary polling of the list when it's empty, thus avoiding active waiting.</p> <p>The challenges of programming in a concurrent, multithreaded environment</p> <p>This task clearly illustrates the careful thought required for programming in a concurrent, multithreaded environment. In fact, we were somewhat fortunate earlier because the error was reproducible. In practice, however, this is rarely the case. Unfortunately, it\u2019s much more common for concurrency errors to cause intermittent, non-reproducible problems. Solving tasks like this always requires a lot of consideration, and they cannot be coded following the \"I\u2019ll keep trying until it works in manual testing\" approach.</p> <p>System.Collections.Concurrent</p> <p>The .NET framework includes several built-in thread-safe classes in the <code>System.Collections.Concurrent</code> namespace. In the above example, we could have replaced the <code>DataFifo</code> class with the <code>System.Collections.Concurrent.ConcurrentQueue</code> class.</p> </li> </ul>"},{"location":"labor/4-tobbszalu/index_eng/#task-8-elegant-shutdown","title":"Task 8 \u2013 Elegant shutdown","text":"<p>Earlier, we put aside the problem where our process \"hangs\" when the window is closed, because the worker threads were foreground threads, and we hadn't solved how to exit them properly. Our goal now is to ensure that the worker threads shut down gracefully when the application is closed, replacing the infinite <code>while</code> loop.</p> <ol> <li> <p>Use a <code>ManualResetEvent</code> to signal the shutdown in <code>TryGet</code> during the wait. We will add a new <code>ManualResetEvent</code> to the FIFO and introduce a <code>Release</code> method that can be used to end the waiting state (by setting our new event to the signaled state).</p> <pre><code>private ManualResetEvent _releaseTryGet = new ManualResetEvent(false);\n\npublic void Release()\n{\n    _releaseTryGet.Set();\n}\n</code></pre> </li> <li> <p>In <code>TryGet</code>, wait for this new event as well. The <code>WaitAny</code> method will allow the execution to proceed when any of the <code>WaitHandle</code> objects provided in its parameters are signaled. It returns the index of the signaled object in the array. Actual data processing should only occur when <code>_hasData</code> is signaled (which will cause <code>WaitAny</code> to return 0).</p> <pre><code>public bool TryGet(out double[] data)\n{\n    if (WaitHandle.WaitAny(new[] { _hasData, _releaseTryGet }) == 0)\n    {\n        lock (_syncRoot)\n        {\n</code></pre> </li> <li> <p>In <code>MainWindow.xaml.cs</code>, add a flag variable to indicate when the window is closed.</p> <pre><code>private bool _isClosed = false;\n</code></pre> </li> <li> <p>When the main window is closed, signal the new event and toggle the flag. Subscribe to the <code>Closed</code> event in the <code>MainWindow</code> class constructor and implement the event handler function:</p> <pre><code>public MainWindow()\n{\n    ...\n\n    Closed += MainWindow_Closed;\n}\n\nprivate void MainWindow_Closed(object sender, WindowEventArgs args)\n{\n    _isClosed = true;\n    _fifo.Release();\n}\n</code></pre> </li> <li> <p>Rewrite the <code>while</code> loop to monitor the flag from the previous step.</p> <pre><code>private void WorkerThread()\n{\n    while (!_isClosed)\n    {\n</code></pre> </li> <li> <p>Finally, ensure that no messages are displayed after the window is closed.</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    if (_isClosed)\n        return;\n}\n</code></pre> </li> <li> <p>Run the application and check if the process indeed terminates properly when we exit the application.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_eng/#outlook-task-async-await","title":"Outlook: Task, async, await","text":"<p>In this laboratory, we aimed to familiarize ourselves with low-level thread management techniques. However, we could have (partially) implemented our solution using higher-level tools and mechanisms provided by .NET for asynchronous programming, such as the <code>Task</code>/<code>Task&lt;T&gt;</code> classes and the <code>async</code>/<code>await</code> keywords.</p>"},{"location":"labor/4-tobbszalu/index_ger/","title":"4. Erstellung von mehrf\u00e4digen Anwendungen","text":""},{"location":"labor/4-tobbszalu/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>Ziel der \u00dcbung ist, dass die Studenten mit den Grunds\u00e4tzen kennenzulernen, die bei der Programmierung von mehreren Threads beachtet werden m\u00fcssen. Behandelte Themen (unter anderem):</p> <ul> <li>Einen Thread starten (<code>Thread</code>)</li> <li>Einen Thread beenden</li> <li>Erstellen von faedensicheren (thread safe) Klassen mit dem Schl\u00fcsselwort <code>lock</code> </li> <li><code>ThreadPool</code> verwenden</li> <li>Signalisieren und Synchronisation von auf Signal wartenden Threads mit der Hilfe von <code>ManualResetEvent</code> (<code>WaitHandle</code>)</li> <li>Besonderheiten des WinUI-Threadings (<code>DispatcherQueue</code>)</li> </ul> <p>Da das Thema sehr umfangreich ist, werden Sie nat\u00fcrlich nur Grundkenntnisse erwerben, aber mit diesem Wissen werden Sie in der Lage sein, komplexere Aufgaben selbst\u00e4ndig zu bearbeiten.</p> <p>Zugeh\u00f6rige Vorlesungen: Entwicklung konkurrierender (meghrf\u00e4digen) Anwendungen.</p>"},{"location":"labor/4-tobbszalu/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung der \u00dcbung ben\u00f6tigten Werkzeuge:</p> <ul> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> <li>Betriebssystem Windows 10 oder Windows 11 (Linux und macOS nicht geeignet)</li> </ul>"},{"location":"labor/4-tobbszalu/index_ger/#losung","title":"L\u00f6sung","text":"Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist verf\u00fcgbar auf GitHub. Der einfachste Weg, es herunterzuladen, ist, den <code>git clone</code>-Zweig von der Kommandozeile aus zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo -b solved</code></p> <p>Sie m\u00fcssen Git auf Ihrem Rechner installiert haben, weitere Informationen hier.</p>"},{"location":"labor/4-tobbszalu/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die Verwaltung parallel laufender Threads ist ein Bereich mit hoher Priorit\u00e4t, den alle Softwareentwickler zumindest in den Grundlagen kennen sollten. In der \u00dcbung l\u00f6sen wir grundlegende, aber vorrangige Probleme, so dass wir uns bem\u00fchen sollten, nicht nur das Endergebnis, sondern auch die Bedeutung und die Gr\u00fcnde f\u00fcr die von uns vorgenommenen \u00c4nderungen zu verstehen.</p> <p>In dieser \u00dcbung werden wir einer einfachen WinUI-Anwendung mehrf\u00e4dige F\u00e4higkeiten hinzuf\u00fcgen und zunehmend komplexere Aufgaben l\u00f6sen. Das Grundproblem ist folgendes: Wir haben eine Funktion, die lange l\u00e4uft, und wie wir sehen werden, hat der \"direkte\" Aufruf \u00fcber die Benutzeroberfl\u00e4che unangenehme Folgen. W\u00e4hrend dem L\u00f6sen werden wir eine bestehende Anwendung mit eigenen Codezeile erg\u00e4nzen. Neue Zeilen, die eingef\u00fcgt werden sollen, sind in der Anleitung durch einen hervorgehobenen Hintergrund gekennzeichnet.</p>"},{"location":"labor/4-tobbszalu/index_ger/#0-aufgabe-kennenlernen-des-anfangsprojekt-vorbereitung","title":"0. Aufgabe - Kennenlernen des Anfangsprojekt, Vorbereitung","text":"<p>Klonen wir das Repository der urspr\u00fcnglichen Anwendung f\u00fcr \u00dcbung 4:</p> <ul> <li>\u00d6ffnen wir ein command prompt</li> <li>Navigieren wir zu einem Ordner unserer Wahl, zum Beispiel c:\\work\\NEPTUN</li> <li>Geben wir den folgenden Befehl ein: <code>git clone https://github.com/bmeviauab00/lab-tobbszalu-kiindulo.git</code></li> <li>\u00d6ffnen wir das Solution SuperCalculator.sln in Visual Studio.</li> </ul> <p>Unsere Aufgabe ist es, eine Benutzeroberfl\u00e4che unter Verwendung der WinUI-Technologie zu erstellen, um einen in bin\u00e4rer Form erreichbaren Algorithmus auszuf\u00fchren. Die bin\u00e4re Form von .NET ist eine Datei mit der Erweiterung .dll, die in der Programmiersprache eine Klassenbibliothek darstellt.  In unserem Fall lautet der Dateiname Algorithms.dll, der sich im geklonten Git-Repository befindet.</p> <p>In der Anfangsprojekt ist die Benutzeroberfl\u00e4che bereits vorbereitet. F\u00fchren wir die Anwendung aus:</p> <p></p> <p>In der Benutzeroberfl\u00e4che der Anwendung k\u00f6nnen wir die Eingabeparametern des Algorithmus angeben (<code>double</code> array of numbers): in unserem Beispiel rufen wir den Algorithmus immer mit zwei <code>double</code> Zahlenparametern auf, die in den zwei oberen Textfeldern angegeben werden k\u00f6nnen. Unsere Aufgabe ist es, den Algorithmus mit den angegebenen Parametern auszuf\u00fchren, falls wir auf die Taste Calculate Result klicken, und wenn er fertig ist, das Ergebnis mit den Eingabeparametern in einer neuen Zeile des Listenfeldes unterhalb des Results anzuzeigen.</p> <p>In der n\u00e4chsten Schritten schauen wir zuerst das heruntergeladene Visual Studio Solution an:</p> <p>Die Rahmenanwendung ist eine auf WinUI 3 basierte Anwendung. Die Oberfl\u00e4che ist grunds\u00e4tzlich fertig, ihre Definition ist in der Datei <code>MainWindow.xaml</code> zu finden. Dies ist f\u00fcr uns im Hinblick auf den Zweck der \u00dcbung weniger aufregend, aber es lohnt sich, sie zu Hause zu \u00fcben.</p> Gestaltung der Oberfl\u00e4che in <code>MainWindow.xaml</code> <p>Grundlagen der Gestaltung von Fensterfl\u00e4chen:</p> <ul> <li>Die Wurzel (root) ist \"normalerweise\" ein <code>Grid</code>. </li> <li>In der obersten Zeile des Wurzel-<code>Grid</code> befindet sich das <code>StackPanel</code>, das die zwei Texteingabefelder (<code>TextBox</code>) und die Taste (<code>Button</code>) enth\u00e4lt.</li> <li>Die unterste Zeile des Wurzel-<code>Grid</code> enth\u00e4lt ein weiteres <code>Grid</code>. Im Gegensatz zur <code>TextBox</code> hat die <code>ListBox</code> keine <code>Header</code>-Eigenschaft, so dass wir diese als separaten <code>TextBlock</code> mit dem Text \"Result\" einf\u00fchren mussten. Dieses <code>Grid</code> wurde eingef\u00fchrt (anstelle eines \"einfacheren\" <code>StackPanel</code>), weil es m\u00f6glich war, den <code>TextBlock</code> in der oberen Zeile mit einer festen H\u00f6he f\u00fcr das \"Result\" und die <code>ListBox</code> in der unteren Zeile so zu haben, dass sie den gesamten verbleibenden Platz ausf\u00fcllt (die H\u00f6he der oberen Zeile ist <code>Auto</code>, die H\u00f6he der unteren Zeile ist <code>*</code>).</li> <li>Die Taste mit dem Text \"Calculate Result\" ist ein gutes Beispiel daf\u00fcr, dass der <code>Content</code> eines <code>Button</code> Elementes oft nicht nur ein einfacher Text ist. Das Beispiel zeigt eine Komposition aus einem <code>SymbolIcon</code> und einem <code>TextBlock</code> (implementiert mit <code>StackPanel</code>), so dass wir ein geeignetes Icon/Symbol zuweisen k\u00f6nnen, um sein Aussehen zu verbessern.</li> <li>Wir sehen auch ein Beispiel daf\u00fcr, wie man eine <code>ListBox</code> scrollbar macht, wenn sie bereits viele Elemente enth\u00e4lt (oder die Elemente zu breit sind). Dazu muss der <code>ScrollViewer</code> richtig parametrisiert werden.</li> <li>Die Eigenschaft <code>ItemContainerStyle</code> der <code>ListBox</code> wird verwendet, um Stile f\u00fcr das Element <code>ListBox</code> festzulegen. Im Beispiel ist <code>Padding</code> auf einen kleineren Wert als den Standardwert eingestellt, da sonst die H\u00f6he der <code>ListBox</code>-Elemente \u00fcberfl\u00fcssig gro\u00df w\u00e4re.</li> </ul> <p>Die Quelldatei <code>MainWindow.xaml.cs</code> ist der Code hinter der Datei f\u00fcr das Hauptfenster, lassen wir uns diese \u00fcberpr\u00fcfen, ihre Hauptelemente sind wie folgt:</p> <ul> <li>Um das Ergebnis und die Parameter auf <code>ListBox</code>zu loggen, gibt es eine Hilfsfunktion namens <code>ShowResult</code>. </li> <li><code>CalculateResultButton_Click</code> ist der Ereignishandler f\u00fcr das Anklicken der Taste \" Calculate Result \". Wir sehen, dass er den Wert der Parameter aus den beiden Textfeldern liest und versucht, ihn in eine Zahl umzuwandeln. Wenn er erfolgreich ist, wird der Algorithmus hier aufgerufen (dies ist noch nicht implementiert), oder wenn er fehlschl\u00e4gt, wird der Benutzer \u00fcber <code>DisplayInvalidElementDialog</code> in einem Nachrichtenfenster \u00fcber ung\u00fcltige Parameter informiert.</li> <li>Die Funktion <code>AddKeyboardAcceleratorToChangeTheme</code>, die vom Konstruktor aufgerufen wird, ist f\u00fcr uns nicht relevant, sie erm\u00f6glicht das Umschalten zwischen hellen und dunklen Themen (Sie sollten es zur Laufzeit ausprobieren, Ctrl+T ).</li> </ul>"},{"location":"labor/4-tobbszalu/index_ger/#verwendung-des-codes-in-der-dll","title":"Verwendung des Codes in der DLL","text":"<p>Im urspr\u00fcnglichen Projekt finden wir die Datei Algorithm.dll. In dieser kompilierten Form gibt es eine Klasse <code>SuperAlgorithm</code> im Namensraum <code>Algorithms</code>, die eine statische Operation namens <code>Calculate</code> hat. Um die Klassen einer DLL in einem Projekt verwenden zu k\u00f6nnen, m\u00fcssen wir in unsrem Projekt einen Verweis auf die DLL hinzuf\u00fcgen.</p> <ol> <li> <p>Klicken wir im Solution Explorer mit der rechten Maustaste auf den Knoten Dependencies unseres Projekts und w\u00e4hlen wir Add Project reference!</p> <p></p> <p>Externe Referenzen</p> <p>Hier verweisen wir eigentlich nicht auf ein anderes Visual Studio-Projekt, aber dies ist der einfachste Weg, dieses Fenster aufzurufen.</p> <p>Es sollte auch erw\u00e4hnt werden, dass wir f\u00fcr externe Klassenbibliotheken keine DLLs mehr in einem regul\u00e4ren Projekt referenzieren, sondern die externen Pakete aus dem Paketmanager von .NET, aus dem NuGet beziehen. Jetzt ist Algorithm.dll in unserem Fall nicht in NuGet ver\u00f6ffentlicht, so dass wir sie manuell hinzuf\u00fcgen m\u00fcssen.</p> </li> <li> <p>Verwenden wir die Taste Browse in der rechten unteren Ecke des Popup-Fensters, w\u00e4hlen wir die Datei Algorithms.dll im Unterordner External unseres Projekts aus und klicken wir auf OK, um das Hinzuf\u00fcgen zu best\u00e4tigen!</p> </li> </ol> <p>Im Solution Explorer k\u00f6nnen wir auf den Knoten Dependencies unter einem Projekt klicken, um die referenzierten externen Abh\u00e4ngigkeiten anzuzeigen. Der Verweis auf Algorithmen, der zuvor addiert war, wird auch hier unter Assemblys angezeigt. Die Kategorie Frameworks enth\u00e4lt die .NET Framework-Pakete. Und die Elemente unter Analyzer sind Werkzeuge f\u00fcr die statische Codeanalyse zur Kompilierzeit. Und es g\u00e4be hier auch die Projekt- oder NuGet-Referenzen.</p> <p></p> <p>Klicken wir mit der rechten Maustaste auf die Referenz Algorithms und w\u00e4hlen wir View in Object Browser. Dies \u00f6ffnet die Registerkarte Object Browser, in der wir sehen k\u00f6nnen, welche Namensr\u00e4ume, Klassen und deren Mitglieder (Membervariable, Memberfunktion, Eigenschaft, Ereignis) in der angegebenen DLL enthalten sind. Visual Studio liest diese aus den DLL-Metadaten mit Hilfe des so genannten Reflection-Mechanismus (wir k\u00f6nnen diesen Code selbst schreiben).</p> <p>Wie in der Abbildung unten dargestellt ist, suchen wir im Object Browser den Knoten Algorithmen auf der linken Seite, \u00f6ffnen ihn und sehen, dass er einen Namensraum <code>Algorithms</code> und eine Klasse <code>SuperAlgorithm</code> enth\u00e4lt. Wenn wir dies ausw\u00e4hlen, werden die Funktionen der Klasse in der Mitte angezeigt, und wenn wir hier eine Funktion ausw\u00e4hlen, wird die genaue Signatur dieser Funktion angezeigt:</p> <p></p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-1-ausfuhren-einer-operation-auf-dem-hauptthread","title":"Aufgabe 1 - Ausf\u00fchren einer Operation auf dem Hauptthread","text":"<p>Jetzt k\u00f6nnen wir mit der Ausf\u00fchrung des Algorithmus fortfahren. Zun\u00e4chst tun wir dies im Hauptthread unserer Anwendung.</p> <ol> <li> <p>Im Ereignishandler der Taste <code>Click</code> im Hauptfenster rufen wir unsere Z\u00e4hlerfunktion auf. \u00d6ffnen wir dazu die code behind Datei <code>MainWindow.xaml.cs</code> im Solution Explorer und suchen wir nach dem Ereignishandler <code>CalculateResultButton_Click</code>. Vervollst\u00e4ndigen wir den Code durch den Aufruf des neu referenzierten Algorithmus.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n        ShowResult(parameters, result);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>Probieren wir die Anwendung aus und stellen fest, dass das Fenster w\u00e4hrend der Berechnung nicht auf Verschieben oder Gr\u00f6\u00dfen\u00e4nderung reagiert, die Oberfl\u00e4che friert praktisch ein.</p> </li> </ol> <p>Unsere Anwendung ist ereignisgesteuert, wie alle Windows-Anwendungen. Das Betriebssystem benachrichtigt unsere Anwendung \u00fcber die verschiedenen Interaktionen (z. B. Verschieben, Gr\u00f6\u00dfen\u00e4nderung, Mausklick): Da der einzige Thread unserer Anwendung nach dem Tastendruck mit der Berechnung besch\u00e4ftigt ist, kann er nicht sofort weitere Benutzeranweisungen verarbeiten. Sobald die Berechnung abgeschlossen ist (und die Ergebnisse in der Liste angezeigt werden), werden die zuvor erhaltenen Befehle ausgef\u00fchrt.</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-2-durchfuhrung-der-berechnung-in-einem-separaten-thread","title":"Aufgabe 2 - Durchf\u00fchrung der Berechnung in einem separaten Thread","text":"<p>Im n\u00e4chsten Schritt werden wir einen separaten Thread starten, um die Berechnung durchzuf\u00fchren, damit die Benutzeroberfl\u00e4che nicht blockiert wird.</p> <ol> <li> <p>Erstellen wir eine neue Funktion in der Klasse <code>MainWindow</code>, die der Eintrittspunkt f\u00fcr den VerarbeitungsFaden sein wird.</p> <pre><code>private void CalculatorThread(object arg)\n{\n    var parameters = (double[])arg;\n    var result = Algorithms.SuperAlgorithm.Calculate(parameters);\n    ShowResult(parameters, result);\n}\n</code></pre> </li> <li> <p>Starten wir den Thread in dem Ereignishandler der Taste <code>Click</code>. Ersetzen wir dazu den Code, den wir zuvor hinzugef\u00fcgt haben:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        var th = new Thread(CalculatorThread);\n        th.Start(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>Der in der Operation <code>Start</code> des Fadenobjekts \u00fcbergebene Parameter wird an unsere Fadenfunktion <code>CalculatorThread</code> \u00fcbergeben.</p> </li> <li> <p>F\u00fchren wir die Anwendung mit F5 aus (jetzt ist es wichtig, sie so auszuf\u00fchren, im Debugger)! The application called an interface that was marshalled for a different thread. (0x8001010E (RPC_E_WRONG_THREAD)) Fehlermeldung bekommen wir in der Methode <code>ShowResult</code>, weil wir nicht versuchen, auf das UI-Element/Controller von dem Thread aus zuzugreifen, der es erstellt hat (der Controller). In der n\u00e4chsten \u00dcbung werden wir dieses Problem analysieren und l\u00f6sen.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-3-verwendung-von-dispatcherqueuehasthreadaccess-und-dispatcherqueuetryenqueue","title":"Aufgabe 3 - Verwendung von <code>DispatcherQueue.HasThreadAccess</code> und <code>DispatcherQueue.TryEnqueue</code>","text":"<p>Das Problem im vorigen Aufgabe hat folgende Ursachen. F\u00fcr WinUI-Anwendungen gilt folgende Regel: Fenster/Oberfl\u00e4chen/Steuerelemente sind standardm\u00e4\u00dfig keine fadensicheren Objekte, so dass auf ein Fenster/Oberfl\u00e4che/Steuerelement nur von dem Thread aus zugegriffen werden darf (z.B. Eigenschaft lesen, einstellen, Operation aufrufen), der das gegebenen Fenster/Oberfl\u00e4che/Steuerelement erstellt hat, sondern gibt es eine Ausnahme. In unserer Anwendung haben wir eine Ausnahme bekommen, weil das <code>resultListBox</code> Steuerelement im Haupt-Thread erstellt wird, aber in der <code>ShowResult</code> Methode, wenn das Ergebnis angezeigt wird, wird von einem anderen Thread aus darauf zugegriffen (Aufruf der<code>resultListBox.Items.Add</code> Methode).</p> <p>Die Frage ist, wie auf diese Oberfl\u00e4chenelemente/Steuerelemente von einem anderen Thread aus noch irgendwie zugegriffen werden kann. Die L\u00f6sung besteht in der Verwendung von <code>DispatcherQueue</code>, um sicherzustellen, dass der Zugriff auf die Steuerelemente immer \u00fcber den richtigen Thread erfolgt:</p> <ul> <li>Die Funktion <code>TryEnqueue</code> des Objekts <code>DispatcherQueue</code> f\u00fchrt die als Parameter angegebene Funktion auf dem Thread aus, der das Steuerelement erstellt (von dem aus man nun direkt auf das Steuerelement zugreifen kann).</li> <li>Die Eigenschaft <code>HasThreadAccess</code> des Objekts <code>DispatcherQueue</code> hilft bei der Entscheidung, ob es notwendig ist, <code>TryEnqueue</code> zu verwenden, wie im vorherigen Abschnitt erw\u00e4hnt. Wenn der Wert dieser Eigenschaft<ul> <li>wahr ist, kann auf den Controller direkt zugegriffen werden (weil der aktuelle Thread derselbe ist wie der Thread, der den Controller erstellt hat), aber wenn</li> <li>falsch ist, kann auf den Controller nur \"unter Umgehung\", durch die Funktion <code>TryEnqueue</code> des Objekts <code>DispatcherQueue</code> zugegriffen werden (da der aktuelle Thread NICHT mit dem Thread identisch ist, der den Controller erstellt hat).</li> </ul> </li> </ul> <p>Mit <code>DispatcherQueue</code> k\u00f6nnen wir also unsere vorherige Ausnahme vermeiden (der Zugriff auf den Controller, in diesem Fall <code>resultListBox</code>, kann an den entsprechenden Thread \"geleitet\" werden). Wir werden dies im Folgenden tun.</p> <p>Hinweis</p> <p>Das Objekt <code>DispatcherQueue</code> ist in Nachkommen der Klasse Window \u00fcber die Eigenschaft <code>DispatcherQueue</code> verf\u00fcgbar (und in anderen Klassen \u00fcber die statische Operation <code>DispatcherQueue.GetForCurrentThread()</code> ).</p> <p>Wir m\u00fcssen die Methode <code>ShowResult</code> so \u00e4ndern, dass sie keine Ausnahme ausl\u00f6st, wenn sie aus einem neuen, separaten Thread aufgerufen wird.</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    // Closing the window the DispatcherQueue property may return null, so we have to perform a null check\n    if (this.DispatcherQueue == null)\n        return;\n\n    if (this.DispatcherQueue.HasThreadAccess)\n    {\n        var item = new ListBoxItem()\n        {\n            Content = $\"{parameters[0]} #  {parameters[1]} = {result}\"\n        };\n        resultListBox.Items.Add(item);\n        resultListBox.ScrollIntoView(item);\n    }\n    else\n    {\n        this.DispatcherQueue.TryEnqueue( () =&gt; ShowResult(parameters, result) );\n    }\n}\n</code></pre> <p>Probieren wir es aus!</p> <p>Diese L\u00f6sung ist bereits funktionsf\u00e4hig und ihre wichtigste Elemente sind die folgenden:</p> <ul> <li>Die Rolle der Pr\u00fcfung, ob <code>DispatcherQueue</code> <code>null</code> ist: Nach dem Schlie\u00dfen des Hauptfensters ist <code>DispatcherQueue</code> schon <code>null</code>, es kann nicht verwendet werden.</li> <li>Die <code>DispatcherQueue.HasThreadAccess</code> wird verwendet, um zu pr\u00fcfen, ob der aufrufende Thread direkt auf die Controller zugreifen kann (in unserem Fall <code>ListBox</code>):<ul> <li>Falls ja, wird alles wie bisher passieren, der Code f\u00fcr <code>ListBox</code>bleibt unver\u00e4ndert.</li> <li>Falls nicht, k\u00f6nnen wir durch <code>DispatcherQueue.TryEnqueue</code> auf den Controller zugreifen. Dabei wird der folgende Trick angewendet. Die Funktion <code>TryEnqueue</code> erh\u00e4lt eine parameterlose, einzeilige Funktion in Form eines Lambda-Ausdrucks, der unsere Funktion <code>ShowResult</code> aufruft (praktisch rekursiv) und ihr die Parameter \u00fcbergibt. Das ist gut f\u00fcr uns, weil dieser <code>ShowResult</code>-Aufruf bereits auf dem Thread erfolgt, der den Controller erstellt hat (dem Hauptthread der Anwendung), der Wert von <code>HasThreadAccess</code> ist jetzt wahr, und wir k\u00f6nnen direkt auf unser <code>ListBox</code>zugreifen. Dieser rekursive Ansatz ist ein oft benutztes Muster, um redundanten Code zu vermeiden.</li> </ul> </li> </ul> <p>Setzen wir einen Haltepunkt in der ersten Zeile der Operation <code>ShowResult</code>, und f\u00fchren wir die Anwendung aus, um sicherzustellen, dass <code>HasThreadAccess</code> falsch ist, wenn <code>ShowResult</code> zum ersten Mal aufgerufen wird (also wird <code>TryEnqueue</code> aufgerufen), und dann wird <code>ShowResult</code> erneut aufgerufen, aber <code>HasThreadAccess</code> ist wahr.</p> <p>Entfernen wir den Haltepunkt und f\u00fchren wir die Anwendung aus: Beachten wir, dass w\u00e4hrend eine Berechnung l\u00e4uft, eine andere gestartet werden kann, da unsere Benutzeroberfl\u00e4che durchgehend reaktionsf\u00e4hig bleibt (und der Fehler, der zuvor auftrat, nicht mehr auftritt).</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-4-ausfuhren-einer-operation-auf-einem-threadpool-thread","title":"Aufgabe 4 - Ausf\u00fchren einer Operation auf einem Threadpool-Thread","text":"<p>Eine Merkmal der bisherigen L\u00f6sung ist, dass sie immer einen neuen Thread f\u00fcr die Operation erstellt. In unserem Fall ist dies nicht besonders wichtig, aber dieser Ansatz kann f\u00fcr eine Serveranwendung, die eine gro\u00dfe Anzahl von Anfragen bedient, problematisch sein, da f\u00fcr jede Anfrage ein eigener Thread gestartet wird. Aus zwei Gr\u00fcnden:</p> <ul> <li>Wenn die Fadenfunktion schnell l\u00e4uft (um einen Client schnell zu bedienen), dann wird ein gro\u00dfer Teil der CPU f\u00fcr das Starten und Stoppen von Threads verschwendet, was an sich schon ressourcenintensiv ist.</li> <li>Es k\u00f6nnen zu viele Threads erstellt werden, und das Betriebssystem muss zu viele planen, was unn\u00f6tig Ressourcen verschwendet.</li> </ul> <p>Ein weiteres Problem mit unserer derzeitigen L\u00f6sung: Da die Berechnung auf einem so genannten Vordergrundfaden l\u00e4uft (neu erstellte Threads sind standardm\u00e4\u00dfig Vordergrundf\u00e4den), l\u00e4uft das Programm selbst dann im Hintergrund weiter, obwohl wir die Anwendung schlie\u00dfen, solange bis die letzte Berechnung ausgef\u00fchrt wurde: Ein Prozess h\u00f6rt erst auf zu laufen, wenn er keinen Vordergrundfaden mehr hat.</p> <p>\u00c4ndern wir den Ereignishandler der Taste, um die Berechnung in einem Threadpool-Thread auszuf\u00fchren, anstatt einen neuen Thread zu starten. Um dies zu tun, schreiben wir einfach den Ereignishandler f\u00fcr das Dr\u00fccken der Taste um.</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        ThreadPool.QueueUserWorkItem(CalculatorThread, parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> <p>Probieren wir die Anwendung aus und stellen fest, dass die Anwendung sofort anh\u00e4lt, wenn das Fenster geschlossen wird, ohne sich um eventuell noch laufende Threads zu k\u00fcmmern (denn Threadpool-Threads sind Hintergrundf\u00e4den).</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-5-hersteller-verbraucher-basierte-losung","title":"Aufgabe 5 - Hersteller-Verbraucher-basierte L\u00f6sung","text":"<p>Allein durch die L\u00f6sung der vorangegangenen Probleme erhielten wir eine vollst\u00e4ndige und gut funktionierende L\u00f6sung f\u00fcr das urspr\u00fcngliche Problem, die es erm\u00f6glicht, dass mehrere Threads parallel im Hintergrund arbeiten, wenn die Taste mehrmals nacheinander gedr\u00fcckt wird. Im Folgenden werden wir unsere Anwendung so modifizieren, dass ein Tastendruck nicht immer einen neuen Thread erzeugt, sondern die Aufgaben in eine Aufgabenwarteschlange stellt, aus der mehrere im Hintergrund laufende Threads sie nacheinander ausw\u00e4hlen und ausf\u00fchren. Bei dieser Aufgabe handelt es sich um das klassische Hersteller-Verbraucher-Problem, das in der Praxis h\u00e4ufig auftritt und in der folgenden Abbildung dargestellt ist.</p> <p></p> <p>Hersteller-Verbraucher vs <code>ThreadPool</code></p> <p>Wenn Sie dar\u00fcber nachdenken, ist <code>ThreadPool</code> auch ein spezieller Hersteller-Verbraucher und Scheduler-Mechanismus, der uns von .NET zur Verf\u00fcgung gestellt wird. Im Folgenden entwickeln wir eine andere Art von Hersteller-Verbraucher-L\u00f6sung, um einige mit der Fadenbehandlung verbundenen Wettbewerbsprobleme anzuschauen.</p> <p>Der Hauptthread ist der Hersteller, der eine neue Aufgabe erstellt, falls die Taste Calculate result geklickt wird. Wir werden mehr Threads in der Verbraucher-/verarbeitenden Threads starten, da wir mehr CPU-Kerne verwenden und die Ausf\u00fchrung von Aufgaben parallelisieren k\u00f6nnen.</p> <p>F\u00fcr die Zwischenspeicherung von Aufgaben k\u00f6nnen wir die Klasse <code>DataFifo</code> (im Ordner <code>Data</code> im Solution Explorer) verwenden, die in unserem urspr\u00fcnglichen Projekt bereits etwas vorbereitet ist. Schauen wir uns den Quellcode an. Es implementiert eine einfache FIFO-Warteschlange, um <code>double[]</code> zu speichern. Die Methode <code>Put</code> h\u00e4ngt die neuen Paare an das Ende der internen Liste an, w\u00e4hrend die Methode <code>TryGet</code> das erste Element der internen Liste zur\u00fcckgibt (und entfernt). Wenn die Liste leer ist, kann die Funktion kein Element zur\u00fcckgeben. In diesem Fall zeigt <code>false</code> dies durch einen R\u00fcckgabewert an.</p> <ol> <li> <p>\u00c4ndern wir den Ereignishandler der Taste so, dass er nicht in <code>ThreadPool</code>, sondern in FIFO arbeitet:</p> <pre><code>private void CalculateResultButton_Click(object sender, RoutedEventArgs e)\n{\n    if (double.TryParse(param1TextBox.Text, out var p1) &amp;&amp; double.TryParse(param2TextBox.Text, out var p2))\n    {\n        var parameters = new double[] { p1, p2 };\n\n        _fifo.Put(parameters);\n    }\n    else\n        DisplayInvalidElementDialog();\n}\n</code></pre> </li> <li> <p>Erstellen wir eine naive Implementierung der neuen Fadenbehandlungsfunktion in unserer Formularklasse:</p> <pre><code>private void WorkerThread()\n{\n    while (true)\n    {\n        if (_fifo.TryGet(out var data))\n        {\n            double result = Algorithms.SuperAlgorithm.Calculate(data);\n            ShowResult(data, result);\n        }\n\n        Thread.Sleep(500);\n    }\n}\n</code></pre> <p>Der Grund f\u00fcr die Einf\u00fchrung von <code>Thread.Sleep</code> ist, dass sich die Threads sonst unn\u00f6tigerweise die ganze Zeit mit einem leeren FIFO besch\u00e4ftigen w\u00fcrden, ohne irgendeine n\u00fctzliche Operation auszuf\u00fchren, und einen CPU-Kern zu 100% \u00fcberlasten w\u00fcrden. Unsere L\u00f6sung ist nicht ideal, wir werden sie sp\u00e4ter verbessern.</p> </li> <li> <p>Erstellen und starten wir die Verarbeitungsf\u00e4den im Konstruktor:</p> <pre><code>new Thread(WorkerThread) { Name = \"Worker thread 1\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 2\" }.Start();\nnew Thread(WorkerThread) { Name = \"Worker thread 3\" }.Start();\n</code></pre> </li> <li> <p>Starten wir die Anwendung und schlie\u00dfen wir sie sofort, ohne auf die Taste Calculate Result zu klicken. Unser Fenster wird geschlossen, aber unser Prozess l\u00e4uft weiter, und die einzige M\u00f6glichkeit, die Anwendung zu schlie\u00dfen, ist \u00fcber Visual Studio oder den Task-Manager:</p> <p></p> <p>Die Verarbeitungsf\u00e4den sind Vordergrundf\u00e4den, die verhindern das Beenden der Prozess beim Schlie\u00dfen des Fensters. Eine L\u00f6sung k\u00f6nnte darin bestehen, die Eigenschaft <code>IsBackground</code> der Threads auf <code>true</code>zu setzen, nachdem sie erstellt wurden. Die andere L\u00f6sung stellt sicher, dass die Verarbeitungsf\u00e4den beim Beenden beendet werden. Lassen wir dieses Thema erst einmal beiseite, wir kommen sp\u00e4ter darauf zur\u00fcck.</p> </li> <li> <p>Starten wir die Anwendung und wir werden feststellen, dass wir nach dem Klicken auf die Taste Calculate Result (nur einmal klicken) h\u00f6chstwahrscheinlich eine Ausnahme erhalten. Das Problem ist, dass <code>DataFifo</code> nicht fadensicher ist, es ist inkonsistent geworden. Hierf\u00fcr gibt es zwei Ursachen:</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_ger/#problem-1","title":"Problem 1","text":"<p>Betrachten wir das folgende Szenario:</p> <ol> <li>Die Zeile ist leer. Die verarbeitenden Threads fragen den FIFO kontinuierlich in einer <code>while</code>-Schleife ab, d. h. sie rufen die Methode <code>TryGet</code> auf.</li> <li>Der Benutzer f\u00fcgt der Warteschlange eine Aufgabe hinzu.</li> <li>Einer der Verarbeitungsf\u00e4den in der Methode <code>TryGet</code> stellt fest, dass Daten in der Zeile vorhanden sind, d. h. die Bedingung der Codezeile <code>if ( _innerList.Count &gt; 0 )</code> ist erf\u00fcllt, und geht zur n\u00e4chsten Codezeile \u00fcber. Angenommen, dieser Thread verliert an dieser Stelle seine Durchf\u00fchrungsrecht, dann hat er keine Zeit mehr, die Daten aus der Warteschlange zu nehmen.</li> <li>Ein anderer Verarbeitungsthread l\u00e4sst die Pr\u00fcfung von <code>if ( _innerList.Count &gt; 0 )</code> zu diesem Zeitpunkt ebenfalls fallen, die Bedingung ist ebenfalls erf\u00fcllt, und dieser Thread nimmt die Daten aus der Warteschlange.</li> <li>Der erste Thread wird neu geplant, wacht auf und versucht, die Daten aus der Warteschlange zu nehmen: die Warteschlange ist leer, der andere Thread hat die einzigen Daten aus der Warteschlange vor ihm genommen. Der Zugriff auf <code>_innerList[0]</code> f\u00fchrt daher zu einer Ausnahme.</li> </ol> <p>Die einzige M\u00f6glichkeit, dieses Problem zu vermeiden, ist die Pr\u00fcfung der Zeilenleere und die Elementausnahme unteilbar zu machen.</p> <p>Thread.Sleep(500)</p> <p>Die Rolle der Codezeile <code>Thread.Sleep(500);</code>, die auf die Codezeile folgt, die die Leere-Pr\u00fcfung in unserem Beispielcode \u00fcberwacht, besteht nur darin, die Wahrscheinlichkeit zu erh\u00f6hen, dass das obige ungl\u00fcckliche Szenario eintritt, und somit das Beispiel anschaulicher zu machen (da es fast sicher ist, dass der Thread neu geplant wird). Wir werden dies in Zukunft herausnehmen, aber vorl\u00e4ufig lassen wir es drin.</p>"},{"location":"labor/4-tobbszalu/index_ger/#problem-2","title":"Problem 2","text":"<p>Die Klasse <code>DataFifo</code> kann von mehreren Threads gleichzeitig auf die Mitgliedsvariable <code>_innerList</code> mit der Typ <code>List&lt;double[]&gt;</code> zugreifen. Wenn wir uns jedoch die Dokumentation zu <code>List&lt;T&gt;</code> ansehen, werden wir feststellen, dass die Klasse nicht fadensicher (not thread safe) ist. Aber in diesem Fall k\u00f6nnen wir das nicht tun, wir m\u00fcssen Sperren verwenden, um sicherzustellen, dass unser Code nur auf eine Methode/Eigenschaft/Mitgliedsvariable zur gleichen Zeit zugreifen kann (genauer gesagt, kann Inkonsistenz nur im Fall von gleichzeitigen Schreiben und Lesen auftreten, aber wir unterscheiden in den meisten F\u00e4llen nicht zwischen Lesern und Schreibern, und wir tun es hier auch nicht).</p> <p>Der n\u00e4chste Schritt ist, unsere Klasse <code>DataFifo</code> fadensicher zu machen, wodurch die beiden oben genannten Probleme vermieden werden.</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-6-die-datafifo-klasse-fadensicher-machen","title":"Aufgabe 6 - Die DataFifo-Klasse fadensicher machen","text":"<p>Um die Klasse <code>DataFifo</code> fadensicher zu machen, ben\u00f6tigen wir ein Objekt (dies kann ein beliebiges Objekt vom Referenztyp sein), das als Schl\u00fcssel zum Sperren verwendet wird. Mit dem Schl\u00fcsselwort <code>lock</code> k\u00f6nnen wir dann sicherstellen, dass sich jeweils nur ein Thread in den durch diesen Schl\u00fcssel gesch\u00fctzten Bl\u00f6cken aufh\u00e4lt.</p> <ol> <li> <p>F\u00fcgen wir ein Feld vom Typ <code>object</code> mit dem Namen <code>_syncRoot</code> zur Klasse <code>DataFifo</code> hinzu.</p> <pre><code>private object _syncRoot = new object();\n</code></pre> </li> <li> <p>Erg\u00e4nzen wir die Funktionen <code>Put</code> und <code>TryGet</code> mit dem Sperre.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data); \n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            Thread.Sleep(500);\n\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            return true;\n        }\n\n        data = null;\n        return false;\n    }\n}\n</code></pre> <p>Surround with</p> <p>Verwenden wir die Funktion \"Surround with\" von Visual Studio, indem Sie STRG + K, STRG + S auf dem ausgew\u00e4hlten Codeschnipsel dr\u00fccken, den wir umschlie\u00dfen m\u00f6chten.</p> </li> </ol> <p>Jetzt d\u00fcrfen wir keine Ausnahme bekommen.</p> <p>Wir k\u00f6nnen die k\u00fcnstliche Verz\u00f6gerung auch aus der Methode <code>TryGet</code> entfernen ( Zeile<code>Thread.Sleep(500);</code> ).</p> <p>Sperre auf <code>this</code></p> <p>Es stellt sich die Frage, warum wir eine separate Membervariable <code>_syncRoot</code> eingef\u00fchrt und diese als Sperrparameter f\u00fcr <code>lock</code> verwendet haben, wenn wir stattdessen auch <code>this</code> h\u00e4tten verwenden k\u00f6nnen ( <code>DataFifo</code> ist der Referenztyp, daher w\u00e4re dies kein Problem). Die Verwendung von <code>this</code> w\u00fcrde jedoch gegen die Einkapselung unserer Klasse versto\u00dfen! Erinnern wir uns: <code>this</code> ist ein Verweis auf unser Objekt, aber andere Klassen haben Verweise auf dasselbe Objekt (z.B. in unserem Fall <code>MainWindow</code>hat einen Verweis auf <code>DataFifo</code>), und wenn diese externen Klassen eine Sperre auf das Objekt setzen, indem sie <code>lock</code> verwenden, wird dies die Sperre \"st\u00f6ren\", die wir auf die Klasse darin verwenden (da die Verwendung von <code>this</code> dazu f\u00fchrt, dass die externen und internen <code>lock</code> denselben Parameter haben). Zum Beispiel kann eine externe Sperre verwendet werden, um die Operationen <code>TryGet</code> und <code>Put</code> vollst\u00e4ndig \"lahmzulegen\". Im Gegensatz dazu ist in unserer L\u00f6sung der Parameter <code>lock</code>, die Variable <code>_syncRoot</code>, privat und kann nicht von externen Klassen aufgerufen werden, so dass sie die internen Abl\u00e4ufe unserer Klasse nicht beeintr\u00e4chtigen kann.</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-7-implementierung-einer-effektiven-signalisierung","title":"Aufgabe 7 - Implementierung einer effektiven Signalisierung","text":""},{"location":"labor/4-tobbszalu/index_ger/#verwendung-von-manualresetevent","title":"Verwendung von ManualResetEvent","text":"<p>Die Schleife <code>while</code>, die in <code>WorkerThread</code>st\u00e4ndig l\u00e4uft, implementiert ein sogenanntes aktives Warten, das immer vermieden werden sollte. Falls <code>Thread.Sleep</code> nicht in den Schleifenkern eingebaut worden w\u00e4re, w\u00e4re der Prozessor \u00fcberlastet gewesen. <code>Thread.Sleep</code> l\u00f6st zwar das Problem der CPU-Belastung, f\u00fchrt aber ein weiteres ein: Wenn sich alle drei Arbeitsf\u00e4den im Ruhezustand befinden, wenn neue Daten empfangen werden, warten wir unn\u00f6tigerweise 500 ms, bevor wir mit der Verarbeitung der Daten beginnen.</p> <p>Im Folgenden wird die Anwendung so ge\u00e4ndert, dass sie in einem blockierten Zustand wartet, bis Daten zum FIFO hinzugef\u00fcgt werden (aber wenn Daten hinzugef\u00fcgt werden, beginnt sie sofort mit der Verarbeitung). Um anzuzeigen, ob sich Daten in der Warteschlange befinden, wird <code>ManualResetEvent</code>verwendet.</p> <ol> <li> <p>F\u00fcgen wir eine Instanz von <code>MaunalResetEvent</code> zu unserer Klasse <code>DataFifo</code> als <code>_hasData</code> hinzu.</p> <pre><code>// Infolge des Konstruktorparameters false wird das Ereignis anf\u00e4nglich nicht signalisiert (Tor geschlossen)\nprivate ManualResetEvent _hasData = new ManualResetEvent(false);\n</code></pre> </li> <li> <p><code>_hasData</code> funktioniert als ein Tor in unserer Anwendung.  Wenn der Liste Daten hinzugef\u00fcgt werden, wird sie \"ge\u00f6ffnet\", und wenn die Liste geleert wird, wird sie \"geschlossen\".</p> <p>Semantik und Benennung des Ereignisses</p> <p>Es ist wichtig, die Semantik unseres Ereignisses gut zu w\u00e4hlen und wir im Namen unseres Ereignisses pr\u00e4zise auszudr\u00fccken. In unserem Beispiel dr\u00fcckt der Name <code>_hasData</code> aus, dass unser Ereignis genau dann und nur dann signalisiert wird, wenn es Daten zu verarbeiten gibt (Tor ge\u00f6ffnet). Jetzt m\u00fcssen wir \"nur\" noch diese Semantik implementieren: das Ereignis signalisiert setzen, wenn Daten in den FIFO eingegeben werden, und nicht signalisiert, wenn der FIFO geleert wird.</p> <pre><code>public void Put(double[] data)\n{\n    lock (_syncRoot)\n    {\n        _innerList.Add(data);\n        _hasData.Set();\n    }\n}\n</code></pre> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_innerList.Count &gt; 0)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true;\n        }\n\n        data = null;\n        return false;\n    }\n}\n</code></pre> </li> </ol>"},{"location":"labor/4-tobbszalu/index_ger/#warten-auf-signal-get-blockiert","title":"Warten auf Signal (Get blockiert)","text":"<p>In dem vorherigen Punkt wurde die Signalisierung gel\u00f6st, aber das sich selbst macht nicht viel, weil niemand auf das Signal wartet. Diese Erkenntnis kommt jetzt.</p> <ol> <li> <p>\u00c4ndern wir die Methode wie folgt: Entfernen wir den Leere-Test und ersetzen wir ihn durch Warten auf das Ereignis.</p> <pre><code>public bool TryGet(out double[] data)\n{\n    lock (_syncRoot)\n    {\n        if (_hasData.WaitOne())\n        {\n            // ...\n</code></pre> <p>Pr\u00fcfung des R\u00fcckgabewerts der Operation WaitOne</p> <p>Die Operation <code>WaitOne</code> gibt den Wert <code>bool</code> zur\u00fcck, der wahr ist, wenn sich das Ereignis vor der im Parameter von <code>WaitOne</code> angegebenen Zeitspanne signalisiert wird (und entsprechend falsch, wenn die Zeitspanne abgelaufen ist). In unserem Beispiel haben wir im Parameter kein Zeitlimit angegeben, was eine unendliche Zeitspanne bedeutet. Dementsprechend ist die Pr\u00fcfung der Bedingung <code>if</code> \u00fcberfl\u00fcssig, da in unserem Fall <code>WaitOne()</code> immer einen wahren Wert liefert. Dies ist der einzige Grund, warum wir dennoch die Konditionstests verwendet haben: Wir erfordern weniger \u00c4nderungen f\u00fcr die n\u00e4chste und eine zuk\u00fcnftige \u00dcbung.</p> </li> <li> <p>Dies macht <code>Thread.Sleep</code> in <code>WorkerThread</code> \u00fcberfl\u00fcssig, kommentieren wir es aus!</p> <p>Wenn wir die obige L\u00f6sung ausf\u00fchren, werden wir feststellen, dass die Oberfl\u00e4che unserer Anwendung nach dem ersten Tastendruck einfriert. Bei unserer vorherigen L\u00f6sung haben wir einen Anf\u00e4ngerfehler gemacht. In dem gesperrten Codeschnipsel warten wir darauf, dass <code>_hasData</code> gesendet wird, so dass der Hauptthread keine Gelegenheit hat, <code>_hasData</code> in der Operation <code>Put</code> zu senden (ebenfalls gesch\u00fctzt durch <code>lock</code>). In der Praxis wurde eine Verklemmung (deadlock) gebildet.</p> <p>Wir k\u00f6nnten versuchen, ein Zeitlimit (ms) f\u00fcr die Wartezeit festzulegen:</p> <pre><code>if (_hasData.WaitOne(100))\n</code></pre> <p>Dies w\u00e4re an sich keine elegante L\u00f6sung, au\u00dferdem w\u00fcrden die st\u00e4ndig verschmutzenden Arbeitsf\u00e4den den Thread, der Put aufruft, erheblich aushungern! Stattdessen ist das elegante Muster zu folgen, um zu vermeiden, dass man innerhalb einer Sperre blockiert wartet.</p> <p>Tauschen wir <code>lock</code> und <code>WaitOne</code> um, und entfernen wir die Wartezeitbegrenzung, also den Parameter von <code>WaitOne</code>:</p> <pre><code>public bool TryGet(out double[] data)\n{\n    if (_hasData.WaitOne())\n    {\n        lock (_syncRoot)\n        {\n            data = _innerList[0];\n            _innerList.RemoveAt(0);\n            if (_innerList.Count == 0)\n            {\n                _hasData.Reset();\n            }\n\n            return true; \n        }\n    }\n\n    data = null;\n    return false;\n}\n</code></pre> <p>Probieren wir die App aus. Wenn wir die Taste zum ersten Mal dr\u00fccken, erhalten wir eine Ausnahme. Dadurch wird zwar ein Deadlock vermieden, aber die Fadensicherheit ist verletzt, weiles ist nicht sicher, dass wenn wir in <code>lock</code> eintreten k\u00f6nnen, noch Elemente in der Liste vorhanden sind. Es kann mehrere Threads geben, die mit <code>_hasData.WaitOne()</code> darauf warten, dass ein Element zu der Liste hinzugef\u00fcgt wird. Wenn dies geschieht, wird unser <code>ManualResetEvent</code> Objekt alle durchlassen (au\u00dfer wenn ein Thread schlie\u00dft es schnell, aber das ist nicht garantiert).</p> <p>Die Schwierigkeiten der Programmierung in einer konkurrierenden, mehrf\u00e4digen Umgebung</p> <p>Diese Aufgabe veranschaulicht, wie sorgf\u00e4ltig man bei der Programmierung in einer konkurrierenden, mehrf\u00e4digen Umgebung vorgehen muss. Bei den vorherigen hatten wir sogar noch Gl\u00fcck, denn der Fehler war reproduzierbar. In der Praxis ist dies jedoch selten der Fall. Leider ist es viel h\u00e4ufiger der Fall, dass Konkurenzprobleme gelegentliche, nicht reproduzierbare Probleme verursachen. Die L\u00f6sung einer solchen Aufgabe muss immer sehr sorgf\u00e4ltig durchdacht sein und kann nicht nach dem Motto \"wir-probieren-es-solange-es-wird-gut-im-per-Hand-Test\" programmiert werden.</p> </li> <li> <p>Als Korrektur setzen wir den Leertest in <code>lock</code> zur\u00fcck.</p> <pre><code>public bool TryGet(out double[] data)\n{\n    if (_hasData.WaitOne())\n    {\n        lock (_syncRoot)\n        {\n            if (_innerList.Count &gt; 0)\n            {\n                data = _innerList[0];\n                _innerList.RemoveAt(0);\n                if (_innerList.Count == 0)\n                {\n                    _hasData.Reset();\n                }\n\n                return true;  \n            }\n        }\n    }\n\n    data = null;\n    return false;\n}\n</code></pre> <p>Dies funktioniert bereits gut. Es ist m\u00f6glich, dass wir unn\u00f6tigerweise auf die Liste eingehen, aber wir belassen es vorerst dabei.</p> <p>Testen wir die App!</p> </li> </ol> <p>System.Collections.Concurrent</p> <p>Im .NET-Framework gibt es mehrere eingebaute fadensichere Klassen im Namensraum <code>System.Collections.Concurrent</code>.  In dem obigen Beispiel h\u00e4tte die Klasse <code>DataFifo</code> durch <code>System.Collections.Concurrent.ConcurrentQueue</code> ersetzt werden k\u00f6nnen.</p>"},{"location":"labor/4-tobbszalu/index_ger/#aufgabe-8-kulturelle-abschaltung","title":"Aufgabe 8 - Kulturelle Abschaltung","text":"<p>Bisher haben wir das Problem, dass unser Prozess beim Schlie\u00dfen des Fensters \"stecken bleibt\", weil die Verarbeitungsthreads Vordergrundf\u00e4den sind und wir das Problem des Beendens dieser Threads nicht gel\u00f6st haben. Unser Ziel ist es, den unendlichen <code>while</code>-Schleife auszul\u00f6sen, so dass unsere Arbeitsf\u00e4den auf zivilisierte Weise beendet werden, wenn die Anwendung geschlossen wird.</p> <ol> <li> <p>Ein <code>ManualResetEvent</code> wird verwendet, um das Beenden im FIFO anzuzeigen, w\u00e4hrend in <code>TryGet</code>gewartet wird. F\u00fcgen wir im FIFO ein neues <code>ManualResetEvent</code> hinzu und f\u00fchren wir eine <code>Release</code>-Operation ein, um unsere Wartezeiten zu verk\u00fcrzen (unser neues Ereignis kann auf einen signalisierten Zustand gesetzt werden).</p> <pre><code>private ManualResetEvent _releaseTryGet = new ManualResetEvent(false);\n\npublic void Release()\n{\n    _releaseTryGet.Set();\n}\n</code></pre> </li> <li> <p>Warten wir auf diese Ereignis auch in <code>TryGet</code>. Die Methode <code>WaitAny</code> darf die Ausf\u00fchrung fortsetzen, wenn sich eines der als Parameter angegebenen Objekte vom Typ <code>WaitHandle</code> signalisiert ist, und gibt dessen Index innerhalb der Block zur\u00fcck. Und wir wollen die tats\u00e4chliche Verarbeitung nur, wenn <code>_hasData</code> signalisiert ist (wenn <code>WaitAny</code> 0 zur\u00fcckgibt).</p> <pre><code>public bool TryGet(out double[] data)\n{\n    if (WaitHandle.WaitAny(new[] { _hasData, _releaseTryGet }) == 0)\n    {\n        lock (_syncRoot)\n        {\n</code></pre> </li> <li> <p>F\u00fcgen wir eine flag Variable in <code>MainWindow.xaml.cs</code> hinzu, um das Beenden anzuzeigen:</p> <pre><code>private bool _isClosed = false;\n</code></pre> </li> <li> <p>Wenn das Hauptfenster geschlossen wird, setzen wir das neue Ereignis auf signalisiert und setzen wir auch das Flag auf true: abonnieren wir uns auf das Ereignis <code>Closed</code> der Klasse <code>MainWindow</code> im Konstruktor und schreiben wir die entsprechende Ereignishandler:</p> <pre><code>public MainWindow()\n{\n    ...\n\n    Closed += MainWindow_Closed;\n}\n\nprivate void MainWindow_Closed(object sender, WindowEventArgs args)\n{\n    _isClosed = true;\n    _fifo.Release();\n}\n</code></pre> </li> <li> <p>Schreiben wir die while-Schleife so um, dass sie auf das im vorigen Punkt addierte Flag wartet.</p> <pre><code>private void WorkerThread()\n{\n    while (!_isClosed)\n    {\n</code></pre> </li> <li> <p>Stellen wir sicher, dass wir nicht versuchen, Nachrichten f\u00fcr ein Fenster zu senden, das bereits geschlossen ist</p> <pre><code>private void ShowResult(double[] parameters, double result)\n{\n    if (_isClosed)\n        return;\n</code></pre> </li> <li> <p>F\u00fchren wir die Anwendung aus und \u00fcberpr\u00fcfen wir, ob unser Prozess tats\u00e4chlich beendet wird, wenn wir ihn beenden.</p> </li> </ol>"},{"location":"labor/4-tobbszalu/index_ger/#ausblick-task-async-await","title":"Ausblick: Task, async, await","text":"<p>Ziel der \u00dcbung war es, die Techniken f\u00fcr das Management von F\u00e4den auf unterer Ebene kennen zu lernen. Wir h\u00e4tten unsere L\u00f6sung jedoch (zumindest teilweise) auf den \u00fcbergeordneten Werkzeugen und Mechanismen aufbauen k\u00f6nnen, die die asynchrone Programmierung in .NET unterst\u00fctzen, z. B. die Klassen <code>Task</code>/<code>Task&lt;T&gt;</code> und die Schl\u00fcsselw\u00f6rter <code>async</code>/<code>await</code>. </p>"},{"location":"labor/5-mvvm/","title":"5. MVVM","text":""},{"location":"labor/5-mvvm/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A labor sor\u00e1n egy egyszer\u0171 alkalmaz\u00e1st fogunk refaktor\u00e1lni MVVM minta seg\u00edts\u00e9g\u00e9vel a jobb \u00e1tl\u00e1that\u00f3s\u00e1g \u00e9s karbantarthat\u00f3s\u00e1g jegy\u00e9ben.</p>"},{"location":"labor/5-mvvm/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A labor elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> </ul>"},{"location":"labor/5-mvvm/#kiindulo-projekt","title":"Kiindul\u00f3 projekt","text":"<p>Kl\u00f3nozzuk le a kiindul\u00f3 projektet az al\u00e1bbi paranccsal:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo\n</code></pre> A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, \u00edgy \u00e9rtelmetlen a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el a <code>megoldas</code> \u00e1gon. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre a <code>megoldas</code> \u00e1gat:</p> <p><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo -b megoldas</code></p>"},{"location":"labor/5-mvvm/#az-mvvm-mintarol","title":"Az MVVM mint\u00e1r\u00f3l","text":"<p>Az MVVM (Model-View-ViewModel) egy architektur\u00e1lis tervez\u00e9si minta, amelyet a XAML alkalmaz\u00e1sok fejleszt\u00e9se sor\u00e1n haszn\u00e1lhatunk, de gyakran m\u00e1s kliens oldali technol\u00f3gi\u00e1k eset\u00e9ben is megjelenik (pl.: Android, iOS, Angular stb.). Az MVVM minta c\u00e9lja, hogy a felhaszn\u00e1l\u00f3i fel\u00fcletet \u00e9s a m\u00f6g\u00f6tte l\u00e9v\u0151 logik\u00e1t sz\u00e9tv\u00e1lassza, \u00e9s ezzel egy laz\u00e1bb csatol\u00e1s\u00fa alkalmaz\u00e1st hozzon l\u00e9tre, ami n\u00f6veli a tesztelhet\u0151s\u00e9get, a karbantarthat\u00f3s\u00e1got \u00e9s az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got.</p> <p>Az MVVM minta h\u00e1rom (+1) f\u0151 r\u00e9szb\u0151l \u00e1ll:</p> <ul> <li>Model: Domainspecifikus adatokat fog \u00f6ssze, melyet a ViewModel-ek haszn\u00e1lhatnak az adatok t\u00e1rol\u00e1s\u00e1ra. Pl. Recipe/Product/Order oszt\u00e1ly, egy recept/term\u00e9k/megrendel\u00e9s adatait fogja \u00f6ssze.</li> <li>View: A felhaszn\u00e1l\u00f3i fel\u00fclet le\u00edr\u00e1s\u00e1t tartalmazza, (\u00e9s a tiszt\u00e1n a n\u00e9zetekhez kapcsol\u00f3d\u00f3 logik\u00e1t, pl. anim\u00e1ci\u00f3k kezel\u00e9s\u00e9t). Tipikusan <code>Window</code>, <code>Page</code>, <code>UserControl</code> lesz\u00e1rmazott oszt\u00e1ly, XAML-beli deklarat\u00edv le\u00edr\u00e1ssal, a code-behind sokszor \u00fcres (mert a logika a ViewModel-ben van).</li> <li>ViewModel: A n\u00e9zethez tartoz\u00f3 logika van benne: tartalmazza a n\u00e9zet \u00e1llapot\u00e1t \u00e9s a n\u00e9zeten v\u00e9grehajthat\u00f3 m\u0171veleteket. F\u00fcggetlen a n\u00e9zett\u0151l, a laza csatol\u00e1st a ViewModel \u00e9s a n\u00e9zet k\u00f6z\u00f6tt adatk\u00f6t\u00e9s biztos\u00edtja (a n\u00e9zet vez\u00e9rl\u0151i k\u00f6tnek a ViewModel tulajdons\u00e1gaihoz). Unit tesztelhet\u0151!</li> <li>Services (szolg\u00e1ltat\u00e1sok): Az alkalmaz\u00e1s \u00fczleti/alkalmaz\u00e1s logik\u00e1j\u00e1t tartalmaz\u00f3 oszt\u00e1lyok, amelyeket a ViewModel-ek haszn\u00e1lnak. Ha minden \u00fczleti logika a ViewModel-ekben lenne, azok t\u00fal bonyolultak \u00e9s \u00e1tl\u00e1thatatlanok lenn\u00e9nek. Ez nem az MVVM minta r\u00e9sze, de itt eml\u00edtj\u00fck meg, mert mi is \u00edgy fogjuk fel\u00e9p\u00edteni az alkalmaz\u00e1s architekt\u00far\u00e1j\u00e1t.</li> </ul> <p></p> <p> Mihez k\u00e9sz\u00edt\u00fcnk ViewModel oszt\u00e1lyokat?</p> <ul> <li>Az egyes n\u00e9zetekhez (pl. <code>Window</code>, <code>Page</code>, <code>Dialog</code>, <code>UserControl</code>) tipikusan k\u00e9sz\u00edt\u00fcnk ViewModel oszt\u00e1lyt, \u00e9s bel\u0151le egy n\u00e9zethez egy objektumot hozunk l\u00e9tre.  Pl. <code>MainPage</code>-hez <code>MainPageViewModel</code>, <code>DancerDialog</code>-hoz <code>DancerDialogViewModel</code>. Ezt a gyakorlat sor\u00e1n is alkalmazzuk.</li> <li>Az egyes modell oszt\u00e1lyokhoz (pl. <code>Recipe</code>, <code>Product</code>, <code>Dancer</code> stb.) opcion\u00e1lisan k\u00e9sz\u00edthet\u00fcnk csomagol\u00f3 ViewModel oszt\u00e1lyokat (pl. <code>RecipeViewModel</code>, <code>ProductViewModel</code>, <code>DancerViewModel</code>), ilyeneket a gyakorlat sor\u00e1n nem fogunk k\u00e9sz\u00edteni. Ez az\u00e9rt van, mert nem a Strict, hanem a Relaxed MVVM mint\u00e1t k\u00f6vetj\u00fck (l\u00e1sd el\u0151ad\u00e1s).</li> </ul>"},{"location":"labor/5-mvvm/#0-feladat-kiindulo-projekt-attekintese","title":"0. Feladat - Kiindul\u00f3 projekt \u00e1ttekint\u00e9se","text":"<p>Az alkalmaz\u00e1sunk egy egyszer\u0171 k\u00f6nyveket list\u00e1z\u00f3 alkalmaz\u00e1s, ahol a k\u00f6nyvek egy <code>ItemsView</code>-ban jelennek meg t\u00e1bl\u00e1zatos form\u00e1ban. A lista felett pedig egy <code>ComboBox</code> tal\u00e1lhat\u00f3, amellyel a k\u00f6nyvek sz\u0171rhet\u0151k m\u0171faj szerint. A sz\u0171r\u0151 egy Clear gombbal t\u00f6r\u00f6lhet\u0151.</p> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p></p> A kiindul\u00f3 projekt fel\u00fclete <p>ComboBox \u00e9s ItemsView</p> <p>A <code>ComboBox</code> \u00e9s az <code>ItemsView</code> is alapvet\u0151en list\u00e1s vez\u00e9rl\u0151k, amiket az <code>ItemsSource</code> tulajdons\u00e1g seg\u00edts\u00e9g\u00e9vel tudunk adatokkal felt\u00f6lteni.</p> <ul> <li> <p>A <code>ComboBox</code> egy leg\u00f6rd\u00fcl\u0151 men\u00fc, amely lehet\u0151v\u00e9 teszi a felhaszn\u00e1l\u00f3 sz\u00e1m\u00e1ra, hogy kiv\u00e1lasszon egy elemet a list\u00e1b\u00f3l</p> </li> <li> <p>Az <code>ItemsView</code> egy t\u00e1bl\u00e1zatos megjelen\u00edt\u00e9st biztos\u00edt, ahol t\u00f6bb elem is l\u00e1that\u00f3 egyszerre. Az <code>ItemsView</code> lehet\u0151s\u00e9get biztos\u00edt t\u00f6bb fajta megjelen\u00edt\u00e9si m\u00f3dra, p\u00e9ld\u00e1ul r\u00e1csos vagy list\u00e1s n\u00e9zetre is, amit a <code>Layout</code> tulajdons\u00e1ggal \u00e1ll\u00edthatunk be. K\u00fcl\u00f6nbs\u00e9g az el\u0151z\u0151 laborban haszn\u00e1lt <code>ListView</code>-hoz k\u00e9pest, hogy a lista elem sablonokban mindenk\u00e9ppen egy <code>ItemContainer</code> objektumnak kell szerepelnie gy\u00f6k\u00e9r elemk\u00e9nt.</p> </li> </ul> <p>A kiindul\u00f3 projektben az alkalmaz\u00e1s logik\u00e1ja a <code>BooksPage.xaml.cs</code> f\u00e1jlban tal\u00e1lhat\u00f3, a felhaszn\u00e1l\u00f3i fel\u00fclet pedig a <code>BooksPage.xaml</code> f\u00e1jlban. Ez a megold\u00e1s nem MVVM mint\u00e1t k\u00f6vet, \u00edgy a felhaszn\u00e1l\u00f3i fel\u00fclet \u00e9s a m\u00f6g\u00f6tte l\u00e9v\u0151 logika szorosan \u00f6sszefon\u00f3dik, szinte m\u00e1r-m\u00e1r spagetti k\u00f3d jelleget \u00f6ltve.</p> <p>J\u00f3 p\u00e9lda erre, hogy ebben a f\u00e1jlban tal\u00e1lhat\u00f3 az adatok bet\u00f6lt\u00e9se k\u00f6zvetlen\u00fcl a vez\u00e9rl\u0151k adatait manipul\u00e1lva. Az interakci\u00f3k lekezel\u00e9se is esem\u00e9nykezel\u0151kben t\u00f6rt\u00e9nik, ami egy id\u0151 ut\u00e1n \u00e1tl\u00e1thatatlann\u00e1 v\u00e1lik, \u00e9s keverednek a felel\u0151ss\u00e9gi k\u00f6r\u00f6k.</p> <p>Eset\u00fcnkben a p\u00e9ldaadatokat a <code>SeedDatabase</code> f\u00fcggv\u00e9ny t\u00f6lti fel, amely a <code>BooksPage</code> konstruktor\u00e1ban ker\u00fcl megh\u00edv\u00e1sra. A <code>LoadGenres</code> \u00e9s <code>LoadBooks</code> f\u00fcggv\u00e9nyek pedig a leg\u00f6rd\u00fcl\u0151 men\u00fc \u00e9s a t\u00e1bl\u00e1zat felt\u00f6lt\u00e9s\u00e9\u00e9rt felelnek.</p> <p>A leg\u00f6rd\u00fcl\u0151 men\u00fc aktu\u00e1lis kiv\u00e1laszt\u00e1s\u00e1nak megv\u00e1ltoz\u00e1s\u00e1t \u00e9s a Clear gomb megnyom\u00e1s\u00e1t egy-egy esem\u00e9nykezel\u0151 f\u00fcggv\u00e9ny kezeli le, melyek \u00fajrat\u00f6ltik a list\u00e1t a kiv\u00e1lasztott m\u0171faj szerint (keress\u00fck meg ezeket a k\u00f3dban). </p> <p>Adatok bet\u00f6lt\u00e9se ADO.NET-tel SQLite adatb\u00e1zisb\u00f3l</p> <p>Az alkalmaz\u00e1sban az adatok t\u00e1rol\u00e1s\u00e1ra SQLite adatb\u00e1zist haszn\u00e1lunk, amelyet ADO.NET-tel \u00e9r\u00fcnk el. Ezt a technol\u00f3gi\u00e1t a labor sor\u00e1n nem fogjuk r\u00e9szletesen bemutatni, a f\u00e9l\u00e9v v\u00e9g\u00e9n fogunk r\u00e9szletesen foglalkozni vele.</p> <p>Page oszt\u00e1ly Windows helyett</p> <p>A n\u00e9zet\u00fcnk most nem egy <code>Window</code>, hanem egy <code>Page</code> lesz\u00e1rmazott oszt\u00e1ly. Mint a neve is utal r\u00e1, a <code>Page</code> egy \"oldalt\" reprezent\u00e1l az alkalmaz\u00e1sban: \u00f6nmag\u00e1ban nem tud megjelenni, hanem pl. egy ablakon kell elhelyezni. El\u0151nye, hogy az ablakon - megfelel\u0151 navig\u00e1ci\u00f3 kialak\u00edt\u00e1s\u00e1val - lehet\u0151s\u00e9g van oldalak (k\u00fcl\u00f6nb\u00f6z\u0151 <code>Page</code> lesz\u00e1rmazottak) k\u00f6z\u00f6tt navig\u00e1lni. Ezt mi nem fogjuk kihaszn\u00e1lni, egyetlen oldalunk lesz csak. Az oldal bevezet\u00e9s\u00e9vel a c\u00e9lunk mind\u00f6ssze az volt, hogy szeml\u00e9ltess\u00fck: az MVVM architekt\u00far\u00e1ban a n\u00e9zeteket nem csak <code>Window</code> (teljes ablak), hanem pl. <code>Page</code> objektumokkal (vagy ak\u00e1r m\u00e1s UI komponens pl.: <code>UserControl</code>) is meg lehet val\u00f3s\u00edtani.</p>"},{"location":"labor/5-mvvm/#1-feladat-mvvm-minta-bevezetese","title":"1. Feladat - MVVM minta bevezet\u00e9se","text":"<p>A labor sor\u00e1n a kiindul\u00f3 projektet MVVM mint\u00e1ra fogjuk \u00e1talak\u00edtani.</p>"},{"location":"labor/5-mvvm/#model","title":"Model","text":"<p>\u00c9p\u00edtkezz\u00fcnk most alulr\u00f3l felfel\u00e9, \u00edgy kezdj\u00fck a modell oszt\u00e1lyunkkal. A <code>BooksPage.xaml.cs</code> f\u00e1jlban tal\u00e1lhat\u00f3 <code>Book</code> oszt\u00e1lyt helyezz\u00fck \u00e1t egy \u00faj f\u00e1jlba egy \u00fajonnan l\u00e9trehozott <code>Models</code> mapp\u00e1ba.</p> <pre><code>namespace Lab.Mvvm.Models;\n\npublic class Book\n{\n    public string Title { get; set; }\n    public string Genre { get; set; }\n    public string ImageUrl { get; set; }\n\n    // Other properties like Author, ISBN etc.\n}\n</code></pre> <p>A <code>Book</code> oszt\u00e1lyunk a kor\u00e1bbi <code>Lab.Mvvm</code> n\u00e9vt\u00e9rb\u0151l a <code>Lab.Mvvm.Models</code> n\u00e9vt\u00e9rbe ker\u00fclt. Emiatt - annak \u00e9rdek\u00e9ben, hogy ne kapjunk emiatt hossz\u00fa ideig ford\u00edt\u00e1si hib\u00e1t - a View-t (<code>BooksPage.xaml.cs</code>) m\u00e1r most igaz\u00edtsuk a n\u00e9vt\u00e9r v\u00e1ltoz\u00e1shoz. Konkr\u00e9tan, be kell vezess\u00fcnk egy \u00faj n\u00e9vteret (<code>models</code>), \u00e9s az <code>ItemsView</code> adatsablon t\u00edpus\u00e1nak megad\u00e1sakor ezt kell haszn\u00e1ljuk:</p> <pre><code>&lt;Page x:Class=\"Lab.Mvvm.BooksPage\"\n    // ...\n    xmlns:model=\"using:Lab.Mvvm.Models\"&gt;\n\n&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    &lt;ItemsView.Layout&gt;\n        &lt;LinedFlowLayout ItemsStretch=\"Fill\"\n                        LineHeight=\"160\"\n                        LineSpacing=\"5\"\n                        MinItemSpacing=\"5\" /&gt;\n    &lt;/ItemsView.Layout&gt;\n    &lt;ItemsView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Book\"&gt;\n            // ...\n        &lt;/DataTemplate&gt;\n    &lt;/ItemsView.ItemTemplate&gt;\n&lt;/ItemsView&gt;\n</code></pre>"},{"location":"labor/5-mvvm/#service","title":"Service","text":"<p>Az adatok bet\u00f6lt\u00e9s\u00e9\u00e9rt felel\u0151s k\u00f3dot helyezz\u00fck \u00e1t egy \u00faj <code>BookService</code> nev\u0171 oszt\u00e1lyba, amit egy \u00fajonnan l\u00e9trehozott <code>Services</code> mapp\u00e1ba helyezz\u00fcnk el.</p> <ul> <li> <p>A <code>BookService</code> oszt\u00e1lyba a <code>SeedDatabase</code>, <code>LoadGenres</code> \u00e9s <code>LoadBooks</code> f\u00fcggv\u00e9nyeket emelj\u00fck \u00e1t a <code>BookPage.xaml.cs</code>-b\u0151l</p> </li> <li> <p>Mozgassuk \u00e1t a <code>_connectionString</code> mez\u0151t is.</p> </li> <li> <p>A f\u00fcggv\u00e9nyek l\u00e1that\u00f3s\u00e1g\u00e1t \u00e1ll\u00edtsuk <code>public</code>-ra, hogy a ViewModel oszt\u00e1lyunk el\u00e9rhesse \u0151ket.</p> </li> </ul> <p>A <code>SeedDatabase</code> f\u00fcggv\u00e9ny \u00edgy rendben van, de a m\u00e1sik k\u00e9t f\u00fcggv\u00e9nyben t\u00f6bb UI elemet is haszn\u00e1lunk, amikt\u0151l meg kell szabaduljunk.</p> <p>Alak\u00edtsuk \u00e1t a f\u00fcggv\u00e9nyeket, hogy csak a sz\u00fcks\u00e9ges adatokat adj\u00e1k vissza, \u00e9s ne k\u00f6zvetlen\u00fcl a UI elemeket haszn\u00e1lj\u00e1k. Nevezz\u00fck is \u00e1t \u0151ket <code>GetGenres</code> \u00e9s <code>GetBooks</code>-ra.</p> <ul> <li> <p>A <code>LoadGenres</code> f\u00fcggv\u00e9nyben egy <code>List&lt;string&gt;</code> t\u00edpus\u00fa list\u00e1t fogunk visszaadni.</p> </li> <li> <p>A <code>LoadBooks</code> f\u00fcggv\u00e9nyben pedig egy <code>List&lt;Book&gt;</code> t\u00edpus\u00fa list\u00e1t fogunk visszaadni. Itt arra is gondolnunk kell, hogy kor\u00e1bban a <code>ComboBox</code> kiv\u00e1lasztott \u00e9rt\u00e9k\u00e9t haszn\u00e1ltuk a lek\u00e9rdez\u00e9shez, most viszont ezt a param\u00e9tert \u00e1t kell adnunk a f\u00fcggv\u00e9nynek opcion\u00e1lisan.</p> </li> </ul> <p><pre><code>using Lab.Mvvm.Models;\nusing Microsoft.Data.Sqlite;\nusing System.Collections.Generic;\n\nnamespace Lab.Mvvm.Services;\n\npublic class BookService\n{\n    private readonly string _connectionString = \"Data Source=books.db\";\n\n    public void SeedDatabase()\n    {\n        // ...\n    }\n\n    public List&lt;string&gt; GetGenres()\n    {\n        // ...\n\n        return genres;\n    }\n\n    public List&lt;Book&gt; GetBooks(string genre = null)\n    {\n        using var connection = new SqliteConnection(_connectionString);\n        connection.Open();\n\n        string query = \"SELECT Title, Genre, ImageUrl FROM books\";\n        if (genre != null)\n        {\n            query += \" WHERE Genre = @genre\";\n        }\n        using var command = new SqliteCommand(query, connection);\n        if (genre != null)\n        {\n            command.Parameters.AddWithValue(\"@genre\", genre);\n        }\n\n        List&lt;Book&gt; books = [];\n\n        // ...\n\n        return books;\n    }\n}\n</code></pre> A fent kiemelt v\u00e1ltoztat\u00e1sokon t\u00fal</p> <ul> <li>a <code>GetGenres</code> f\u00fcggv\u00e9nyben a <code>genreFilterComboBox</code>-ot \u00e9s <code>clearGenreFilterButton</code>-t manipul\u00e1l\u00f3 sorokat is t\u00f6r\u00f6lj\u00fck. </li> <li>a <code>BooksPage</code> oszt\u00e1lyban t\u00f6r\u00f6lj\u00fck a ford\u00edt\u00e1si hib\u00e1t okoz\u00f3 <code>SeedDatabase</code>, <code>LoadGenres</code> \u00e9s <code>LoadBooks</code> h\u00edv\u00e1sokat.</li> </ul> <p>Ekkor, ha j\u00f3l dolgoztunk, a <code>BookService</code> oszt\u00e1lyunkban m\u00e1r nem lehet ford\u00edt\u00e1si hiba.</p> <p>A <code>SeedDatabase</code> met\u00f3dust h\u00edvjuk meg az alkalmaz\u00e1s indul\u00e1sakor, hogy a k\u00f6nyvek \u00e9s m\u0171fajok adatai bet\u00f6lt\u0151djenek az adatb\u00e1zisba. Ezt az <code>App.xaml.cs</code> f\u00e1jlban a <code>OnLaunched</code> met\u00f3dusban tehetj\u00fck meg legk\u00f6nnyebben.</p> App.xaml.cs<pre><code>protected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)\n{\n    m_window = new MainWindow();\n    new BookService().SeedDatabase();\n    m_window.Activate();\n}\n</code></pre>"},{"location":"labor/5-mvvm/#viewmodel","title":"ViewModel","text":"<p>K\u00e9sz\u00edts\u00fck el az \u00faj (<code>BooksPage</code>-hez tartoz\u00f3) <code>BooksPageViewModel</code> oszt\u00e1lyt egy \u00faj <code>ViewModels</code> mapp\u00e1ba. Ez, mint egy klasszikus ViewModel, a n\u00e9zet \u00e1llapot\u00e1t \u00e9s a rajta v\u00e9grehajthat\u00f3 m\u0171veleteket fogja tartalmazni - vagyis a <code>BooksPage</code> n\u00e9zethez tartoz\u00f3 megjelen\u00edt\u00e9si logik\u00e1t.</p> <p>Ha belegondolunk, a <code>BooksPage</code> az al\u00e1bbi \u00e1llapotinform\u00e1ci\u00f3kat tartalmazza:</p> <ul> <li>A k\u00f6nyvek list\u00e1ja</li> <li>A m\u0171fajok list\u00e1ja a leg\u00f6rd\u00fcl\u0151 men\u00fcben</li> <li>A kiv\u00e1lasztott m\u0171faj</li> </ul> <p>Ezeket vegy\u00fck fel tulajdons\u00e1gokk\u00e9nt a <code>BooksPageViewModel</code> oszt\u00e1lyba, \u00e9s implement\u00e1ljuk az el\u0151z\u0151 laboron tanult <code>INotifyPropertyChanged</code> interf\u00e9sz alap\u00fa v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st az adatk\u00f6t\u00e9s t\u00e1mogat\u00e1s\u00e1hoz.</p> <pre><code>using Lab.Mvvm.Models;\n\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace Lab.Mvvm.ViewModels;\n\npublic class BooksPageViewModel : INotifyPropertyChanged\n{\n    private List&lt;Book&gt; _books;\n    public List&lt;Book&gt; Books\n    { \n        get =&gt; _books;\n        set =&gt; SetProperty(ref _books, value);\n    }\n\n    private List&lt;string&gt; _genres;\n    public List&lt;string&gt; Genres\n    {\n        get =&gt; _genres;\n        set =&gt; SetProperty(ref _genres, value);\n    }\n\n    private string _selectedGenre;\n    public string SelectedGenre\n    { \n        get =&gt; _selectedGenre;\n        set =&gt; SetProperty(ref _selectedGenre, value);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual bool SetProperty&lt;T&gt;(ref T property, T value, [CallerMemberName] string propertyName = null)\n    {\n        if (object.Equals(property, value))\n            return false;\n        property = value;\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n        return true;\n    }\n}\n</code></pre> <p>SetProperty</p> <p>Az <code>SetProperty</code> met\u00f3dus egy seg\u00e9df\u00fcggv\u00e9ny, amely megk\u00f6nny\u00edti a tulajdons\u00e1gok be\u00e1ll\u00edt\u00e1s\u00e1t \u00e9s a v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st.</p> <p>A visszat\u00e9r\u00e9si \u00e9rt\u00e9k <code>true</code>, ha a tulajdons\u00e1g \u00e9rt\u00e9ke megv\u00e1ltozott, \u00e9s <code>false</code>, ha nem. Ez seg\u00edt majd a k\u00e9s\u0151bbiekben eld\u00f6nteni, hogy t\u00f6rt\u00e9nt-e v\u00e1ltoz\u00e1s a tulajdons\u00e1g \u00e9rt\u00e9k\u00e9ben.</p> <p>A <code>ref</code> kulcssz\u00f3 lehet\u0151v\u00e9 teszi, hogy a met\u00f3dus k\u00f6zvetlen\u00fcl m\u00f3dos\u00edtsa a v\u00e1ltoz\u00f3 \u00e9rt\u00e9k\u00e9t (nem csak a referencia ker\u00fcl \u00e1tad\u00e1sra, hanem maga a referencia is m\u00f3dos\u00edthat\u00f3, \u00edgy megv\u00e1ltoztathat\u00f3, hogy az eredeti v\u00e1ltoz\u00f3 hova mutat).</p> <p>A <code>CallerMemberName</code> attrib\u00fatum automatikusan \u00e1tadja a h\u00edv\u00f3  (itt property) nev\u00e9t, \u00edgy nem kell mindenhol megadni a tulajdons\u00e1g nev\u00e9t k\u00e9zzel.</p> <p>Az adatok bet\u00f6lt\u00e9s\u00e9t a <code>BookService</code> oszt\u00e1ly seg\u00edts\u00e9g\u00e9vel fogjuk megval\u00f3s\u00edtani (g\u00f6rgess\u00fcnk fel az \u00fatmutat\u00f3ban, \u00e9s a bevezet\u0151 MVVM \u00e1br\u00e1n n\u00e9zz\u00fck meg, hogy val\u00f3ban a ViewModel haszn\u00e1lja a Service oszt\u00e1lyt/oszt\u00e1lyokat). P\u00e9ld\u00e1nyos\u00edtsuk a <code>BookService</code> oszt\u00e1lyt, \u00e9s a konstruktor\u00e1ban t\u00f6lts\u00fck be a m\u0171fajokat \u00e9s a k\u00f6nyveket.</p> <pre><code>private readonly BookService _booksService;\n\npublic BooksPageViewModel()\n{\n    _booksService = new BookService();\n    Genres = _booksService.GetGenres();\n    LoadBooks();\n}\n\nprivate void LoadBooks()\n{\n    // A Books  property \u00e1ll\u00edt\u00e1sa kiv\u00e1ltja az INPC PropertyChanged esem\u00e9nyt (l\u00e1sd Books property setter fent) - a n\u00e9zet friss\u00fclni fog\n    Books = _booksService.GetBooks(SelectedGenre);\n}\n</code></pre> <p>A k\u00f6nyv bet\u00f6lt\u00e9st nem csak a konstruktorban kell elv\u00e9gezni, hanem a <code>SelectedGenre</code> tulajdons\u00e1g setter\u00e9ben is, hogy a kiv\u00e1lasztott m\u0171faj megv\u00e1ltoz\u00e1sa eset\u00e9n \u00fajra bet\u00f6lts\u00fck a k\u00f6nyveket. A <code>SelectedGenre</code> setter\u00e9ben a <code>LoadBooks</code> met\u00f3dust h\u00edvjuk meg, ha v\u00e1ltoz\u00e1s t\u00f6rt\u00e9nt.</p> <pre><code>private string _selectedGenre;\npublic string SelectedGenre\n{\n    get =&gt; _selectedGenre;\n    set\n    {\n        if (SetProperty(ref _selectedGenre, value))\n            LoadBooks();\n    }\n}\n</code></pre>"},{"location":"labor/5-mvvm/#view","title":"View","text":"<p>Most m\u00e1r csak a n\u00e9zetet kell \u00e1talak\u00edtanunk, hogy a ViewModelt haszn\u00e1lja.</p> <p>Hozzunk l\u00e9tre a <code>BooksPage.xaml.cs</code> f\u00e1jlban egy \u00faj <code>BooksPageViewModel</code> t\u00edpus\u00fa readonly propertyt, \u00e9s adjunk neki \u00e9rt\u00e9ket egy \u00faj <code>BooksPageViewModel</code> p\u00e9ld\u00e1ny l\u00e9trehoz\u00e1s\u00e1val.</p> <pre><code>public BooksPageViewModel ViewModel { get; } = new BooksPageViewModel();\n</code></pre> <p>readonly property vs getter only property</p> <p>Eml\u00e9kezz\u00fcnk vissza, hogy az autoimplement\u00e1lt (egyszer inicializ\u00e1lt) readonly property \u00e9s a getter only property k\u00f6z\u00f6tt l\u00e9nyeges k\u00fcl\u00f6nbs\u00e9g van. A fenti p\u00e9ld\u00e1ban autoimplement\u00e1lt readonly propertyt haszn\u00e1lunk, ami azt jelenti, hogy a <code>ViewModel</code> property \u00e9rt\u00e9ke csak egyszer j\u00f6n l\u00e9tre. Ezzel szemben a getter only property eset\u00e9n minden egyes h\u00edv\u00e1skor \u00faj p\u00e9ld\u00e1nyt hozn\u00e1nk l\u00e9tre, ami nem k\u00edv\u00e1nt viselked\u00e9st okozna: <code>public BooksPageViewModel ViewModel =&gt; new BooksPageViewModel();</code></p> <p>A <code>BooksPage.xaml</code> f\u00e1jlban innent\u0151l kezdve haszn\u00e1lhatjuk a <code>ViewModel</code> propertyt az adatk\u00f6t\u00e9shez.</p> <ul> <li> <p>F\u00f3kusz\u00e1ljunk els\u0151 k\u00f6rben a <code>ComboBox</code>-ra:</p> <ul> <li>A <code>SelectedItem</code> \u00e9s az <code>ItemsSource</code> tulajdons\u00e1gokat a kiindul\u00f3 megold\u00e1sban a code-behind f\u00e1jlban k\u00e9zzel manipul\u00e1ltuk. Ezeket kezel\u00e9s\u00e9t alak\u00edtsuk \u00e1t adatk\u00f6t\u00e9s alap\u00fa megold\u00e1sra: az MVVM mint\u00e1nak megfelel\u0151an a code-behindban defini\u00e1lt ViewModel objektum tulajdons\u00e1gaihoz k\u00f6tj\u00fck.</li> <li>T\u00f6r\u00f6lj\u00fck a xaml f\u00e1jlban a <code>SelectionChanged</code> esem\u00e9ny feliratkoz\u00e1st \u00e9s a code-behindban a <code>GenreFilterComboBox_SelectionChanged</code> esem\u00e9nykezel\u0151t (erre a <code>SelectedItem</code> adatk\u00f6t\u00e9se miatt nincs m\u00e1r sz\u00fcks\u00e9g).</li> </ul> <pre><code>&lt;ComboBox x:Name=\"genreFilterComboBox\"\n        Grid.Row=\"1\"\n        PlaceholderText=\"Filter Genre\"\n        ItemsSource=\"{x:Bind ViewModel.Genres}\"\n        SelectedItem=\"{x:Bind ViewModel.SelectedGenre, Mode=TwoWay}\" /&gt;\n</code></pre> </li> <li> <p>A Clear gomb eset\u00e9ben is t\u00f6r\u00f6lj\u00fck a <code>Click</code> esem\u00e9ny feliratkoz\u00e1st \u00e9s a code-behindban a <code>GenreFilterComboBox_SelectionChanged</code> esem\u00e9nykezel\u0151t. Ennek viselked\u00e9s\u00e9t majd csak k\u00e9s\u0151bb implement\u00e1ljuk a ViewModel-ben.</p> <pre><code>&lt;Button x:Name=\"clearGenreFilterButton\"\n        Content=\"Clear\" /&gt;\n</code></pre> </li> <li> <p>Az <code>ItemsView</code>-ban is adatk\u00f6t\u00e9st kell haszn\u00e1lnunk a <code>ItemsSource</code> tulajdons\u00e1ghoz.</p> <pre><code>&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    ...\n&lt;/ItemsView&gt;\n</code></pre> </li> </ul> Klasszikus Binding haszn\u00e1lata <p>Ha klasszikus bindingot haszn\u00e1ln\u00e1nk <code>x:Bind</code> helyett, akkor az adott vez\u00e9rl\u0151/oldal <code>DataContext</code> tulajdons\u00e1g\u00e1t be kellene \u00e1ll\u00edtani egy ViewModel p\u00e9ld\u00e1nyra.</p> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p>Az alkalmaz\u00e1sunknak az el\u0151z\u0151ekhez hasonl\u00f3an kell m\u0171k\u00f6dnie (kiv\u00e9ve a Clear gomb), de most m\u00e1r MVVM mint\u00e1t k\u00f6vet az alkalmaz\u00e1sunk architekt\u00far\u00e1ja.</p>"},{"location":"labor/5-mvvm/#osszefoglalas","title":"\u00d6sszefoglal\u00e1s","text":"<p>\u00c9rt\u00e9kelj\u00fck ki a megold\u00e1sunkat, a k\u00f3dot is n\u00e9zve. A kezdeti megold\u00e1sunkban csak egy Page oszt\u00e1lyunk volt, ebben az egyben volt mixelve a megjelen\u00edt\u00e9s (.xaml-ben) az alkalmaz\u00e1slogika \u00e9s a megjelen\u00edt\u00e9si logika (ez ut\u00f3bbi kett\u0151 a Page code-behindban). Az MVVM alap\u00fa megold\u00e1sunkban:</p> <ul> <li>A Page-ben csak a megjelen\u00edt\u00e9s maradt (View), a code-behind gyakorlatilag \u00fcres (csak egy ViewModel-t tartalmaz).</li> <li>Az alkalmaz\u00e1slogika egy Service oszt\u00e1lyba ker\u00fclt.</li> <li>Az oldalhoz tartoz\u00f3 megjelen\u00edt\u00e9si logika egy ViewModel oszt\u00e1lyba ker\u00fclt (\u00e9s a View adatk\u00f6t hozz\u00e1).</li> </ul> <p>A jobb \u00e1ttekinthet\u0151s\u00e9gen fel\u00fcl a megk\u00f6zel\u00edt\u00e9s legf\u0151bb el\u0151nye, hogy a ViewModel \u00e9s a View k\u00f6z\u00f6tt laz\u00e1bb csatol\u00e1s van, \u00edgy a ViewModel k\u00f6nnyebben tesztelhet\u0151 \u00e9s ak\u00e1r \u00fajrafelhaszn\u00e1lhat\u00f3. A ViewModel nem f\u00fcgg a View-t\u00f3l, \u00edgy k\u00f6nnyen \u00e1t\u00edrhat\u00f3 vagy lecser\u00e9lhet\u0151 an\u00e9lk\u00fcl, hogy a View-t m\u00f3dos\u00edtani kellene.</p>"},{"location":"labor/5-mvvm/#2-feladat-mvvmtoolkit","title":"2. Feladat - MVVMToolkit","text":"<p>MVVM mint\u00e1t ritk\u00e1n szoktunk kiz\u00e1r\u00f3lag a .NET keretrendszerre t\u00e1maszkodva implement\u00e1lni. \u00c9rdemes haszn\u00e1lni valamilyen MVVM k\u00f6nyvt\u00e1rat, amelyek seg\u00edts\u00e9g\u00e9vel a k\u00f3dunk t\u00f6m\u00f6rebb, \u00e1tl\u00e1that\u00f3bb, \u00e9s kevesebb boilerplate k\u00f3dot fog tartalmazni. A k\u00f6nyvt\u00e1rak k\u00f6z\u00fcl a legelterjedtebbek a k\u00f6vetkez\u0151k:</p> <ul> <li>MVVM Toolkit: Microsoft \u00e1ltal gondozott MVVM k\u00f6nyvt\u00e1r.</li> <li>Prism: R\u00e9gen Microsoft gondoz\u00e1s\u00e1ban \u00e1llt \u00e9s nagyon elterjedt volt, de m\u00e1r k\u00fcls\u0151 fejleszt\u0151k tartj\u00e1k karban \u00e9s fizet\u0151s lett id\u0151 k\u00f6zben.</li> <li>ReactiveUI: A Reactive Extensions (Rx) k\u00f6nyvt\u00e1rakat haszn\u00e1lja a ViewModel \u00e1llapot\u00e1nak kezel\u00e9s\u00e9re, \u00e9s a View-ViewModel k\u00f6z\u00f6tti adatk\u00f6t\u00e9sre. Ez a k\u00f6nyvt\u00e1r ny\u00fajtja a legt\u00f6bb szolg\u00e1ltat\u00e1st, de a legnehezebben tanulhat\u00f3 is.</li> <li>Uno.Extensions: MVVM Toolkitre \u00e9p\u00fcl, de t\u00f6bb olyan szolg\u00e1ltat\u00e1st is tartalmaz, amelyek a WinUI keretrendszer hi\u00e1nyoss\u00e1gait p\u00f3tolj\u00e1k.</li> <li>A Windows Template Studio egy Visual Studio kieg\u00e9sz\u00edt\u0151, ami komplexebb WinUI alkalmaz\u00e1sok kiindul\u00f3 projektsablonj\u00e1t teszi el\u00e9rhet\u0151v\u00e9.</li> </ul> <p>A labor sor\u00e1n a Microsoft \u00e1ltal gondozott MVVM Toolkitet fogjuk kipr\u00f3b\u00e1lni.</p>"},{"location":"labor/5-mvvm/#telepites","title":"Telep\u00edt\u00e9s","text":"<p>A MVVM Toolkit telep\u00edt\u00e9s\u00e9hez nyissuk meg a NuGet Package Manager-t a Visual Studio-ban (jobb katt a projekten majd \"Manage Nuget Packages\"), \u00e9s keress\u00fck meg a <code>CommunityToolkit.Mvvm</code> csomagot.   L\u00e9nyeges, hogy a labortermekben a 8.4.0-s verzi\u00f3t telep\u00edts\u00fck! Ez val\u00f3j\u00e1ban a projektf\u00e1jlban az al\u00e1bbi <code>PackageReference</code> bejegyz\u00e9st fogja l\u00e9trehozni (ak\u00e1r k\u00e9zzel is felvehetj\u00fck a fenti l\u00e9p\u00e9sek helyett a t\u00f6bbi PackageReference mell\u00e9):</p> <pre><code>&lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.4.0\" /&gt;\n</code></pre>"},{"location":"labor/5-mvvm/#observableobject-es-observableproperty","title":"ObservableObject \u00e9s ObservableProperty","text":"<p>A BooksPageViewModel oszt\u00e1lyunkban az <code>INotifyPropertyChanged</code> megval\u00f3s\u00edt\u00e1sa meglehet\u0151sen terjeng\u0151s.  A <code>INotifyPropertyChanged</code> interf\u00e9sz k\u00f6zvetlen implement\u00e1l\u00e1sa helyett haszn\u00e1lhatjuk a <code>ObservableObject</code> oszt\u00e1lyt, amely m\u00e1r implement\u00e1lja ezt az interf\u00e9szt \u00e9s t\u00f6bb seg\u00e9df\u00fcggv\u00e9nyt is tartalmaz, amelyek megk\u00f6nny\u00edtik a tulajdons\u00e1gok be\u00e1ll\u00edt\u00e1s\u00e1t \u00e9s a v\u00e1ltoz\u00e1s\u00e9rtes\u00edt\u00e9st. Tov\u00e1bb\u00e1 lehet\u0151s\u00e9g\u00fcnk van az <code>ObservableProperty</code> attrib\u00fatum haszn\u00e1lat\u00e1ra is, amely egy k\u00f3dgener\u00e1tort vez\u00e9rel, \u00edgy automatikusan l\u00e9trehozhat\u00f3ak a tulajdons\u00e1gok k\u00e9zzel \u00edrt boilerplate k\u00f3d n\u00e9lk\u00fcl, kiz\u00e1r\u00f3lag a mez\u0151k attribut\u00e1lt deklar\u00e1l\u00e1s\u00e1val. Hajtsuk v\u00e9gre az al\u00e1bbi \u00e1talak\u00edt\u00e1sokat:</p> <ul> <li> <p>A <code>BooksPageViewModel</code> oszt\u00e1lyunknak a <code>CommunityToolkit.Mvvm.ComponentModel</code> n\u00e9vt\u00e9rben tal\u00e1lhat\u00f3 <code>ObservableObject</code> oszt\u00e1lyb\u00f3l kell lesz\u00e1rmaznia.</p> </li> <li> <p>A source generator haszn\u00e1lat\u00e1hoz azt oszt\u00e1lyt <code>partial</code> kulcssz\u00f3val kell ell\u00e1tni, hogy a gener\u00e1lt k\u00f3d \u00e9s a k\u00e9zi k\u00f3d k\u00fcl\u00f6n f\u00e1jlokban kaphassanak helyet.</p> </li> <li> <p>A fullproperty szintaxis helyett pedig el\u00e9g megtartanunk a mez\u0151ket, amikre az <code>ObservableProperty</code> attrib\u00fatumot helyezz\u00fck el.</p> <pre><code>public partial class BooksPageViewModel : ObservableObject\n{\n    // ...\n\n    [ObservableProperty]\n    private List&lt;Book&gt; _books;\n\n    [ObservableProperty]\n    private List&lt;string&gt; _genres;\n\n    [ObservableProperty]\n    private string _selectedGenre;\n\n    // ...\n}\n</code></pre> </li> </ul> <p>L\u00e9nyeges, hogy a kor\u00e1bbi <code>BooksPageViewModel</code> megold\u00e1sb\u00f3l t\u00f6r\u00f6lj\u00fck a tagv\u00e1ltoz\u00f3kat (a _booksService kiv\u00e9tel\u00e9vel), a property-ket (hiszen ezeket a k\u00f3dgener\u00e1tor hozza l\u00e9tre), a <code>PropertyChanged</code> esem\u00e9nyt \u00e9s a <code>SetProperty</code> m\u0171veletet.  az \u00e1talak\u00edt\u00e1s ut\u00e1n buildelj\u00fcnk egyet (pl. Build/Build solution men\u00fc): en\u00e9lk\u00fcl a ford\u00edt\u00e1si hib\u00e1k nem sz\u0171nnek meg, a Visual Studio sz\u00e1mos hib\u00e1t jelez a k\u00f3dban. Ez logikus is, hiszen az adatk\u00f6t\u00f6tt propertyket a k\u00f3dgener\u00e1tor csak a build sor\u00e1n gener\u00e1lja le (egy \"rejtett\" \u00e1llom\u00e1nyban).</p> <p>Ellen\u0151rizhetj\u00fck, hogy milyen k\u00f3d gener\u00e1l\u00f3dott, ha p\u00e9ld\u00e1ul F12-vel navig\u00e1lunk a <code>Genres</code> tulajdons\u00e1gra (a xaml f\u00e1jlban az <code>ItemsSource</code> adatk\u00f6t\u00e9sn\u00e9l a kurzorral a <code>ViewModel.Genres</code>-en \u00e1llva).</p> <p>ObservableProperty attrib\u00fatum property-re</p> <p>Az <code>ObservableProperty</code> attrib\u00fatumot mez\u0151k helyett property-kre is alkalmazhatjuk egy \u00faj C# nyelvi funkci\u00f3 seg\u00edt\u00e9s\u00e9g\u00e9vel, ehhez viszont preview C# verzi\u00f3t kellene haszn\u00e1lnunk, \u00edgy ezt id\u00e9n m\u00e9g kihagyjuk.</p> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p>Azt tapasztaljuk, hogy a k\u00f6nyvek bet\u00f6lt\u0151dnek, de a m\u0171faj kiv\u00e1laszt\u00e1sakor nem t\u00f6lt\u0151dnek be \u00fajra a k\u00f6nyvek. Igen, mert kor\u00e1bban a <code>SelectedGenre</code> v\u00e1ltoz\u00e1s\u00e1ra megh\u00edvtuk a <code>LoadBooks</code> met\u00f3dust (ezt a gener\u00e1lt k\u00f3d nem teszi meg).</p> <p>H\u00e1rom lehet\u0151s\u00e9g\u00fcnk van:</p> <ol> <li>Visszalak\u00edtjuk a <code>SelectedGenre</code> propertyt nem k\u00f3dgener\u00e1lt v\u00e1ltozatra, hogy a settert mi tudjuk defini\u00e1lni.</li> <li>Feliratkozunk a ViewModel <code>PropertyChanged</code> esem\u00e9nyre a konstruktorban, az esem\u00e9nykezel\u0151nkben a <code>LoadBooks</code> met\u00f3dust megh\u00edvjuk, ha a <code>SelectedGenre</code> property v\u00e1ltozik.</li> <li>Haszn\u00e1ljuk a k\u00f3dgener\u00e1tor \u00e1ltal elk\u00e9sz\u00edtett partial met\u00f3dusokat, melyekkel kib\u0151v\u00edthetj\u00fck a setterek viselked\u00e9s\u00e9t.</li> </ol> <p>A 3. lehet\u0151s\u00e9g t\u0171nik a legegyszer\u0171bbnek, ehhez viszont ismerni kell a partial met\u00f3dusok m\u0171k\u00f6d\u00e9s\u00e9t (err\u0151l a t\u00e1rgy keret\u00e9ben nem volt m\u00e9g sz\u00f3). A partial met\u00f3dusok olyan met\u00f3dusok, amelyeknek a deklar\u00e1ci\u00f3ja \u00e9s defin\u00edci\u00f3ja k\u00fcl\u00f6n (egy adott partial classhoz tartoz\u00f3) f\u00e1jlokban kap helyet, \u00e9s amiket a ford\u00edt\u00f3 automatikusan \u00f6sszekapcsol. R\u00e1ad\u00e1sul a partial met\u00f3dusok megval\u00f3s\u00edt\u00e1sa nem k\u00f6telez\u0151. Eset\u00fcnkben a k\u00f3dgener\u00e1tor deklar\u00e1lja \u0151ket, h\u00edvja meg ezeket a setterekben, \u00e9s mi implement\u00e1lhatjuk \u0151ket a <code>BooksPageViewModel</code> oszt\u00e1lyban.</p> <p>K\u00e9sz\u00edts\u00fcnk egy implement\u00e1ci\u00f3t az <code>OnSelectedGenreChanged(string value)</code> partial met\u00f3dusra, amelyben megh\u00edvjuk a <code>LoadBooks</code> met\u00f3dust.</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value) =&gt; LoadBooks();\n</code></pre> <p>T\u00f6bb teend\u0151nk nincs, a gener\u00e1lt k\u00f3d ezt meg is h\u00edvja.</p> <p>Pr\u00f3b\u00e1ljuk ki!</p> <p>Most m\u00e1r a m\u0171faj kiv\u00e1laszt\u00e1sakor \u00fajra bet\u00f6lt\u0151dnek a k\u00f6nyvek is.</p>"},{"location":"labor/5-mvvm/#3-feladat-command","title":"3. Feladat - Command","text":"<p>A felhaszn\u00e1l\u00f3i fel\u00fcletek kialak\u00edt\u00e1sakor k\u00e9t feladatunk van:</p> <ul> <li>Adatok megjelen\u00edt\u00e9se a fel\u00fcleten. Ezt az MVVM minta alap\u00fa megold\u00e1sunkban adatk\u00f6t\u00e9ssel eleg\u00e1nsan megoldottuk.</li> <li>A felhaszn\u00e1l\u00f3i interakci\u00f3k/parancsok kezel\u00e9se. Az eredeti megold\u00e1sunkban ez esem\u00e9nykezel\u0151kkel volt megoldva, majd ezeket szint\u00e9n \"eleg\u00e1nsan\" mindenest\u0151l t\u00f6r\u00f6lt\u00fck (emiatt nem m\u0171k\u00f6dik a <code>Clear</code> gomb). A k\u00f6vetkez\u0151kben azt vizsg\u00e1ljuk meg, hogy az MVVM minta alkalmaz\u00e1s\u00e1val milyen megold\u00e1s k\u00edn\u00e1lkozik erre (spoiler: ViewModel-ben defini\u00e1lt commandok vagy m\u0171veletek k\u00f6t\u00e9se a View-ba).</li> </ul> <p>A ViewModel tipikusan publik\u00e1lja a rajta v\u00e9grehajthat\u00f3 m\u0171veleteket a View fel\u00e9. Ezt megtehetj\u00fck publikus f\u00fcggv\u00e9nyeken kereszt\u00fcl vagy egy <code>ICommand</code> interf\u00e9szt megval\u00f3s\u00edt\u00f3 objektumokon kereszt\u00fcl.</p> <p>ICommand</p> <p>Az <code>ICommand</code> el\u0151nye, hogy \u00f6sszefogjuk egy objektumba a m\u0171veletet \u00e9s annak v\u00e9grehajthat\u00f3s\u00e1gi \u00e1llapot\u00e1t, melynek v\u00e1ltoz\u00e1s\u00e1r\u00f3l m\u00e9g esem\u00e9nyt is publik\u00e1l.</p> <pre><code>public interface ICommand\n{\n    event EventHandler? CanExecuteChanged;\n    bool CanExecute(object? parameter);\n    void Execute(object? parameter);\n}\n</code></pre> <p>Ezt a mechanizmust haszn\u00e1lja a <code>Button</code> vez\u00e9rl\u0151 is, amelynek <code>Command</code> tulajdons\u00e1g\u00e1hoz rendelhetj\u00fck a ViewModel-ben defini\u00e1lt parancsokat.</p> <p>Az <code>ICommand</code>-ban defini\u00e1lt m\u0171veletek k\u00f6z\u00fcl legfontosabb sz\u00e1munkra az <code>Execute</code>, mely a parancs futtat\u00e1sakor h\u00edv\u00f3dik meg. A <code>CanExecute</code>-tal a fel\u00fclet le tudja k\u00e9rdezni a parancst\u00f3l, hogy adott pillanatban v\u00e9grejakthat\u00f3-e (pl. a gomb tiltott/enged\u00e9lyezett lesz ennek megfelel\u0151en). A <code>CanExecuteChanged</code> esem\u00e9nnyel pedig - az esem\u00e9ny nev\u00e9nek megfelel\u0151en - azt tudja jelezni a parancs a fel\u00fclet fel\u00e9, hogy a parancs \"CanExecute\" \u00e1llapota megv\u00e1ltozott, a fel\u00fcletnek friss\u00edtenie kell a tiltott/enged\u00e9lyezett \u00e1llapot\u00e1t.</p>"},{"location":"labor/5-mvvm/#icommand-hasznalata","title":"ICommand haszn\u00e1lata","text":"<p>K\u00e9sz\u00edts\u00fcnk egy <code>ICommand</code> t\u00edpus\u00fa propertyt a <code>BooksPageViewModel</code> oszt\u00e1lyban, amely \"nem be\u00e1ll\u00edtott\" \u00e1llapotba teszi a kiv\u00e1lasztott m\u0171fajt (a Clear gombn\u00e1l haszn\u00e1ljuk majd). Megval\u00f3s\u00edt\u00e1sk\u00e9nt az MVVMToolkit <code>RelayCommand</code> oszt\u00e1lyt fogjuk haszn\u00e1lni, amely a <code>CommunityToolkit.Mvvm.Input</code> n\u00e9vt\u00e9rben tal\u00e1lhat\u00f3. Ebb\u0151l k\u00e9sz\u00edt\u00fcnk egy \u00faj p\u00e9ld\u00e1nyt a <code>BooksPageViewModel</code> konstruktorban, ahol egy lambda kifejez\u00e9sben defini\u00e1ljuk a parancs v\u00e9grehajt\u00e1s\u00e1t (a parancs <code>Execute</code> m\u0171velete ezt a lambd\u00e1t h\u00edvja).</p> BooksPageViewModel.cs<pre><code>public BooksPageViewModel()\n{\n    // ...\n\n    ClearFilterCommand = new RelayCommand(() =&gt; SelectedGenre = null);\n}\n\npublic ICommand ClearFilterCommand { get; }\n</code></pre> <p>K\u00f6ss\u00fck r\u00e1 a Clear gomb <code>Command</code> tulajdons\u00e1g\u00e1ra a <code>ClearFilterCommand</code> propertyt.</p> BooksPage.xaml<pre><code>&lt;Button Content=\"Clear\"\n        Command=\"{x:Bind ViewModel.ClearFilterCommand}\" /&gt;\n</code></pre> <p>Vegy\u00fck \u00e9szre, milyen eleg\u00e1ns a megold\u00e1s. Pontosan ugyan\u00fagy dolgoztunk, mint a labor sor\u00e1n kor\u00e1bban az adatok megjelen\u00edt\u00e9s\u00e9n\u00e9l: a View-ban adatk\u00f6t\u00e9st alkalmaztunk a ViewModel-ben lev\u0151 tulajdons\u00e1gra (csak \u00e9ppen az most egy parancs objektum volt).</p> <p>Pr\u00f3b\u00e1ljuk ki! M\u0171k\u00f6dik a Clear gomb, a kiv\u00e1lasztott m\u0171faj t\u00f6rl\u0151dik.</p>"},{"location":"labor/5-mvvm/#icommand-vegrehajthatosagi-allapota","title":"ICommand v\u00e9grehajthat\u00f3s\u00e1gi \u00e1llapota","text":"<p>Ami viszont m\u00e9g nem m\u0171k\u00f6dik, az a gomb letilt\u00e1sa, ha nincs kiv\u00e1lasztott m\u0171faj.</p> <p>Ehhez a <code>RelayCommand</code> oszt\u00e1ly konstruktor\u00e1ban adjunk meg egy <code>Func&lt;bool&gt;</code> t\u00edpus\u00fa f\u00fcggv\u00e9nyt m\u00e1sodik param\u00e9terben, amely megmondja, hogy a parancs v\u00e9grehajthat\u00f3-e vagy sem (a parancs <code>CanExecute</code> m\u0171velete ezt a lambd\u00e1t h\u00edvja).</p> BooksPageViewModel.cs konstruktora<pre><code>ClearFilterCommand = new RelayCommand(\n    execute: () =&gt; SelectedGenre = null,\n    canExecute: () =&gt; SelectedGenre != null);\n</code></pre> <p>Note</p> <p>A fenti k\u00f3dban az <code>execute:</code> \u00e9s <code>canExecute:</code> egy \u00e1ltal\u00e1nos C# nyelvi eszk\u00f6z alkalmaz\u00e1s\u00e1ra mutat p\u00e9ld\u00e1t: C#-ban egy f\u00fcggv\u00e9ny h\u00edv\u00e1sakor param\u00e9terek megad\u00e1sakor lehet\u0151s\u00e9g van a param\u00e9ter nev\u00e9nek megad\u00e1s\u00e1ra (<code>:</code> el\u0151tt). Ezt ritk\u00e1n alkalmazzuk, mert t\u00f6bbet kell g\u00e9pelni, viszont n\u00e9ha - amikor nagyban seg\u00edti - a k\u00f3d olvashat\u00f3s\u00e1g\u00e1t, \u00e9rdemes megfontolni a haszn\u00e1lat\u00e1t.</p> <p>Viszont a UI csak akkor friss\u00fcl - \u00e9s ez\u00e1ltal a <code>canExecute</code> param\u00e9terben megadott f\u00fcggv\u00e9ny csak akkor h\u00edv\u00f3dik meg -, ha az <code>ICommand.CanExecuteChanged</code> esem\u00e9nye els\u00fct\u00e9sre ker\u00fcl.</p> <p>Ezt az esem\u00e9ny els\u00fct\u00e9st az <code>IRelayCommand</code> interf\u00e9szen kereszt\u00fcl (ami egyben <code>ICommand</code> is) mi is ki tudjuk v\u00e1ltani, ha a <code>SelectedGenre</code> property setter\u00e9ben megh\u00edvjuk a <code>NotifyCanExecuteChanged()</code> met\u00f3dust.</p> <p>M\u00f3dos\u00edtsuk a property t\u00edpus\u00e1t <code>IRelayCommand</code>-ra.</p> BooksPageViewModel.cs<pre><code>public IRelayCommand ClearFilterCommand { get; }\n</code></pre> <p>A <code>NotifyCanExecuteChanged()</code> met\u00f3dust pedig a m\u00e1r l\u00e9tez\u0151 <code>OnSelectedGenreChanged</code> partial met\u00f3dusunkban h\u00edvjuk meg.</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n    ClearFilterCommand.NotifyCanExecuteChanged();\n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki! Most m\u00e1r a Clear gomb letilt\u00e1sra ker\u00fcl, ha nincs kiv\u00e1lasztott m\u0171faj.</p>"},{"location":"labor/5-mvvm/#command-mvvmtoolkit-kodgeneratorral","title":"Command MVVMToolkit k\u00f3dgener\u00e1torral","text":"<p>A <code>RelayCommand</code> property k\u00e9zi deklar\u00e1l\u00e1sa \u00e9s p\u00e9ld\u00e1nyos\u00edt\u00e1sa helyett haszn\u00e1lhatjuk a <code>RelayCommand</code> attrib\u00fatumot is egy f\u00fcggv\u00e9nyen, amely automatikusan legener\u00e1lja a sz\u00fcks\u00e9ges k\u00f6r\u00edt\u00e9st a k\u00f3dgener\u00e1tor seg\u00edts\u00e9g\u00e9vel.</p> <ul> <li> <p>T\u00f6r\u00f6lj\u00fck ki a kor\u00e1bban haszn\u00e1lt <code>ClearFilterCommand</code> propertyt \u00e9s a konstruktorban val\u00f3 p\u00e9ld\u00e1nyos\u00edt\u00e1st.</p> </li> <li> <p>Helyette hozzunk l\u00e9tre egy \u00faj <code>ClearFilter</code> nev\u0171 met\u00f3dust, amely a <code>RelayCommand</code> attrib\u00fatum seg\u00edt\u00e9s\u00e9g\u00e9vel a h\u00e1tt\u00e9rben legener\u00e1lja a sz\u00fcks\u00e9ges command propertyt.</p> BooksPageViewModel.cs<pre><code>[RelayCommand]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> <li> <p>A <code>CanExecute</code> logik\u00e1hoz pedig behivatkozhatunk egy m\u00e1sik met\u00f3dust vagy propertyt, amely megadja a parancs v\u00e9grehajthat\u00f3s\u00e1g\u00e1t.</p> BooksPageViewModel.cs<pre><code>private bool IsClearFilterCommandEnabled =&gt; SelectedGenre != null;\n\n[RelayCommand(CanExecute = nameof(IsClearFilterCommandEnabled))]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> </ul> <p>Pr\u00f3b\u00e1ljuk ki! \u00dagy kell m\u0171k\u00f6dnie, mint eddig (csak most a <code>ClearFilterCommand</code> tulajdons\u00e1got a k\u00f3dgener\u00e1tor hozza l\u00e9tre).</p> <p>R\u00e1ad\u00e1sul a <code>NotifyCanExecuteChanged</code> is kiv\u00e1lthat\u00f3 deklarat\u00edvan attrib\u00fatumok seg\u00edts\u00e9g\u00e9vel. Eset\u00fcnkben a <code>NotifyCanExecuteChangedFor</code>-ral k\u00f6ss\u00fck \u00f6ssze a <code>SelectedGenre</code> v\u00e1ltoz\u00e1s\u00e1t a <code>ClearFilterCommand</code> v\u00e9grehajthat\u00f3s\u00e1g\u00e1val. \u00cdgy az <code>OnSelectedGenreChanged</code> partial met\u00f3dusunkb\u00f3l t\u00f6r\u00f6lhetj\u00fck az esem\u00e9ny els\u00fct\u00e9s\u00e9t.</p> BooksPageViewModel.cs<pre><code>[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(ClearFilterCommand))]\nprivate string _selectedGenre;\n\npartial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n}\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki! \u00dagy kell m\u0171k\u00f6dnie, mint eddig.</p> Ha nem t\u00e1mogatott a Command minta k\u00f6zvetlen\u00fcl <p>Nem minden vez\u00e9rl\u0151 t\u00e1mogatja a <code>Command</code> mint\u00e1t k\u00f6zvetlen\u00fcl. Ilyenkor k\u00e9t lehet\u0151s\u00e9g\u00fcnk van:</p> <ol> <li> <p>Haszn\u00e1lhatunk <code>x:Bind</code> adatk\u00f6t\u00e9st, amely nem csak a tulajdons\u00e1gokhoz, hanem esem\u00e9nykezel\u0151kh\u00f6z is haszn\u00e1lhat\u00f3. \u00cdgy ak\u00e1r ViewModel-ben l\u00e9v\u0151 esem\u00e9nykezel\u0151t is k\u00f6thet\u00fcnk a vez\u00e9rl\u0151 esem\u00e9ny\u00e9hez. Ennek h\u00e1tr\u00e1nya, hogy s\u00e9rtheti az MVVM mint\u00e1t, mivel a ViewModel f\u00fcggeni fog a View-t\u00f3l (pl.: esem\u00e9nykezel\u0151 szignat\u00fara \u00e9s param\u00e9terek tekintet\u00e9ben).</p> </li> <li> <p>Tov\u00e1bbra is Command mint\u00e1t haszn\u00e1lunk, de az adott vez\u00e9rl\u0151 k\u00edv\u00e1nt esem\u00e9ny\u00e9t egy \u00fagynevezett Behavior seg\u00edts\u00e9g\u00e9vel k\u00f6thetj\u00fck a ViewModelhez. A Behavior egy olyan oszt\u00e1ly, amely lehet\u0151v\u00e9 teszi, hogy a vez\u00e9rl\u0151 viselked\u00e9s\u00e9t m\u00f3dos\u00edtsuk an\u00e9lk\u00fcl, hogy k\u00f6zvetlen\u00fcl m\u00f3dos\u00edtan\u00e1nk a vez\u00e9rl\u0151 k\u00f3dj\u00e1t. Eset\u00fcnkben a Microsoft.Xaml.Behaviors csomagot kell telep\u00edten\u00fcnk, melyben el\u0151re elk\u00e9sz\u00edtve tal\u00e1lhat\u00f3 olyan behavior, amivel esem\u00e9nyeket tudunk Command megh\u00edv\u00e1ss\u00e1 konvert\u00e1lni.</p> </li> </ol>"},{"location":"labor/5-mvvm/#osszefoglalas_1","title":"\u00d6sszefoglal\u00e1s","text":"<p>A labor sor\u00e1n a kiindul\u00f3 projektet MVVM mint\u00e1ra alak\u00edtottuk \u00e1t, \u00edgy a felel\u0151ss\u00e9gi k\u00f6r\u00f6k el lettek v\u00e1lasztva a View \u00e9s a ViewModel k\u00f6z\u00f6tt:</p> <ul> <li>A ViewModel tartalmazza a n\u00e9zet \u00e1llapot\u00e1t \u00e9s a rajta v\u00e9grehajthat\u00f3 m\u0171veleteket, m\u00edg a View csak a felhaszn\u00e1l\u00f3i fel\u00fclet megjelen\u00edt\u00e9s\u00e9\u00e9rt felel\u0151s.</li> <li>A ViewModel \u00e9s a View k\u00f6z\u00f6tt laz\u00e1bb csatol\u00e1s van adatk\u00f6t\u00e9s form\u00e1j\u00e1ban, \u00edgy a ViewModel k\u00f6nnyebben tesztelhet\u0151 \u00e9s ak\u00e1r \u00fajrafelhaszn\u00e1lhat\u00f3.</li> <li>A ViewModel nem f\u00fcgg a View-t\u00f3l, \u00edgy k\u00f6nnyen \u00e1t\u00edrhat\u00f3 vagy lecser\u00e9lhet\u0151 an\u00e9lk\u00fcl, hogy a View-t m\u00f3dos\u00edtani kellene.</li> <li>A ViewModel sem tartalmazza a teljes \u00fczleti logik\u00e1t, p\u00e9ld\u00e1ul az adatel\u00e9r\u00e9st, hanem egy k\u00fcl\u00f6n Service oszt\u00e1lyban helyezt\u00fck el.</li> </ul>"},{"location":"labor/5-mvvm/index_eng/","title":"5. MVVM","text":""},{"location":"labor/5-mvvm/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>During this lab, we will refactor a simple application using the MVVM pattern to improve clarity and maintainability.</p>"},{"location":"labor/5-mvvm/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools required for completing the lab:</p> <ul> <li>Windows 10 or Windows 11 operating system (Linux and macOS are not suitable)</li> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> </ul>"},{"location":"labor/5-mvvm/index_eng/#starter-project","title":"Starter Project","text":"<p>Clone the starter project using the following command:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo\n</code></pre> Download the completed solution <p> It is essential to work following the instructor during the lab, it is forbidden (and pointless) to download the final solution in advance. However, during subsequent independent practice, it can be useful to review the final solution, so we make it available.</p> <p>The solution is available on GitHub on the <code>megoldas</code> branch. The easiest way to download it is to use the <code>git clone</code> command from the command line and clone the <code>megoldas</code> branch:</p> <p><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo -b megoldas</code></p>"},{"location":"labor/5-mvvm/index_eng/#about-the-mvvm-pattern","title":"About the MVVM Pattern","text":"<p>MVVM (Model-View-ViewModel) is an architectural design pattern commonly used in developing XAML applications, but it also appears in many other client-side technologies (e.g., Android, iOS, Angular, etc.). The goal of the MVVM pattern is to separate the user interface from the underlying logic, creating a more loosely coupled application that enhances testability, maintainability, and reusability.</p> <p>The MVVM pattern consists of three (+1) main components:</p> <ul> <li>Model: Encapsulates domain-specific data that ViewModels can use for data storage. For example, a <code>Recipe</code>/<code>Product</code>/<code>Order</code> class aggregates the data of a recipe/ product/order.</li> <li>View: Contains the user interface definition (and any logic strictly related to the view, such as handling animations). Typically inherits from <code>Window</code>, <code>Page</code>, or <code>UserControl</code>, using declarative XAML descriptions. The code-behind is often empty since the logic resides in the ViewModel.</li> <li>ViewModel: Contains the logic for the corresponding view: it holds the state of the view and the actions that can be performed on it. Independent of the view, the loose coupling between ViewModel and View is achieved through data binding (the UI controls bind to properties of the ViewModel). It is unit testable!</li> <li>Services: Classes that contain the business/application logic of the application, used by the ViewModels. If all business logic were in the ViewModels, they would become overly complex and hard to manage. This is not officially part of the MVVM pattern, we mention them here because this is how we will structure the architecture of our application.</li> </ul> <p></p> <p> When do we create ViewModel classes?</p> <ul> <li>For each view (e.g., <code>Window</code>, <code>Page</code>, <code>Dialog</code>, <code>UserControl</code>), we typically create a ViewModel class and instantiate one object of it per view. For example, <code>MainPage</code> gets a <code>MainPageViewModel</code>, and <code>DancerDialog</code> gets a <code>DancerDialogViewModel</code>. We will follow this approach during the lab.</li> <li>For each model class (e.g., <code>Recipe</code>, <code>Product</code>, <code>Dancer</code>, etc.), we may optionally create wrapper ViewModel classes (e.g., <code>RecipeViewModel</code>, <code>ProductViewModel</code>, <code>DancerViewModel</code>), but we will not do this in this lab. This is because we are following the Relaxed MVVM pattern instead of the Strict one (see the lecture).</li> </ul>"},{"location":"labor/5-mvvm/index_eng/#task-0-reviewing-the-starter-project","title":"Task 0 \u2013 Reviewing the starter project","text":"<p>Our application is a simple book listing tool where books are displayed in a tabular format using an <code>ItemsView</code>. Above the list, there is a <code>ComboBox</code> that allows filtering the books by genre. The filter can be cleared using a Clear button.</p> <p>Let's try it out!</p> <p></p> UI of the starter project <p>ComboBox and ItemsView</p> <p>Both <code>ComboBox</code> and <code>ItemsView</code> are list-based controls that can be filledwith data using the <code>ItemsSource</code> property.</p> <ul> <li> <p><code>ComboBox</code> is a dropdown menu that allows the user to select an item from a list.</p> </li> <li> <p><code>ItemsView</code> provides a tabular layout where multiple items are visible simultaneously. It supports various display modes such as grid or list view, which can be set via the <code>Layout</code> property. Unlike the <code>ListView</code> used in the previous lab, each item template in <code>ItemsView</code> must have an <code>ItemContainer</code> as the root element.</p> </li> </ul> <p>In the starter project, the application logic is in the <code>BooksPage.xaml.cs</code> file, while the user interface is defined in <code>BooksPage.xaml</code>. This implementation does not follow the MVVM pattern, meaning that the UI and its logic are tightly coupled, resulting in what is often referred to as \u201cspaghetti code.\u201d</p> <p>A good example of this is how data loading directly manipulates the UI controls in this file. User interactions are handled via event handlers, which can quickly become hard to manage and blur responsibility boundaries.</p> <p>In our case, sample data is loaded using the <code>SeedDatabase</code> function, which is called in the constructor of <code>BooksPage</code>. The <code>LoadGenres</code> and <code>LoadBooks</code> functions are responsible for loading the dropdown menu and the table respectively.</p> <p>Changes in the selection of the dropdown and the press of the Clear button are handled by separate event handler functions, which reload the list based on the selected genre (look for these in the code).</p> <p>Loading data from SQLite using ADO.NET</p> <p>The application uses a SQLite database for data storage, accessed via ADO.NET. This technology will not be covered in detail during this lab, but we will discuss it more thoroughly at the end of the semester.</p> <p>Using Page instead of Window</p> <p>Our view here is not a <code>Window</code>, but a subclass of <code>Page</code>. As the name suggests, a <code>Page</code> represents a \"page\" within the application: it cannot be displayed on its own, it must be placed e.g. within a window. The benefit is that \u2014 given proper navigation setup \u2014 it is possible to navigate between pages (different <code>Page</code> subclasses). We won\u2019t use this feature; our app will only have a single page. The purpose of using a page is to demonstrate that in MVVM architecture, views can be implemented not only as <code>Window</code> (full windows) but also as <code>Page</code> objects (or other UI components such as <code>UserControl</code>).</p>"},{"location":"labor/5-mvvm/index_eng/#task-1-introducing-the-mvvm-pattern","title":"Task 1 \u2013 Introducing the MVVM pattern","text":"<p>During the lab, we will refactor the starter project to follow the MVVM pattern.</p>"},{"location":"labor/5-mvvm/index_eng/#model","title":"Model","text":"<p>Let\u2019s start from the bottom up, beginning with the model class. Move the <code>Book</code> class from the <code>BooksPage.xaml.cs</code> file into a new file located in a newly created <code>Models</code> folder.</p> <pre><code>namespace Lab.Mvvm.Models;\n\npublic class Book\n{\n    public string Title { get; set; }\n    public string Genre { get; set; }\n    public string ImageUrl { get; set; }\n\n    // Other properties like Author, ISBN etc.\n}\n</code></pre> <p>The <code>Book</code> class has been moved from the previous <code>Lab.Mvvm</code> namespace to the <code>Lab.Mvvm.Models</code> namespace. To avoid long-term compilation errors due to this, we need to adjust the view (<code>BooksPage.xaml.cs</code>) to reflect the namespace change. Specifically, we should introduce a new namespace (<code>models</code>) and use it when specifying the data template type for the <code>ItemsView</code>:</p> <pre><code>&lt;Page x:Class=\"Lab.Mvvm.BooksPage\"\n    // ...\n    xmlns:model=\"using:Lab.Mvvm.Models\"&gt;\n\n&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    &lt;ItemsView.Layout&gt;\n        &lt;LinedFlowLayout ItemsStretch=\"Fill\"\n                        LineHeight=\"160\"\n                        LineSpacing=\"5\"\n                        MinItemSpacing=\"5\" /&gt;\n    &lt;/ItemsView.Layout&gt;\n    &lt;ItemsView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Book\"&gt;\n            // ...\n        &lt;/DataTemplate&gt;\n    &lt;/ItemsView.ItemTemplate&gt;\n&lt;/ItemsView&gt;\n</code></pre>"},{"location":"labor/5-mvvm/index_eng/#service","title":"Service","text":"<p>Move the code responsible for loading the data into a new class called <code>BookService</code>, and place it into a newly created <code>Services</code> folder.</p> <ul> <li> <p>Move the <code>SeedDatabase</code>, <code>LoadGenres</code>, and <code>LoadBooks</code> functions from the <code>BookPage.xaml.cs</code> file into the <code>BookService</code> class.</p> </li> <li> <p>Also, move the <code>_connectionString</code> field.</p> </li> <li> <p>Set the visibility of the functions to <code>public</code> so that our ViewModel class can access them.</p> </li> </ul> <p>The <code>SeedDatabase</code> function is fine as it is, but in the other two functions, we use several UI elements that we need to eliminate.</p> <p>Refactor the functions so they only return the necessary data and do not directly use UI elements. Rename them to <code>GetGenres</code> and <code>GetBooks</code>.</p> <ul> <li> <p>The <code>LoadGenres</code> function will return a list of type <code>List&lt;string&gt;</code>.</p> </li> <li> <p>The <code>LoadBooks</code> function will return a list of type <code>List&lt;Book&gt;</code>. Here, we also need to consider that previously we used the selected value of the <code>ComboBox</code> for the query; now, we need to pass this as an optional parameter to the function.</p> </li> </ul> <pre><code>using Lab.Mvvm.Models;\nusing Microsoft.Data.Sqlite;\nusing System.Collections.Generic;\n\nnamespace Lab.Mvvm.Services;\n\npublic class BookService\n{\n    private readonly string _connectionString = \"Data Source=books.db\";\n\n    public void SeedDatabase()\n    {\n        // ...\n    }\n\n    public List&lt;string&gt; GetGenres()\n    {\n        // ...\n\n        return genres;\n    }\n\n    public List&lt;Book&gt; GetBooks(string genre = null)\n    {\n        using var connection = new SqliteConnection(_connectionString);\n        connection.Open();\n\n        string query = \"SELECT Title, Genre, ImageUrl FROM books\";\n        if (genre != null)\n        {\n            query += \" WHERE Genre = @genre\";\n        }\n        using var command = new SqliteCommand(query, connection);\n        if (genre != null)\n        {\n            command.Parameters.AddWithValue(\"@genre\", genre);\n        }\n\n        List&lt;Book&gt; books = [];\n\n        // ...\n\n        return books;\n    }\n}\n</code></pre> <p>In addition to the changes highlighted above:</p> <ul> <li>In the <code>GetGenres</code> function, we also remove the lines that manipulate the <code>genreFilterComboBox</code> and <code>clearGenreFilterButton</code>.</li> <li>In the <code>BooksPage</code> class, we remove the calls to <code>SeedDatabase</code>, <code>LoadGenres</code>, and <code>LoadBooks</code> that cause compilation errors.</li> </ul> <p>At this point, if we have done it correctly, there should be no compilation errors in our <code>BookService</code> class.</p> <p>Call the <code>SeedDatabase</code> method when the application starts, so that the book and genre data is loaded into the database. The easiest place to do this is in the <code>OnLaunched</code> method in the <code>App.xaml.cs</code> file.</p> App.xaml.cs<pre><code>protected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)\n{\n    m_window = new MainWindow();\n    new BookService().SeedDatabase();\n    m_window.Activate();\n}\n</code></pre>"},{"location":"labor/5-mvvm/index_eng/#viewmodel","title":"ViewModel","text":"<p>Let's create the new <code>BooksPageViewModel</code> class (for the <code>BooksPage</code>) in a new <code>ViewModels</code> folder. This, like a classic ViewModel, will contain the state of the view and the operations that can be performed on it \u2014 in other words, the presentation logic for the <code>BooksPage</code> view.</p> <p>When we think about it, the <code>BooksPage</code> contains the following state information:</p> <ul> <li>The list of books</li> <li>The list of genres in the dropdown menu</li> <li>The selected genre</li> </ul> <p>Let's add these as properties to the <code>BooksPageViewModel</code> class and implement the change notification based on the <code>INotifyPropertyChanged</code> interface that we learned in the previous lab to support data binding.</p> <pre><code>using Lab.Mvvm.Models;\n\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace Lab.Mvvm.ViewModels;\n\npublic class BooksPageViewModel : INotifyPropertyChanged\n{\n    private List&lt;Book&gt; _books;\n    public List&lt;Book&gt; Books\n    { \n        get =&gt; _books;\n        set =&gt; SetProperty(ref _books, value);\n    }\n\n    private List&lt;string&gt; _genres;\n    public List&lt;string&gt; Genres\n    {\n        get =&gt; _genres;\n        set =&gt; SetProperty(ref _genres, value);\n    }\n\n    private string _selectedGenre;\n    public string SelectedGenre\n    { \n        get =&gt; _selectedGenre;\n        set =&gt; SetProperty(ref _selectedGenre, value);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual bool SetProperty&lt;T&gt;(ref T property, T value, [CallerMemberName] string propertyName = null)\n    {\n        if (object.Equals(property, value))\n            return false;\n        property = value;\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n        return true;\n    }\n}\n</code></pre> <p>SetProperty</p> <p>The <code>SetProperty</code> method is a helper function that simplifies setting properties and notifying changes.</p> <p>The return value is <code>true</code> if the property value changed, and <code>false</code> if it didn't. This will help later in determining whether a change occurred in the property value.</p> <p>The <code>ref</code> keyword allows the method to modify the variable's value directly (not just the reference is passed, but the reference itself can be modified to change where the original variable points).</p> <p>The <code>CallerMemberName</code> attribute automatically passes the name of the calling member (in this case, the property), so we don't have to manually specify the property name everywhere.</p> <p>We will implement data loading using the <code>BookService</code> class (scroll up in the guide, and check the introductory MVVM diagram to see that the ViewModel indeed uses the Service class/classes). Instantiate the <code>BookService</code> class and load the genres and books in its constructor.</p> <pre><code>private readonly BookService _booksService;\n\npublic BooksPageViewModel()\n{\n    _booksService = new BookService();\n    Genres = _booksService.GetGenres();\n    LoadBooks();\n}\n\nprivate void LoadBooks()\n{\n    // Setting the Books property triggers the INPC PropertyChanged event (see Books property setter above) - the view will be refreshed\n    Books = _booksService.GetBooks(SelectedGenre);\n}\n</code></pre> <p>The book loading should not only be done in the constructor, but also in the setter of the <code>SelectedGenre</code> property to reload the books when the selected genre changes. In the setter of <code>SelectedGenre</code>, we will call the <code>LoadBooks</code> method if a change has occurred.</p> <pre><code>private string _selectedGenre;\npublic string SelectedGenre\n{\n    get =&gt; _selectedGenre;\n    set\n    {\n        if (SetProperty(ref _selectedGenre, value))\n            LoadBooks();\n    }\n}\n</code></pre>"},{"location":"labor/5-mvvm/index_eng/#view","title":"View","text":"<p>Now we only need to modify the view so that it uses the ViewModel.</p> <p>Create a new <code>BooksPageViewModel</code> type readonly property in the <code>BooksPage.xaml.cs</code> file, and assign it a value by creating a new <code>BooksPageViewModel</code> instance.</p> <pre><code>public BooksPageViewModel ViewModel { get; } = new BooksPageViewModel();\n</code></pre> <p>readonly property vs getter only property</p> <p>Remember that there is a significant difference between an auto-implemented (once initialized) readonly property and a getter-only property. In the example above, we use an auto-implemented readonly property, meaning the <code>ViewModel</code> property value is created only once. In contrast, if we used a getter-only property, a new instance would be created every time it is accessed, leading to undesired behavior: <code>public BooksPageViewModel ViewModel =&gt; new BooksPageViewModel();</code></p> <p>From this point on, in the <code>BooksPage.xaml</code> file, we can use the <code>ViewModel</code> property for data binding.</p> <ul> <li> <p>Let's first focus on the <code>ComboBox</code>:</p> <ul> <li>In the initial solution, we manually manipulated the <code>SelectedItem</code> and <code>ItemsSource</code> properties in the code-behind file. We need to convert this handling into a data-binding-based solution: according to the MVVM pattern, we bind to the properties of the ViewModel object defined in the code-behind.</li> <li>Delete the <code>SelectionChanged</code> event subscription in the XAML file and the <code>GenreFilterComboBox_SelectionChanged</code> event handler in the code-behind (since we no longer need it due to the <code>SelectedItem</code> data binding).</li> </ul> <pre><code>&lt;ComboBox x:Name=\"genreFilterComboBox\"\n        Grid.Row=\"1\"\n        PlaceholderText=\"Filter Genre\"\n        ItemsSource=\"{x:Bind ViewModel.Genres}\"\n        SelectedItem=\"{x:Bind ViewModel.SelectedGenre, Mode=TwoWay}\" /&gt;\n</code></pre> </li> <li> <p>For the Clear button, also remove the <code>Click</code> event subscription and the <code>GenreFilterComboBox_SelectionChanged</code> event handler in the code-behind. We will implement its behavior in the ViewModel later.</p> <pre><code>&lt;Button x:Name=\"clearGenreFilterButton\"\n        Content=\"Clear\" /&gt;\n</code></pre> </li> <li> <p>In the <code>ItemsView</code>, we also need to use data binding for the <code>ItemsSource</code> property.</p> <pre><code>&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    ...\n&lt;/ItemsView&gt;\n</code></pre> </li> </ul> Classic Binding usage <p>If we were to use classic binding instead of <code>x:Bind</code>, we would need to set the <code>DataContext</code> property of the control/page to a ViewModel instance.</p> <p>Let's try it!</p> <p>Our application should work similarly to the previous one (except for the Clear button), but now the architecture of the application follows the MVVM pattern.</p>"},{"location":"labor/5-mvvm/index_eng/#summary","title":"Summary","text":"<p>Let's evaluate our solution by looking at the code. In our initial solution, we had only one Page class, which mixed the presentation (.xaml) with application logic and presentation logic (the last two in the Page code-behind). In our MVVM-based solution:</p> <ul> <li>The Page now only contains the presentation (View), and the code-behind is essentially empty (it only contains a ViewModel).</li> <li>The application logic has been moved to a Service class.</li> <li>The display logic specific to the page has been placed into a ViewModel class (and the View binds to it).</li> </ul> <p>In addition to better clarity, the main advantage of this approach is that the coupling between the ViewModel and the View is looser, making the ViewModel easier to test and potentially reusable. The ViewModel does not depend on the View, so it can easily be rewritten or replaced without modifying the View.</p>"},{"location":"labor/5-mvvm/index_eng/#task-2-mvvmtoolkit","title":"Task 2 - MVVMToolkit","text":"<p>It is rare to implement the MVVM pattern relying solely on the .NET framework. It's worth using an MVVM library, which can make our code more compact, clearer, and contain less boilerplate code. Some of the most popular libraries include:</p> <ul> <li>MVVM Toolkit: MVVM library maintained by Microsoft.</li> <li>Prism: Once maintained by Microsoft and very popular, but now maintained by external developers and has become a paid library over time.</li> <li>ReactiveUI: Uses the Reactive Extensions (Rx) libraries to manage ViewModel state and bind data between the View and ViewModel. This library offers the most features, but it is the hardest to learn.</li> <li>Uno.Extensions: Built on top of MVVM Toolkit, but also includes services that fill in gaps in the WinUI framework.</li> <li>Windows Template Studio is a Visual Studio extension that makes available a project template for more complex WinUI applications.</li> </ul> <p>During the lab, we will try the MVVM Toolkit maintained by Microsoft.</p>"},{"location":"labor/5-mvvm/index_eng/#installation","title":"Installation","text":"<p>To install the MVVM Toolkit, open the NuGet Package Manager in Visual Studio (right-click on the project and select \"Manage NuGet Packages\"), and search for the <code>CommunityToolkit.Mvvm</code> package.   It is important to install version 8.4.0 in the lab environments! This will actually create the following <code>PackageReference</code> entry in the project file (we can manually add it alongside the other PackageReferences instead of following the steps above):</p> <pre><code>&lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.4.0\" /&gt;\n</code></pre>"},{"location":"labor/5-mvvm/index_eng/#observableobject-and-observableproperty","title":"ObservableObject and ObservableProperty","text":"<p>In our <code>BooksPageViewModel</code> class, the implementation of <code>INotifyPropertyChanged</code> is quite verbose. Instead of directly implementing the <code>INotifyPropertyChanged</code> interface, we can use the <code>ObservableObject</code> class, which already implements this interface and contains several helper functions that make it easier to set properties and notify about changes. Additionally, we have the option to use the <code>ObservableProperty</code> attribute, which controls a code generator, allowing properties to be automatically created without manually writing boilerplate code, simply by declaring fields with the attribute. Let's make the following changes:</p> <ul> <li> <p>Our <code>BooksPageViewModel</code> class should inherit from the <code>ObservableObject</code> class found in the <code>CommunityToolkit.Mvvm.ComponentModel</code> namespace.</p> </li> <li> <p>To use the source generator, the class must be marked as <code>partial</code> so that the generated code and the manual code can be placed in separate files.</p> </li> <li> <p>Instead of using full property syntax, we only need to keep the fields to which we apply the <code>ObservableProperty</code> attribute.</p> <pre><code>public partial class BooksPageViewModel : ObservableObject\n{\n    // ...\n\n    [ObservableProperty]\n    private List&lt;Book&gt; _books;\n\n    [ObservableProperty]\n    private List&lt;string&gt; _genres;\n\n    [ObservableProperty]\n    private string _selectedGenre;\n\n    // ...\n}\n</code></pre> </li> </ul> <p>It is important that we remove the member variables (except for <code>_booksService</code>), the properties (since these are generated by the code generator), the <code>PropertyChanged</code> event, and the <code>SetProperty</code> method from the previous <code>BooksPageViewModel</code> solution.  After the transformation, let's perform a build (e.g., Build/Build Solution menu): without this, the compilation errors won't be resolved, and Visual Studio will report many errors in the code. This is logical because the data-bound properties are generated by the code generator only during the build (in a \"hidden\" file).</p> <p>We can check what code has been generated by navigating to the <code>Genres</code> property using ++F12++ (in the XAML file, place the cursor on <code>ViewModel.Genres</code> in the <code>ItemsSource</code> data binding).</p> <p>ObservableProperty attribute on property</p> <p>The <code>ObservableProperty</code> attribute can also be applied to properties instead of fields with the help of a new C# language feature, but we would need to use a preview version of C# for this, so we will skip this for now this year.</p> <p>Try it out!</p> <p>We observe that the books load, but when selecting a genre, the books do not reload. Yes, that's because, earlier, we called the <code>LoadBooks</code> method when the <code>SelectedGenre</code> changed (which the generated code doesn't do).</p> <p>We have three options:</p> <ol> <li>We revert the <code>SelectedGenre</code> property to a non-generated version so we can define the setter.</li> <li>We subscribe to the ViewModel <code>PropertyChanged</code> event in the constructor and call the <code>LoadBooks</code> method in the event handler when the <code>SelectedGenre</code> property changes.</li> <li>We use the partial methods generated by the code generator, which will allow us to extend the behavior of the setters.</li> </ol> <p>Option 3 seems to be the easiest, but it requires knowing how partial methods work (which we haven't covered in this course yet). Partial methods are methods whose declaration and definition are located in different files (associated with the same partial class), and which are automatically linked by the compiler. Moreover, partial methods don't have to be implemented by us. In our case, the code generator declares them, invokes them in the setters, and we can implement them in the <code>BooksPageViewModel</code> class.</p> <p>Let's implement the <code>OnSelectedGenreChanged(string value)</code> partial method, where we call the <code>LoadBooks</code> method.</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value) =&gt; LoadBooks();\n</code></pre> <p>We have nothing more to do, the generated code now calls this method.</p> <p>Try it out!</p> <p>Now, when selecting a genre, the books reload properly.</p>"},{"location":"labor/5-mvvm/index_eng/#task-3-command","title":"Task 3 - Command","text":"<p>When designing user interfaces, we have two tasks:</p> <ul> <li>Displaying data on the interface. This task was elegantly solved using data binding in our MVVM-based solution.</li> <li>Handling user interactions/commands. In our original solution, this was handled using event handlers, but we later \"elegantly\" removed all of them (which is why the <code>Clear</code> button no longer works). In the following, we will explore how we can implement a solution for this using the MVVM pattern (spoiler: binding commands or actions defined in the ViewModel to the View).</li> </ul> <p>The ViewModel typically publishes the actions that can be performed on it to the View. This can be done through public methods or by using objects that implement the <code>ICommand</code> interface.</p> <p>ICommand</p> <p>The advantage of <code>ICommand</code> is that it encapsulates the operation and its execution state in one object, and it can even publish an event when the execution state changes.</p> <pre><code>public interface ICommand\n{\n    event EventHandler? CanExecuteChanged;\n    bool CanExecute(object? parameter);\n    void Execute(object? parameter);\n}\n</code></pre> <p>This mechanism is also used by the <code>Button</code> control, to whose <code>Command</code> property can be assigned commands defined in the ViewModel.</p> <p>The most important for us among the operations defined in <code>ICommand</code> is <code>Execute</code>, which is called when the command is executed. With <code>CanExecute</code>, the interface can query the command to check if the command can be executed at a given moment (for example, the button will be enabled/disabled accordingly). The <code>CanExecuteChanged</code> event, as the name suggests, is used to notify the interface that the \"CanExecute\" state of the command has changed, and the interface needs to update the enabled/disabled state.</p>"},{"location":"labor/5-mvvm/index_eng/#using-icommand","title":"Using ICommand","text":"<p>Let's create an <code>ICommand</code> type property in the <code>BooksPageViewModel</code> class, which sets the selected genre to a \"not set\" state (this will be used for the Clear button). For the implementation, we will use the <code>RelayCommand</code> class from the MVVM Toolkit, which is found in the <code>CommunityToolkit.Mvvm.Input</code> namespace. We will create a new instance of it in the <code>BooksPageViewModel</code> constructor, where we define the execution of the command in a lambda expression (the <code>Execute</code> method of the command will call this lambda).</p> BooksPageViewModel.cs<pre><code>public BooksPageViewModel()\n{\n    // ...\n\n    ClearFilterCommand = new RelayCommand(() =&gt; SelectedGenre = null);\n}\n\npublic ICommand ClearFilterCommand { get; }\n</code></pre> <p>Let's bind the <code>ClearFilterCommand</code> property to the <code>Command</code> property of the Clear button.</p> BooksPage.xaml<pre><code>&lt;Button Content=\"Clear\"\n        Command=\"{x:Bind ViewModel.ClearFilterCommand}\" /&gt;\n</code></pre> <p>Notice how elegant the solution is. We worked in exactly the same way as before when displaying data during the lab: in the View, we used data binding to the property in the ViewModel (except now it was a command object).</p> <p>Try it out! The Clear button works, and the selected genre is cleared.</p>"},{"location":"labor/5-mvvm/index_eng/#icommand-executability-state","title":"ICommand executability state","text":"<p>What still doesn't work is disabling the button when no genre is selected.</p> <p>To achieve this, in the constructor of the <code>RelayCommand</code> class, we should provide a <code>Func&lt;bool&gt;</code> function as the second parameter, which will indicate whether the command can be executed or not (the command's <code>CanExecute</code> method will call this lambda).</p> BooksPageViewModel.cs konstruktora<pre><code>ClearFilterCommand = new RelayCommand(\n    execute: () =&gt; SelectedGenre = null,\n    canExecute: () =&gt; SelectedGenre != null);\n</code></pre> <p>Note</p> <p>The code above illustrates a common C# language feature: when calling a function, you can specify the name of a parameter before the <code>:</code>. This is rarely used because it requires more typing, but it can be considered when it greatly enhances the readability of the code.</p> <p>However, the UI will only update \u2014 and thus the function specified in the <code>canExecute</code> parameter will only be called \u2014 if the <code>ICommand.CanExecuteChanged</code> event is triggered.</p> <p>We can trigger this event through the <code>IRelayCommand</code> interface (which also implements <code>ICommand</code>). To do this, we need to call the <code>NotifyCanExecuteChanged()</code> method in the setter of the <code>SelectedGenre</code> property.</p> <p>Let's change the property type to <code>IRelayCommand</code>. </p> BooksPageViewModel.cs<pre><code>public IRelayCommand ClearFilterCommand { get; }\n</code></pre> <p>Call the <code>NotifyCanExecuteChanged()</code> method inside our already existing <code>OnSelectedGenreChanged</code> partial method.</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n    ClearFilterCommand.NotifyCanExecuteChanged();\n}\n</code></pre> <p>Let's try it out! Now the Clear button becomes disabled when no genre is selected.</p>"},{"location":"labor/5-mvvm/index_eng/#command-with-mvvmtoolkit-code-generator","title":"Command with MVVMToolkit code generator","text":"<p>Instead of manually declaring and instantiating the <code>RelayCommand</code> property, we can use the <code>RelayCommand</code> attribute on a method, which automatically generates the necessary boilerplate code using the code generator.</p> <ul> <li> <p>Delete the previously used <code>ClearFilterCommand</code> property and its instantiation in the constructor.</p> </li> <li> <p>Instead, create a new method named <code>ClearFilter</code>, and use the <code>RelayCommand</code> attribute to have the necessary command property automatically generated in the background.</p> BooksPageViewModel.cs<pre><code>[RelayCommand]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> <li> <p>For the <code>CanExecute</code> logic, we can reference another method or property that defines whether the command can be executed.</p> BooksPageViewModel.cs<pre><code>private bool IsClearFilterCommandEnabled =&gt; SelectedGenre != null;\n\n[RelayCommand(CanExecute = nameof(IsClearFilterCommandEnabled))]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> </ul> <p>Let's try it out! It should work just like before (only now the <code>ClearFilterCommand</code> property is generated by the source generator).</p> <p>Moreover, <code>NotifyCanExecuteChanged</code> can also be triggered declaratively using attributes. In our case, use <code>NotifyCanExecuteChangedFor</code> to link changes in <code>SelectedGenre</code> to the executability of the <code>ClearFilterCommand</code>. This way, we can remove the event trigger from our <code>OnSelectedGenreChanged</code> partial method.</p> BooksPageViewModel.cs<pre><code>[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(ClearFilterCommand))]\nprivate string _selectedGenre;\n\npartial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n}\n</code></pre> <p>Let's try it out! It should work just like before.</p> If the Command pattern is not directly supported <p>Not all controls directly support the <code>Command</code> pattern. In such cases, we have two options:</p> <ol> <li> <p>We can use <code>x:Bind</code> data binding, which is applicable not only to properties but also to event handlers. This allows us to bind even a ViewModel-based event handler to the control\u2019s event. The downside is that this can break the MVVM pattern, as the ViewModel may become dependent on the View (e.g., due to event handler signatures and parameters).</p> </li> <li> <p>We can still use the Command pattern, but connect the desired event of the control to the ViewModel using a so-called Behavior. A Behavior is a class that allows us to modify a control\u2019s behavior without changing the control\u2019s code directly. In our case, we need to install the Microsoft.Xaml.Behaviors package, which includes a prebuilt behavior that converts events to command invocations.</p> </li> </ol>"},{"location":"labor/5-mvvm/index_eng/#summary_1","title":"Summary","text":"<p>During the lab, we transformed the initial project to follow the MVVM pattern, thus separating responsibilities between the View and the ViewModel:</p> <ul> <li>The ViewModel contains the state of the view and the actions that can be performed on it, while the View is responsible solely for presenting the user interface.</li> <li>There is a loose coupling between the ViewModel and the View through data binding, which makes the ViewModel easier to test and potentially reusable.</li> <li>The ViewModel does not depend on the View, so it can be easily rewritten or replaced without modifying the View.</li> <li>The ViewModel does not contain the full business logic (such as data access); instead, we placed that in a separate Service class.</li> </ul>"},{"location":"labor/5-mvvm/index_ger/","title":"5. MVVM","text":""},{"location":"labor/5-mvvm/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>In dieser \u00dcbung werden wir eine einfache Anwendung mit Hilfe des MVVM-Musters refaktorisieren, um eine bessere Transparenz und Wartbarkeit zu erreichen.</p>"},{"location":"labor/5-mvvm/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung der \u00dcbung ben\u00f6tigten Werkzeuge:</p> <ul> <li>Windows 10 oder Windows 11 (Linux und macOS sind nicht geeignet)</li> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> </ul>"},{"location":"labor/5-mvvm/index_ger/#ausgangsprojekt","title":"Ausgangsprojekt","text":"<p>Das Ausgangsprojekt kann mit folgendem Befehl geklont werden:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo\n</code></pre> Die fertige L\u00f6sung herunterladen <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten.</p> <p>F\u00fcr das sp\u00e4tere selbstst\u00e4ndige \u00dcben kann es jedoch hilfreich sein, die fertige L\u00f6sung durchzusehen, daher stellen wir sie zur Verf\u00fcgung. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist auf GitHub verf\u00fcgbar im Branch <code>megoldas</code>. Die einfachste M\u00f6glichkeit zum Herunterladen ist die Verwendung des folgenden Befehls:</p> <p><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo -b megoldas</code></p>"},{"location":"labor/5-mvvm/index_ger/#uber-das-mvvm-muster","title":"\u00dcber das MVVM-Muster","text":"<p>Das MVVM (Model-View-ViewModel) ist ein architektonisches Entwurfsmuster, das bei der Entwicklung von XAML-Anwendungen verwendet wird, aber auch in anderen clientseitigen Technologien vorkommt (z.\u202fB. Android, iOS, Angular usw.).</p> <p>Ziel des MVVM-Musters ist es, die Benutzeroberfl\u00e4che und die dahinterliegende Logik voneinander zu trennen, um eine lose gekoppelte Anwendung zu schaffen, die besser testbar, wartbar und wiederverwendbar ist.</p> <p>Das MVVM-Muster besteht aus drei (+1) Hauptbestandteilen:</p> <ul> <li>Model: Enth\u00e4lt dom\u00e4nenspezifische Daten, die von ViewModels zur Datenspeicherung verwendet werden k\u00f6nnen, z.\u202fB. Klassen wie <code>Recipe</code>, <code>Product</code>, <code>Order</code>, die Rezept-, Produkt- oder Bestelldaten kapseln.</li> <li>View: Enth\u00e4lt die Beschreibung der Benutzeroberfl\u00e4che (sowie Logik, die ausschlie\u00dflich das UI betrifft, z.\u202fB. Animationen). Typischerweise abgeleitet von <code>Window</code>, <code>Page</code> oder <code>UserControl</code>, deklarativ in XAML beschrieben. Die Code-Behind-Datei bleibt meist leer, da die Logik ins ViewModel geh\u00f6rt.</li> <li>ViewModel: Enth\u00e4lt die zur View geh\u00f6rige Logik: den Zustand der Ansicht und die m\u00f6glichen Aktionen. Unabh\u00e4ngig von der View \u2013 die lose Kopplung zwischen View und ViewModel wird durch Datenverbindung realisiert (UI-Elemente binden an ViewModel-Eigenschaften). Kann mit Unit Tests getestet werden!</li> <li>Services: Klassen, die Gesch\u00e4fts- bzw. Anwendunglogik enthalten, und vom ViewModel genutzt werden. W\u00fcrde man alle Logik ins ViewModel packen, w\u00fcrde dieses schnell un\u00fcbersichtlich werden. Obwohl Services kein Teil des MVVM-Musters sind, erw\u00e4hnen wir sie hier, da auch wir unsere Architektur so gestalten werden.</li> </ul> <p></p> <p> Wann erstellen wir ViewModel-Klassen?</p> <ul> <li>F\u00fcr jede Ansicht/View (z.\u202fB. <code>Window</code>, <code>Page</code>, <code>Dialog</code>, <code>UserControl</code>) erstellen wir typischerweise eine ViewModel-Klasse und instanziieren davon ein Objekt. Zum Beispiel <code>MainPageViewModel</code> f\u00fcr <code>MainPage</code>, <code>DancerDialogViewModel</code> f\u00fcr <code>DancerDialog</code>. Dies wird auch im Labor angewendet.</li> <li>F\u00fcr die einzelnen Model-Klassen (z.\u202fB. <code>Recipe</code>, <code>Product</code>, <code>Dancer</code> usw.) k\u00f6nnen optional Wrapper-ViewModels erstellt werden (z.\u202fB. <code>RecipeViewModel</code>, <code>ProductViewModel</code>, <code>DancerViewModel</code>), das werden wir im Labor jedoch nicht tun. Der Grund daf\u00fcr ist, dass wir nicht dem Strict MVVM Muster folgen, sondern dem Relaxed MVVM Muster (siehe Vorlesung).</li> </ul>"},{"location":"labor/5-mvvm/index_ger/#0-aufgabe-uberblick-uber-das-ausgangsprojekt","title":"0. Aufgabe \u2013 \u00dcberblick \u00fcber das Ausgangsprojekt","text":"<p>Unsere Anwendung ist eine einfache B\u00fccherliste, bei der die B\u00fccher in einer <code>ItemsView</code> in tabellarischer Form angezeigt werden. \u00dcber der Liste befindet sich ein <code>ComboBox</code>, mit dem die B\u00fccher nach Genre gefiltert werden k\u00f6nnen. Der Filter kann mit einem Clear-Knopf zur\u00fcckgesetzt werden.</p> <p>Probieren wir es aus!</p> <p></p> Oberfl\u00e4che des Ausgangsprojekts <p>ComboBox und ItemsView</p> <p>Sowohl <code>ComboBox</code> als auch <code>ItemsView</code> sind Listensteuerungen, die \u00fcber die Eigenschaft <code>ItemsSource</code> mit Daten gef\u00fcllt werden k\u00f6nnen.</p> <ul> <li> <p>Die <code>ComboBox</code> ist ein Dropdown-Men\u00fc, das dem Benutzer erm\u00f6glicht, ein Element aus der Liste auszuw\u00e4hlen.</p> </li> <li> <p>Die <code>ItemsView</code> zeigt mehrere Elemente gleichzeitig in tabellarischer Form an. Sie erlaubt verschiedene Layouts (z.\u202fB. Grid oder Liste), einstellbar \u00fcber die <code>Layout</code>-Eigenschaft. Im Unterschied zur im vorherigen Labor verwendeten <code>ListView</code> muss das Wurzelelement in einer Listenelementvorlage immer ein <code>ItemContainer</code> sein.</p> </li> </ul> <p>Im Ausgangsprojekt befindet sich die Anwendungslogik in der Datei <code>BooksPage.xaml.cs</code>, und die Benutzeroberfl\u00e4che in <code>BooksPage.xaml</code>. Diese L\u00f6sung folgt nicht dem MVVM-Muster, wodurch die Benutzeroberfl\u00e4che und die zugrunde liegende Logik eng miteinander verflochten sind, was fast schon den Charakter von Spaghetti-Code annimmt.</p> <p>Ein gutes Beispiel daf\u00fcr ist, dass das Laden der Daten direkt im Code-Behind geschieht, und werden die UI-Elemente direkt manipuliert. Interaktionen werden auch in Ereignishandlern behandelt, was nach einer Weile undurchsichtig wird und die Zust\u00e4ndigkeiten sind gemischt.</p> <p>In unserem Fall werden die Beispieldaten \u00fcber die Funktion <code>SeedDatabase</code> geladen, die im Konstruktor von <code>BooksPage</code> aufgerufen wird. Die Funktionen <code>LoadGenres</code> und <code>LoadBooks</code> sind f\u00fcr das Auff\u00fcllen des Dropdowns und der Tabelle zust\u00e4ndig.</p> <p>Die \u00c4nderung der Auswahl im Dropdown-Men\u00fc sowie das Dr\u00fccken des Clear-Knopfs wird jeweils durch einen Ereignishandler behandelt, die die Liste je nach Genre neu laden (suchen wir diese Funktionen im Code!).</p> <p>Datenladen mit ADO.NET aus SQLite-Datenbank</p> <p>Die Anwendung verwendet eine SQLite-Datenbank zur Datenspeicherung, die mit ADO.NET angesprochen wird. Diese Technologie wird im Labor nicht im Detail behandelt, aber wir werden sie am Ende des Semesters besprechen.</p> <p><code>Page</code>-Klasse statt <code>Window</code></p> <p>Unsere View basiert diesmal nicht auf <code>Window</code>, sondern auf einer von <code>Page</code> abgeleiteten Klasse. Eine <code>Page</code> stellt eine \u201eSeite\u201c in der Anwendung dar: sie kann nicht selbstst\u00e4ndig angezeigt werden, sondern muss z.\u202fB. in einem Fenster eingebettet werden. Vorteil: Mit entsprechender Navigation kann man in einem Fenster zwischen Seiten wechseln. Das werden wir aber nicht ausnutzen \u2013 wir haben nur eine einzige Seite. Ziel der Verwendung einer <code>Page</code> war lediglich, zu zeigen: In einer MVVM-Architektur k\u00f6nnen Views auch durch <code>Page</code>- oder sogar andere UI-Komponenten wie <code>UserControl</code> realisiert werden \u2013 nicht nur durch <code>Window</code>.</p>"},{"location":"labor/5-mvvm/index_ger/#1-aufgabe-einfuhrung-des-mvvm-musters","title":"1. Aufgabe \u2013 Einf\u00fchrung des MVVM-Musters","text":"<p>Im Rahmen des Labors werden wir das Ausgangsprojekt gem\u00e4\u00df dem MVVM-Muster umstrukturieren.</p>"},{"location":"labor/5-mvvm/index_ger/#model","title":"Model","text":"<p>Bauen wir nun von unten nach oben auf, beginnend mit unserer Modellklasse. Die <code>Book</code>-Klasse, die sich derzeit in der Datei <code>BooksPage.xaml.cs</code> befindet, soll in eine neue Datei innerhalb eines neu erstellten Ordners <code>Models</code> verschoben werden.</p> <pre><code>namespace Lab.Mvvm.Models;\n\npublic class Book\n{\n    public string Title { get; set; }\n    public string Genre { get; set; }\n    public string ImageUrl { get; set; }\n\n    // Other properties like Author, ISBN etc.\n}\n</code></pre> <p>Die <code>Book</code>-Klasse wurde vom fr\u00fcheren Namensraum <code>Lab.Mvvm</code> in den neuen Namensraum <code>Lab.Mvvm.Models</code> verschoben. Aus diesem Grund sollten wir die Ansicht (<code>BooksPage.xaml.cs</code>) jetzt an die Namensraum\u00e4nderung anpassen, um lange Kompilierungsfehler zu vermeiden. Konkret m\u00fcssen wir einen neuen Namensraum (<code>model</code>) einf\u00fchren und diesen beim Festlegen des Typs der Datenvorlage (<code>ItemTemplate</code>) im <code>ItemsView</code> verwenden:</p> <pre><code>&lt;Page x:Class=\"Lab.Mvvm.BooksPage\"\n    // ...\n    xmlns:model=\"using:Lab.Mvvm.Models\"&gt;\n\n&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    &lt;ItemsView.Layout&gt;\n        &lt;LinedFlowLayout ItemsStretch=\"Fill\"\n                        LineHeight=\"160\"\n                        LineSpacing=\"5\"\n                        MinItemSpacing=\"5\" /&gt;\n    &lt;/ItemsView.Layout&gt;\n    &lt;ItemsView.ItemTemplate&gt;\n        &lt;DataTemplate x:DataType=\"model:Book\"&gt;\n            // ...\n        &lt;/DataTemplate&gt;\n    &lt;/ItemsView.ItemTemplate&gt;\n&lt;/ItemsView&gt;\n</code></pre>"},{"location":"labor/5-mvvm/index_ger/#service","title":"Service","text":"<p>Den f\u00fcr das Laden der Daten verantwortlichen Code verschieben wir in eine neue Klasse namens <code>BookService</code>, die im neu erstellten Ordner <code>Services</code> abgelegt wird.</p> <ul> <li> <p>In die Klasse <code>BookService</code> verschieben wir die Methoden <code>SeedDatabase</code>, <code>LoadGenres</code> und <code>LoadBooks</code> aus der Datei <code>BooksPage.xaml.cs</code>.</p> </li> <li> <p>Auch das Feld <code>_connectionString</code> soll in diese Klasse \u00fcbertragen werden.</p> </li> <li> <p>Die Sichtbarkeit der Methoden soll auf <code>public</code> gesetzt werden, damit sie von der ViewModel-Klasse aufgerufen werden k\u00f6nnen.</p> </li> </ul> <p>Die Methode <code>SeedDatabase</code> ist bereits in Ordnung, aber in den beiden anderen Methoden greifen wir noch auf UI-Elemente zu, die entfernt werden m\u00fcssen.</p> <p>Wir \u00e4ndern die Methoden so, dass sie nur die ben\u00f6tigten Daten zur\u00fcckgeben und keine direkten Referenzen auf UI-Komponenten enthalten. Zudem benennen wir sie um in <code>GetGenres</code> und <code>GetBooks</code>.</p> <ul> <li> <p>Die Methode <code>GetGenres</code> gibt eine Liste vom Typ <code>List&lt;string&gt;</code> zur\u00fcck.</p> </li> <li> <p>Die Methode <code>GetBooks</code> gibt eine Liste vom Typ <code>List&lt;Book&gt;</code> zur\u00fcck.   Dabei m\u00fcssen wir beachten, dass zuvor der aktuell gew\u00e4hlte Wert aus der <code>ComboBox</code> verwendet wurde, aber jetzt m\u00fcssen wir diesen Parameter optional an die Funktion \u00fcbergeben.</p> </li> </ul> <pre><code>using Lab.Mvvm.Models;\nusing Microsoft.Data.Sqlite;\nusing System.Collections.Generic;\n\nnamespace Lab.Mvvm.Services;\n\npublic class BookService\n{\n    private readonly string _connectionString = \"Data Source=books.db\";\n\n    public void SeedDatabase()\n    {\n        // ...\n    }\n\n    public List&lt;string&gt; GetGenres()\n    {\n        // ...\n\n        return genres;\n    }\n\n    public List&lt;Book&gt; GetBooks(string genre = null)\n    {\n        using var connection = new SqliteConnection(_connectionString);\n        connection.Open();\n\n        string query = \"SELECT Title, Genre, ImageUrl FROM books\";\n        if (genre != null)\n        {\n            query += \" WHERE Genre = @genre\";\n        }\n        using var command = new SqliteCommand(query, connection);\n        if (genre != null)\n        {\n            command.Parameters.AddWithValue(\"@genre\", genre);\n        }\n\n        List&lt;Book&gt; books = [];\n\n        // ...\n\n        return books;\n    }\n}\n</code></pre> <p>Zus\u00e4tzlich zu den oben hervorgehobenen \u00c4nderungen:</p> <ul> <li>In der Methode <code>GetGenres</code> l\u00f6schen wir auch die Zeilen, die <code>genreFilterComboBox</code> und <code>clearGenreFilterButton</code> manipulieren.</li> <li>In der Klasse <code>BooksPage</code> entfernen wir die Aufrufe von <code>SeedDatabase</code>, <code>LoadGenres</code> und <code>LoadBooks</code>, da sie zu Kompilierungsfehlern f\u00fchren w\u00fcrden.</li> </ul> <p>Wenn wir alles richtig gemacht haben, sollten in der Klasse <code>BookService</code> keine Kompilierungsfehler mehr auftreten.</p> <p>Die Methode <code>SeedDatabase</code> rufen wir beim Start der Anwendung auf, damit die Buch- und Genre-Daten in die Datenbank geladen werden. Dies kann am einfachsten in der Methode <code>OnLaunched</code> in der Datei <code>App.xaml.cs</code> geschehen.</p> App.xaml.cs<pre><code>protected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)\n{\n    m_window = new MainWindow();\n    new BookService().SeedDatabase();\n    m_window.Activate();\n}\n</code></pre>"},{"location":"labor/5-mvvm/index_ger/#viewmodel","title":"ViewModel","text":"<p>Erstellen wir die neue Klasse <code>BooksPageViewModel</code>, die zu <code>BooksPage</code> geh\u00f6rt, in einem neuen Ordner namens <code>ViewModels</code>. Diese Klasse \u00fcbernimmt \u2013 ganz klassisch f\u00fcr ein ViewModel \u2013 den Zustand der Ansicht sowie die darauf ausf\u00fchrbaren Operationen, also die Darstellungslogik f\u00fcr die <code>BooksPage</code>-Ansicht.</p> <p>Wenn wir dar\u00fcber nachdenken, enth\u00e4lt <code>BooksPage</code> die folgenden Zustandsinformationen:</p> <ul> <li>Die Liste der B\u00fccher</li> <li>Die Liste der Genres im Dropdown-Men\u00fc</li> <li>Das aktuell ausgew\u00e4hlte Genre</li> </ul> <p>Diese Informationen f\u00fcgen wir als Eigenschaften zur Klasse <code>BooksPageViewModel</code> hinzu und implementieren die Benachrichtigung \u00fcber Eigenschafts\u00e4nderungen mit der Hilfe der Schnittstelle <code>INotifyPropertyChanged</code>, wie wir es im vorherigen Labor gelernt haben, um die Datenbindung zu unterst\u00fctzen.</p> <pre><code>using Lab.Mvvm.Models;\n\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace Lab.Mvvm.ViewModels;\n\npublic class BooksPageViewModel : INotifyPropertyChanged\n{\n    private List&lt;Book&gt; _books;\n    public List&lt;Book&gt; Books\n    { \n        get =&gt; _books;\n        set =&gt; SetProperty(ref _books, value);\n    }\n\n    private List&lt;string&gt; _genres;\n    public List&lt;string&gt; Genres\n    {\n        get =&gt; _genres;\n        set =&gt; SetProperty(ref _genres, value);\n    }\n\n    private string _selectedGenre;\n    public string SelectedGenre\n    { \n        get =&gt; _selectedGenre;\n        set =&gt; SetProperty(ref _selectedGenre, value);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual bool SetProperty&lt;T&gt;(ref T property, T value, [CallerMemberName] string propertyName = null)\n    {\n        if (object.Equals(property, value))\n            return false;\n        property = value;\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n        return true;\n    }\n}\n</code></pre> <p>SetProperty</p> <p>Die Methode <code>SetProperty</code> ist eine Hilfsfunktion, die das Setzen von Eigenschaften und die Benachrichtigung \u00fcber \u00c4nderungen vereinfacht.</p> <p>Der R\u00fcckgabewert ist <code>true</code>, wenn sich der Wert der Eigenschaft ge\u00e4ndert hat, und <code>false</code>, wenn nicht. Das hilft sp\u00e4ter zu entscheiden, ob sich eine Eigenschaft tats\u00e4chlich ge\u00e4ndert hat.</p> <p>Das Schl\u00fcsselwort <code>ref</code> erlaubt der Methode, den Wert der Variablen direkt zu \u00e4ndern (es wird nicht nur die Referenz \u00fcbergeben, sondern die Methode kann auch \u00e4ndern, worauf diese Referenz zeigt).</p> <p>Das Attribut <code>CallerMemberName</code> \u00fcbergibt automatisch den Namen des aufrufenden Elements (hier der Property), sodass man nicht bei jeder Eigenschaft den Namen manuell angeben muss.</p> <p>Das Laden der Daten erfolgt mit Hilfe der Klasse <code>BookService</code> (scrollen wir nach oben in der Anleitung und schauen wir uns im Einf\u00fchrungsbild zur MVVM-Architektur an, dass tats\u00e4chlich das ViewModel die Service-Klasse(n) verwendet). Instanziieren wir die Klasse <code>BookService</code>, und laden wir die Genres sowie die B\u00fccher im Konstruktor des ViewModels.</p> <pre><code>private readonly BookService _booksService;\n\npublic BooksPageViewModel()\n{\n    _booksService = new BookService();\n    Genres = _booksService.GetGenres();\n    LoadBooks();\n}\n\nprivate void LoadBooks()\n{\n    // Das Setzen der Books-Eigenschaft l\u00f6st das INPC PropertyChanged-Ereignis aus (siehe Setter der Books-Eigenschaft oben) \u2013 die Ansicht wird aktualisiert\n    Books = _booksService.GetBooks(SelectedGenre);\n}\n</code></pre> <p>Das Laden der B\u00fccher muss nicht nur im Konstruktor erfolgen, sondern auch im Setter der <code>SelectedGenre</code>-Eigenschaft. Wenn sich das ausgew\u00e4hlte Genre \u00e4ndert, m\u00fcssen die B\u00fccher entsprechend neu geladen werden. Im Setter von <code>SelectedGenre</code> soll die Methode <code>LoadBooks</code> aufgerufen werden, wenn sich der Wert tats\u00e4chlich ge\u00e4ndert hat.</p> <pre><code>private string _selectedGenre;\npublic string SelectedGenre\n{\n    get =&gt; _selectedGenre;\n    set\n    {\n        if (SetProperty(ref _selectedGenre, value))\n            LoadBooks();\n    }\n}\n</code></pre>"},{"location":"labor/5-mvvm/index_ger/#view","title":"View","text":"<p>Jetzt muss nur noch die Ansicht angepasst werden, sodass sie das ViewModel verwendet.</p> <p>F\u00fcgen wir in der Datei <code>BooksPage.xaml.cs</code> eine neue, readonly Eigenschaft vom Typ <code>BooksPageViewModel</code> hinzu, und weisen wir ihr eine neue Instanz von <code>BooksPageViewModel</code> zu.</p> <pre><code>public BooksPageViewModel ViewModel { get; } = new BooksPageViewModel();\n</code></pre> <p>readonly property vs getter-only property</p> <p>Erinnern wir uns daran, dass es einen wichtigen Unterschied zwischen einer automatisch implementierten readonly Eigenschaft (die einmalig initialisiert wird) und einer Eigenschaft mit nur einem Getter gibt. Im obigen Beispiel verwenden wir eine automatisch implementierte readonly Eigenschaft, was bedeutet, dass der Wert der <code>ViewModel</code>-Eigenschaft nur einmalig beim Erstellen gesetzt wird. Im Gegensatz dazu w\u00fcrde eine Getter-only Eigenschaft \u2013 wie z.\u202fB. <code>public BooksPageViewModel ViewModel =&gt; new BooksPageViewModel();</code> \u2013 bei jedem Zugriff eine neue Instanz erzeugen, was zu unerw\u00fcnschtem Verhalten f\u00fchren w\u00fcrde.</p> <p>Im <code>BooksPage.xaml</code> k\u00f6nnen wir ab jetzt die <code>ViewModel</code>-Eigenschaft f\u00fcr Datenverbindung verwenden.</p> <ul> <li> <p>Konzentrieren wir uns zun\u00e4chst auf das <code>ComboBox</code>-Element:</p> <ul> <li>Die Eigenschaften <code>SelectedItem</code> und <code>ItemsSource</code> wurden in der Ausgangsl\u00f6sung noch manuell im Code-Behind gesetzt. Konvertieren wir ihre Behandlung in eine auf Datenverbindung basierende L\u00f6sung: Binden wir sie an die Eigenschaften des im Code-Behind definierten ViewModel-Objekts, entsprechend dem MVVM-Muster.</li> <li>Entfernen wir die <code>SelectionChanged</code>-Ereignisabonnement im XAML sowie die Methode <code>GenreFilterComboBox_SelectionChanged</code> im Code-Behind, da diese durch die Datenverbindung von <code>SelectedItem</code> \u00fcberfl\u00fcssig geworden ist.</li> </ul> <pre><code>&lt;ComboBox x:Name=\"genreFilterComboBox\"\n        Grid.Row=\"1\"\n        PlaceholderText=\"Filter Genre\"\n        ItemsSource=\"{x:Bind ViewModel.Genres}\"\n        SelectedItem=\"{x:Bind ViewModel.SelectedGenre, Mode=TwoWay}\" /&gt;\n</code></pre> </li> <li> <p>Auch beim Clear-Button entfernen wir die <code>Click</code>-Ereignisabonnement im XAML sowie den <code>GenreFilterComboBox_SelectionChanged</code>-Ereignishandler im Code-Behind. Das gew\u00fcnschte Verhalten wird sp\u00e4ter im ViewModel implementiert.</p> <pre><code>&lt;Button x:Name=\"clearGenreFilterButton\"\n        Content=\"Clear\" /&gt;\n</code></pre> </li> <li> <p>Auch in <code>ItemsView</code> m\u00fcssen wir Datenverbindung f\u00fcr die <code>ItemsSource</code>-Eigenschaft verwenden.</p> <pre><code>&lt;ItemsView x:Name=\"booksGridView\"\n        Grid.Row=\"2\"\n        ItemsSource=\"{x:Bind ViewModel.Books, Mode=OneWay}\"&gt;\n    ...\n&lt;/ItemsView&gt;\n</code></pre> </li> </ul> Verwendung klassisches Binding <p>Wenn wir klassisches Binding anstelle von <code>x:Bind</code> verwenden w\u00fcrden, m\u00fcssten wir die <code>DataContext</code>-Eigenschaft des jeweiligen Steuerelements/der Seite auf eine Instanz des ViewModels setzen.</p> <p>Probieren wir es aus!</p> <p>Unsere Anwendung sollte nun wie zuvor funktionieren (mit Ausnahme der Clear-Knopf), aber jetzt folgt die Architektur der Anwendung dem MVVM-Muster.</p>"},{"location":"labor/5-mvvm/index_ger/#zusammenfassung","title":"Zusammenfassung","text":"<p>Lassen wir uns unsere L\u00f6sung bewerten, auch den Code ansehen. In unserer urspr\u00fcnglichen L\u00f6sung hatten wir nur eine Page-Klasse, in der sowohl die Darstellung (.xaml) als auch die Anwendungslogik und Darstellungslogik gemischt waren (die letzten beiden in der Page Code-Behind-Datei). In unserer MVVM-basierten L\u00f6sung:</p> <ul> <li>In der Page bleibt nur die Darstellung (View), die Code-Behind-Datei ist praktisch leer (sie enth\u00e4lt nur ein ViewModel).</li> <li>Die Anwendungslogik wurde in eine Service-Klasse ausgelagert.</li> <li>Die Darstellungslogik der Seite wurde in eine ViewModel-Klasse verschoben (und die View bindet an diese).</li> </ul> <p>Neben der besseren \u00dcbersichtlichkeit hat dieser Ansatz den Hauptvorteil, dass die Verbindung zwischen ViewModel und View lockerer ist, sodass das ViewModel leichter testbar und wiederverwendbar ist. Das ViewModel ist nicht vom View abh\u00e4ngig, sodass es leicht ver\u00e4ndert oder ersetzt werden kann, ohne dass das View ge\u00e4ndert werden muss.</p>"},{"location":"labor/5-mvvm/index_ger/#2-aufgabe-mvvmtoolkit","title":"2. Aufgabe - MVVMToolkit","text":"<p>Das MVVM-Muster wird selten ausschlie\u00dflich mit dem .NET-Framework implementiert. Es ist sinnvoll, eine MVVM-Bibliothek zu verwenden, die unseren Code kompakter, \u00fcbersichtlicher macht und weniger Boilerplate-Code erfordert. Einige der bekanntesten Bibliotheken sind:</p> <ul> <li>MVVM Toolkit: MVVM-Bibliothek, die von Microsoft betreut wird.</li> <li>Prism: Fr\u00fcher von Microsoft betreut und sehr verbreitet, wird jetzt von externen Entwicklern gepflegt und ist inzwischen kostenpflichtig.</li> <li>ReactiveUI: Verwendet die Reactive Extensions (Rx) Bibliotheken zur Verwaltung des ViewModel-Status und f\u00fcr das Datenverbinding zwischen View und ViewModel. Diese Bibliothek bietet die meisten Funktionen, ist aber auch die am schwersten zu erlernende.</li> <li>Uno.Extensions: Basiert auf dem MVVM Toolkit, enth\u00e4lt jedoch zus\u00e4tzliche Funktionen, die die L\u00fccken im WinUI-Framework f\u00fcllen.</li> <li>Windows Template Studio: Ein Visual Studio-Plugin, das eine Vorlage f\u00fcr komplexere WinUI-Anwendungsprojekte bereitstellt.</li> </ul> <p>Im Labor werden wir das von Microsoft betreute MVVM Toolkit ausprobieren.</p>"},{"location":"labor/5-mvvm/index_ger/#installation","title":"Installation","text":"<p>Um das MVVM Toolkit zu installieren, \u00f6ffnen wir den NuGet Package Manager in Visual Studio (Rechtsklick auf das Projekt und dann \"Manage NuGet Packages\") und suchen wir nach dem Paket <code>CommunityToolkit.Mvvm</code>.   Es ist wichtig, dass wir die Version 8.4.0 in den Laborr\u00e4umen installieren! Dies wird im Projektdatei die folgende <code>PackageReference</code>-Zeile erstellen (wir k\u00f6nnen sie auch manuell hinzuf\u00fcgen, anstatt die oben beschriebenen Schritte zu befolgen und sie zu den anderen <code>PackageReference</code>-Elementen hinzuzuf\u00fcgen):</p> <pre><code>&lt;PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.4.0\" /&gt;\n</code></pre>"},{"location":"labor/5-mvvm/index_ger/#observableobject-und-observableproperty","title":"ObservableObject und ObservableProperty","text":"<p>In unserer <code>BooksPageViewModel</code>-Klasse ist die Implementierung von <code>INotifyPropertyChanged</code> ziemlich umfangreich. Anstatt die <code>INotifyPropertyChanged</code>-Schnittstelle direkt zu implementieren, k\u00f6nnen wir die <code>ObservableObject</code>-Klasse verwenden, die diese Schnittstelle bereits implementiert und verschiedene Hilfsmethoden enth\u00e4lt, die das Setzen von Eigenschaften und die Benachrichtigung \u00fcber \u00c4nderungen erleichtern. Au\u00dferdem haben wir die M\u00f6glichkeit, das <code>ObservableProperty</code>-Attribut zu verwenden, das einen Code-Generator steuert, sodass Eigenschaften automatisch ohne manuell geschriebenen Boilerplate-Code erstellt werden k\u00f6nnen, nur durch das Deklarieren der Felder mit Attributen. F\u00fchren wir die folgenden Anpassungen durch:</p> <ul> <li> <p>Die <code>BooksPageViewModel</code>-Klasse sollte von der <code>ObservableObject</code>-Klasse aus dem Namensraum <code>CommunityToolkit.Mvvm.ComponentModel</code> abgeleitet werden.</p> </li> <li> <p>Um den Source-Generator zu verwenden, muss die Klasse mit dem <code>partial</code>-Schl\u00fcsselwort versehen werden, damit der generierte Code und der manuelle Code in separaten Dateien platziert werden k\u00f6nnen.</p> </li> <li> <p>Statt der vollst\u00e4ndigen Property-Syntax reicht es aus, nur die Felder zu behalten, auf denen wir das <code>ObservableProperty</code>-Attribut anwenden.</p> <pre><code>public partial class BooksPageViewModel : ObservableObject\n{\n    // ...\n\n    [ObservableProperty]\n    private List&lt;Book&gt; _books;\n\n    [ObservableProperty]\n    private List&lt;string&gt; _genres;\n\n    [ObservableProperty]\n    private string _selectedGenre;\n\n    // ...\n}\n</code></pre> </li> </ul> <p>Es ist wichtig, dass wir in der vorherigen <code>BooksPageViewModel</code>-L\u00f6sung die Membervariablen (au\u00dfer <code>_booksService</code>), die Eigenschaften (denn diese werden vom Code-Generator erzeugt), das <code>PropertyChanged</code>-Ereignis und die <code>SetProperty</code>-Methode l\u00f6schen.  Nach der Umstellung sollten wir das Projekt einmal bauen (z.B. \u00fcber das Men\u00fc \"Build/Build Solution\"). Ohne diesen Schritt werden die Kompilierungsfehler nicht behoben, da Visual Studio viele Fehler im Code anzeigen wird. Das ist logisch, denn die gebundenen Properties werden erst beim Bauen des Projekts vom Code-Generator in einer \"versteckten\" Datei erstellt.</p> <p>Wir k\u00f6nnen \u00fcberpr\u00fcfen, welcher Code generiert wurde, indem wir z.B. mit F12 zur <code>Genres</code>-Property navigieren (in der XAML-Datei, wenn der Cursor auf der Bindung <code>ViewModel.Genres</code> steht).</p> <p>Verwendung des <code>ObservableProperty</code>-Attributs auf eine Eigenschaft</p> <p>Das <code>ObservableProperty</code>-Attribut kann statt auf Felder auch auf Eigenschaften angewendet werden, mit Hilfe einer neuen C#-Sprachfunktion. Daf\u00fcr m\u00fcsste jedoch eine Preview-Version von C# verwendet werden, was wir in diesem Jahr noch auslassen.</p> <p>Probieren wir es aus!</p> <p>Wir stellen fest, dass die B\u00fccher geladen werden, aber bei der Auswahl eines Genres werden die B\u00fccher nicht erneut geladen. Ja, das liegt daran, dass wir fr\u00fcher bei einer \u00c4nderung des <code>SelectedGenre</code> die Methode <code>LoadBooks</code> aufgerufen haben (dies wird vom generierten Code nicht gemacht).</p> <p>Wir haben drei M\u00f6glichkeiten:</p> <ol> <li>Wir \u00e4ndern die <code>SelectedGenre</code>-Eigenschaft zur\u00fcck zu einer nicht-generierten Version, sodass wir den Setter selbst definieren k\u00f6nnen.</li> <li>Wir abonnieren das <code>PropertyChanged</code>-Ereignis im ViewModel im Konstruktor und rufen im Ereignishandler die Methode <code>LoadBooks</code> auf, wenn sich die <code>SelectedGenre</code>-Eigenschaft \u00e4ndert.</li> <li>Wir verwenden die vom Code-Generator erzeugten <code>partial</code>-Methoden, mit denen wir das Verhalten der Setter erweitern k\u00f6nnen.</li> </ol> <p>Option 3 scheint die einfachste zu sein, daf\u00fcr m\u00fcssen wir jedoch das Konzept der <code>partial</code>-Methoden verstehen (dies wurde im Rahmen des Kurses noch nicht behandelt). <code>Partial</code>-Methoden sind solche Methoden, deren Deklaration und Definition in verschiedenen Dateien einer bestimmten <code>partial</code>-Klasse enthalten sind und die der Compiler automatisch verbindet. Au\u00dferdem m\u00fcssen <code>partial</code>-Methoden nicht zwingend implementiert werden. In unserem Fall deklariert der Code-Generator sie, ruft sie in den Settern auf, und wir k\u00f6nnen sie in der <code>BooksPageViewModel</code>-Klasse implementieren.</p> <p>Erstellen wir eine Implementierung f\u00fcr die <code>OnSelectedGenreChanged(string value)</code>-<code>partial</code>-Methode, in der wir die <code>LoadBooks</code>-Methode aufrufen:</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value) =&gt; LoadBooks();\n</code></pre> <p>Wir haben nichts weiter zu tun, der generierte Code ruft es bereits auf.</p> <p>Probieren wir es aus!</p> <p>Nun werden die B\u00fccher beim Ausw\u00e4hlen des Genres erneut geladen.</p>"},{"location":"labor/5-mvvm/index_ger/#3-aufgabe-command","title":"3. Aufgabe - Command","text":"<p>Bei der Erstellung von Benutzeroberfl\u00e4chen haben wir zwei Aufgaben:</p> <ul> <li>Anzeige von Daten auf der Benutzeroberfl\u00e4che. Dies haben wir in unserer MVVM-basierten L\u00f6sung elegant mit Datenverbindung gel\u00f6st.</li> <li>Behandlung der Benutzerinteraktionen/Befehle. In unserer urspr\u00fcnglichen L\u00f6sung wurde dies durch Ereignishandler gel\u00f6st, die wir ebenfalls \u201eelegant\u201c vollst\u00e4ndig entfernt haben (weshalb der <code>Clear</code>-Knopf nicht funktioniert). Im Folgenden untersuchen wir, welche L\u00f6sung im Rahmen des MVVM-Musters daf\u00fcr angewendet werden kann (Spoiler: Verbindung von Commands oder Operationen, die im ViewModel definiert sind, zur View).</li> </ul> <p>Das ViewModel ver\u00f6ffentlicht typischerweise die ausf\u00fchrbaren Operationen an die View. Dies kann durch \u00f6ffentliche Methoden oder durch Objekte, die das <code>ICommand</code>-Interface implementieren, erfolgen.</p> <p>ICommand</p> <p>Der Vorteil von <code>ICommand</code> besteht darin, dass es eine Operation und ihren Ausf\u00fchrbarkeitszustand in einem Objekt zusammenfasst, wobei auch ein Ereignis \u00fcber \u00c4nderungen dieses Zustands ver\u00f6ffentlicht wird.</p> <p><pre><code>public interface ICommand\n{\n    event EventHandler? CanExecuteChanged;\n    bool CanExecute(object? parameter);\n    void Execute(object? parameter);\n}\n</code></pre> Diese Mechanismus wird auch vom <code>Button</code>-Steuerelement verwendet, dessen <code>Command</code>-Eigenschaft wir den im ViewModel definierten Befehlen zuweisen k\u00f6nnen.</p> <p>Von den in <code>ICommand</code> definierten Operationen ist <code>Execute</code> die wichtigste f\u00fcr uns, die aufgerufen wird, wenn der Befehl ausgef\u00fchrt wird. Mit <code>CanExecute</code> kann die Benutzeroberfl\u00e4che den Befehl abfragen, ob er zu einem bestimmten Zeitpunkt ausf\u00fchrbar ist (z. B. wird den Knopf je nach Zustand deaktiviert oder aktiviert). Mit dem Ereignis <code>CanExecuteChanged</code> kann der Befehl der Benutzeroberfl\u00e4che signalisieren, dass sich der Zustand <code>CanExecute</code> ge\u00e4ndert hat, und die Benutzeroberfl\u00e4che muss den deaktivierten/aktivierten Zustand aktualisieren.</p>"},{"location":"labor/5-mvvm/index_ger/#verwendung-von-icommand","title":"Verwendung von ICommand","text":"<p>Erstellen wir eine <code>ICommand</code>-Eigenschaft in der <code>BooksPageViewModel</code>-Klasse, die den ausgew\u00e4hlten Genre auf einen \"nicht gesetzt\"-Zustand setzt (dies wird sp\u00e4ter bei dem Clear-Button verwendet). F\u00fcr die Implementierung werden wir die <code>RelayCommand</code>-Klasse aus dem MVVMToolkit verwenden, die im Namensraum <code>CommunityToolkit.Mvvm.Input</code> zu finden ist. Wir erstellen eine neue Instanz davon im Konstruktor von <code>BooksPageViewModel</code>, wo wir die Ausf\u00fchrung des Befehls in einem Lambda-Ausdruck definieren (die <code>Execute</code>-Methode des Befehls ruft dieses Lambda auf).</p> BooksPageViewModel.cs<pre><code>public BooksPageViewModel()\n{\n    // ...\n\n    ClearFilterCommand = new RelayCommand(() =&gt; SelectedGenre = null);\n}\n\npublic ICommand ClearFilterCommand { get; }\n</code></pre> <p>Binden wir die <code>ClearFilterCommand</code>-Eigenschaft an die <code>Command</code>-Eigenschaft des Clear-Buttons.</p> BooksPage.xaml<pre><code>&lt;Button Content=\"Clear\"\n        Command=\"{x:Bind ViewModel.ClearFilterCommand}\" /&gt;\n</code></pre> <p>Beachten wir, wie elegant die L\u00f6sung ist. Wir haben genauso gearbeitet wie beim Anzeigen der Daten w\u00e4hrend des Labors: Wir haben in der View eine Datenverbindung auf die Eigenschaft im ViewModel angewendet (nur dass es sich diesmal um ein Command-Objekt handelt).</p> <p>Probieren wir es aus! Der Clear-Button funktioniert, das ausgew\u00e4hlte Genre wird gel\u00f6scht.</p>"},{"location":"labor/5-mvvm/index_ger/#icommand-ausfuhrbarkeitszustand","title":"ICommand-Ausf\u00fchrbarkeitszustand","text":"<p>Was noch nicht funktioniert, ist das Deaktivieren des Buttons, wenn kein Genre ausgew\u00e4hlt wurde.</p> <p>Dazu geben wir im Konstruktor der <code>RelayCommand</code>-Klasse eine <code>Func&lt;bool&gt;</code>-Funktion als zweiten Parameter an, die angibt, ob der Befehl ausgef\u00fchrt werden kann oder nicht (die <code>CanExecute</code>-Methode des Befehls ruft diese Lambda-Funktion auf).</p> Konstruktor von BooksPageViewModel.cs<pre><code>ClearFilterCommand = new RelayCommand(\n    execute: () =&gt; SelectedGenre = null,\n    canExecute: () =&gt; SelectedGenre != null);\n</code></pre> <p>Note</p> <p>Im obigen Code sind <code>execute:</code> und <code>canExecute:</code> Beispiele f\u00fcr die Verwendung eines allgemeinen C#-Sprachtools: In C# ist es bei der \u00dcbergabe von Parametern zu einer Funktionsaufruf m\u00f6glich, den Namen des Parameters vor dem <code>:</code> anzugeben.  Dies wird selten verwendet, da es mehr Tippen erfordert, aber manchmal, wenn es die Lesbarkeit des Codes erheblich verbessert, k\u00f6nnen wir es in Betracht ziehen.</p> <p>Allerdings wird die UI nur dann aktualisiert - und damit die im <code>canExecute</code> angegebene Funktion nur dann aufgerufen -, wenn das <code>ICommand.CanExecuteChanged</code>-Ereignis ausgel\u00f6st wird.</p> <p>Dieses Ereignis k\u00f6nnen wir durch die <code>IRelayCommand</code>-Schnittstelle (das auch <code>ICommand</code> ist) selbst ausl\u00f6sen, wenn wir die <code>NotifyCanExecuteChanged()</code>-Methode im Setter der <code>SelectedGenre</code>-Eigenschaft aufrufen.</p> <p>\u00c4ndern wir den Typ der Eigenschaft auf <code>IRelayCommand</code>.</p> BooksPageViewModel.cs<pre><code>public IRelayCommand ClearFilterCommand { get; }\n</code></pre> <p>Die <code>NotifyCanExecuteChanged()</code>-Methode rufen wir dann in unserer bereits existierenden <code>OnSelectedGenreChanged</code> partial-Methode auf.</p> BooksPageViewModel.cs<pre><code>partial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n    ClearFilterCommand.NotifyCanExecuteChanged();\n}\n</code></pre> <p>Probieren wir es aus! Jetzt wird der Clear-Knopf deaktiviert, wenn kein Genre ausgew\u00e4hlt ist.</p>"},{"location":"labor/5-mvvm/index_ger/#command-mit-mvvmtoolkit-code-generator","title":"Command mit MVVMToolkit Code-Generator","text":"<p>Anstatt die <code>RelayCommand</code>-Eigenschaft manuell zu deklarieren und zu instanziieren, k\u00f6nnen wir auch das <code>RelayCommand</code>-Attribut auf einer Methode verwenden, die im Hintergrund automatisch den ben\u00f6tigten Code mit Hilfe des Code-Generators erzeugt.</p> <ul> <li> <p>L\u00f6schen wir die zuvor verwendete <code>ClearFilterCommand</code>-Eigenschaft und die Instanziierung im Konstruktor.</p> </li> <li> <p>Erstellen wir stattdessen eine neue Methode namens <code>ClearFilter</code>, die mit dem <code>RelayCommand</code>-Attribut im Hintergrund automatisch die ben\u00f6tigte Command-Eigenschaft generiert.</p> BooksPageViewModel.cs<pre><code>[RelayCommand]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> <li> <p>F\u00fcr die <code>CanExecute</code>-Logik k\u00f6nnen wir eine andere Methode oder Eigenschaft aufrufen, die angibt, ob der Befehl ausf\u00fchrbar ist.</p> BooksPageViewModel.cs<pre><code>private bool IsClearFilterCommandEnabled =&gt; SelectedGenre != null;\n\n[RelayCommand(CanExecute = nameof(IsClearFilterCommandEnabled))]\nprivate void ClearFilter() =&gt; SelectedGenre = null;\n</code></pre> </li> </ul> <p>Probieren wir es aus! Es sollte wie bisher funktionieren (nur jetzt wird die <code>ClearFilterCommand</code>-Eigenschaft vom Code-Generator erstellt).</p> <p>Au\u00dferdem kann <code>NotifyCanExecuteChanged</code> auch deklarativ durch Attribute ausgel\u00f6st werden. In unserem Fall verbinden wir die \u00c4nderung von <code>SelectedGenre</code> mit der Ausf\u00fchrbarkeit des <code>ClearFilterCommand</code> mittels <code>NotifyCanExecuteChangedFor</code>. So k\u00f6nnen wir das Ausl\u00f6sen des Ereignisses aus unserer <code>OnSelectedGenreChanged</code>-Partial-Methode entfernen.</p> BooksPageViewModel.cs<pre><code>[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(ClearFilterCommand))]\nprivate string _selectedGenre;\n\npartial void OnSelectedGenreChanged(string value)\n{\n    LoadBooks();\n}\n</code></pre> <p>Probieren wir es aus! Es sollte wie zuvor funktionieren.</p> Wenn das Command-Muster nicht direkt unterst\u00fctzt wird <p>Nicht alle Steuerelemente unterst\u00fctzen das <code>Command</code>-Muster direkt. In diesem Fall haben wir zwei M\u00f6glichkeiten:</p> <ol> <li> <p>Wir k\u00f6nnen <code>x:Bind</code>-Datenverbindung verwenden, die nicht nur f\u00fcr Eigenschaften, sondern auch f\u00fcr Ereignishandler genutzt werden kann. So k\u00f6nnen wir auch einen Ereignishandler im ViewModel an das Steuerelement-Ereignis binden. Der Nachteil ist, dass dies das MVVM-Muster verletzen kann, da das ViewModel vom View abh\u00e4ngt (z. B. bez\u00fcglich der Ereignishandler-Signatur und der Parameter).</p> </li> <li> <p>Wir verwenden weiterhin das <code>Command</code>-Muster, aber wir k\u00f6nnen das gew\u00fcnschte Ereignis des Steuerelements mit einem sogenannten Behavior an das ViewModel binden. Ein Behavior ist eine Klasse, die es erm\u00f6glicht, das Verhalten eines Steuerelements zu \u00e4ndern, ohne den Steuerelement-Code direkt zu \u00e4ndern. In diesem Fall m\u00fcssen wir das Microsoft.Xaml.Behaviors-Paket installieren, das bereits ein Behavior enth\u00e4lt, mit dem wir Ereignisse in Command-Aufrufe umwandeln k\u00f6nnen.</p> </li> </ol>"},{"location":"labor/5-mvvm/index_ger/#zusammenfassung_1","title":"Zusammenfassung","text":"<p>Im Labor haben wir das Ausgangsprojekt in das MVVM-Muster umgewandelt, wodurch die Verantwortlichkeiten zwischen View und ViewModel getrennt wurden:</p> <ul> <li>Das ViewModel enth\u00e4lt den Zustand der Ansicht und die darauf ausf\u00fchrbaren Aktionen, w\u00e4hrend die View nur f\u00fcr die Darstellung der Benutzeroberfl\u00e4che verantwortlich ist.</li> <li>Zwischen View und ViewModel besteht eine lose Kopplung durch Datenverbindung, sodass das ViewModel leichter testbar und wiederverwendbar ist.</li> <li>Das ViewModel ist nicht vom View abh\u00e4ngig, sodass es leicht ge\u00e4ndert oder ersetzt werden kann, ohne dass die View ge\u00e4ndert werden muss.</li> <li>Das ViewModel enth\u00e4lt auch nicht die gesamte Gesch\u00e4ftslogik, wie zum Beispiel den Datenzugriff, sondern diese ist in einer separaten Service-Klasse untergebracht.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/","title":"6. Tervez\u00e9si mint\u00e1k (kiterjeszthet\u0151s\u00e9g)","text":""},{"location":"labor/6-tervezesi-mintak/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9ljai (egy \u00f6sszetettebb, \u00e9letszer\u0171 p\u00e9lda alapj\u00e1n):</p> <ul> <li>Kiterjeszthet\u0151s\u00e9get, \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got, k\u00f3d \u00e1tl\u00e1that\u00f3s\u00e1got \u00e9s karbantarthat\u00f3s\u00e1got seg\u00edt\u0151 n\u00e9h\u00e1ny tervez\u00e9si alapelv gyakorl\u00e1sa: SRP, OPEN-CLOSED, DRY, KISS stb.</li> <li>N\u00e9h\u00e1ny, a kiterjeszthet\u0151s\u00e9ghez legink\u00e1bb kapcsol\u00f3d\u00f3 tervez\u00e9si minta alkalmaz\u00e1sa (Template Method, Strategy, Dependency Injection).</li> <li>Kiterjeszthet\u0151s\u00e9get \u00e9s \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got t\u00e1mogat\u00f3 tov\u00e1bbi technik\u00e1k (pl. delegate/lambda kifejez\u00e9s) gyakorl\u00e1sa \u00e9s kombin\u00e1l\u00e1sa tervez\u00e9si mint\u00e1kkal.</li> <li>K\u00f3d refaktor\u00e1l\u00e1s gyakorl\u00e1sa.</li> </ul> <p>Kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok:</p> <ul> <li>Tervez\u00e9si mint\u00e1k: kiterjeszthet\u0151s\u00e9ghez kapcsol\u00f3d\u00f3 mint\u00e1k (bevezet\u0151, Template Method, Strategy), valamint a Dependency Injection \"minta\".</li> </ul>"},{"location":"labor/6-tervezesi-mintak/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Gyakorlat Linuxon vagy macOS alatt</p> <p>A gyakorlat anyag alapvet\u0151en Windowsra \u00e9s Visual Studiora k\u00e9sz\u00fclt, de az elv\u00e9gezhet\u0151 m\u00e1s oper\u00e1ci\u00f3s rendszereken is m\u00e1s fejleszt\u0151eszk\u00f6z\u00f6kkel (pl. VS Code, Rider, Visual Studio for Mac), vagy ak\u00e1r egy sz\u00f6vegszerkeszt\u0151vel \u00e9s CLI (parancssori) eszk\u00f6z\u00f6kkel. Ezt az teszi lehet\u0151v\u00e9, hogy a p\u00e9ld\u00e1k egy egyszer\u0171 Console alkalmaz\u00e1s kontextus\u00e1ban ker\u00fclnek ismertet\u00e9sre (nincsenek Windows specifikus elemek), a .NET 8 SDK pedig t\u00e1mogatott Linuxon \u00e9s macOS alatt. Hello World Linuxon.</p>"},{"location":"labor/6-tervezesi-mintak/#elmeleti-hatter-szemleletmod","title":"Elm\u00e9leti h\u00e1tt\u00e9r, szeml\u00e9letm\u00f3d *","text":"<p>A komplexebb alkalmaz\u00e1sok fejleszt\u00e9se sor\u00e1n sz\u00e1mos tervez\u0151i d\u00f6nt\u00e9st kell meghoznunk, melyek sor\u00e1n t\u00f6bb lehet\u0151s\u00e9g k\u00f6z\u00fcl is v\u00e1laszthatunk. Amennyiben ezen pontokban nem tartjuk szem el\u0151tt az alkalmaz\u00e1sunk k\u00f6nny\u0171 karbantarthat\u00f3s\u00e1g\u00e1t, illetve egyszer\u0171en megval\u00f3s\u00edthat\u00f3 tov\u00e1bbfejleszt\u00e9si lehet\u0151s\u00e9g\u00e9t, k\u00f6nnyen hamar r\u00e9m\u00e1lomm\u00e1 v\u00e1lhat a fejleszt\u00e9s. A megrendel\u0151i v\u00e1ltoztat\u00e1si \u00e9s b\u0151v\u00edt\u00e9si ig\u00e9nyek a k\u00f3d nagym\u00e9rt\u00e9k\u0171 folyamatos \u00e1t\u00edr\u00e1s\u00e1t/m\u00f3dos\u00edt\u00e1s\u00e1t ig\u00e9nylik: ennek sor\u00e1n \u00faj hib\u00e1k sz\u00fcletnek, illetve jelent\u0151s munk\u00e1t kell fektetni a k\u00f3d nagy l\u00e9pt\u00e9k\u0171 \u00fajratesztel\u00e9s\u00e9be is!</p> <p>A c\u00e9lunk az, hogy az ilyen v\u00e1ltoztat\u00e1si \u00e9s b\u0151v\u00edt\u00e9si ig\u00e9nyeket a k\u00f3d p\u00e1r j\u00f3l meghat\u00e1rozott pontj\u00e1ban t\u00f6rt\u00e9n\u0151 b\u0151v\u00edt\u00e9s\u00e9vel - a megl\u00e9v\u0151 k\u00f3d \u00e9rdemi m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl - meg tudjuk val\u00f3s\u00edtani. A kulcssz\u00f3: m\u00f3dos\u00edt\u00e1ssal szemben b\u0151v\u00edt\u00e9s. Ehhez kapcsol\u00f3d\u00f3an: amennyiben bizonyos logik\u00e1ink kiterjeszthet\u0151k, akkor azok \u00e1ltal\u00e1nosabbak is leszek, t\u00f6bb kontextusban k\u00f6nnyebben is fel tudjuk ezeket haszn\u00e1lni. \u00cdgy hosszabb t\u00e1von gyorsabban haladunk, r\u00f6videbb a k\u00f3d, elker\u00fclj\u00fck a k\u00f3dduplik\u00e1ci\u00f3t (ez\u00e1ltal k\u00f6nnyebben karbantarthat\u00f3 is a k\u00f3d).</p> <p>A tervez\u00e9si mint\u00e1k j\u00f3l bev\u00e1lt megold\u00e1sokat mutatnak bizonyos gyakran el\u0151fordul\u00f3 tervez\u00e9si probl\u00e9m\u00e1kra: ezen megold\u00e1sok abban seg\u00edtenek, hogy k\u00f3dunk k\u00f6nnyebben b\u0151v\u00edthet\u0151, karbantarthat\u00f3 \u00e9s min\u00e9l nagyobb m\u00e9rt\u00e9kben \u00fajrafelhaszn\u00e1lhat\u00f3 legyen. Jelen gyakorlat keret\u00e9ben azon mint\u00e1kra, tervez\u00e9si elvekre \u00e9s n\u00e9h\u00e1ny programoz\u00f3i eszk\u00f6zre f\u00f3kusz\u00e1lunk, melyek a fenti probl\u00e9m\u00e1kon seg\u00edtenek. Ugyanakkor ne ess\u00fcnk \u00e1t a l\u00f3 t\u00faloldal\u00e1ra: csak akkor \u00e9rdemes egy adott tervez\u00e9si mint\u00e1t bevetni, ha adott esetben val\u00f3s el\u0151nyt jelent az alkalmaz\u00e1sa. Ellenkez\u0151 esetben csak a megval\u00f3s\u00edt\u00e1s komplexit\u00e1s\u00e1t n\u00f6veli feleslegesen. Ennek t\u00fckr\u00e9ben nem is c\u00e9lunk (\u00e9s sokszor nincs is r\u00e1 lehet\u0151s\u00e9g\u00fcnk), hogy minden j\u00f6v\u0151beli kiterjeszthet\u0151s\u00e9gi ig\u00e9nyt el\u0151re meg\u00e9rezz\u00fcnk, illetve nagyon el\u0151re \u00e1tgondoljunk. A l\u00e9nyeg az, hogy ak\u00e1r egy egyszer\u0171 megold\u00e1sb\u00f3l kiindulva, az egyes probl\u00e9m\u00e1kat felismerve, a k\u00f3dunkat folyamatosan refaktor\u00e1ljuk \u00fagy, hogy az aktu\u00e1lis (funkcion\u00e1lis \u00e9s nemfunkcion\u00e1lis) k\u00f6vetelm\u00e9nyeknek \u00e9s el\u0151rel\u00e1t\u00e1sunk szerint a megfelel\u0151 pontokban tegy\u00fck k\u00f3dunkat k\u00f6nnyebben kiterjeszthet\u0151v\u00e9 \u00e9s \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1.</p> <p>Meg kell eml\u00edteni, hogy kapcsol\u00f3d\u00f3 tervez\u00e9si mint\u00e1k \u00e9s nyelvi eszk\u00f6z\u00f6k a k\u00f3dunk egys\u00e9gtesztelhet\u0151v\u00e9 t\u00e9tel\u00e9ben is nagym\u00e9rt\u00e9kben seg\u00edtenek: sok c\u00e9gn\u00e9l egy szoftverterm\u00e9k fejleszt\u00e9se eset\u00e9n (jogos) alapelv\u00e1r\u00e1s a fejleszt\u0151kt\u0151l, hogy nagy k\u00f3dlefedetts\u00e9g\u0171 egys\u00e9gteszteket (unit test) k\u00e9sz\u00edtsenek. Ennek kivitelez\u00e9se viszont gyakorlatilag lehetetlen, ha a k\u00f3dunk egyes egys\u00e9gei/oszt\u00e1lyai t\u00fal szoros csatol\u00e1sban vannak egym\u00e1ssal.</p>"},{"location":"labor/6-tervezesi-mintak/#0-feladat-ismerkedes-a-feladattal-es-a-kiindulo-alkalmazassal","title":"0. Feladat - Ismerked\u00e9s a feladattal \u00e9s a kiindul\u00f3 alkalmaz\u00e1ssal","text":"<p>Kl\u00f3nozzuk le a 6. laborhoz tartoz\u00f3 kiindul\u00f3 alkalmaz\u00e1s repositoryj\u00e1t:</p> <ul> <li>Nyissunk egy command prompt-ot</li> <li>Navig\u00e1ljunk el egy tetsz\u0151leges mapp\u00e1ba, p\u00e9ld\u00e1ul c:\\work\\NEPTUN</li> <li>Adjuk ki a k\u00f6vetkez\u0151 parancsot: <code>git clone https://github.com/bmeviauab00/lab-patterns-extensibility-kiindulo.git</code></li> <li>Nyissuk meg a Lab-Patterns-Extensibility.sln solutiont Visual Studio-ban.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/#a-feladat-ismertetese","title":"A feladat ismertet\u00e9se","text":"<p>A labor sor\u00e1n egy konzol alap\u00fa, adatfeldolgoz\u00f3 (pontosabban anonimiz\u00e1l\u00f3) alkalmaz\u00e1st fogunk a folyamatosan alakul\u00f3 ig\u00e9nyeknek megfelel\u0151en - k\u00fcl\u00f6nb\u00f6z\u0151 pontok ment\u00e9n \u00e9s k\u00fcl\u00f6nb\u00f6z\u0151 technik\u00e1kat alkalmazva - kiterjeszthet\u0151v\u00e9 tenni. Az els\u0151 feladat keret\u00e9ben az anonimiz\u00e1l\u00e1s fogalm\u00e1val is megismerked\u00fcnk.</p> <p>Az alkalmaz\u00e1s bemenete egy CSV sz\u00f6vegf\u00e1jl, mely minden sora egy adott szem\u00e9lyre vonatkoz\u00f3an tartalmaz adatokat. A f\u00e1jlrendszerben nyissuk meg a Data mapp\u00e1ban lev\u0151 us-500.csv f\u00e1jlt (duplakattal, vagy ak\u00e1r a Jegyzett\u00f6mb/Notepad alkalmaz\u00e1sban). Az l\u00e1tjuk, hogy \"\" k\u00f6z\u00f6tt, vessz\u0151vel elv\u00e1lasztva tal\u00e1lhat\u00f3k az egyes szem\u00e9lyekre vonatkoz\u00f3 adatok (ezek nem val\u00f3sak). N\u00e9zz\u00fck az els\u0151 sort:</p> <pre><code>\"James\",\"Rhymes\",\"Benton, John B Jr\",\"6649 N Blue Gum St\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"504-621-8927\",\"504-845-1427\",\"30\",\"65\",\"Heart-related\",\"jRhymes@gmail.com\"\n</code></pre> <p>Az els\u0151 sorban lev\u0151 szem\u00e9lyt James Rhymesnak nevezik, a \"Benton, John B Jr\" c\u00e9gn\u00e9l dolgozik, majd n\u00e9h\u00e1ny c\u00edmre vonatkoz\u00f3 mez\u0151 tal\u00e1lhat\u00f3, 30 \u00e9ves, 65 kg a tests\u00falya. Az ezt k\u00f6vet\u0151 mez\u0151 azt mondja meg, milyen s\u00falyosabb betegs\u00e9ge van (a fenti sorban ez \"Heart-related\"). Az utols\u00f3 oszlop pedig a szem\u00e9ly e-mail c\u00edm\u00e9t tartalmazza.</p> Adatok forr\u00e1sa \u00e9s pontos form\u00e1tuma * <p>Az adatok forr\u00e1sa: https://www.briandunning.com/sample-data/, p\u00e1r oszloppal (kor, s\u00faly, betegs\u00e9g) kieg\u00e9sz\u00edtve. A mez\u0151k sorrendje: First Name, Last Name, Company, Address, City, County (where applicable), State/Province (where applicable), ZIP/Postal Code, Phone 1, Phone 2, Age, Weight, Illness, Email</p> <p>Az alkalmaz\u00e1s alapfeladata, hogy ezeket az adatokat az aktu\u00e1lis ig\u00e9nyeknek megfelel\u0151en anonimiz\u00e1lja, majd egy kimeneti CSV sz\u00f6vegf\u00e1jlba ki\u00edrja. Az anonimiz\u00e1l\u00e1s c\u00e9lja, hogy az adatok \u00e1talak\u00edt\u00e1s\u00e1val adathalmazban lev\u0151 szem\u00e9lyeket beazonos\u00edthatatlann\u00e1 tegye, de olyan m\u00f3don, hogy az adatokb\u00f3l m\u00e9gis lehessen kimutat\u00e1sokat k\u00e9sz\u00edteni. Az anonimiz\u00e1l\u00e1s egy k\u00fcl\u00f6n\u00e1ll\u00f3, nagyon komoly \u00e9s sok kih\u00edv\u00e1st rejt\u0151 adatfeldolgoz\u00e1si szakter\u00fclet. A gyakorlat keret\u00e9ben nem c\u00e9lunk, hogy val\u00f3s k\u00f6rnyezetben is haszn\u00e1lhat\u00f3, vagy ak\u00e1r minden tekintetben \u00e9rtelmes megold\u00e1sokat dolgozzunk ki. Sz\u00e1munkra tulajdonk\u00e9ppen csak egy valamilyen adatfeldolgoz\u00f3 algoritmus \"bevet\u00e9se\" a fontos a mint\u00e1k bemutat\u00e1s\u00e1hoz. Ez tal\u00e1n kicsit \"izgalmasabb\" keretet ad, mint egy egyszer\u0171 adatsz\u0171r\u00e9s/sorrendez\u00e9s/stb. alap\u00fa adatfeldolgoz\u00e1s (melyeket r\u00e1ad\u00e1sul a .NET m\u00e1r eleve be\u00e9p\u00edtve t\u00e1mogat).</p> <p>P\u00e1r gondolat az anonimiz\u00e1l\u00e1sr\u00f3l</p> <p>Azt gondolhatn\u00e1nk, hogy az anonimiz\u00e1l\u00e1s egy egyszer\u0171 probl\u00e9mak\u00f6r. Pl. csak el kell t\u00e1vol\u00edtani, vagy ki kell \"csillagozni\" a szem\u00e9lyek neveit, lakc\u00edm\u00e9b\u0151l az utca-h\u00e1zsz\u00e1mot, telefonsz\u00e1mokat, e-mail c\u00edmet, \u00e9s meg is vagyunk. P\u00e9ld\u00e1ul a bemenet\u00fcnk els\u0151 sor\u00e1ra ez lenne a kimenet:</p> <pre><code>\"***\",\"***\",\"Benton, John B Jr\",\"***\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"***\",\"***\",\"30\",\"65\",\"Heart-related\",\"***\"\n</code></pre> <p>De ez kor\u00e1nt sincs \u00edgy, k\u00fcl\u00f6n\u00f6sen, ha igaz\u00e1n sok adatr\u00f3l van sz\u00f3. Gondoljunk arra, hogy van egy kisebb falu, ahol nem laknak sokan. Tegy\u00fck fel, hogy az egyik fenti m\u00f3don anonimiz\u00e1lt szem\u00e9ly \u00e9letkora 14 \u00e9v, de rendk\u00edv\u00fcl t\u00fals\u00falyos, 95 kg. Ez egy ritka \"kombin\u00e1ci\u00f3\", m\u00e1s szem\u00e9ly j\u00f3 es\u00e9llyel nem \u00e9l ilyen param\u00e9terekkel a faluban. Ha az \u0151 oszt\u00e1lyt\u00e1rsai k\u00f6z\u00fcl (nyolcadikos, hiszen 14 \u00e9ves) valaki megn\u00e9zi az \"anonimiz\u00e1lt\" adatokat, tudni fogja ki \u0151 (nincs m\u00e1s ennyire t\u00fals\u00falyos nyolcadikos az iskol\u00e1ban), beazonos\u00edtja a szem\u00e9lyt. \u00cdgy pl. tudni fogja, milyen betegs\u00e9ge van az illet\u0151nek. Tanuls\u00e1g: az adatok \u00f6sszef\u00fcgg\u00e9sben \u00e1rulkod\u00f3k lehetnek.</p> <p>Mi a megold\u00e1s? A v\u00e1rost, az \u00e9letkort \u00e9s a testt\u00f6meget nem t\u00f6r\u00f6lhetj\u00fck/csillagozhatjuk, mert ezekre vonatkoz\u00f3an kell kimutat\u00e1st k\u00e9sz\u00edteni. Egy tipikus megold\u00e1s: nem pontos \u00e9letkort/tests\u00falyt adunk meg az anonimiz\u00e1l\u00e1st k\u00f6vet\u0151en, hanem s\u00e1vokat (vagyis \u00e1ltal\u00e1nos\u00edtjuk az adatokat): pl. a fenti szem\u00e9ly eset\u00e9ben az \u00e9letkora 10..20 \u00e9v, tests\u00falya 80..100 kg, \u00e9s ezeket adjuk meg erre a szem\u00e9lyre vonatkoz\u00f3an a kimeneti f\u00e1jlban. \u00cdgy m\u00e1r nem lehet beazonos\u00edtani a szem\u00e9lyeket. Ezt a technik\u00e1t mi is fogjuk k\u00e9s\u0151bb alkalmazni.</p>"},{"location":"labor/6-tervezesi-mintak/#kiindulo-kovetelmenyek","title":"Kiindul\u00f3 k\u00f6vetelm\u00e9nyek","text":"<p>Az alkalmaz\u00e1ssal szemben t\u00e1masztott kiindul\u00f3 k\u00f6vetelm\u00e9nyek:</p> <ol> <li>Egy adott \u00fcgyf\u00e9lt\u0151l kapott f\u00e1jlokat (mindnek ugyanaz a form\u00e1tuma) kell ugyanazzal az anonimiz\u00e1l\u00f3 algoritmussal, ugyanabba a kimeneti form\u00e1tumba konvert\u00e1lni. Az anonimiz\u00e1l\u00e1s egyszer\u0171en a keresztn\u00e9v \u00e9s vezet\u00e9kn\u00e9v \"kicsillagoz\u00e1s\u00e1b\u00f3l\" \u00e1lljon.</li> <li>Sz\u00fcks\u00e9g van n\u00e9mi adattiszt\u00edt\u00e1sra. A bemeneti adatokban a v\u00e1rost tartalmaz\u00f3 oszlop elej\u00e9n/v\u00e9g\u00e9n lehetnek felesleges <code>_</code> \u00e9s <code>#</code> karakterek, ezeket el kell t\u00e1vol\u00edtani (trim m\u0171velet).</li> <li>Ki kell \u00edrni minden sor feldolgoz\u00e1sa ut\u00e1n a konzolra, hogy a sor feldolgoz\u00e1sa megt\u00f6rt\u00e9nt, ill. a minden adat feldolgoz\u00e1s ut\u00e1n n\u00e9mi \u00f6sszes\u00edt\u0151 inform\u00e1ci\u00f3t (Summary) is meg kell jelen\u00edteni: h\u00e1ny sort dolgoztunk fel, \u00e9s mennyin\u00e9l kellett a v\u00e1rosnevet trimmelni.</li> <li>L\u00e9nyeges szempont: az alkalmaz\u00e1sra csak r\u00f6vid id\u0151re lesz sz\u00fcks\u00e9g, nem k\u00edv\u00e1njuk k\u00e9s\u0151bbiekben b\u0151v\u00edteni.</li> </ol> <p>Megjegyz\u00e9s: annak \u00e9rdek\u00e9ben, hogy a k\u00f3dban kevesebb mez\u0151vel kelljen dolgozni, \u00e9s a kimenet is \u00e1tl\u00e1that\u00f3bb legyen, elhagyunk m\u00e9g n\u00e9h\u00e1ny mez\u0151t a feldolgoz\u00e1s sor\u00e1n.</p> <p>P\u00e9ldak\u00e9nt a bemeneti f\u00e1jlunk els\u0151 sor\u00e1ra a v\u00e1rt kimenet:</p> <pre><code>***; ***; LA; New Orleans; 30; 65; Heart-related\n</code></pre>"},{"location":"labor/6-tervezesi-mintak/#1-megoldas-minden-egyben-1-startstart","title":"1. Megold\u00e1s - minden egyben (1-Start/Start)","text":"<p>A Visual Studio Solution Explorer\u00e9ben mapp\u00e1kat l\u00e1tunk, 1-t\u0151l 4-ig sz\u00e1mmal kezd\u0151d\u0151 n\u00e9vvel. Ezek az egyes munkaiter\u00e1ci\u00f3khoz tartoz\u00f3 megold\u00e1sokat tartalmazz\u00e1k. Az els\u0151 k\u00f6r\u00f6s megold\u00e1s az \"1-Start\" mapp\u00e1ban, \"Start\" projektn\u00e9v alatt tal\u00e1lhat\u00f3. N\u00e9zz\u00fck meg a projektben tal\u00e1lhat\u00f3 f\u00e1jlokat:</p> <ul> <li><code>Person.cs</code> - Egy szem\u00e9ly sz\u00e1munkra \u00e9rdekes adatai tartalmazza, ennek objektumaiba olvassuk be egy-egy szem\u00e9ly adatait.</li> <li><code>Program.cs</code> - Ennek Main f\u00fcggv\u00e9ny\u00e9ben van megval\u00f3s\u00edtva minden logika, k\u00f3dmegjegyz\u00e9sekkel \"elv\u00e1lasztva\". Amennyiben kicsit is bonyolultabb\u00e1 v\u00e1lik a logika, m\u00e1r egy-k\u00e9t nap (\u00f3ra?) ut\u00e1n mi magunk is csak nehezen fogjuk \u00e1ttekinteni \u00e9s meg\u00e9rteni a saj\u00e1t k\u00f3dunkat. Ezt a megold\u00e1st ne is n\u00e9zz\u00fck.</li> </ul> <p>\u00d6sszeg\u00e9sz\u00e9ben minden nagyon egyszer\u0171 a megold\u00e1sban, hiszen a k\u00f3dnak nem j\u00f3solunk hossz\u00fa j\u00f6v\u0151t. De az egy f\u00fcggv\u00e9nybe \u00f6nt\u00f6tt \"szkriptszer\u0171\", \"minden egybe\" megold\u00e1s ekkor sem j\u00f3 ir\u00e1ny, nagyon neh\u00e9zz\u00e9 teszi a k\u00f3d \u00e1tl\u00e1t\u00e1s\u00e1t, meg\u00e9rt\u00e9s\u00e9t. Ne is n\u00e9zz\u00fck ezt tov\u00e1bb.</p>"},{"location":"labor/6-tervezesi-mintak/#2-megoldas-2-organizedtofunctionsorganizedtofunctions-1","title":"2. Megold\u00e1s (2-OrganizedToFunctions/OrganizedToFunctions-1)","text":"<p>T\u00e9rj\u00fcnk \u00e1t Visual Studioban a \"2-OrganizedToFunctions\" mapp\u00e1ban tal\u00e1lhat\u00f3 \"OrganizedToFunctions-1\" projektben tal\u00e1lhat\u00f3 megold\u00e1sra. Ez m\u00e1r sokkal szimpatikusabb, mert f\u00fcggv\u00e9nyekre bontottuk a logik\u00e1t. Tekints\u00fck \u00e1t a k\u00f3dot r\u00f6viden:</p> <p><code>Anonymizer.cs</code></p> <ul> <li>A <code>Run</code> f\u00fcggv\u00e9ny a \"gerince\", ez tartalmazza a vez\u00e9rl\u00e9si logik\u00e1t, ez h\u00edvja az egyes l\u00e9p\u00e9sek\u00e9rt felel\u0151s f\u00fcggv\u00e9nyeket.</li> <li><code>ReadFromInput</code> m\u0171velet: beolvassa a forr\u00e1sf\u00e1jlt, minden sorhoz k\u00e9sz\u00edt egy <code>Person</code> objektumot, \u00e9s visszat\u00e9r a beolvasott <code>Person</code> objektumok list\u00e1j\u00e1val.</li> <li><code>TrimCityNames</code>: Az adattiszt\u00edt\u00e1st v\u00e9gzi (v\u00e1rosnevek trimmel\u00e9se).</li> <li><code>Anonymize</code>: Minden egyes beolvasott <code>Person</code> objektummal megh\u00edv\u00e1sra ker\u00fcl, \u00e9s feladata, hogy visszaadjon egy \u00faj <code>Person</code> objektumot, mely m\u00e1r az anonimiz\u00e1lt adatokat tartalmazza.</li> <li><code>WriteToOutput</code>: m\u00e1r anonimiz\u00e1lt <code>Person</code> objektumokat ki\u00edrja a kimeneti f\u00e1jlba.</li> <li><code>PrintSummary</code>: ki\u00edrja az \u00f6sszes\u00edt\u00e9st a feldolgoz\u00e1s v\u00e9g\u00e9n a konzolra.</li> </ul> <p><code>Program.cs</code></p> <ul> <li>L\u00e9trehoz egy <code>Anonymizer</code> objektumot \u00e9s a <code>Run</code> h\u00edv\u00e1s\u00e1val futtatja. L\u00e1that\u00f3, hogy az anonimiz\u00e1l\u00e1s sor\u00e1n maszkol\u00e1sra haszn\u00e1lt stringet konstruktor param\u00e9terben kell megadni.</li> </ul> <p>Pr\u00f3b\u00e1ljuk ki, futtassuk! Ehhez a \"OrganizedToFunctions-1\" legyen Visual Studioban a startup projekt (jobb katt rajta, \u00e9s Set as Startup Project), majd futtassuk:</p> <p></p> <p>A kimeneti f\u00e1jt f\u00e1jlkezel\u0151ben tudjuk megn\u00e9zni, az \"OrganizedToFunctions-1\\bin\\Debug\\net8.0\\\" vagy hasonl\u00f3 nev\u0171 mapp\u00e1ban tal\u00e1ljuk, \"us-500.processed.txt\" n\u00e9ven. Nyissuk meg, \u00e9s vess\u00fcnk egy pillant\u00e1st az adatokra.</p>"},{"location":"labor/6-tervezesi-mintak/#a-megoldas-ertekelese","title":"A megold\u00e1s \u00e9rt\u00e9kel\u00e9se","text":"<ul> <li>A megold\u00e1s alapvet\u0151en j\u00f3l struktur\u00e1lt, k\u00f6nnyen meg\u00e9rthet\u0151.</li> <li>K\u00f6veti a KISS (Keep It Stupid Simple) elvet, nem haszn\u00e1l felesleges bonyol\u00edt\u00e1sokat. Ez \u00edgy j\u00f3, hiszen nem mer\u00fcltek fel potenci\u00e1lis j\u00f6v\u0151beli tov\u00e1bbfejleszt\u00e9si ig\u00e9nyek, nem kell k\u00fcl\u00f6nb\u00f6z\u0151 form\u00e1tumokat, logik\u00e1kat stb. t\u00e1mogatni.</li> <li> <p>A megold\u00e1sunk ugyanakkor nem k\u00f6veti az egyik legalapvet\u0151bb \u00e9s legh\u00edresebb tervez\u00e9si elvet, mely Single Responsibility Principle (r\u00f6viden SRP) n\u00e9ven k\u00f6zismert. Ez - n\u00e9mi egyszer\u0171s\u00edt\u00e9ssel \u00e9lve - azt v\u00e1rja el, hogy egy oszt\u00e1lynak egy felel\u0151ss\u00e9ge legyen (alapvet\u0151en egy dologgal foglalkozzon).</p> <ul> <li>K\u00e9ts\u00e9gtelen, hogy az <code>Anonymizer</code> oszt\u00e1lyunknak sz\u00e1mos felel\u0151ss\u00e9ge van: bemenet feldolgoz\u00e1sa, adattiszt\u00edt\u00e1s, anonimiz\u00e1l\u00e1s, kimenet el\u0151\u00e1ll\u00edt\u00e1sa stb.</li> <li>Ez a probl\u00e9ma n\u00e1lunk az\u00e9rt nem felt\u0171n\u0151, illetve az\u00e9rt nem okoz gondot, mert mindegyik felel\u0151ss\u00e9g megval\u00f3s\u00edt\u00e1sa egyszer\u0171, \"belef\u00e9rt\" egy-egy r\u00f6videbb f\u00fcggv\u00e9nybe. De ha b\u00e1rmelyik is \u00f6sszetettebb lenne, t\u00f6bb f\u00fcggv\u00e9nyben lenn\u00e9nek megval\u00f3s\u00edtva, akkor mindenk\u00e9ppen k\u00fcl\u00f6n oszt\u00e1lyba illene szervezni.</li> </ul> Mi\u00e9rt probl\u00e9ma, ha egy oszt\u00e1lynak t\u00f6bb felel\u0151ss\u00e9ge van? * <ul> <li>Nehezebb meg\u00e9rteni a m\u0171k\u00f6d\u00e9s\u00e9t, mert nem egy dologra f\u00f3kusz\u00e1l.</li> <li>Ha b\u00e1rmelyik felel\u0151ss\u00e9g ment\u00e9n is j\u00f6n be v\u00e1ltoz\u00e1si ig\u00e9ny, egy nagy, sok mindennel foglalkoz\u00f3 oszt\u00e1lyt kell v\u00e1ltoztatni \u00e9s \u00fajra tesztelni.</li> </ul> </li> <li> <p>A megold\u00e1shoz lehet \u00edrni automatiz\u00e1lt integr\u00e1ci\u00f3s (input-output) teszteket, de \"igazi\" egys\u00e9gteszteket nem.</p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/#3-megoldas-organizedtofunctions-2-twoalgorithms","title":"3. Megold\u00e1s (OrganizedToFunctions-2-TwoAlgorithms)","text":"<p>A kor\u00e1bbi \"tervekkel\" ellent\u00e9tben \u00faj felhaszn\u00e1l\u00f3i ig\u00e9nyek mer\u00fcltek fel. Az \u00fcgyfel\u00fcnk meggondolta mag\u00e1t, egy m\u00e1sik adathalmazn\u00e1l m\u00e1sf\u00e9le anonimiz\u00e1l\u00f3 algoritmus megval\u00f3s\u00edt\u00e1s\u00e1t k\u00e9ri: a szem\u00e9lyek \u00e9letkor\u00e1t kell s\u00e1vosan menteni, nem der\u00fclhet ki a szem\u00e9lyek pontos \u00e9letkora. Az egyszer\u0171s\u00e9g \u00e9rdek\u00e9ben ez esetben a szem\u00e9lyek nev\u00e9t nem fogjuk anonimiz\u00e1lni, \u00edgy tekints\u00fck ezt egyfajta \"pszeudo\" anonimiz\u00e1l\u00e1snak (ett\u0151l m\u00e9g lehet \u00e9rtelme, csak nem teljesen korrekt ezt anonimiz\u00e1l\u00e1snak nevezni).</p> <p>A megold\u00e1sunkat - mely egyar\u00e1nt t\u00e1mogatja a r\u00e9gi \u00e9s az \u00faj algoritmust (egyszerre csak az egyiket) - a VS solution OrganizedToFunctions-2-TwoAlgorithms nev\u0171 projektj\u00e9ben tal\u00e1ljuk. N\u00e9zz\u00fcnk r\u00e1 az <code>Anonymizer</code> oszt\u00e1lyra, a megold\u00e1s alapelve (ezeket tekints\u00fck \u00e1t a k\u00f3dban):</p> <ul> <li>Bevezett\u00fcnk egy <code>AnonymizerMode</code> enum t\u00edpust, mely meghat\u00e1rozza, hogy melyik \u00fczemm\u00f3dban (algoritmussal) haszn\u00e1ljuk az <code>Anonymizer</code> oszt\u00e1lyt.</li> <li>Az <code>Anonymizer</code> oszt\u00e1lynak k\u00e9t anonimiz\u00e1l\u00f3 m\u0171velete van: <code>Anonymize_MaskName</code>, <code>Anonymize_AgeRange</code></li> <li>Az <code>Anonymizer</code> oszt\u00e1ly az <code>_anonymizerMode</code> tagj\u00e1ban t\u00e1rolja, melyik algoritmust kell haszn\u00e1lni: a k\u00e9t \u00fczemm\u00f3dhoz k\u00e9t k\u00fcl\u00f6n konstruktort vezett\u00fcnk be, ezek \u00e1ll\u00edtj\u00e1k be az <code>_anonymizerMode</code> \u00e9rt\u00e9k\u00e9t.</li> <li>Az <code>Anonymizer</code> oszt\u00e1ly t\u00f6bb helyen is megvizsg\u00e1lja (pl. <code>Run</code>, <code>GetAnonymizerDescription</code> m\u0171veletek), hogy mi az <code>_anonymizerMode</code> \u00e9rt\u00e9ke, \u00e9s ennek f\u00fcggv\u00e9ny\u00e9ben el\u00e1gazik.</li> <li> <p>A <code>GetAnonymizerDescription</code>-ben az\u00e9rt kell ezt megtenni, mert ennek a m\u0171veletnek a feladata az anonimiz\u00e1l\u00f3 algoritmusr\u00f3l egy egysoros le\u00edr\u00e1s el\u0151\u00e1ll\u00edt\u00e1sa, melyet a feldolgoz\u00e1s v\u00e9g\u00e9n a \"summary\"-ben megjelen\u00edt. N\u00e9zz\u00fcnk r\u00e1 a <code>PintSummary</code> k\u00f3dj\u00e1ra, ez a m\u0171velet h\u00edvja. Pl. ez jelenik meg a konzolon \u00f6sszefoglal\u00f3k\u00e9nt, ha \u00e9letkor anonimiz\u00e1l\u00f3t haszn\u00e1lunk 20-as range-dzsel:</p> <p><code>Summary - Anonymizer (Age anonymizer with range size 20): Persons: 500, trimmed: 2</code></p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/#a-megoldas-ertekelese_1","title":"A megold\u00e1s \u00e9rt\u00e9kel\u00e9se","text":"<p>\u00d6sszeg\u00e9sz\u00e9ben megold\u00e1sunk k\u00f3dmin\u0151s\u00e9g tekintet\u00e9ben a kor\u00e1bbin\u00e1l rosszabb lett. Kor\u00e1bban nem volt probl\u00e9ma, hogy anonimiz\u00e1l\u00f3 algoritmusok tekintet\u00e9ben nem volt kiterjeszthet\u0151, hiszen nem volt r\u00e1 ig\u00e9ny. De ha m\u00e1r egyszer felmer\u00fclt az ig\u00e9ny \u00faj algoritmus bevezet\u00e9s\u00e9re, akkor hiba ebben a tekintetben nem kiterjeszthet\u0151v\u00e9 tenni a megold\u00e1sunkat: ett\u0151l kezdve sokkal ink\u00e1bb sz\u00e1m\u00edtunk arra, hogy \u00fajabb tov\u00e1bbi algoritmusokat kell bevezetni a j\u00f6v\u0151ben.</p> <p>Mi\u00e9rt \u00e1ll\u00edtjuk azt, hogy a k\u00f3dunk nem kiterjeszthet\u0151, amikor \"csak\" egy \u00faj enum \u00e9rt\u00e9ket, \u00e9s egy-egy plusz <code>if</code>/<code>switch</code> \u00e1gat kell a k\u00f3d n\u00e9h\u00e1ny pontj\u00e1ra bevezetni, amikor \u00faj algoritmust kell majd bevezetni?</p> <p> Open/Closed principle Kulcsfontoss\u00e1g\u00fa, hogy egy oszt\u00e1lyt akkor tekint\u00fcnk kiterjeszthet\u0151nek, ha annak b\u00e1rmilyen nem\u0171 m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl, puszt\u00e1n a k\u00f3d kiterjeszt\u00e9s\u00e9vel/b\u0151v\u00edt\u00e9s\u00e9vel lehet \u00faj viselked\u00e9st (eset\u00fcnkben \u00faj algoritmust) bevezetni. Vagyis eset\u00fcnkben az <code>Anonymizer</code> k\u00f3dj\u00e1hoz nem szabadna hozz\u00e1ny\u00falni, ami egy\u00e9rtelm\u0171en nem teljes\u00fcl. Ez a h\u00edres Open/Closed principle/elv: the class should be Open for Extension, Closed for Modification. A k\u00f3d m\u00f3dos\u00edt\u00e1sa az\u00e9rt probl\u00e9ma, mert annak sor\u00e1n j\u00f3 es\u00e9llyel \u00faj bugokat vezet\u00fcnk be, ill. a m\u00f3dos\u00edtott k\u00f3dot mindig \u00fajra kell tesztelni, ez pedig jelent\u0151s id\u0151/k\u00f6lts\u00e9gr\u00e1ford\u00edt\u00e1si ig\u00e9nyt jelenthet.</p> <p>Mi is a pontos c\u00e9l, \u00e9s hogyan \u00e9rj\u00fck ezt el? Vannak olyan r\u00e9szek az oszt\u00e1lyunkban, melyeket nem szeretn\u00e9nk be\u00e9getni:</p> <ul> <li>Ezek nem adatok, hanem viselked\u00e9sek (k\u00f3d, logika).</li> <li>Nem <code>if</code>/<code>switch</code> utas\u00edt\u00e1sokkal oldjuk meg: \"kiterjeszt\u00e9si pontokat\" vezet\u00fcnk be, \u00e9s valamilyen m\u00f3don megoldjuk, hogy ezekben \"tetsz\u0151leges\" k\u00f3d lefuthasson.</li> <li>Ezek v\u00e1ltoz\u00f3/esetf\u00fcgg\u0151 r\u00e9szek k\u00f3dj\u00e1t m\u00e1s oszt\u00e1lyokba tessz\u00fck (az oszt\u00e1lyunk szempontj\u00e1b\u00f3l \"lecser\u00e9lhet\u0151\" m\u00f3don)!</li> </ul> <p>Note</p> <p>Ne gondoljunk semmif\u00e9le var\u00e1zslatra, a m\u00e1r ismert eszk\u00f6z\u00f6ket fogjuk erre haszn\u00e1lni: \u00f6r\u00f6kl\u00e9st absztrakt/virtu\u00e1lis f\u00fcggv\u00e9nyekkel, vagy interf\u00e9szeket, vagy delegate-eket.</p> <p>Keress\u00fck meg azokat a r\u00e9szeket, melyek esetf\u00fcgg\u0151, v\u00e1ltoz\u00f3 logik\u00e1k, \u00edgy nem j\u00f3 be\u00e9getni az <code>Anonymizer</code> oszt\u00e1lyba:</p> <ul> <li>Az egyik maga az anonimiz\u00e1l\u00e1si logika: <code>Anonymize_MaskName</code>/<code>Anonymize_AgeRange</code></li> <li>A m\u00e1sik a <code>GetAnonymizerDescription</code></li> </ul> <p>Ezeket kell lev\u00e1lasztani az oszt\u00e1lyr\u00f3l, ezekben a pontokban kell kiterjeszthet\u0151v\u00e9 tenni az oszt\u00e1lyt. Az al\u00e1bbi \u00e1bra illusztr\u00e1lja a c\u00e9lt \u00e1ltal\u00e1noss\u00e1g\u00e1ban *:</p> Az \u00e1ltal\u00e1nos megold\u00e1si elv illusztr\u00e1l\u00e1sa <p></p> <p>H\u00e1rom konkr\u00e9t tervez\u00e9si mint\u00e1t, ill. technik\u00e1t n\u00e9z\u00fcnk meg a fentiek megval\u00f3s\u00edt\u00e1s\u00e1ra:</p> <ul> <li>Template Method tervez\u00e9si minta</li> <li>Strategy tervez\u00e9si minta (Dependency Injectionnel egyetemben)</li> <li>Delegate (opcion\u00e1lisan Lambda kifejez\u00e9ssel)</li> </ul> <p>Val\u00f3j\u00e1ban mind haszn\u00e1ltuk m\u00e1r a tanulm\u00e1nyaink sor\u00e1n, de most m\u00e9lyebben megismerked\u00fcnk vel\u00fck, \u00e9s \u00e1tfog\u00f3bban be fogjuk gyakorolni ezek alkalmaz\u00e1s\u00e1t. Az els\u0151 kett\u0151t a labor keret\u00e9ben, a harmadikat pedig majd egy kapcsol\u00f3d\u00f3 h\u00e1zi feladat keret\u00e9ben.</p>"},{"location":"labor/6-tervezesi-mintak/#4-megoldas-3-templatemethodtemplatemethod-1","title":"4. Megold\u00e1s (3-TemplateMethod/TemplateMethod-1)","text":"<p>Ebben a l\u00e9p\u00e9sben a Template Method tervez\u00e9si minta alkalmaz\u00e1s\u00e1val fogjuk a megold\u00e1sunkat a sz\u00fcks\u00e9ges pontokban kiterjeszthet\u0151v\u00e9 tenni.</p> <p>Note</p> <p>A minta neve \"megt\u00e9veszt\u0151\": semmi k\u00f6ze nincs a C++-ban tanult sablonmet\u00f3dusokhoz!</p> Template Method alap\u00fa megold\u00e1s oszt\u00e1lydiagram <p>Az al\u00e1bbi UML oszt\u00e1lydiagram illusztr\u00e1lja a Template Method alap\u00fa megold\u00e1st, a l\u00e9nyegre f\u00f3kusz\u00e1lva:</p> <p></p> <p>A mint\u00e1ban a k\u00f6vetkez\u0151 elvek ment\u00e9n val\u00f3sul meg a \"v\u00e1ltozatlan\" \u00e9s \"v\u00e1ltoz\u00f3\" r\u00e9szek k\u00fcl\u00f6nv\u00e1laszt\u00e1sa (\u00e9rdemes a fenti oszt\u00e1lydiagram alapj\u00e1n - a p\u00e9ld\u00e1nkra vet\u00edtve - ezeket meg\u00e9rteni):</p> <ul> <li>A \"k\u00f6z\u00f6s/v\u00e1ltozatlan\" r\u00e9szeket egy \u0151soszt\u00e1lyba tessz\u00fck.</li> <li>Ebben a kiterjeszt\u00e9si pontokat absztrakt/virtu\u00e1lis f\u00fcggv\u00e9nyek bevezet\u00e9se jelenti, ezeket h\u00edvjuk a kiterjeszt\u00e9si pontokban.</li> <li>Ezek esetf\u00fcgg\u0151 megval\u00f3s\u00edt\u00e1sa a lesz\u00e1rmazott oszt\u00e1lyokba ker\u00fcl.</li> </ul> <p>A j\u00f3l ismert \"tr\u00fckk\" a dologban az, hogy amikor az \u0151s megh\u00edvja az absztrakt/virtu\u00e1lis f\u00fcggv\u00e9nyeket, akkor a lesz\u00e1rmazottb\u00e9li, esetf\u00fcgg\u0151 k\u00f3d h\u00edv\u00f3dik meg.</p> <p>A k\u00f6vetkez\u0151kben a kor\u00e1bbi <code>enum</code>, illetve <code>if</code>/<code>switch</code> alap\u00fa megold\u00e1st alak\u00edtjuk \u00e1t Template Method alap\u00fara (ebben m\u00e1r nem lesz enum). Egy \u0151soszt\u00e1lyt \u00e9s k\u00e9t, algoritmusf\u00fcgg\u0151 lesz\u00e1rmazottat vezet\u00fcnk be.</p> <p>Alak\u00edtsuk \u00e1t a k\u00f3dunkat ennek megfelel\u0151en. A VS solution-ben a \"3-TemplateMethod\" mapp\u00e1ban a \"TemplateMethod-0-Begin\" projekt tartalmazza a kor\u00e1bbi megold\u00e1sunk k\u00f3dj\u00e1t (annak \"m\u00e1solat\u00e1t\"), ebben a projektben dolgozzunk:</p> <ol> <li>Nevezz\u00fck \u00e1t az <code>Anonymizer</code> oszt\u00e1lyt <code>AnonymizerBase</code>-re (pl. az oszt\u00e1ly nev\u00e9re \u00e1llva a forr\u00e1sf\u00e1jlban \u00e9s F2-t nyomva).</li> <li>Vegy\u00fcnk fel az projektbe egy <code>NameMaskingAnonymizer</code> \u00e9s egy <code>AgeAnonymizer</code> oszt\u00e1lyt (projekten jobb katt, Add/Class).</li> <li>Sz\u00e1rmaztassuk az <code>AnonymizerBase</code>-b\u0151l \u0151ket</li> <li> <p>Az <code>AnonymizerBase</code>-b\u0151l mozgassuk \u00e1t a <code>NameMaskingAnonymizer</code>-be az ide tartoz\u00f3 r\u00e9szeket:</p> <ol> <li>A <code>_mask</code> tagv\u00e1ltoz\u00f3t.</li> <li>A <code>string inputFileName, string mask</code> param\u00e9terez\u00e9s\u0171 konstruktort, \u00e1tnevezve <code>NameMaskingAnonymizer</code>-re,<ol> <li><code>_anonymizerMode = AnonymizerMode.Name;</code> sort t\u00f6r\u00f6lve,</li> <li> <p>a <code>this</code> konstruktorh\u00edv\u00e1s helyett <code>base</code> konstruktorh\u00edv\u00e1ssal.</p> A konstruktor k\u00f3dja <pre><code>public NameMaskingAnonymizer(string inputFileName, string mask): base(inputFileName)\n{\n    _mask = mask;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Az <code>AnonymizerBase</code>-b\u0151l mozgassuk \u00e1t az <code>AgeAnonymizer</code>-be az ide tartoz\u00f3 r\u00e9szeket:</p> <ol> <li>A <code>_rangeSize</code> tagv\u00e1ltoz\u00f3t.</li> <li>A <code>string inputFileName, string rangeSize</code> param\u00e9terez\u00e9s\u0171 konstruktort, \u00e1tnevezve <code>AgeAnonymizer</code>-re,<ol> <li><code>_anonymizerMode = AnonymizerMode.Age;</code> sort t\u00f6r\u00f6lve,</li> <li> <p>a <code>this</code> konstruktorh\u00edv\u00e1s helyett <code>base</code> konstruktorh\u00edv\u00e1ssal.</p> A konstruktor k\u00f3dja <pre><code>public AgeAnonymizer(string inputFileName, int rangeSize): base(inputFileName)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Az <code>AnonymizerBase</code>-ben:</p> <ol> <li>T\u00f6r\u00f6lj\u00fck az <code>AnonymizerMode</code> enum t\u00edpust.</li> <li>T\u00f6r\u00f6lj\u00fck a <code>_anonymizerMode</code> tagot.</li> </ol> </li> </ol> <p>Keress\u00fck meg azokat a r\u00e9szeket, melyek esetf\u00fcgg\u0151, v\u00e1ltoz\u00f3 logik\u00e1k, \u00edgy nem akarjuk be\u00e9getni az \u00fajrafelhaszn\u00e1lhat\u00f3nak sz\u00e1nt <code>AnonymizerBase</code> oszt\u00e1lyba:</p> <ul> <li>Az egyik az <code>Anonymize_MaskName</code>/<code>Anonymize_AgeRange</code>,</li> <li>a m\u00e1sik a <code>GetAnonymizerDescription</code>.</li> </ul> <p>A mint\u00e1t k\u00f6vetve ezekre az \u0151sben absztrakt (vagy esetleg virtu\u00e1lis) f\u00fcggv\u00e9nyeket vezet\u00fcnk be, \u00e9s ezeket h\u00edvjuk, az esetf\u00fcgg\u0151 implement\u00e1ci\u00f3ikat pedig a lesz\u00e1rmazott oszt\u00e1lyokba tessz\u00fck (override):</p> <ol> <li>Tegy\u00fck az <code>AnonymizerBase</code> oszt\u00e1lyt absztraktt\u00e1 (a <code>class</code> el\u00e9 <code>abstract</code> kulcssz\u00f3).</li> <li> <p>Vezess\u00fcnk be az <code>AnonymizerBase</code>-ben egy</p> <pre><code>protected abstract Person Anonymize(Person person);\n</code></pre> <p>m\u0171veletet (ennek feladata lesz az anonimiz\u00e1l\u00e1s v\u00e9grehajt\u00e1sa).</p> </li> <li> <p>Az <code>Anonymize_MaskName</code> m\u0171veletet mozgassuk \u00e1t a <code>NameMaskingAnonymizer</code> oszt\u00e1lyba, \u00e9s alak\u00edtsuk \u00e1t a szignat\u00far\u00e1j\u00e1t \u00fagy, hogy override-olja az \u0151sbeli <code>Anonymize</code> absztrakt f\u00fcggv\u00e9nyt:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    return new Person(_mask, _mask, person.CompanyName,\n        person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n}\n</code></pre> <p>A f\u00fcggv\u00e9ny t\u00f6rzs\u00e9t csak annyiban kell \u00e1t\u00edrni, hogy ne a megsz\u00fcntetett <code>mask</code> param\u00e9tert, hanem a <code>_mask</code> tagv\u00e1ltoz\u00f3t haszn\u00e1lja.</p> </li> <li> <p>Az el\u0151z\u0151 l\u00e9p\u00e9ssel teljesen anal\u00f3g m\u00f3don az <code>Anonymize_AgeRange</code> m\u0171veletet mozgassuk \u00e1t a <code>AgeAnonymizer</code> oszt\u00e1lyba, \u00e9s alak\u00edtsuk \u00e1t a szignat\u00far\u00e1j\u00e1t \u00fagy, hogy override-olja az \u0151sbeli <code>Anonymize</code> absztrakt f\u00fcggv\u00e9nyt:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    ...\n}\n</code></pre> <p>A f\u00fcggv\u00e9ny t\u00f6rzs\u00e9t csak annyiban kell \u00e1t\u00edrni, hogy ne a megsz\u00fcntetett <code>rangeSize</code> param\u00e9tert, hanem a <code>_rangeSize</code> tagv\u00e1ltoz\u00f3t haszn\u00e1lja.</p> </li> <li> <p>A <code>AnonymizerBase</code> oszt\u00e1ly <code>Run</code> f\u00fcggv\u00e9ny\u00e9ben az <code>if</code>/<code>else</code> kifejez\u00e9sben tal\u00e1lhat\u00f3 <code>Anonymize</code> h\u00edv\u00e1sokat most m\u00e1r le tudjuk cser\u00e9lni egy egyszer\u0171 absztrakt f\u00fcggv\u00e9ny h\u00edv\u00e1sra:</p> <pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> <p>helyett:</p> <pre><code>var person = Anonymize(persons[i]);\n</code></pre> </li> </ol> <p>Az egyik kiterjeszt\u00e9si pontunkkal el is k\u00e9sz\u00fclt\u00fcnk. De maradt m\u00e9g egy, a <code>GetAnonymizerDescription</code>, mely kezel\u00e9se szint\u00e9n esetf\u00fcgg\u0151. Ennek \u00e1talak\u00edt\u00e1sa nagyon hasonl\u00f3 az el\u0151z\u0151 l\u00e9p\u00e9ssorozathoz:</p> <ol> <li> <p>Az <code>AnonymizerBase</code> oszt\u00e1ly <code>GetAnonymizerDescription</code> m\u0171velet\u00e9t m\u00e1soljuk \u00e1t a <code>NameMaskingAnonymizer</code>-be, a szignat\u00far\u00e1ba belev\u00e9ve az <code>override</code> kulcssz\u00f3t, a f\u00fcggv\u00e9ny t\u00f6rzs\u00e9ben csak a <code>NameMaskingAnonymizer</code>-re vonatkoz\u00f3 logik\u00e1t meghagyva:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}\n</code></pre> </li> <li> <p>A <code>AnonymizerBase</code> <code>GetAnonymizerDescription</code> m\u0171velet\u00e9t m\u00e1soljuk \u00e1t az <code>AgeAnonymizer</code>-be is, a szignat\u00far\u00e1ba belev\u00e9ve az <code>override</code> kulcssz\u00f3t, a f\u00fcggv\u00e9ny t\u00f6rzs\u00e9ben most csak a <code>AgeAnonymizer</code>-re vonatkoz\u00f3 logik\u00e1t meghagyva:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n}\n</code></pre> </li> <li> <p>K\u00e9rd\u00e9s, mi legyen <code>AnonymizerBase</code>-ben a <code>GetAnonymizerDescription</code> m\u0171velettel. Ezt nem absztrakt\u00e1, hanem virtu\u00e1lis f\u00fcggv\u00e9nny\u00e9 alak\u00edtjuk, hiszen itt tudunk \u00e9rtelmes alap\u00e9rtelmezett viselked\u00e9st biztos\u00edtani: egyszer\u0171en visszaadjuk az oszt\u00e1ly nev\u00e9t (mely pl. a <code>NameMaskingAnonymizer</code> oszt\u00e1ly eset\u00e9ben \"NameMaskingAnonymizer\" lenne). Mindenesetre a rugalmatlan <code>switch</code> szerkezett\u0151l ezzel megszabadulunk:</p> <pre><code>protected virtual string GetAnonymizerDescription()\n{\n    return GetType().Name;\n}\n</code></pre> <p>Reflexi\u00f3</p> <p>Az object \u0151sb\u0151l \u00f6r\u00f6k\u00f6lt <code>GetType()</code> m\u0171velettel egy <code>Type</code> t\u00edpus\u00fa objektumot szerz\u00fcnk az oszt\u00e1lyunkra vonatkoz\u00f3an. Ez a refelexi\u00f3 t\u00e9mak\u00f6rh\u00f6z tartozik, err\u0151l a f\u00e9l\u00e9v v\u00e9g\u00e9n fogunk el\u0151ad\u00e1son r\u00e9szletesebben tanulni.</p> </li> </ol> <p>Egy dolog van m\u00e1r csak h\u00e1tra: a <code>Program.cs</code> <code>Main</code> f\u00fcggv\u00e9ny\u00e9ben most az <code>AnonymizerBase</code> \u0151st pr\u00f3b\u00e1ljuk p\u00e9ld\u00e1nyos\u00edtani (a kor\u00e1bbi \u00e1tnevez\u00e9s miatt). Helyette a k\u00e9t lesz\u00e1rmazott valamelyik\u00e9t kellene. Pl.:</p> <pre><code>NameMaskingAnonymizer anonymizer = new(\"us-500.csv\", \"***\");\nanonymizer.Run();\n</code></pre> <p>El is k\u00e9sz\u00fclt\u00fcnk. Pr\u00f3b\u00e1ljuk ki, hogy jobban \"\u00e9rezz\u00fck\", val\u00f3ban m\u0171k\u00f6dnek az kiterjeszt\u00e9si pontok (de ha kev\u00e9s az id\u0151nk a labor sor\u00e1n, ez k\u00fcl\u00f6n\u00f6sebben nem fontos, hasonl\u00f3t m\u00e1r kor\u00e1bbi f\u00e9l\u00e9vekben C++/Java nyelvek kontextus\u00e1ban is csin\u00e1ltunk):</p> <ul> <li>Visual Studioban a TemplateMethod-0-Begin projekt legyen a startup projekt, ha ezt eddig m\u00e9g nem \u00e1ll\u00edtottuk be.</li> <li>Tegy\u00fcnk egy t\u00f6r\u00e9spontot az <code>AnonymizerBase</code> oszt\u00e1ly <code>var person = Anonymize(persons[i]);</code> sor\u00e1ra.</li> <li>Amikor fut\u00e1s k\u00f6zben itt meg\u00e1ll a debugger, F11-gyel l\u00e9pj\u00fcnk bele.</li> <li>Az tapasztaljuk, hogy a  lesz\u00e1rmazott <code>AgeAnonymizer</code> m\u0171velete h\u00edv\u00f3dik.</li> </ul> <p>Vethet\u00fcnk egy pillant\u00e1st a megold\u00e1s oszt\u00e1lydiagramj\u00e1ra:</p> Template Method alap\u00fa megold\u00e1s oszt\u00e1lydiagram * <p></p> <p>Az eddigi munk\u00e1nk megold\u00e1sa a <code>3-TemplateMethod/TemplateMethod-1</code> projektben megtal\u00e1lhat\u00f3, ha esetleg sz\u00fcks\u00e9g lenne r\u00e1.</p> Mi\u00e9rt Template Method a minta neve * <p>A minta az\u00e9rt kapta a Template Method nevet, mert - alkalmaz\u00e1sunkat p\u00e9ldak\u00e9nt haszn\u00e1lva - a <code>Run</code> \u00e9s a <code>PrintSummary</code> olyan \"sablon met\u00f3dusok\", melyek meghat\u00e1roznak egy sablonszer\u0171 logik\u00e1t, v\u00e1zat, melyben bizonyos l\u00e9p\u00e9sek nincsenek megk\u00f6tve. Ezek \"k\u00f3dj\u00e1t\" absztrakt/virtu\u00e1lis f\u00fcggv\u00e9nyekre b\u00edzzuk, \u00e9s a lesz\u00e1rmazott oszt\u00e1lyok hat\u00e1rozz\u00e1k meg a megval\u00f3s\u00edt\u00e1sukat.</p>"},{"location":"labor/6-tervezesi-mintak/#a-megoldas-ertekelese_2","title":"A megold\u00e1s \u00e9rt\u00e9kel\u00e9se","text":"<p>Ellen\u0151rizz\u00fck a megold\u00e1st, megval\u00f3s\u00edtja-e a c\u00e9ljainkat:</p> <ul> <li>Az <code>AnonymizerBase</code> egy \u00fajrafelhaszn\u00e1lhat\u00f3(bb) oszt\u00e1ly lett.</li> <li>Ha \u00faj anonimiz\u00e1l\u00f3 logik\u00e1ra van sz\u00fcks\u00e9g a j\u00f6v\u0151ben, csak sz\u00e1rmaztatunk bel\u0151le. Ez nem m\u00f3dos\u00edt\u00e1s, hanem b\u0151v\u00edt\u00e9s.</li> <li>Ennek megfelel\u0151en teljes\u00fcl az OPEN/CLOSED elv, vagyis a k\u00f3dj\u00e1nak m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl tudjuk az \u0151sben megadott k\u00e9t pontban a logik\u00e1t testre szabni, kiterjeszteni.</li> </ul> <p>Legyen minden pontban kiterjeszthet\u0151 az oszt\u00e1lyunk?</p> <p>Figyelj\u00fck meg, hogy nem tett\u00fcnk az <code>AnonymizerBase</code> minden m\u0171velet\u00e9t virtu\u00e1liss\u00e1 (\u00edgy sok pontban kiterjeszthet\u0151v\u00e9 az oszt\u00e1lyt). Csak ott tett\u00fck meg, ahol azt gondoljuk, hogy a j\u00f6v\u0151ben sz\u00fcks\u00e9g lehet a logika kiterjeszt\u00e9s\u00e9re.</p>"},{"location":"labor/6-tervezesi-mintak/#5-megoldas-3-templatemethodtemplatemethod-2-progress","title":"5. Megold\u00e1s (3-TemplateMethod/TemplateMethod-2-Progress)","text":"<p>T.f.h \u00faj - viszonylag egyszer\u0171 - ig\u00e9ny mer\u00fcl fel:</p> <ul> <li> <p>A <code>NameMaskinAnonimizer</code> eset\u00e9n marad ugyan a kor\u00e1bbi egyszer\u0171 progress kijelz\u00e9s (minden sor ut\u00e1n ki\u00edrjuk, h\u00e1nyadikn\u00e1l tartottunk),</p> Egyszer\u0171 progress illusztr\u00e1l\u00e1sa <p></p> </li> <li> <p>de az <code>AgeAnonymizer</code> eset\u00e9n a progress kijelz\u00e9s m\u00e1s kell legyen: azt kell ki\u00edrni - minden sor ut\u00e1n friss\u00edtve -, hogy h\u00e1ny sz\u00e1zal\u00e9kn\u00e1l tart a feldolgoz\u00e1s.</p> Sz\u00e1zal\u00e9kos progress illusztr\u00e1l\u00e1sa <p></p> <p>(Mivel jelenleg kev\u00e9s az adatunk (mind\u00f6ssze 500 sor), ezt a megold\u00e1sunk v\u00e9g\u00e9n nem \u00edgy l\u00e1tjuk majd, pillanatok alatt 100%-ra ugrik)</p> </li> </ul> <p>A megold\u00e1s nagyon egyszer\u0171: a <code>Run</code> m\u0171veletben sz\u00e9lesebb k\u00f6rben alkalmazva a Template Method mint\u00e1t, a progress ki\u00edr\u00e1skor is egy kiterjeszt\u00e9si pontot vezet\u00fcnk be, egy virtu\u00e1lis f\u00fcggv\u00e9nyre b\u00edzzuk a megval\u00f3s\u00edt\u00e1st.</p> <p>Ugorjunk egyb\u0151l a k\u00e9sz megold\u00e1sra (3-TemplateMethod/TemplateMethod-2-Progress projekt):</p> <ul> <li><code>AnonymizerBase</code> oszt\u00e1lyban \u00faj <code>PrintProgress</code> virtu\u00e1lis f\u00fcggv\u00e9ny (alap\u00e9rtelmez\u00e9sben nem \u00edr ki semmit)</li> <li><code>Run</code>-ban ennek h\u00edv\u00e1sa</li> <li><code>NameMaskingAnonymizer</code>-ben \u00e9s <code>NameMaskingAnonymizer</code>-ben megfelel\u0151 megval\u00f3s\u00edt\u00e1s (override)</li> </ul> <p>Ennek egyel\u0151re k\u00fcl\u00f6n\u00f6sebb tanuls\u00e1ga nincs, de a k\u00f6vetkez\u0151 l\u00e9p\u00e9sben m\u00e1r lesz.</p>"},{"location":"labor/6-tervezesi-mintak/#6-megoldas-3-templatemethodtemplatemethod-3-progressmultiple","title":"6. Megold\u00e1s (3-TemplateMethod/TemplateMethod-3-ProgressMultiple)","text":"<p>\u00daj - \u00e9s teljesen logikus - ig\u00e9ny mer\u00fclt fel: a j\u00f6v\u0151ben b\u00e1rmely anonimiz\u00e1l\u00f3 algoritmust b\u00e1rmely progress megjelen\u00edt\u00e9ssel lehessen haszn\u00e1lni. Ez jelen pillanatban n\u00e9gy keresztkombin\u00e1ci\u00f3t jelent:</p> Anonimiz\u00e1l\u00f3 Progress N\u00e9v anonimiz\u00e1l\u00f3 Egyszer\u0171 progress N\u00e9v anonimiz\u00e1l\u00f3 Sz\u00e1zal\u00e9k progress Kor anonimiz\u00e1l\u00f3 Egyszer\u0171 progress Kor anonimiz\u00e1l\u00f3 Sz\u00e1zal\u00e9k progress <p>Ugorjunk a k\u00e9sz megold\u00e1sra (3-TemplateMethod/TemplateMethod-3-ProgressMultiple projekt). K\u00f3d helyett a <code>Main.cd</code> oszt\u00e1lydiagramot nyissuk meg a projektben, \u00e9s a megold\u00e1st az alapj\u00e1n tekintj\u00fck \u00e1t (vagy n\u00e9zhetj\u00fck a diagramot al\u00e1bb az \u00fatmutat\u00f3ban).</p> Template Method alap\u00fa megold\u00e1s (k\u00e9t aspektus) oszt\u00e1lydiagram <p></p> <p>\u00c9rezhet\u0151, hogy valami \"baj van\", minden keresztkombin\u00e1ci\u00f3nak k\u00fcl\u00f6n lesz\u00e1rmazottat kellett l\u00e9trehozni. S\u0151t, a k\u00f3dduplik\u00e1ci\u00f3 cs\u00f6kkent\u00e9s\u00e9re m\u00e9g plusz, k\u00f6ztes oszt\u00e1lyok is vannak a hierarchi\u00e1ban. R\u00e1ad\u00e1sul:</p> <ul> <li>Ha a j\u00f6v\u0151ben \u00faj anonimiz\u00e1l\u00f3 algoritmust vezet\u00fcnk be, annyi \u00faj oszt\u00e1lyt kell \u00edrni (legal\u00e1bb), ah\u00e1ny progress t\u00edpust t\u00e1mogatunk.</li> <li>Ha a j\u00f6v\u0151ben \u00faj progress t\u00edpust vezet\u00fcnk be, annyi \u00faj oszt\u00e1lyt kell \u00edrni (legal\u00e1bb), ah\u00e1ny anonimiz\u00e1l\u00f3 t\u00edpust t\u00e1mogatunk.</li> </ul> <p>Mi okozta a probl\u00e9m\u00e1t? Az, hogy az oszt\u00e1lyunk viselked\u00e9s\u00e9t t\u00f6bb aspektus/dimenzi\u00f3 ment\u00e9n (p\u00e9ld\u00e1nkban az anonimiz\u00e1l\u00e1s \u00e9s progress) kell kiterjeszthet\u0151v\u00e9 tenni, \u00e9s ezeket sok keresztkombin\u00e1ci\u00f3ban kell t\u00e1mogatni. Ha \u00fajabb aspektusok ment\u00e9n kellene ezt megtenni (pl. beolvas\u00e1s m\u00f3dja, kimenet gener\u00e1l\u00e1sa), akkor a probl\u00e9ma exponenci\u00e1lisan tov\u00e1bb \"robbanna\". Ilyen esetekben a Template Method tervez\u00e9si minta nem alkalmazhat\u00f3.</p>"},{"location":"labor/6-tervezesi-mintak/#7-megoldas-4-strategystrategy-1","title":"7. Megold\u00e1s (4-Strategy/Strategy-1)","text":"<p>Ebben a l\u00e9p\u00e9sben a Strategy tervez\u00e9si minta alkalmaz\u00e1s\u00e1val fogjuk a kezdeti megold\u00e1sunkat a sz\u00fcks\u00e9ges pontokban kiterjeszthet\u0151v\u00e9 tenni. A mint\u00e1ban a k\u00f6vetkez\u0151 elvek ment\u00e9n val\u00f3sul meg a \"v\u00e1ltozatlan/\u00fajrafelhaszn\u00e1lhat\u00f3\" \u00e9s \"v\u00e1ltoz\u00f3\" r\u00e9szek k\u00fcl\u00f6nv\u00e1laszt\u00e1sa:</p> <ul> <li>A \"k\u00f6z\u00f6s/v\u00e1ltozatlan\" r\u00e9szeket egy adott oszt\u00e1lyba tessz\u00fck (de ez most nem egy \"\u0151soszt\u00e1ly\" lesz).</li> <li>A Template Methoddal szemben nem \u00f6r\u00f6kl\u00e9st, hanem kompoz\u00edci\u00f3t (tartalmaz\u00e1st) alkalmazunk: interf\u00e9szk\u00e9nt tartalmazott m\u00e1s objektumokra b\u00edzzuk a viselked\u00e9s megval\u00f3s\u00edt\u00e1s\u00e1t a kiterjeszt\u00e9si pontokban (\u00e9s nem absztrakt/virtu\u00e1lis f\u00fcggv\u00e9nyekre).</li> <li>Mindezt az oszt\u00e1ly viselked\u00e9s\u00e9nek minden olyan aspektus\u00e1ra/dimenzi\u00f3j\u00e1ra, melyet lecser\u00e9lhet\u0151v\u00e9/b\u0151v\u00edthet\u0151v\u00e9 szeretn\u00e9nk tenni, egym\u00e1st\u00f3l f\u00fcggetlen\u00fcl megtessz\u00fck. Mint l\u00e1tni fogjuk, ezzel az el\u0151z\u0151 fejezetben tapasztalt kombinatorikus robban\u00e1s elker\u00fclhet\u0151.</li> </ul> <p>Ez sokkal egyszer\u0171bb a gyakorlatban, mint amilyennel le\u00edrva \u00e9rz\u0151dik (m\u00e1r haszn\u00e1ltuk is p\u00e1rszor kor\u00e1bbi tanulm\u00e1nyaink sor\u00e1n). \u00c9rts\u00fck meg a p\u00e9ld\u00e1nkra vet\u00edtve.</p> <p>A k\u00f6vetkez\u0151kben tekints\u00fck \u00e1t a Strategy alap\u00fa megold\u00e1st illusztr\u00e1l\u00f3 oszt\u00e1lydiagramot (a diagramot k\u00f6vet\u0151 magyar\u00e1zatra \u00e9p\u00edtve).</p> Strategy alap\u00fa megold\u00e1s oszt\u00e1lydiagram <p>Az al\u00e1bbi UML oszt\u00e1lydiagram illusztr\u00e1lja a Strategy alap\u00fa megold\u00e1st, a l\u00e9nyegre f\u00f3kusz\u00e1lva:</p> <p></p> <p>A Strategy minta alkalmaz\u00e1s\u00e1nak els\u0151 l\u00e9p\u00e9se, hogy meghat\u00e1rozzuk, az oszt\u00e1ly viselked\u00e9s\u00e9nek h\u00e1ny k\u00fcl\u00f6nb\u00f6z\u0151 aspektusa van, melyet kiterjeszthet\u0151v\u00e9 szeretn\u00e9nk tenni. A p\u00e9ld\u00e1nkban ebb\u0151l - egyel\u0151re legal\u00e1bbis - kett\u0151 van:</p> <ul> <li>Anonimiz\u00e1l\u00e1shoz k\u00f6t\u0151d\u0151 viselked\u00e9s, melyhez k\u00e9t m\u0171velet tartozik:<ul> <li>Anonimiz\u00e1l\u00f3 logika</li> <li>Anonimiz\u00e1l\u00f3 logika le\u00edr\u00e1s\u00e1nak meghat\u00e1roz\u00e1sa (description string el\u0151\u00e1ll\u00edt\u00e1sa)</li> </ul> </li> <li>Progress kezel\u00e9s, melyhez egy m\u0171velet tartozik:<ul> <li>Progress megjelen\u00edt\u00e9se</li> </ul> </li> </ul> <p>A nehez\u00e9vel meg is vagyunk, ett\u0151l kezdve alapvet\u0151en mechanikusan lehet dolgozni a Strategy mint\u00e1t k\u00f6vetve:</p> <ol> <li>A fenti aspektusok mindegyik\u00e9hez egy-egy strategy interf\u00e9szt kell bevezetni, a fent meghat\u00e1rozott m\u0171veletekkel, \u00e9s ezekhez el kell k\u00e9sz\u00edteni a megfelel\u0151 implement\u00e1ci\u00f3kat.</li> <li>Az <code>Anonymizer</code> oszt\u00e1lyba be kell vezetni egy-egy strategy interf\u00e9sz tagv\u00e1ltoz\u00f3t, \u00e9s a kiterjeszt\u00e9si pontokban ezen tagv\u00e1ltoz\u00f3kon kereszt\u00fcl haszn\u00e1lni az aktu\u00e1lisan be\u00e1ll\u00edtott strategy implement\u00e1ci\u00f3s objektumokat.</li> </ol> <p>A fenti oszt\u00e1lydiagramon meg is jelennek ezek az elemek. Most t\u00e9rj\u00fcnk \u00e1t a k\u00f3dra. Kiindul\u00f3 k\u00f6rnyezet\u00fcnk a \"4-Strategy\" mapp\u00e1ban a \"Strategy-0-Begin\" projektben tal\u00e1lhat\u00f3, ebben dolgozzunk. Ez ugyanaz, az enum-ot haszn\u00e1l\u00f3 megold\u00e1s, mint amelyet a Template Method minta eset\u00e9ben is kiindul\u00e1sk\u00e9nt haszn\u00e1ltunk. </p>"},{"location":"labor/6-tervezesi-mintak/#anonimizalasi-strategia","title":"Anonimiz\u00e1l\u00e1si strat\u00e9gia","text":"<p>Az anonimiz\u00e1l\u00e1si strat\u00e9gia/aspektus kezel\u00e9s\u00e9vel kezd\u00fcnk. Vezess\u00fck be az ehhez tartoz\u00f3 interf\u00e9szt:</p> <ol> <li>Hozzunk l\u00e9tre a projektben egy <code>AnonymizerAlgorithms</code> nev\u0171 mapp\u00e1t (jobb katt a \"Strategy-0-Begin\" projekten, majd Add/New Folder men\u00fc). A k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben minden interf\u00e9szt \u00e9s oszt\u00e1lyt egy k\u00fcl\u00f6n, a nev\u00e9nek megfelel\u0151 forr\u00e1sf\u00e1jlba tegy\u00fcnk a szok\u00e1sos m\u00f3don!</li> <li> <p>Vegy\u00fcnk fel ebben a mapp\u00e1ban egy <code>IAnonymizerAlgorithm</code> interf\u00e9szt az al\u00e1bbi k\u00f3ddal:</p> IAnonymizerAlgorithm.cs<pre><code>public interface IAnonymizerAlgorithm\n{\n    Person Anonymize(Person person);\n    string GetAnonymizerDescription() =&gt; GetType().Name;\n}\n</code></pre> <p>Azt is megfigyelhetj\u00fck a <code>GetAnonymizerDescription</code> m\u0171velet eset\u00e9ben, hogy a modern C# nyelven, amennyiben akarunk, tudunk az egyes interf\u00e9sz m\u0171veleteknek alap\u00e9rtelmezett implement\u00e1ci\u00f3t adni!</p> </li> </ol> <p>Most ennek az interf\u00e9sznek a n\u00e9v anonimiz\u00e1l\u00e1shoz tartoz\u00f3 megval\u00f3s\u00edt\u00e1s\u00e1t k\u00e9sz\u00edtj\u00fck el (vagyis egy strategy implement\u00e1ci\u00f3t k\u00e9sz\u00edt\u00fcnk). </p> <ol> <li>Vegy\u00fcnk fel egy <code>NameMaskingAnonymizerAlgorithm</code> oszt\u00e1lyt ugyenebbe a mapp\u00e1ba.</li> <li>Az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l mozgassuk \u00e1t a <code>NameMaskingAnonymizerAlgorithm</code>-be az ide tartoz\u00f3 <code>_mask</code> tagv\u00e1ltoz\u00f3t:</li> <li> <p>A <code>NameMaskingAnonymizerAlgorithm</code>-be vegy\u00fck fel a k\u00f6vetkez\u0151 konstruktort:</p> <pre><code>public NameMaskingAnonymizerAlgorithm(string mask)\n{\n    _mask = mask;\n}\n</code></pre> </li> <li> <p>Val\u00f3s\u00edtsuk meg a <code>IAnonymizerAlgorithm</code> interf\u00e9szt. Miut\u00e1n az oszt\u00e1ly neve ut\u00e1n be\u00edrjuk a <code>: IAnonymizerAlgorithm</code> interf\u00e9szt, c\u00e9lszer\u0171 a m\u0171veletek v\u00e1z\u00e1t a Visual Studioval legener\u00e1ltatni: tegy\u00fck a kurzort a interf\u00e9sz nev\u00e9re (kattintsunk r\u00e1 a forr\u00e1sk\u00f3dban), haszn\u00e1ljuk a 'ctrl' + '.' billenty\u0171kombin\u00e1ci\u00f3t, majd a megjelen\u0151 men\u00fcben \"Implement interface\" kiv\u00e1laszt\u00e1sa. Megjegyz\u00e9s: mivel a <code>GetAnonymizerDescription</code> m\u0171velethez van alap\u00e9rtelmezett implement\u00e1ci\u00f3 az interf\u00e9szben, csak az <code>Anonymize</code> m\u0171velet gener\u00e1l\u00f3dik le, de ez most nek\u00fcnk egyel\u0151re rendben van \u00edgy. </p> </li> <li>Az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l vegy\u00fck \u00e1t a <code>Anonymize_MaskName</code> m\u0171velet t\u00f6rzs\u00e9t a <code>NameMaskingAnonymizerAlgorithm</code>.<code>Anonymize</code>-be. A f\u00fcggv\u00e9ny t\u00f6rzs\u00e9t csak annyiban kell \u00e1t\u00edrni, hogy ne a m\u00e1r nem l\u00e9tez\u0151 <code>mask</code> param\u00e9tert, hanem a <code>_mask</code> tagv\u00e1ltoz\u00f3t haszn\u00e1lja. Az <code>Anonymize</code> oszt\u00e1ly <code>Anonymize_MaskName</code>-et pedig t\u00f6r\u00f6lj\u00fck.</li> <li> <p>A stategy interf\u00e9sz <code>GetAnonymizerDescription</code>m\u0171velet\u00e9nek megval\u00f3s\u00edt\u00e1s\u00e1ra t\u00e9r\u00fcnk most \u00e1t. Az <code>Anonymizer</code> oszt\u00e1ly <code>GetAnonymizerDescription</code> m\u0171velet\u00e9t m\u00e1soljuk \u00e1t a <code>NameMaskingAnonymizerAlgorithm</code>-be, a f\u00fcggv\u00e9ny t\u00f6rzs\u00e9ben csak a n\u00e9v anonimiz\u00e1l\u00f3ra vonatkoz\u00f3 logik\u00e1t meghagyva, a m\u0171veletet publikuss\u00e1 t\u00e9ve:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}  \n</code></pre> </li> <li> Ezzel a n\u00e9v anonimiz\u00e1l\u00e1shoz tartoz\u00f3 strategy implement\u00e1ci\u00f3nk elk\u00e9sz\u00fclt, a teljes k\u00f3dja a k\u00f6vetkez\u0151 lett NameMaskingAnonymizerAlgorithm.cs<pre><code>public class NameMaskingAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly string _mask;\n\n    public NameMaskingAnonymizerAlgorithm(string mask)\n    {\n        _mask = mask;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        return new Person(_mask, _mask, person.CompanyName,\n            person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"NameMasking anonymizer with mask {_mask}\";\n    }\n}\n</code></pre> </li> </ol> <p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben az <code>IAnonymizerAlgorithm</code> strategy interf\u00e9sz\u00fcnk \u00e9letkor anonimiz\u00e1l\u00e1shoz tartoz\u00f3 megval\u00f3s\u00edt\u00e1s\u00e1t k\u00e9sz\u00edtj\u00fck el.</p> <ol> <li>Vegy\u00fcnk fel egy <code>AgeAnonymizerAlgorithm</code> oszt\u00e1lyt ugyenebbe a mapp\u00e1ba (AnonymizerAlgorithms).</li> <li>Az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l mozgassuk \u00e1t a <code>AgeAnonymizerAlgorithm</code>-be az ide tartoz\u00f3 <code>_rangeSize</code> tagv\u00e1ltoz\u00f3t:</li> <li> <p>A <code>AgeAnonymizerAlgorithm</code>-be vegy\u00fck fel a k\u00f6vetkez\u0151 konstruktort:</p> <pre><code>public AgeAnonymizerAlgorithm(int rangeSize)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> <li> <p>Val\u00f3s\u00edtsuk meg a <code>IAnonymizerAlgorithm</code> interf\u00e9szt. Miut\u00e1n az oszt\u00e1ly neve ut\u00e1n be\u00edrjuk a <code>: IAnonymizerAlgorithm</code> interf\u00e9szt, most is c\u00e9lszer\u0171 az <code>Anonymize</code> m\u0171velet v\u00e1z\u00e1t a Visual Studioval a kor\u00e1bbihoz hasonl\u00f3 m\u00f3don legener\u00e1ltatni. </p> </li> <li>Az <code>Anonymizer</code> oszt\u00e1lyb\u00f3l vegy\u00fck \u00e1t az <code>Anonymize_AgeRange</code> m\u0171velet t\u00f6rzs\u00e9t a <code>AgeAnonymizerAlgorithm</code>.<code>Anonymize</code>-be. A f\u00fcggv\u00e9ny t\u00f6rzs\u00e9t csak annyiban kell \u00e1t\u00edrni, hogy ne a m\u00e1r nem l\u00e9tez\u0151 <code>rangeSize</code> param\u00e9tert, hanem a <code>_rangeSize</code> tagv\u00e1ltoz\u00f3t haszn\u00e1lja. Az <code>Anonymize</code> oszt\u00e1ly <code>Anonymize_AgeRange</code>-et pedig t\u00f6r\u00f6lj\u00fck.</li> <li> <p>A stategy interf\u00e9sz <code>GetAnonymizerDescription</code>m\u0171velet\u00e9nek megval\u00f3s\u00edt\u00e1s\u00e1ra t\u00e9r\u00fcnk most \u00e1t. Az <code>Anonymizer</code> oszt\u00e1ly <code>GetAnonymizerDescription</code> m\u0171velet\u00e9t m\u00e1soljuk \u00e1t az <code>AgeAnonymizerAlgorithm</code>-be, a f\u00fcggv\u00e9ny t\u00f6rzs\u00e9ben csak a kor anonimiz\u00e1l\u00f3ra vonatkoz\u00f3 logik\u00e1t meghagyva, a m\u0171veletet publikuss\u00e1 t\u00e9ve:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n} \n</code></pre> </li> <li> Ezzel a kor anonimiz\u00e1l\u00e1shoz tartoz\u00f3 strategy implement\u00e1ci\u00f3nk elk\u00e9sz\u00fclt, a teljes k\u00f3dja a k\u00f6vetkez\u0151 lett AgeAnonymizerAlgorithm.cs<pre><code>public class AgeAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly int _rangeSize;\n\n    public AgeAnonymizerAlgorithm(int rangeSize)\n    {\n        _rangeSize = rangeSize;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        // This is whole number integer arithmetics, e.g for 55 / 20 we get 2\n        int rangeIndex = int.Parse(person.Age) / _rangeSize;\n        string newAge = $\"{rangeIndex * _rangeSize}..{(rangeIndex + 1) * _rangeSize}\";\n\n        return new Person(person.FirstName, person.LastName, person.CompanyName,\n            person.Address, person.City, person.State, newAge,\n            person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"Age anonymizer with range size {_rangeSize}\";\n    }\n}\n</code></pre> </li> </ol> <p> Mindenk\u00e9ppen figyelj\u00fck meg, hogy az interf\u00e9sz \u00e9s a megval\u00f3s\u00edt\u00e1sai kiz\u00e1r\u00f3lag az anonimiz\u00e1l\u00e1ssal foglalkoznak, semmif\u00e9le m\u00e1s logika (pl. progress kezel\u00e9s) nincs itt!</p>"},{"location":"labor/6-tervezesi-mintak/#progress-strategia","title":"Progress strat\u00e9gia","text":"<p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben vezess\u00fck be a progress kezel\u00e9shez tartoz\u00f3 interf\u00e9szt \u00e9s implement\u00e1ci\u00f3kat:</p> <ol> <li>Hozzunk l\u00e9tre a projektben egy <code>Progresses</code> nev\u0171 mapp\u00e1t. A k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben minden interf\u00e9szt \u00e9s oszt\u00e1lyt egy k\u00fcl\u00f6n, a nev\u00e9nek megfelel\u0151 forr\u00e1sf\u00e1jlba tegy\u00fcnk a szok\u00e1sos m\u00f3don.</li> <li> <p>Vegy\u00fcnk fel ebben a mapp\u00e1ban egy <code>IProgress</code> interf\u00e9szt az al\u00e1bbi k\u00f3ddal:</p> Megold\u00e1s IProgress.cs<pre><code>public interface IProgress\n{\n    void Report(int count, int index);\n}\n</code></pre> </li> <li> <p>Vegy\u00fck fel ennek az interf\u00e9sznek az egyszer\u0171 progresshez tartoz\u00f3 megval\u00f3s\u00edt\u00e1s\u00e1t ugyanebbe a mapp\u00e1ba. Az implement\u00e1ci\u00f3 az <code>Anonymizer</code> oszt\u00e1lyunk <code>PrintProgress</code> m\u0171velet\u00e9b\u0151l lett \"levezetve\":</p> Megold\u00e1s SimpleProgress.cs<pre><code>public class SimpleProgress: IProgress\n{\n    public void Report(int count, int index)\n    {\n        Console.WriteLine($\"{index + 1}. person processed\");\n    }\n}\n</code></pre> </li> <li> <p>Vegy\u00fck fel ennek az interf\u00e9sznek a sz\u00e1zal\u00e9kos progresshez tartoz\u00f3 megval\u00f3s\u00edt\u00e1s\u00e1t ugyanebbe a mapp\u00e1ba. A k\u00f3d \u00e9rtelmez\u00e9s\u00e9vel ne foglalkozzunk. Erre megold\u00e1s az <code>Anonymizer</code> oszt\u00e1lyunkban nincs, hiszen ezt csak a template method alap\u00fa megold\u00e1sunkn\u00e1l vezett\u00fck be (ott nem n\u00e9zt\u00fck a k\u00f3dj\u00e1t, de azzal gyakorlatilag megegyezik a l\u00e9nyege):</p> Megold\u00e1s PercentProgress.cs<pre><code>public class PercentProgress: IProgress\n{\n    public void Report(int count, int index)\n    {\n        int percentage = (int)((double)(index+1) / count * 100);\n\n        Console.Write($\"\\rProcessing: {percentage} %\");\n\n        if (index == count - 1)\n            Console.WriteLine();\n    }\n}\n</code></pre> </li> </ol> <p> Mindenk\u00e9ppen figyelj\u00fck meg, hogy az interf\u00e9sz \u00e9s a megval\u00f3s\u00edt\u00e1sai kiz\u00e1r\u00f3lag a progress kezel\u00e9ssel foglalkoznak, semmif\u00e9le m\u00e1s logika (pl. anonimiz\u00e1l\u00e1s) nincs itt!</p>"},{"location":"labor/6-tervezesi-mintak/#a-strategiak-alkalmazasa","title":"A strat\u00e9gi\u00e1k alkalmaz\u00e1sa","text":"<p>A k\u00f6vetkez\u0151 fontos l\u00e9p\u00e9s az anonimiz\u00e1l\u00f3 alaposzt\u00e1ly \u00fajrafelhaszn\u00e1lhat\u00f3v\u00e1 \u00e9s kiterjeszthet\u0151v\u00e9 t\u00e9tele a fent bevezetett strategy-k seg\u00edts\u00e9g\u00e9vel. Az <code>Anonymizer.cs</code> f\u00e1jlban:</p> <ol> <li> <p>T\u00f6r\u00f6lj\u00fck a k\u00f6vetkez\u0151ket:</p> <ul> <li><code>AnonymizerMode</code> enum t\u00edpus</li> <li><code>_anonymizerMode</code> tag (illetve a <code>_mask</code> \u00e9s <code>_rangeSize</code> tagok, ha esetleg itt maradtak kor\u00e1bban)</li> </ul> </li> <li> <p>Vezess\u00fcnk be egy-egy strategy interf\u00e9sz t\u00edpus\u00fa tagot:</p> <pre><code>private readonly IProgress _progress;\nprivate readonly IAnonymizerAlgorithm _anonymizerAlgorithm;\n</code></pre> </li> <li> <p>A f\u00e1jl elej\u00e9re sz\u00farjunk be a megfelel\u0151 usingokat:</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> <li> <p>Az el\u0151z\u0151 pontban bevezetett <code>_progress</code> \u00e9s <code>_anonymizerAlgorithm</code> kezd\u0151\u00e9rt\u00e9ke null, a konstruktorban \u00e1ll\u00edtsuk ezeket a referenci\u00e1kat az ig\u00e9nyeinknek megfelel\u0151 implement\u00e1ci\u00f3ra. Pl.:</p> <pre><code>public Anonymizer(string inputFileName, string mask) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new NameMaskingAnonymizerAlgorithm(mask);\n}\n\npublic Anonymizer(string inputFileName, int rangeSize) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new AgeAnonymizerAlgorithm(rangeSize);\n}\n</code></pre> </li> </ol> <p>Az <code>Anonymizer</code> oszt\u00e1lyban a jelenleg be\u00e9getett, de anonimiz\u00e1l\u00e1s f\u00fcgg\u0151 logik\u00e1kat b\u00edzzuk a <code>_anonymizerAlgorithm</code> tagv\u00e1ltoz\u00f3 \u00e1ltal hivatkozott strategy implement\u00e1ci\u00f3ra:</p> <ol> <li> <p>Az oszt\u00e1ly <code>Run</code> f\u00fcggv\u00e9ny\u00e9ben az <code>if</code>/<code>else</code> kifejez\u00e9sben tal\u00e1lhat\u00f3 <code>Anonymize</code> h\u00edv\u00e1sokat most m\u00e1r deleg\u00e1ljuk a <code>_anonymizerAlgorithm</code> objektumnak:</p> <pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> <p>helyett:</p> <pre><code>Person person = _anonymizerAlgorithm.Anonymize(persons[i]);\n</code></pre> </li> <li> <p>Ha esetleg kor\u00e1bban nem tett\u00fck meg, t\u00f6r\u00f6lj\u00fck a <code>Anonymize_MaskName</code> \u00e9s <code>Anonymize_AgeRange</code> f\u00fcggv\u00e9nyeket, hiszen ezek k\u00f3dja m\u00e1r a strategy implement\u00e1ci\u00f3kba ker\u00fclt, az oszt\u00e1lyr\u00f3l lev\u00e1lasztva.</p> </li> <li> <p>A <code>PrintSummary</code> f\u00fcggv\u00e9ny\u00fcnk a rugalmatlan, <code>switch</code> alapokon m\u0171k\u00f6d\u0151 <code>GetAnonymizerDescription</code>-t h\u00edvja. Ezt a <code>GetAnonymizerDescription</code> h\u00edv\u00e1st cser\u00e9lj\u00fck le, deleg\u00e1ljuk a <code>_anonymizerAlgorithm</code> objektumnak. A <code>PrintSummary</code> f\u00fcggv\u00e9nyben (csak a l\u00e9nyeget kiemelve):</p> <pre><code>    ... GetAnonymizerDescription() ...\n</code></pre> <p>helyett:</p> <pre><code>    ... _anonymizerAlgorithm.GetAnonymizerDescription() ...\n</code></pre> <p>P\u00e1r sorral lejjebb a <code>GetAnonymizerDescription</code> f\u00fcggv\u00e9nyt t\u00f6r\u00f6lj\u00fck is az oszt\u00e1lyb\u00f3l (ennek k\u00f3dja megfelel\u0151 strategy implement\u00e1ci\u00f3kba bek\u00fclt).</p> </li> </ol> <p>Az utols\u00f3 l\u00e9p\u00e9s az <code>Anonymizer</code> oszt\u00e1lyba be\u00e9getett progress kezel\u00e9s lecser\u00e9l\u00e9se:</p> <ol> <li> <p>Itt is deleg\u00e1ljuk a k\u00e9r\u00e9st, m\u00e9gpedig a kor\u00e1bban bevezetett <code>_progress</code> objektumunknak. A <code>Run</code> f\u00fcggv\u00e9nyben egy sort kell ehhez lecser\u00e9lni:</p> <pre><code>PrintProgress(i);\n</code></pre> <p>helyett:</p> <pre><code>_progress.Report(persons.Count, i);\n</code></pre> </li> <li> <p>T\u00f6r\u00f6lj\u00fck a <code>PrintProgress</code> f\u00fcggv\u00e9nyt, hiszen ennek k\u00f3dja m\u00e1r egy megfelel\u0151 strategy implement\u00e1ci\u00f3ba ker\u00fclt, az oszt\u00e1lyr\u00f3l lev\u00e1lasztva.</p> </li> </ol> <p>Elk\u00e9sz\u00fclt\u00fcnk, a k\u00e9sz megold\u00e1s a \"4-Strategy/Strategy-1\" projektben meg is tal\u00e1lhat\u00f3 (ha valahol elakadtunk, vagy nem fordul a k\u00f3d, ezzel \u00f6ssze lehet n\u00e9zni).</p>"},{"location":"labor/6-tervezesi-mintak/#a-megoldas-ertekelese_3","title":"A megold\u00e1s \u00e9rt\u00e9kel\u00e9se","text":"<p>A strategy minta bevezet\u00e9s\u00e9vel elk\u00e9sz\u00fclt\u00fcnk. Jelen form\u00e1j\u00e1ban ugyanakkor szinte soha nem haszn\u00e1ljuk. Ellen\u0151rizz\u00fck a megold\u00e1sunkat: val\u00f3ban \u00fajrafelhaszn\u00e1lhat\u00f3, \u00e9s az <code>Anomymizer</code> oszt\u00e1ly m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl lehet\u0151s\u00e9g van-e az anonimiz\u00e1l\u00f3 algoritmus, illetve a progress kezel\u00e9s megv\u00e1ltoztat\u00e1s\u00e1ra? Ehhez azt kell megn\u00e9zni, b\u00e1rhol az oszt\u00e1lyban van-e olyan k\u00f3d, mely implement\u00e1ci\u00f3 f\u00fcgg\u0151.</p> <p>Sajnos tal\u00e1lunk ilyet. A konstruktorba be van \u00e9getve, milyen algoritmus implement\u00e1ci\u00f3t \u00e9s progress implement\u00e1ci\u00f3t hozunk l\u00e9tre. Ezt mindenk\u00e9ppen n\u00e9zz\u00fck meg a k\u00f3dban! Ha algoritmus vagy progress m\u00f3dot akarunk v\u00e1ltoztatni, ezekben a sorokban \u00e1t kell \u00edrni a <code>new</code> oper\u00e1tor ut\u00e1ni t\u00edpust, mely \u00edgy az oszt\u00e1ly m\u00f3dos\u00edt\u00e1s\u00e1val j\u00e1r.</p> <p>Sokan - teljesen jogosan - ezt jelen form\u00e1j\u00e1ban nem is tekintik igazi Strategy alap\u00fa megold\u00e1snak. A teljes k\u00f6r\u0171 megold\u00e1st a k\u00f6vetkez\u0151 l\u00e9p\u00e9sben val\u00f3s\u00edtjuk meg.</p>"},{"location":"labor/6-tervezesi-mintak/#8-megoldas-4-strategystrategy-2-di","title":"8. Megold\u00e1s (4-Strategy/Strategy-2-DI)","text":"<p> Dependency Injection (DI) A megold\u00e1st a Dependency Injection (r\u00f6viden DI) alkalmaz\u00e1sa jelenti. Ennek l\u00e9nyege az, hogy nem maga az oszt\u00e1ly p\u00e9ld\u00e1nyos\u00edtja a viselked\u00e9sbeli f\u00fcgg\u0151s\u00e9geit (ezek a strategy implement\u00e1ci\u00f3k), hanem ezeket k\u00edv\u00fclr\u0151l adjuk \u00e1t neki, pl. konstruktor param\u00e9terekben, vagy ak\u00e1r property-k vagy setter m\u0171veletek form\u00e1j\u00e1ban. Term\u00e9szetesen interf\u00e9sz t\u00edpusk\u00e9nt hivatkozva!</p> <p>Alak\u00edtsuk \u00e1t ennek megfelel\u0151en az <code>Anonymizer</code> oszt\u00e1lyt \u00fagy, hogy ne maga p\u00e9ld\u00e1nyos\u00edtsa a strategy implement\u00e1ci\u00f3it, hanem konstruktor param\u00e9terekben kapja meg azokat:</p> <ol> <li>T\u00f6r\u00f6lj\u00fck mindh\u00e1rom konstruktor\u00e1t</li> <li> <p>Vegy\u00fck fel a k\u00f6vetkez\u0151 konstruktort:</p> <pre><code>public Anonymizer(string inputFileName, IAnonymizerAlgorithm anonymizerAlgorithm, IProgress progress = null)\n{\n    ArgumentException.ThrowIfNullOrEmpty(inputFileName);\n    ArgumentNullException.ThrowIfNull(anonymizerAlgorithm);\n\n    _inputFileName = inputFileName;\n    _anonymizerAlgorithm = anonymizerAlgorithm;\n    _progress = progress;\n}\n</code></pre> <p>Mint l\u00e1that\u00f3, a <code>progress</code> param\u00e9ter megad\u00e1sa nem k\u00f6telez\u0151, hiszen lehet, hogy az oszt\u00e1ly haszn\u00e1l\u00f3ja nem k\u00edv\u00e1ncsi semmif\u00e9le progress inform\u00e1ci\u00f3ra.</p> </li> <li> <p>Mivel a _progress strategy null is lehet, egy null vizsg\u00e1latot be kell vezess\u00fcnk a haszn\u00e1lata sor\u00e1n. A \".\" oper\u00e1tor helyett a \"?.\" oper\u00e1tort haszn\u00e1ljuk:</p> <pre><code>_progress?.Report(persons.Count,i);\n</code></pre> </li> <li> <p>Most m\u00e1r elk\u00e9sz\u00fclt\u00fcnk, az <code>Anonymizer</code> oszt\u00e1ly teljesen f\u00fcggetlen lett a strategy implement\u00e1ci\u00f3kt\u00f3l. Lehet\u0151s\u00e9g\u00fcnk van az <code>Anonymizer</code> oszt\u00e1lyt b\u00e1rmilyen anonimiz\u00e1l\u00f3 algoritmus \u00e9s b\u00e1rmilyen progress kezel\u00e9s kombin\u00e1ci\u00f3val haszn\u00e1lni (annak m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl). Hozzunk is l\u00e9tre h\u00e1rom <code>Anonymizer</code> k\u00fcl\u00f6nb\u00f6z\u0151 kombin\u00e1ci\u00f3kkal a <code>Program.cs</code> f\u00e1jl <code>Main</code> f\u00fcggv\u00e9ny\u00e9ben (a megl\u00e9v\u0151 k\u00f3dot el\u0151tte t\u00f6r\u00f6lj\u00fck a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l):</p> <pre><code>Anonymizer p1 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new SimpleProgress());\np1.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p2 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new PercentProgress());\np2.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p3 = new(\"us-500.csv\",\n    new AgeAnonymizerAlgorithm(20),\n    new SimpleProgress());\np3.Run();\n</code></pre> </li> <li> <p>Ahhoz, hogy a k\u00f3d foruljon, sz\u00farjuk be a f\u00e1jl elej\u00e9re a sz\u00fcks\u00e9ges <code>using</code>-okat</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> </ol> <p>Elk\u00e9sz\u00fclt\u00fcnk, a k\u00e9sz megold\u00e1s a \"4-Strategy/Strategy-2-DI\" projektben meg is tal\u00e1lhat\u00f3 (ha valahol elakadtunk, vagy nem fordul a k\u00f3d, ezzel \u00f6ssze lehet n\u00e9zni).</p> <p>A m\u0171k\u00f6d\u00e9s ellen\u0151rz\u00e9se</p> <p>A gyakorlat sor\u00e1n erre val\u00f3sz\u00edn\u0171leg nem lesz id\u0151, de aki bizonytalan abban, \"mit\u0151l is m\u0171k\u00f6dik\" a strategy minta, mit\u0151l lesz m\u00e1s a viselked\u00e9s a fenti n\u00e9gy esetre: \u00e9rdemes t\u00f6r\u00e9spontokat tenni a <code>Program.cs</code> f\u00e1jlban a n\u00e9gy <code>Run</code> f\u00fcggv\u00e9nyh\u00edv\u00e1sra, \u00e9s a f\u00fcggv\u00e9nyekbe a debuggerben belel\u00e9pkedve kipr\u00f3b\u00e1lni, hogy mindig a megfelel\u0151 strategy implement\u00e1ci\u00f3 h\u00edv\u00f3dik meg.</p> <p>A projektben tal\u00e1lhat\u00f3 egy oszt\u00e1lydiagram (<code>Main.cd</code>), ezen is megtekinthet\u0151 a k\u00e9sz megold\u00e1s:</p> Strategy alap\u00fa megold\u00e1s oszt\u00e1lydiagram <p>Az al\u00e1bbi UML oszt\u00e1lydiagram illusztr\u00e1lja a Strategy alap\u00fa megold\u00e1sunkat:</p> <p></p>"},{"location":"labor/6-tervezesi-mintak/#a-megoldas-ertekelese_4","title":"A megold\u00e1s \u00e9rt\u00e9kel\u00e9se","text":"<p>Ellen\u0151rizz\u00fck a megold\u00e1st, megval\u00f3s\u00edtja-e a c\u00e9ljainkat:</p> <ul> <li>Az <code>Anonymizer</code> egy \u00fajrafelhaszn\u00e1lhat\u00f3(bb) oszt\u00e1ly lett.</li> <li>Ha \u00faj anonimiz\u00e1l\u00f3 logik\u00e1ra van sz\u00fcks\u00e9g a j\u00f6v\u0151ben, csak egy \u00faj <code>IAnonymizerAlgorithm</code> implement\u00e1ci\u00f3t kell bevezetni. Ez nem m\u00f3dos\u00edt\u00e1s, hanem kiterjeszt\u00e9s/b\u0151v\u00edt\u00e9s.</li> <li>Ha \u00faj progress logik\u00e1ra van sz\u00fcks\u00e9g a j\u00f6v\u0151ben, csak egy \u00faj <code>IProgress</code> implement\u00e1ci\u00f3t kell bevezetni. Ez nem m\u00f3dos\u00edt\u00e1s, hanem b\u0151v\u00edt\u00e9s.</li> <li>A fenti k\u00e9t pontban teljes\u00fcl az OPEN/CLOSED elv, vagyis az <code>Anonymizer</code> k\u00f3dj\u00e1nak m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl tudjuk a logik\u00e1j\u00e1t testre szabni, kiterjeszteni.</li> <li>Itt nem kell tartani a Template Methodn\u00e1l tapasztalt kombinatorikus robban\u00e1st\u00f3l: b\u00e1rmely <code>IAnonymizerAlgorithm</code> implement\u00e1ci\u00f3 b\u00e1rmely <code>IProgress</code> implement\u00e1ci\u00f3val k\u00e9nyelmesen haszn\u00e1lhat\u00f3, nem kell a kombin\u00e1ci\u00f3khoz \u00faj oszt\u00e1lyokat bevezetni (ezt l\u00e1ttuk a <code>Program.cs</code> f\u00e1jlban).</li> </ul> <p>Tov\u00e1bbi Strategy el\u0151ny\u00f6k a Template Methoddal szemben *</p> <ul> <li>Fut\u00e1s k\u00f6zben lecser\u00e9lhet\u0151 viselked\u00e9s is megval\u00f3s\u00edthat\u00f3. Ha sz\u00fcks\u00e9g lenne arra, hogy egy adott <code>Anonymizer</code> objektumra vonatkoz\u00f3an a l\u00e9trehoz\u00e1sa ut\u00e1n meg tudjuk v\u00e1ltoztatni az anonimiz\u00e1l\u00f3 vagy progress viselked\u00e9st, akkor azt k\u00f6nnyen meg tudn\u00e1nk tenni (csak egy <code>SetAnonimizerAlgorithm</code>, ill. <code>SetProgress</code> m\u0171veletet kellene bevezetni, melyben a param\u00e9terben megkapott implement\u00e1ci\u00f3ra lehetne \u00e1ll\u00edtani az oszt\u00e1ly \u00e1ltal haszn\u00e1lt strategy-t).</li> <li>Egys\u00e9gtesztelhet\u0151s\u00e9g t\u00e1mogat\u00e1sa (laboron ezt nem n\u00e9zz\u00fck).</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_eng/","title":"6. Design patterns (extensibility)","text":""},{"location":"labor/6-tervezesi-mintak/index_eng/#the-aim-of-the-laboratory","title":"The aim of the laboratory","text":"<p>The goals of this laboratory (based on a more complex, real-life example):</p> <ul> <li>Practicing some basic design principles that support extensibility, reusability, code clarity, and maintainability: SRP, OPEN-CLOSED, DRY, KISS, etc.</li> <li>Applying design patterns most closely related to extensibility (Template Method, Strategy, Dependency Injection).</li> <li>Practicing and combining additional techniques that support extensibility and reusability (e.g. delegate/lambda expressions) with design patterns.</li> <li>Practicing code refactoring.</li> </ul> <p>Related lectures:</p> <ul> <li>Design patterns: patterns related to extensibility (introduction, Template Method, Strategy), as well as the \u201cpattern\u201d of Dependency Injection.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_eng/#prerequisites","title":"Prerequisites","text":"<p>Tools required for completing the laboratory:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>Laboratory on Linux or macOS</p> <p>The material for this laboratory is primarily intended for Windows and Visual Studio, but it can also be completed on other operating systems with different development tools (e.g., VS Code, Rider, Visual Studio for Mac), or even with a simple text editor and CLI tools. This is made possible by the fact that the examples are presented in the context of a simple Console application (no Windows-specific elements), and the .NET 8 SDK is supported on Linux and macOS. Hello World on Linux.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#theoretical-background-and-approach","title":"Theoretical background and approach *","text":"<p>When developing more complex applications, we face numerous design decisions where we must choose from various options. If we do not consider maintainability and extensibility during these decisions, development can quickly become a nightmare. Client requests for changes and enhancements often require large-scale code rewrites/modifications, which can introduce new bugs and require significant effort for retesting the codebase.</p> <p>Our goal is to implement such change and extension requirements by extending the code at a few well-defined points \u2014 without significantly modifying existing code. The keyword is: extension instead of modification. Relatedly, if certain logic is extensible, it will also be more general, and can be reused more easily in multiple contexts. In the long run, this leads to faster progress, shorter code, and avoids code duplication (which also improves maintainability).</p> <p>Design patterns provide proven solutions to common design problems: they help make our code more extensible, maintainable, and as reusable as possible. This laboratory focuses on those patterns, design principles, and programming tools that address the above issues. However, we should avoid overengineering: only apply a design pattern if it provides real benefits in a given case. Otherwise, it just adds unnecessary complexity. In this spirit, our goal is not (and often not even possible) to foresee every future extensibility need. The key is to start from a simple solution, recognize issues as they arise, and continuously refactor our code to meet current (functional and non-functional) requirements and improve extensibility and reusability where appropriate.</p> <p>It\u2019s also worth noting that related design patterns and language tools can greatly assist in making our code unit testable: in many companies, it's a (justified) basic expectation during software development that developers write unit tests with high code coverage. However, achieving this is practically impossible if the units/classes in our code are too tightly coupled.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#task-0-getting-familiar-with-the-assignment-and-the-starter-application","title":"Task 0 \u2013 Getting familiar with the assignment and the starter application","text":"<p>Clone the starting application repository for Lab 6 from the following repository:</p> <ul> <li>Open a command prompt</li> <li>Navigate to any folder, for example: <code>c:\\work\\NEPTUN</code></li> <li>Run the following command: <code>git clone https://github.com/bmeviauab00/lab-patterns-extensibility-kiindulo.git</code></li> <li>Open the Lab-Patterns-Extensibility.sln solution in Visual Studio.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_eng/#task-description","title":"Task description","text":"<p>During this lab, we will work on a console-based data processing (more precisely, anonymizing) application, making it extensible in different ways using various techniques, in response to continuously evolving requirements. As part of the first task, we\u2019ll also get familiar with the concept of anonymization.</p> <p>The input of the application is a CSV text file, where each line contains data related to a particular person. Open the us-500.csv file in the Data folder of the filesystem (double-click it or open with Notepad). You will see the data of individuals listed in quotes and separated by commas (note: these are not real individuals). Let\u2019s look at the first line:</p> <pre><code>\"James\",\"Rhymes\",\"Benton, John B Jr\",\"6649 N Blue Gum St\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"504-621-8927\",\"504-845-1427\",\"30\",\"65\",\"Heart-related\",\"jRhymes@gmail.com\"\n</code></pre> <p>The first person in the data row is named James Rhymes and works at the company \"Benton, John B Jr\". The next few fields represent address-related data. He is 30 years old and weighs 65 kg. The following field describes a more serious illness (in this case, \"Heart-related\"). The last column contains the person's email address.</p> Source and exact format of the data * <p>The data source is: https://www.briandunning.com/sample-data/, with a few extra fields added (age, weight, illness). The field order is: First Name, Last Name, Company, Address, City, County (where applicable), State/Province (where applicable), ZIP/Postal Code, Phone 1, Phone 2, Age, Weight, Illness, Email.</p> <p>The primary function of the application is to anonymize these records based on the current requirements and write the results to an output CSV text file. The goal of anonymization is to transform the data in such a way that individuals cannot be identified, while still allowing for meaningful reporting. Anonymization is a distinct, serious, and challenging area in data processing. In this lab, our goal is not to develop solutions that are usable in real-world environments or entirely meaningful. The main focus is on applying a data processing algorithm to demonstrate software design patterns. This provides a more engaging context than simple data filtering/sorting/etc., which .NET already supports natively.</p> <p>A few thoughts about anonymization</p> <p>At first glance, anonymization might seem like a simple problem. For example, one might think it's enough to remove or mask people's names, street addresses, phone numbers, and email addresses. For example, for the first row of our input, the output might look like this:</p> <pre><code>\"***\",\"***\",\"Benton, John B Jr\",\"***\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"***\",\"***\",\"30\",\"65\",\"Heart-related\",\"***\"\n</code></pre> <p>But it\u2019s not that simple, especially when dealing with large amounts of data. Imagine a small village where only a few people live. Suppose an anonymized person is 14 years old and weighs 95 kg. This is a rare \u2018combination\u2019, there is a good chance that no other person with these parameters lives in the village. If one of his classmates (an eighth grader, he is 14) looks at the \u2018anonymised\u2019 data, he will know who he is (there is no other eighth grader in the school who is that overweight), he will identify the person. So, for example, you he/she will know what illness the person has. Lesson: data can be revealing in context.</p> <p>So, what\u2019s the solution? We can\u2019t just remove or mask the city, age, or weight because we need them for reporting. A common approach is to generalize the data instead of showing exact values. For example, instead of showing an exact age or weight, we show a range (e.g., 10\u201320 years, 80\u2013100 kg). This way, individuals cannot be identified. We will also use this technique later on.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#initial-requirements","title":"Initial requirements","text":"<p>The initial requirements for the application are:</p> <ol> <li>Files received from a specific client (all with the same format) must be converted using the same anonymizing algorithm into the same output format. The anonymization should simply involve \"masking\" the first and last names.</li> <li>Some data cleaning is needed. There may be unnecessary <code>_</code> and <code>#</code> characters at the beginning or end of the city field in the input data, and these should be removed (trim operation).</li> <li>After processing each row, the application must print to the console that the row has been processed, and after processing all the data, some summary information should be displayed: how many rows were processed and how many required trimming of the city name.</li> <li>Key aspect: The application will be used only for a short period and is not intended to be expanded later.</li> </ol> <p>Note: In order to work with fewer fields in the code and to make the output clearer, a few fields will be omitted during processing.</p> <p>For example, the expected output for the first row of our input file would be:</p> <pre><code>***; ***; LA; New Orleans; 30; 65; Heart-related\n</code></pre>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-1-all-in-one-1-startstart","title":"Solution 1 - All-in-one (1-Start/Start)","text":"<p>In the Visual Studio Solution Explorer, we see folders named with numbers 1 through 4. These contain the solutions for each iteration of work. The first solution is located in the \"1-Start\" folder under the project name \"Start\". Let\u2019s take a look at the files in the project:</p> <ul> <li><code>Person.cs</code> - Contains the data of a person that is of interest to us. We read each person\u2019s data into objects of this class.</li> <li><code>Program.cs</code> - The main function is implemented here, with all the logic, \"separated\" by code comments. If the logic becomes more complicated, even after a few days (or hours), we might struggle to understand our own code. Let\u2019s not focus on this solution.</li> </ul> <p>Overall, the solution is very simple since we don\u2019t foresee a long future for the code. However, the \u201cscript-like,\u201d \u201call-in-one\u201d solution that puts everything in one function is still not the best direction. It makes the code hard to understand and difficult to follow. Let\u2019s not delve into this further.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-2-2-organizedtofunctionsorganizedtofunctions-1","title":"Solution 2 (2-OrganizedToFunctions/OrganizedToFunctions-1)","text":"<p>Let\u2019s move on to the solution found in the \"2-OrganizedToFunctions\" folder, in the project \"OrganizedToFunctions-1\" in Visual Studio. This solution is much more appealing because we have split the logic into functions. Let\u2019s review the code briefly:</p> <p><code>Anonymizer.cs</code></p> <ul> <li>The <code>Run</code> function is the \"backbone\" and contains the control logic. It calls the functions responsible for each step.</li> <li><code>ReadFromInput</code>: This function reads the source file, creates a <code>Person</code> object for each line, and returns a list of the read <code>Person</code> objects.</li> <li><code>TrimCityNames</code>: It performs data cleaning (trimming the city names).</li> <li><code>Anonymize</code>: It\u2019s called for each <code>Person</code> object read and is responsible for returning a new <code>Person</code> object with anonymized data.</li> <li><code>WriteToOutput</code>: Writes the anonymized <code>Person</code> objects to the output file.</li> <li><code>PrintSummary</code>: Prints the summary of the process to the console at the end.</li> </ul> <p><code>Program.cs</code></p> <ul> <li>Creates an <code>Anonymizer</code> object and runs it with the <code>Run</code> function. Notice that the string used for masking in the anonymization process is provided as a constructor parameter.</li> </ul> <p>Let\u2019s try running it! Set \"OrganizedToFunctions-1\" as the startup project in Visual Studio (right-click and Set as Startup Project), then run it:</p> <p></p> <p>The output file can be found in the file manager in the \"OrganizedToFunctions-1\\bin\\Debug\\net8.0\\\" or a similarly named folder as \"us-500.processed.txt\". Open it and take a look at the data.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#evaluation-of-the-solution","title":"Evaluation of the solution","text":"<ul> <li>The solution is fundamentally well-structured and easy to understand.</li> <li>It follows the KISS (Keep It Stupid Simple) principle, avoiding unnecessary complications. This is good because there are no anticipated future development needs, and there is no need to support different formats, logic, etc.</li> <li> <p>However, the solution does not follow one of the most fundamental and well-known design principles, namely the Single Responsibility Principle (SRP). This principle expects that each class should have only one responsibility (it should focus on just one thing).</p> <ul> <li>It\u2019s clear that the <code>Anonymizer</code> class has multiple responsibilities: processing input, data cleaning, anonymization, producing output, etc.</li> <li>This problem is not immediately noticeable and doesn\u2019t cause any issues for us because each responsibility is simple and \"fits\" into a short function. But if any of these responsibilities became more complex, or were implemented in multiple functions, they should definitely be organized into separate classes.</li> </ul> Why is it problematic if a class has multiple responsibilities? * <ul> <li>It becomes harder to understand its operation because it doesn\u2019t focus on a single task.</li> <li>If any responsibility needs to change, the large class handling multiple tasks must be modified and retested.</li> </ul> </li> <li> <p>Automated integration (input-output) tests can be written for the solution, but \"real\" unit tests are not feasible.</p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-3-organizedtofunctions-2-twoalgorithms","title":"Solution 3 (OrganizedToFunctions-2-TwoAlgorithms)","text":"<p>In contrast to the previous \"plans\", new user requirements have emerged. Our client changed his mind and now requests a different anonymization algorithm for a new data set: the ages of the individuals need to be stored in ranges, so the exact ages of the people should not be revealed. For simplicity, we will not anonymize the names in this case, considering it a \"pseudo\" anonymization (it can still make sense, but it\u2019s not entirely accurate to call it anonymization).</p> <p>Our solution, which supports both the old and the new algorithm (but only one at a time), can be found in the Visual Studio project OrganizedToFunctions-2-TwoAlgorithms. Let's take a look at the <code>Anonymizer</code> class, focusing on the design principles:</p> <ul> <li>We introduced an <code>AnonymizerMode</code> enum type to determine which mode (algorithm) we will use for the <code>Anonymizer</code> class.</li> <li>The <code>Anonymizer</code> class now has two anonymization operations: <code>Anonymize_MaskName</code> and <code>Anonymize_AgeRange</code>.</li> <li>The <code>Anonymizer</code> class stores the selected algorithm mode in the <code>_anonymizerMode</code> field. Two constructors have been created to set the <code>_anonymizerMode</code> based on the chosen mode.</li> <li>The <code>Anonymizer</code> class checks the value of <code>_anonymizerMode</code> in several places (e.g., <code>Run</code>, <code>GetAnonymizerDescription</code> methods) and branches accordingly.</li> <li> <p>In the <code>GetAnonymizerDescription</code> method, this check is essential because it is responsible for generating a one-line description of the anonymization algorithm. This description appears in the \"summary\" at the end of the process. For instance, if we are using the age anonymizer with a 20-year range, this summary will look like:</p> <p><code>Summary - Anonymizer (Age anonymizer with range size 20): Persons: 500, trimmed: 2</code></p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_eng/#evaluation-of-the-solution_1","title":"Evaluation of the solution","text":"<p>Overall, our solution has worse code quality compared to the previous one. Initially, it wasn\u2019t an issue that the anonymization algorithms were not extendable because there was no demand for it. However, once the need to introduce a new algorithm arose, it became a problem that we didn\u2019t make the solution extensible: now, we can expect that more algorithms will be introduced in the future.</p> <p>Why do we say that our code is not extendable when \"only\" a new enum value and an extra <code>if</code>/<code>switch</code> branch should be introduced at some point in the code when a new algorithm should be introduced?</p> <p> Open/Closed Principle The key point is that we consider a class extendable if new behavior (in our case, new algorithms) can be introduced without modifying the class itself, simply by extending or adding to the code. In other words, in this case, we should not need to modify the <code>Anonymizer</code> class, which is clearly not the case. This principle is known as the Open/Closed Principle: the class should be Open for Extension, Closed for Modification. The problem with modifying the code is that we likely introduce new bugs and need to retest the modified code, which can result in significant time/cost investment.</p> <p>What is the exact goal, and how can we achieve it? There are certain parts of our class that we don\u2019t want to hard-code:</p> <ul> <li>These are not data, but behaviors (code, logic).</li> <li>We don't solve these using <code>if</code>/<code>switch</code> statements: we introduce \"extension points\" and somehow allow \"any\" code to run in those places.</li> <li>The variable, case-dependent parts of the code should be moved to other classes (in a replaceable manner from the perspective of the class)!</li> </ul> <p>Note</p> <p>No magic here, we\u2019ll use the tools we already know: inheritance with abstract/virtual methods, interfaces, or delegates.</p> <p>Let\u2019s identify the parts of our class that involve case-dependent, variable logic, and shouldn\u2019t be hard-coded into the <code>Anonymizer</code> class:</p> <ul> <li>One is the anonymization logic: <code>Anonymize_MaskName</code>/<code>Anonymize_AgeRange</code></li> <li>The other is the <code>GetAnonymizerDescription</code></li> </ul> <p>These need to be decoupled from the class, and we need to make these points extendable. The following diagram illustrates the general goal:</p> Illustration of the general solution approach <p></p> <p>We\u2019ll look at three specific design patterns/techniques for achieving the above:</p> <ul> <li>Template Method pattern</li> <li>Strategy pattern (with Dependency Injection)</li> <li>Delegate (optionally with Lambda expressions)</li> </ul> <p>We have actually used these patterns during our studies before, but now we\u2019ll explore them more deeply and practice applying them in a broader context. We will apply the first two in the lab, and the third will be practiced in a related homework assignment.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-4-3-templatemethodtemplatemethod-1","title":"Solution 4 (3-TemplateMethod/TemplateMethod-1)","text":"<p>In this step, we will apply the Template Method design pattern to make our solution extendable at the necessary points.</p> <p>Note</p> <p>The name of the pattern is \"misleading\": it has nothing to do with the template methods we learned in C++!</p> Template Method-based solution class diagram <p>The following UML class diagram illustrates the Template Method-based solution, focusing on the core concepts:</p> <p></p> <p>In the pattern, the following principles help separate the \"unchanging\" and \"changing\" parts of the code (it's worth understanding these concepts, based on the above class diagram and applying them to our example):</p> <ul> <li>The \"common/unchanging\" parts are placed in a base class.</li> <li>We introduce extension points in this base class using abstract/virtual methods, which will be called in the extension points.</li> <li>The case-dependent implementation of these methods goes into the derived classes.</li> </ul> <p>The \"trick\" is that when the base class calls these abstract/virtual methods, the case-dependent code in the derived classes gets executed.</p> <p>Next, we will refactor the previous <code>enum</code> and <code>if</code>/<code>switch</code> based solution to follow the Template Method pattern (and there will be no <code>enum</code> anymore). We will introduce a base class and two algorithm-dependent derived classes.</p> <p>Let's proceed with the following steps to refactor the code accordingly. The Visual Studio solution in the \"3-TemplateMethod\" folder, within the \"TemplateMethod-0-Begin\" project, contains the previous solution's code (a \"copy\" of it), which is where we will work:</p> <ol> <li>Rename the <code>Anonymizer</code> class to <code>AnonymizerBase</code> (e.g., right-click the class name in the source file and press F2 to rename).</li> <li>Add two new classes to the project: <code>NameMaskingAnonymizer</code> and <code>AgeAnonymizer</code> (right-click on the project, select Add &gt; Class).</li> <li>Derive <code>NameMaskingAnonymizer</code> and <code>AgeAnonymizer</code> from <code>AnonymizerBase</code>.</li> <li> <p>Move the following parts from <code>AnonymizerBase</code> to <code>NameMaskingAnonymizer</code>:</p> <ol> <li>The <code>_mask</code> field.</li> <li>The constructor with parameters <code>string inputFileName, string mask</code>, renaming it to <code>NameMaskingAnonymizer</code>, and:<ol> <li>Removing the line <code>_anonymizerMode = AnonymizerMode.Name;</code>.</li> <li> <p>Replacing the <code>this</code> constructor call with a <code>base</code> constructor call.</p> Constructor code <pre><code>public NameMaskingAnonymizer(string inputFileName, string mask): base(inputFileName)\n{\n    _mask = mask;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Move the relevant parts from <code>AnonymizerBase</code> to <code>AgeAnonymizer</code>:</p> <ol> <li>The <code>_rangeSize</code> member variable.</li> <li>The constructor with parameters <code>string inputFileName, int rangeSize</code>, renamed to <code>AgeAnonymizer</code>:<ol> <li>Remove the line <code>_anonymizerMode = AnonymizerMode.Age;</code>.</li> <li> <p>Replace the <code>this</code> constructor call with a <code>base</code> constructor call.</p> Constructor code <pre><code>public AgeAnonymizer(string inputFileName, int rangeSize): base(inputFileName)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>In the <code>AnonymizerBase</code> class:</p> <ol> <li>Delete the <code>AnonymizerMode</code> enum type.</li> <li>Delete the <code>_anonymizerMode</code> member.</li> </ol> </li> </ol> <p>Identify the parts of the logic that are case-dependent and should not be hard-coded into the reusable <code>AnonymizerBase</code> class:</p> <ul> <li>One is <code>Anonymize_MaskName</code> / <code>Anonymize_AgeRange</code>,</li> <li>The other is <code>GetAnonymizerDescription</code>.</li> </ul> <p>Following the Template Method pattern, introduce abstract (or optionally virtual) methods in the base class for these, and call them from within the base class. The case-specific implementations should be placed in the derived classes using <code>override</code>.</p> <ol> <li>Mark the <code>AnonymizerBase</code> class as abstract (add the <code>abstract</code> keyword before <code>class</code>).</li> <li> <p>In <code>AnonymizerBase</code>, introduce the following abstract method:</p> <pre><code>protected abstract Person Anonymize(Person person);\n</code></pre> <p>This method will be responsible for performing the anonymization.</p> </li> <li> <p>Move the <code>Anonymize_MaskName</code> method to the <code>NameMaskingAnonymizer</code> class and modify its signature so that it overrides the abstract <code>Anonymize</code> method defined in the base class:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    return new Person(_mask, _mask, person.CompanyName,\n       person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n}\n</code></pre> <p>The body of the function only needs to be modified so that it uses the <code>_mask</code> member variable instead of the removed <code>mask</code> parameter.</p> </li> <li> <p>In a completely analogous way to the previous step, move the <code>Anonymize_AgeRange</code> method to the <code>AgeAnonymizer</code> class, and modify its signature so that it overrides the <code>Anonymize</code> abstract function in the base class:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    ...\n}\n</code></pre> <p>The body of the function only needs to be modified so that it uses the <code>_rangeSize</code> member variable instead of the removed <code>rangeSize</code> parameter.</p> </li> <li> <p>In the <code>Run</code> function of the <code>AnonymizerBase</code> class, we can now replace the <code>Anonymize</code> calls in the <code>if</code>/<code>else</code> expression with a simple call to the abstract function.</p> <p>Replace:</p> <pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> <p>with:</p> <pre><code>var person = Anonymize(persons[i]);\n</code></pre> </li> </ol> <p>We have completed one of our extension points. However, there is still one remaining, the <code>GetAnonymizerDescription</code>, which is also case-dependent. Its transformation is very similar to the previous series of steps:</p> <ol> <li> <p>Copy the <code>GetAnonymizerDescription</code> method from the <code>AnonymizerBase</code> class to the <code>NameMaskingAnonymizer</code>, including the <code>override</code> keyword in the signature, keeping only the logic relevant to <code>NameMaskingAnonymizer</code> in the method body:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}\n</code></pre> </li> <li> <p>Copy the <code>GetAnonymizerDescription</code> method from <code>AnonymizerBase</code> to the <code>AgeAnonymizer</code>, including the <code>override</code> keyword in the signature, keeping only the logic relevant to <code>AgeAnonymizer</code> in the method body:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n}\n</code></pre> </li> <li> <p>The question is what to do with the <code>GetAnonymizerDescription</code> method in <code>AnonymizerBase</code>. We will make it a virtual method, not abstract, since we can provide a meaningful default behavior here: simply return the class name (which would be \"NameMaskingAnonymizer\" for the <code>NameMaskingAnonymizer</code> class, for example). With this, we also get rid of the rigid <code>switch</code> structure:</p> <pre><code>protected virtual string GetAnonymizerDescription()\n{\n    return GetType().Name;\n}\n</code></pre> <p>Reflection</p> <p>The <code>GetType()</code> method, inherited from the <code>object</code> base class, returns a <code>Type</code> object for our class. This is part of reflection, a topic we will study in more detail in the lecture at the end of the semester.</p> </li> </ol> <p>There is only one thing left: in the <code>Program.cs</code> <code>Main</code> method, we now try to instantiate the <code>AnonymizerBase</code> base class (due to the previous renaming). Instead, we should instantiate one of the two derived classes. For example:</p> <pre><code>NameMaskingAnonymizer anonymizer = new(\"us-500.csv\", \"***\");\nanonymizer.Run();\n</code></pre> <p>We are done. Let's test it to better \"feel\" if the extension points truly work (but if we are short on time during the lab, this is not particularly important, as we've done similar things in previous semesters in C++/Java context):</p> <ul> <li>In Visual Studio, set the TemplateMethod-0-Begin project as the startup project if we haven't already.</li> <li>Set a breakpoint on the <code>var person = Anonymize(persons[i]);</code> line in the <code>AnonymizerBase</code> class.</li> <li>When the debugger stops at this point during runtime, press <code>F11</code> to step into it.</li> <li>You will observe that the <code>AgeAnonymizer</code> subclass method is called.</li> </ul> <p>Let's take a look at the solution's class diagram:</p> Template Method based solution class diagram * <p></p> <p>The solution of our work can be found in the <code>3-TemplateMethod/TemplateMethod-1</code> project, in case you need it.</p> Why is the pattern called Template Method? * <p>The pattern is named Template Method because, using our application as an example, the <code>Run</code> and <code>PrintSummary</code> are \"template methods\" that define a skeleton logic, a framework, in which certain steps are left undefined. We leave the \"code\" for these steps to abstract/virtual functions, and the derived classes define their implementation.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#evaluation-of-the-solution_2","title":"Evaluation of the solution","text":"<p>Let's check if the solution meets our goals:</p> <ul> <li>The <code>AnonymizerBase</code> class has become more reusable.</li> <li>If we need a new anonymization logic in the future, we simply derive from it. This is an extension, not a modification.</li> <li>Accordingly, the OPEN/CLOSED principle is fulfilled, meaning we can customize and extend the logic at the two points defined in the base class without modifying its code.</li> </ul> <p>Should every method in our class be extensible?</p> <p>Note that we didn't make every method in <code>AnonymizerBase</code> virtual (thus not making the class extensible at every point). We only made them virtual where we believe future logic extension might be necessary.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-5-3-templatemethodtemplatemethod-2-progress","title":"Solution 5 (3-TemplateMethod/TemplateMethod-2-Progress)","text":"<p>Let's say a new, relatively simple requirement arises:</p> <ul> <li> <p>For the <code>NameMaskingAnonymizer</code>, we keep the previous simple progress display (after every row, we print out which row we are currently processing),</p> Simple progress illustration <p></p> </li> <li> <p>However, for the <code>AgeAnonymizer</code>, the progress display needs to be different: we need to show, updated after every row, the percentage of processing completed.</p> Percentage progress illustration <p></p> <p>(Since we currently have few data (only 500 rows), we won\u2019t see this as expected at the end of our solution, it will jump to 100% in no time)</p> </li> </ul> <p>The solution is very simple: by applying the Template Method pattern more broadly in the <code>Run</code> method, we introduce an extension point for the progress display, and delegate the implementation to a virtual function.</p> <p>Let's jump straight to the completed solution (3-TemplateMethod/TemplateMethod-2-Progress project):</p> <ul> <li>In the <code>AnonymizerBase</code> class, a new <code>PrintProgress</code> virtual function (by default, it doesn't print anything)</li> <li>In <code>Run</code>, a call to this function</li> <li>Implementations (override) in <code>NameMaskingAnonymizer</code> and <code>AgeAnonymizer</code> as needed</li> </ul> <p>Currently, there is no significant learning to be gained from this, but in the next step, there will be.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-6-3-templatemethodtemplatemethod-3-progressmultiple","title":"Solution 6 (3-TemplateMethod/TemplateMethod-3-ProgressMultiple)","text":"<p>A new - and entirely logical - requirement has emerged: in the future, any anonymization algorithm should be usable with any progress display. Currently, this means four cross-combinations:</p> Anonymizer Progress Name anonymizer Simple progress Name anonymizer Percentage progress Age anonymizer Simple progress Age anonymizer Percentage progress <p>Let's jump to the completed solution (3-TemplateMethod/TemplateMethod-3-ProgressMultiple project). Instead of code, open the <code>Main.cd</code> class diagram in the project, and let's review the solution based on that (or we can view the diagram below in the guide).</p> Template Method-based solution (two aspects) class diagram <p></p> <p>It\u2019s noticeable that something is \"wrong\" here, as we had to create a separate subclass for each cross-combination. To reduce code duplication, additional intermediate classes are also present in the hierarchy. Moreover:</p> <ul> <li>If a new anonymization algorithm is introduced in the future, we will need to write at least as many new classes as there are progress types supported.</li> <li>If a new progress type is introduced in the future, we will need to write at least as many new classes as there are anonymizer types supported.</li> </ul> <p>What caused the problem? The fact that the behavior of our class needs to be extendable along multiple dimensions/aspects (in our case, anonymization and progress), and these need to be supported in many cross-combinations. If we had to add more aspects (e.g., reading methods, output generation), the problem would grow exponentially. In such cases, the Template Method design pattern is not applicable.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-7-4-strategystrategy-1","title":"Solution 7 (4-Strategy/Strategy-1)","text":"<p>In this step, we will use the Strategy design pattern to make our initial solution extendable at the necessary points. The pattern separates the \"unchanging/reusable\" and \"changing\" parts based on the following principles:</p> <ul> <li>The \"common/unchanging\" parts are placed in a specific class (but this will not be a \"base class\").</li> <li>Unlike Template Method, we will use composition (containment) rather than inheritance: we delegate the implementation of behavior in the extension points to other objects contained as interfaces (rather than abstract/virtual functions).</li> <li>We do this for every aspect/dimension of the class behavior that we want to make replaceable/extensible, independently. As we will see, this avoids the combinatorial explosion we experienced in the previous chapter.</li> </ul> <p>This is much simpler in practice than it may seem when described (we have already used it several times in our previous studies). Let's understand it in the context of our example.</p> <p>Below, let's take a look at the class diagram illustrating the Strategy-based solution (building on the explanation that follows the diagram).</p> Strategy-based solution class diagram <p>The following UML class diagram illustrates the Strategy-based solution, focusing on the key aspects: </p> <p>The first step in applying the Strategy pattern is to determine how many different aspects of the class behavior we want to make extendable. In our example, at least for now, there are two:</p> <ul> <li>Behavior related to anonymization, which consists of two operations:<ul> <li>Anonymization logic</li> <li>Defining the description of the anonymization logic (producing the description string)</li> </ul> </li> <li>Progress handling, which consists of one operation:<ul> <li>Displaying progress</li> </ul> </li> </ul> <p>The hard part is done, from here on we can basically work mechanically following the Strategy pattern:</p> <ol> <li>For each of the above aspects, we need to introduce a strategy interface with the operations defined above, and create the corresponding implementations.</li> <li>In the <code>Anonymizer</code> class, we need to introduce a strategy interface member variable, and in the extension points, use the currently set strategy implementation objects through these member variables.</li> </ol> <p>These elements are already present in the class diagram above. Now, let's move on to the code. Our starting environment is in the \"Strategy-0-Begin\" project in the \"4-Strategy\" folder, let's work in it. This is the same solution that uses enums, which we used as a starting point for the Template Method pattern as well.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#anonymization-strategy","title":"Anonymization strategy","text":"<p>We start with handling the anonymization strategy/aspect. Let's introduce the corresponding interface:</p> <ol> <li>Create a folder named <code>AnonymizerAlgorithms</code> in the project (right-click on the \"Strategy-0-Begin\" project, then select Add/New Folder from the menu). In the following steps, let's place each interface and class into a separate source file, according to its name.</li> <li> <p>Add in this folder an <code>IAnonymizerAlgorithm</code> interface with the following code:</p> IAnonymizerAlgorithm.cs<pre><code>public interface IAnonymizerAlgorithm\n{\n    Person Anonymize(Person person);\n    string GetAnonymizerDescription() =&gt; GetType().Name;\n}\n</code></pre> <p>We can also observe that for the <code>GetAnonymizerDescription</code> method, in modern C#, we can provide default implementations for interface methods if we wish.</p> </li> </ol> <p>Now let's implement the name anonymization strategy (i.e., a strategy implementation for name anonymization).</p> <ol> <li>Create a class <code>NameMaskingAnonymizerAlgorithm</code> in the same folder.</li> <li>Move the <code>_mask</code> field from the <code>Anonymizer</code> class to the <code>NameMaskingAnonymizerAlgorithm</code>.</li> <li> <p>Add the following constructor to <code>NameMaskingAnonymizerAlgorithm</code>:</p> <pre><code>public NameMaskingAnonymizerAlgorithm(string mask)\n{\n    _mask = mask;\n}\n</code></pre> </li> <li> <p>Implement the <code>IAnonymizerAlgorithm</code> interface. After adding <code>: IAnonymizerAlgorithm</code> to the class name, it is advisable to use Visual Studio's code generation feature for the method skeletons: place the cursor on the interface name (click on it in the source code), press 'ctrl' + '.' and from the menu, choose \"Implement interface\". Note: since there is a default implementation for <code>GetAnonymizerDescription</code> in the interface, only the <code>Anonymize</code> method will be generated, which is fine for now.</p> </li> <li>Move the body of the <code>Anonymize_MaskName</code> method from the <code>Anonymizer</code> class to the <code>Anonymize</code> method in <code>NameMaskingAnonymizerAlgorithm</code>. The only change in the method body is to use the <code>_mask</code> field instead of the now non-existent <code>mask</code> parameter. Also, delete the <code>Anonymize_MaskName</code> method in the <code>Anonymizer</code> class.</li> <li> <p>Finally, let's implement the <code>GetAnonymizerDescription</code> method of the strategy interface. Copy the <code>GetAnonymizerDescription</code> method from the <code>Anonymizer</code> class to the <code>NameMaskingAnonymizerAlgorithm</code>, and keep only the logic relevant to the name anonymizer, making the method public:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}\n</code></pre> </li> <li> Our strategy implementation for name anonymization is completed, its full code is the following: NameMaskingAnonymizerAlgorithm.cs<pre><code>public class NameMaskingAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly string _mask;\n\n    public NameMaskingAnonymizerAlgorithm(string mask)\n    {\n        _mask = mask;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        return new Person(_mask, _mask, person.CompanyName,\n            person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"NameMasking anonymizer with mask {_mask}\";\n    }\n}\n</code></pre> </li> </ol> <p>In the next step, we will create the implementation of our <code>IAnonymizerAlgorithm</code> strategy interface related to age anonymization.</p> <ol> <li>Add an <code>AgeAnonymizerAlgorithm</code> class in the same folder (AnonymizerAlgorithms).</li> <li>Move the relevant <code>_rangeSize</code> field from the <code>Anonymizer</code> class into <code>AgeAnonymizerAlgorithm</code>.</li> <li> <p>Add the following constructor to <code>AgeAnonymizerAlgorithm</code>:</p> <pre><code>public AgeAnonymizerAlgorithm(int rangeSize)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> <li> <p>Implement the <code>IAnonymizerAlgorithm</code> interface. After adding <code>: IAnonymizerAlgorithm</code> after the class name, it's again recommended to generate the method skeletons for <code>Anonymize</code> using Visual Studio, similar to the previous case.</p> </li> <li> <p>Move the body of the <code>Anonymize_AgeRange</code> method from the <code>Anonymizer</code> class into the <code>Anonymize</code> method of <code>AgeAnonymizerAlgorithm</code>. In the method body, simply replace the now-nonexistent <code>rangeSize</code> parameter with the <code>_rangeSize</code> field. Afterwards, delete the <code>Anonymize_AgeRange</code> method from the <code>Anonymizer</code> class.</p> </li> <li> <p>Now implement the <code>GetAnonymizerDescription</code> method from the strategy interface. Copy the implementation of <code>GetAnonymizerDescription</code> from the <code>Anonymizer</code> class into <code>AgeAnonymizerAlgorithm</code>, but only keep the logic related to age anonymization, and make the method public:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n} \n</code></pre> </li> <li> Our strategy implementation for age anonymization is completed, its full code is the following: AgeAnonymizerAlgorithm.cs<pre><code>public class AgeAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly int _rangeSize;\n\n    public AgeAnonymizerAlgorithm(int rangeSize)\n    {\n        _rangeSize = rangeSize;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        // This is whole number integer arithmetic, e.g. for 55 / 20 we get 2\n        int rangeIndex = int.Parse(person.Age) / _rangeSize;\n        string newAge = $\"{rangeIndex * _rangeSize}..   {(rangeIndex + 1) * _rangeSize}\";\n\n        return new Person(person.FirstName, person.LastName, person.CompanyName,\n            person.Address, person.City, person.State, newAge,\n            person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"Age anonymizer with range size {_rangeSize}\";\n    }\n}\n</code></pre> </li> </ol> <p> Make sure to note that the interface and its implementations deal exclusively with anonymization logic \u2014  no other logic (e.g., progress handling) is included here!</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#progress-strategy","title":"Progress strategy","text":"<p>In the next step, let\u2019s introduce the interface and implementations related to progress handling:</p> <ol> <li> <p>Create a folder named <code>Progresses</code> in the project. In the next steps, place each interface and class into a separate source file, named accordingly, as usual.</p> </li> <li> <p>Add an <code>IProgress</code> interface in this folder with the following code:</p> Solution IProgress.cs<pre><code>public interface IProgress\n{\n    void Report(int count, int index);\n}\n</code></pre> </li> <li> <p>Add the simple progress implementaion of this interface in the same folder. The implementation is \"derived\" from the <code>PrintProgress</code> method in the <code>Anonymizer</code> class:</p> Solution SimpleProgress.cs<pre><code>public class SimpleProgress : IProgress\n{\n    public void Report(int count, int index)\n    {\n        Console.WriteLine($\"{index + 1}. person processed\");\n    }\n}\n</code></pre> </li> <li> <p>Add the percentage-based progress implementation of this interface in the same folder. We won\u2019t go into the details of the code logic. There's no direct equivalent for this in the <code>Anonymizer</code> class, as it was only introduced in our template method\u2013based solution (we didn\u2019t inspect that code, but this is essentially its core idea):</p> Solution PercentProgress.cs<pre><code>public class PercentProgress : IProgress\n{\n    public void Report(int count, int index)\n    {\n        int percentage = (int)((double)(index + 1) / count * 100);\n\n        Console.Write($\"\\rProcessing: {percentage} %\");\n\n        if (index == count - 1)\n            Console.WriteLine();\n    }\n}\n</code></pre> </li> </ol> <p> Make sure to note that the interface and its implementations deal exclusively with progress handling \u2014 no other logic (e.g., anonymization) is included here!</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#applying-the-strategies","title":"Applying the strategies","text":"<p>The next important step is to make the anonymizer base class reusable and extensible using the strategies we\u2019ve just introduced. In the <code>Anonymizer.cs</code> file:</p> <ol> <li>Remove the following:</li> <li>The <code>AnonymizerMode</code> enum type.</li> <li> <p>The <code>_anonymizerMode</code> field (as well as <code>_mask</code> and <code>_rangeSize</code>, if they still remain).</p> </li> <li> <p>Introduce strategy interface-type fields:</p> <pre><code>private readonly IProgress _progress;\nprivate readonly IAnonymizerAlgorithm _anonymizerAlgorithm;\n</code></pre> </li> <li> <p>Add the appropriate using directives to the top of the file:</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> <li> <p>The initial values of <code>_progress</code> and <code>_anonymizerAlgorithm</code>  introduced in the previous section are null, set these references in the constructor to the implementation that suits our needs. For example:</p> <pre><code>public Anonymizer(string inputFileName, string mask) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new NameMaskingAnonymizerAlgorithm(mask);\n}\n\npublic Anonymizer(string inputFileName, int rangeSize) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new AgeAnonymizerAlgorithm(rangeSize);\n}\n</code></pre> </li> </ol> <p>In the <code>Anonymizer</code> class, delegate the currently hardcoded but anonymization-dependent logic to the strategy implementation referenced by <code>_anonymizerAlgorithm</code>.</p> <ol> <li> <p>Delegate the <code>Anonymize</code> calls in the <code>if</code>/<code>else</code> expressions in the <code>Run</code> function of the <code>Anonymizer</code> class, to the <code>_anonymizerAlgorithm</code> object.</p> <p>Replace:</p> <p><pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> </p> <p>with:</p> <pre><code>Person person = _anonymizerAlgorithm.Anonymize(persons[i]);\n</code></pre> <li> <p>If we haven't done so already, delete the <code>Anonymize_MaskName</code> and <code>Anonymize_AgeRange</code> functions, since their code has already been moved into the corresponding strategy implementations, detached from the class.</p> </li> <li> <p>Our <code>PrintSummary</code> function currently calls the rigid, <code>switch</code>-based <code>GetAnonymizerDescription</code>. Replace this <code>GetAnonymizerDescription</code> call by delegating it to the <code>_anonymizerAlgorithm</code> object. In the <code>PrintSummary</code> function (highlighting only the relevant part):</p> <p>Instead of:</p> <pre><code>    ... GetAnonymizerDescription() ...\n</code></pre> <p>Use:</p> <pre><code>    ... _anonymizerAlgorithm.GetAnonymizerDescription() ...\n</code></pre> <p>A few lines below, also delete the <code>GetAnonymizerDescription</code> function from the class (its code has already been moved into the appropriate strategy implementations).</p> </li> <p>The last step is to replace the progress handling hard-coded in the <code>Anonymizer</code> class:</p> <ol> <li> <p>Here, delegate the request to the previously introduced <code>_progress</code> object. In the <code>Run</code> function, replace one line as follows:</p> <p>Instead of:</p> <pre><code>PrintProgress(i);\n</code></pre> <p>Use:</p> <pre><code>_progress.Report(persons.Count, i);\n</code></pre> </li> <li> <p>Delete the <code>PrintProgress</code> function, as its code has already been moved to a suitable strategy implementation, detached from the class.</p> </li> </ol> <p>We are done. The completed solution can be found in the \"4-Strategy/Strategy-1\" project (if we are stuck somewhere or the code doesn't compile, we can compare it with this).</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#evaluation-of-the-solution_3","title":"Evaluation of the solution","text":"<p>We are finished with the introduction of the strategy pattern. However, in its current form, it is almost never used. Let's check our solution: is it truly reusable, and is it possible to change the anonymizer algorithm or progress handling without modifying the <code>Anonymizer</code> class? To do this, we need to examine whether there is any code in the class that is implementation-dependent.</p> <p>Unfortunately, we can find such code. The constructor is hard-coded to create specific algorithm and progress implementations. We must check this in the code! If we want to change the algorithm or progress mode, we will have to modify the type after the <code>new</code> operator in these lines, which means modifying the class itself.</p> <p>Many \u2014 quite justifiably \u2014 do not consider this a true strategy-based solution in its current form. We will implement the complete solution in the next step.</p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#solution-8-4-strategystrategy-2-di","title":"Solution 8 (4-Strategy/Strategy-2-DI)","text":"<p> Dependency Injection (DI) The solution is applying Dependency Injection (DI). The idea is that not the class itself instantiates its behavioural dependencies (these are the strategy implementations), but we pass them to it from outside, e.g. in constructor parameters, or even in the form of properties or setter operations. Referenced as interface types, of course!</p> <p>Let's refactor the <code>Anonymizer</code> class accordingly, so that it doesn't instantiate the strategy implementations itself, but instead receives them as constructor parameters:</p> <ol> <li>Delete all three constructors.</li> <li> <p>Add the following constructor:</p> <pre><code>public Anonymizer(string inputFileName, IAnonymizerAlgorithm anonymizerAlgorithm, IProgress progress = null)\n{\n    ArgumentException.ThrowIfNullOrEmpty(inputFileName);\n    ArgumentNullException.ThrowIfNull(anonymizerAlgorithm);\n\n    _inputFileName = inputFileName;\n    _anonymizerAlgorithm = anonymizerAlgorithm;\n    _progress = progress;\n}\n</code></pre> <p>As we can see, providing the <code>progress</code> parameter is optional, as the class user may not be interested in any progress information.</p> </li> <li> <p>Since the <code>_progress</code> strategy can be null, we need to introduce a null check during its usage. Instead of using the <code>.</code> operator, we will use the <code>?.</code> operator:</p> <pre><code>_progress?.Report(persons.Count, i);\n</code></pre> </li> <li> <p>Now we are done, the <code>Anonymizer</code> class has become completely independent of the strategy implementations. We can use the <code>Anonymizer</code> class with any combination of anonymizer algorithms and progress handling (without modifying the class itself). Let's create three <code>Anonymizer</code> instances with different combinations in the <code>Main</code> method of the <code>Program.cs</code> file (make sure to delete the existing code in the <code>Main</code> method before):</p> <pre><code>Anonymizer p1 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new SimpleProgress());\np1.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p2 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new PercentProgress());\np2.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p3 = new(\"us-500.csv\",\n    new AgeAnonymizerAlgorithm(20),\n    new SimpleProgress());\np3.Run();\n</code></pre> </li> <li> <p>To ensure the code compiles, add the necessary <code>using</code> statements at the top of the file:</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> </ol> <p>We are done, and the complete solution can be found in the \"4-Strategy/Strategy-2-DI\" project (if you encounter issues or the code doesn't compile, you can compare it with this project).</p> <p>Checking the functionality</p> <p>During the laboratory, there might not be time for this, but for anyone unsure about \"why the strategy pattern works\" and how the behavior will differ for the four cases above: it is recommended to set breakpoints in the <code>Program.cs</code> file for the four <code>Run</code> method calls and step through the functions in the debugger to verify that the correct strategy implementation is invoked.</p> <p>An object diagram (<code>Main.cd</code>) is included in the project, where the final solution can also be reviewed:</p> Strategy-based solution class diagram <p>The following UML class diagram illustrates our strategy-based solution:</p> <p></p>"},{"location":"labor/6-tervezesi-mintak/index_eng/#evaluation-of-the-solution_4","title":"Evaluation of the solution","text":"<p>Let's check whether the solution meets our goals:</p> <ul> <li>The <code>Anonymizer</code> class has become more reusable.</li> <li>If a new anonymization logic is needed in the future, only a new <code>IAnonymizerAlgorithm</code> implementation needs to be introduced. This is an extension, not a modification.</li> <li>If a new progress logic is required in the future, only a new <code>IProgress</code> implementation needs to be introduced. This is an extension, not a modification.</li> <li>Both of the above points adhere to the OPEN/CLOSED principle, meaning that we can customize and extend the logic of <code>Anonymizer</code> without modifying its code.</li> <li>There is no risk of the combinatorial explosion seen in the Template Method pattern: any <code>IAnonymizerAlgorithm</code> implementation can be conveniently used with any <code>IProgress</code> implementation, and we do not need to introduce new classes for each combination (this was demonstrated in the <code>Program.cs</code> file).</li> </ul> <p>Additional Strategy advantages over Template Method *</p> <ul> <li>The behavior can be changed at runtime. If there is a need to change the anonymization or progress behavior after an <code>Anonymizer</code> object has been created, it can easily be done (we could simply introduce <code>SetAnonymizerAlgorithm</code> and <code>SetProgress</code> methods that would set the strategy used by the class to the implementation passed in as a parameter).</li> <li>Supports unit testing (this is not covered in this laboratory).</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_ger/","title":"6. Entwurfsmuster (Erweiterbarkeit)","text":""},{"location":"labor/6-tervezesi-mintak/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>Ziele der \u00dcbung (anhand eines komplexeren, praxisnahen Beispiels):</p> <ul> <li>\u00dcben einiger grundlegender Entwurfsprinzipien, die Erweiterbarkeit, Wiederverwendbarkeit, Code\u00fcbersichtlichkeit und Wartbarkeit f\u00f6rdern: SRP, OPEN-CLOSED, DRY, KISS usw.</li> <li>Anwendung einiger Entwurfsmuster, die besonders mit Erweiterbarkeit in Verbindung stehen (Template Method, Strategy, Dependency Injection).</li> <li>\u00dcben und Kombinieren weiterer Techniken zur Unterst\u00fctzung von Erweiterbarkeit und Wiederverwendbarkeit (z.\u202fB. Delegates/Lambda-Ausdr\u00fccke) mit Entwurfsmustern.</li> <li>\u00dcbung zur Refaktorisierung von Code.</li> </ul> <p>Zugeh\u00f6rige Vorlesungen:</p> <ul> <li>Entwurfsmuster: Muster im Zusammenhang mit Erweiterbarkeit (Einf\u00fchrung, Template Method, Strategy) sowie das \u201eMuster\u201c der Dependency Injection.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>F\u00fcr die Durchf\u00fchrung der \u00dcbung ben\u00f6tigte Werkzeuge:</p> <ul> <li>Visual Studio 2022</li> </ul> <p>\u00dcbung unter Linux oder macOS</p> <p>Das \u00dcbungsmaterial wurde grunds\u00e4tzlich f\u00fcr Windows und Visual Studio erstellt, kann aber auch unter anderen Betriebssystemen mit anderen Entwicklungsumgebungen (z.\u202fB. VS Code, Rider, Visual Studio for Mac) oder sogar mit einem Texteditor und CLI-Tools durchgef\u00fchrt werden. Dies ist m\u00f6glich, weil die Beispiele im Kontext einer einfachen Konsolenanwendung dargestellt werden (es gibt keine Windows-spezifischen Elemente), und das .NET 8 SDK wird unter Linux und macOS unterst\u00fctzt. Hello World unter Linux.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#theoretischer-hintergrund-denkweise","title":"Theoretischer Hintergrund, Denkweise\u202f*","text":"<p>Bei der Entwicklung komplexerer Anwendungen m\u00fcssen wir zahlreiche Designentscheidungen treffen, bei denen oft mehrere M\u00f6glichkeiten zur Auswahl stehen. Wenn wir in diesen Punkten nicht auf einfache Wartbarkeit und einfache Erweiterbarkeit unserer Anwendung achten, kann die Entwicklung schnell zum Albtraum werden. \u00c4nderungs- und Erweiterungsw\u00fcnsche des Kunden erfordern eine st\u00e4ndige, umfassende Umstrukturierung des Codes: dabei entstehen neue Fehler, und es ist erheblicher Aufwand f\u00fcr umfassende Retests notwendig!</p> <p>Unser Ziel ist es, solche \u00c4nderungs- und Erweiterungsw\u00fcnsche durch Erweiterungen an wenigen, gut definierten Stellen im Code \u2013 ohne wesentliche \u00c4nderungen am bestehenden Code \u2013 umsetzen zu k\u00f6nnen. Das Schl\u00fcsselwort ist: statt \u00c4nderung lieber Erweiterung. Damit verbunden gilt: Wenn bestimmte Logiken erweiterbar sind, dann sind sie auch allgemeiner und k\u00f6nnen in mehreren Kontexten leichter wiederverwendet werden. So kommen wir langfristig schneller voran, unser Code wird k\u00fcrzer, wir vermeiden Code-Duplikationen (was wiederum die Wartbarkeit erh\u00f6ht).</p> <p>Entwurfsmuster zeigen bew\u00e4hrte L\u00f6sungen f\u00fcr h\u00e4ufig auftretende Entwurfsprobleme: Sie helfen dabei, unseren Code leichter erweiterbar, wartbar und so weit wie m\u00f6glich wiederverwendbar zu gestalten. In dieser \u00dcbung konzentrieren wir uns auf solche Muster, Prinzipien und einige Programmierwerkzeuge, die helfen, die oben genannten Probleme zu l\u00f6sen. Aber man soll es nicht \u00fcbertreiben: Ein bestimmtes Entwurfsmuster sollte nur dann eingesetzt werden, wenn es tats\u00e4chlich einen Vorteil bringt. Andernfalls erh\u00f6ht es nur unn\u00f6tig die Komplexit\u00e4t der Implementierung. Vor diesem Hintergrund ist es nicht unser Ziel (und oft auch gar nicht m\u00f6glich), alle zuk\u00fcnftigen Erweiterungsbed\u00fcrfnisse vorherzusehen oder im Voraus zu durchdenken. Wichtig ist, dass wir \u2013 auch ausgehend von einer einfachen L\u00f6sung \u2013 unsere Probleme erkennen und den Code kontinuierlich so refaktorisieren, dass er den aktuellen (funktionalen und nicht-funktionalen) Anforderungen entspricht und an den richtigen Stellen besser erweiterbar und wiederverwendbar wird.</p> <p>Es sei auch erw\u00e4hnt, dass entsprechende Entwurfsmuster und Sprachmittel auch bei der Unit-Testbarkeit unseres Codes eine gro\u00dfe Hilfe darstellen: In vielen Unternehmen ist es bei der Entwicklung von Softwareprodukten (zurecht) eine Grundanforderung an die Entwickler, dass sie Unit-Tests mit hoher Codeabdeckung erstellen. Dies ist jedoch praktisch unm\u00f6glich, wenn unsere Codeeinheiten/Klassen zu eng miteinander gekoppelt sind.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#0-aufgabe-kennenlernen-der-aufgabe-und-der-ausgangsanwendung","title":"0. Aufgabe \u2013 Kennenlernen der Aufgabe und der Ausgangsanwendung","text":"<p>Klonen wir das Repository der Ausgangsanwendung zur 6. \u00dcbung von hier:</p> <ul> <li>\u00d6ffne eine Kommandozeile (Command Prompt)</li> <li>Navigiere in einen beliebigen Ordner, z.\u202fB. nach <code>c:\\work\\NEPTUN</code></li> <li>F\u00fchre folgenden Befehl aus: <code>git clone https://github.com/bmeviauab00/lab-patterns-extensibility-kiindulo.git</code></li> <li>\u00d6ffne die Solution Lab-Patterns-Extensibility.sln in Visual Studio.</li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_ger/#beschreibung-der-aufgabe","title":"Beschreibung der Aufgabe","text":"<p>Im Labor werden wir eine konsolenbasierte Datenverarbeitungsanwendung (genauer gesagt, eine Anonymisierungsanwendung) entsprechend den sich fortlaufend entwickelnder Anforderungen erweitern \u2013 entlang verschiedener Aspekte und unter Anwendung unterschiedlicher Techniken. In der ersten Aufgabe wird auch das Konzept der Anonymisierung vorgestellt.</p> <p>Die Eingabe in die Anwendung ist eine CSV-Textdatei, in der jede Zeile Daten zu einer bestimmten Person enth\u00e4lt. \u00d6ffnen wir im Dateisystem die Datei us-500.csv im Ordner Data (durch Doppelklick oder mit Notepad).  Wir sehen, dass die Daten zu den einzelnen Personen in Anf\u00fchrungszeichen (\" \") und durch Kommas getrennt dargestellt sind (es handelt sich um fiktive Daten). Schauen wir uns die erste Zeile an:</p> <pre><code>\"James\",\"Rhymes\",\"Benton, John B Jr\",\"6649 N Blue Gum St\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"504-621-8927\",\"504-845-1427\",\"30\",\"65\",\"Heart-related\",\"jRhymes@gmail.com\"\n</code></pre> <p>Die Person in der ersten Zeile hei\u00dft James Rhymes, arbeitet bei der Firma \"Benton, John B Jr\", danach folgen einige Adressfelder, er ist 30 Jahre alt und wiegt 65\u202fkg. Das nachfolgende Feld beschreibt eine schwerwiegende Erkrankung (in der obigen Zeile: \u201eHeart-related\u201c). Die letzte Spalte enth\u00e4lt die E-Mail-Adresse der Person.</p> Datenquelle und genaues Format * <p>Die Daten stammen von: https://www.briandunning.com/sample-data/, erg\u00e4nzt um einige zus\u00e4tzliche Spalten (Alter, Gewicht, Krankheit). Die Reihenfolge der Felder: First Name, Last Name, Company, Address, City, County (falls zutreffend), State/Province (falls zutreffend), ZIP/Postal Code, Phone 1, Phone 2, Age, Weight, Illness, Email</p> <p>Die Hauptaufgabe der Anwendung besteht darin, diese Daten je nach aktueller Anforderung zu anonymisieren und in eine Ausgabedatei im CSV-Textformat zu schreiben. Ziel der Anonymisierung ist es, die Personen in der Datenmenge durch Transformationen unkenntlich zu machen \u2013 allerdings auf eine Weise, die dennoch statistische Auswertungen \u00fcber die Daten erm\u00f6glicht. Anonymisierung ist ein eigenst\u00e4ndiger, sehr anspruchsvoller und herausfordernder Bereich der Datenverarbeitung. In dieser \u00dcbung ist es nicht unser Ziel, L\u00f6sungen zu entwickeln, die in realen Szenarien einsetzbar oder in jeder Hinsicht sinnvoll sind. F\u00fcr uns ist eigentlich die Anwendung eines beliebigen Datenverarbeitungsalgorithmus wichtig, um die Entwurfsmuster zu demonstrieren. Dies liefert einen etwas \u201espannenderen\u201c Rahmen als einfache Filter-, Sortier- oder \u00e4hnliche Datenverarbeitung (die von .NET standardm\u00e4\u00dfig unterst\u00fctzt wird).</p> <p>Einige Gedanken zur Anonymisierung</p> <p>Man k\u00f6nnte meinen, dass die Anonymisierung ein einfaches Problem ist. Zum Beispiel m\u00fcsste man nur die Namen der Personen entfernen oder durch Sternchen ersetzen, ebenso wie die Stra\u00dfenadresse, Telefonnummern und E-Mail-Adresse \u2013 und schon w\u00e4re man fertig. F\u00fcr die erste Zeile unserer Eingabedateri s\u00e4he die Ausgabe dann so aus:</p> <pre><code>\"***\",\"***\",\"Benton, John B Jr\",\"***\",\"New Orleans \",\"Orleans\",\"LA\",\"70116\",\"***\",\"***\",\"30\",\"65\",\"Heart-related\",\"***\"\n</code></pre> <p>Doch so einfach ist es nicht \u2013 vor allem nicht bei gro\u00dfen Datenmengen. Denken wir zum Beispiel an ein kleines Dorf mit wenigen Einwohnern. Angenommen, eine auf die oben beschriebene Weise anonymisierte Person ist 14 Jahre alt, aber extrem \u00fcbergewichtig, etwa 95 kg. Das ist eine seltene \u201eKombination\u201c, es ist sehr wahrscheinlich, dass niemand sonst im Dorf solche Merkmale aufweist. Wenn jemand aus seiner Schulklasse (8. Klasse, da 14 Jahre alt) die \u201eanonymisierten\u201c Daten sieht, wird er sofort wissen, um wen es sich handelt (es gibt keinen anderen \u00fcbergewichtigen Achtkl\u00e4ssler an der Schule). So erf\u00e4hrt er z.\u202fB. auch, welche Krankheit die Person hat. Fazit: Zusammenh\u00e4nge zwischen den Daten k\u00f6nnen R\u00fcckschl\u00fcsse auf die Identit\u00e4t zulassen.</p> <p>Was ist die L\u00f6sung? Stadt, Alter und Gewicht k\u00f6nnen nicht entfernt oder mit Sternchen ersetzt werden, da genau zu diesen Merkmalen Auswertungen durchgef\u00fchrt werden sollen. Eine typische L\u00f6sung: Anstelle des genauen Alters oder Gewichts werden nach der Anonymisierung Intervalle angegeben (also eine Generalisierung der Daten). F\u00fcr die obige Person w\u00fcrde man z.\u202fB. \u201e10\u201320 Jahre\u201c beim Alter und \u201e80\u2013100 kg\u201c beim Gewicht angeben \u2013 und genau diese Werte w\u00fcrden in die Ausgabedatei geschrieben. Auf diese Weise ist keine eindeutige Identifikation der Person mehr m\u00f6glich. Diese Technik werden wir sp\u00e4ter noch anwenden.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#ausgangsanforderungen","title":"Ausgangsanforderungen","text":"<p>Die Ausgangsanforderungen an die Anwendung:</p> <ol> <li>Es sollen von einem bestimmten Kunden empfangene Dateien (alle im gleichen Format) verarbeitet werden, die mit demselben Anonymisierungsalgorithmus in dasselbe Ausgabeformat konvertiert werden. Die Anonymisierung soll lediglich darin bestehen, Vor- und Nachnamen mit Sternchen zu ersetzen.</li> <li>Eine gewisse Datenbereinigung ist notwendig. In der Spalte mit dem Stadtnamen k\u00f6nnen am Anfang oder Ende \u00fcberfl\u00fcssige <code>_</code>- oder <code>#</code>-Zeichen vorkommen, diese m\u00fcssen entfernt werden (Trim-Operation).</li> <li>Nach der Verarbeitung jeder Zeile soll eine Nachricht auf der Konsole ausgegeben werden, dass die Zeile verarbeitet wurde. Au\u00dferdem sollen nach der vollst\u00e4ndigen Verarbeitung aller Daten zusammenfassende Informationen (Summary) angezeigt werden: wie viele Zeilen wurden verarbeitet, und in wie vielen F\u00e4llen musste der Stadtname getrimmt werden.</li> <li>Wichtiger Aspekt: Die Anwendung wird nur f\u00fcr kurze Zeit ben\u00f6tigt und soll in Zukunft nicht erweitert werden.</li> </ol> <p>Hinweis: Um den Code \u00fcbersichtlicher zu halten und weniger Felder verarbeiten zu m\u00fcssen, werden einige Felder bei der Verarbeitung weggelassen.</p> <p>Beispiel f\u00fcr die erwartete Ausgabe der ersten Zeile aus der Eingabedatei:</p> <pre><code>***; ***; LA; New Orleans; 30; 65; Heart-related\n</code></pre>"},{"location":"labor/6-tervezesi-mintak/index_ger/#1-losung-alles-in-einem-1-startstart","title":"1. L\u00f6sung \u2013 Alles in einem (1-Start/Start)","text":"<p>Im Solution Explorer von Visual Studio sehen wir Ordner mit Namen, die mit den Zahlen 1 bis 4 beginnen. Diese enthalten die L\u00f6sungen zu den jeweiligen Arbeitsiterationen. Die erste L\u00f6sung befindet sich im Ordner \u201e1-Start\u201c unter dem Projektnamen \u201eStart\u201c. Werfen wir einen Blick auf die im Projekt enthaltenen Dateien:</p> <ul> <li><code>Person.cs</code> \u2013 Enth\u00e4lt die f\u00fcr uns relevanten Daten einer Person. Die Daten einer einzelnen Person werden in Objekte dieser Klasse eingelesen.</li> <li><code>Program.cs</code> \u2013 In der Main-Funktion dieser Datei ist die gesamte Logik implementiert, durch Kommentare  \"getrennt\". Sobald die Logik etwas komplexer wird, wird es bereits nach wenigen Tagen (oder Stunden?) schwierig sein, den eigenen Code zu \u00fcberblicken und zu verstehen. Diese L\u00f6sung ist daher nicht weiter von Interesse.</li> </ul> <p>Insgesamt ist die L\u00f6sung sehr einfach gehalten, da f\u00fcr den Code keine lange Lebensdauer erwartet wird. Dennoch ist eine \u201eskriptartige\u201c L\u00f6sung, bei der sich alles in einer einzigen Funktion befindet, auch in solchen F\u00e4llen nicht empfehlenswert \u2013 sie erschwert erheblich das Verst\u00e4ndnis und die \u00dcbersichtlichkeit des Codes. Daher sollten wir uns damit nicht weiter besch\u00e4ftigen.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#2-losung-2-organizedtofunctionsorganizedtofunctions-1","title":"2. L\u00f6sung (2-OrganizedToFunctions/OrganizedToFunctions-1)","text":"<p>Wechseln wir im Visual Studio zum Projekt \u201eOrganizedToFunctions-1\u201c, das sich im Ordner \u201e2-OrganizedToFunctions\u201c befindet. Diese L\u00f6sung ist bereits deutlich sympathischer, da die Logik in Funktionen aufgeteilt wurde. Werfen wir einen kurzen Blick auf den Code:</p> <p><code>Anonymizer.cs</code></p> <ul> <li>Die Funktion <code>Run</code> bildet das \u201eR\u00fcckgrat\u201c der Anwendung. Sie enth\u00e4lt die Steuerlogik und ruft die einzelnen, f\u00fcr die jeweiligen Schritte zust\u00e4ndigen Funktionen auf.</li> <li><code>ReadFromInput</code>: Liest die Quelldatei ein, erstellt f\u00fcr jede Zeile ein <code>Person</code>-Objekt und gibt eine Liste der eingelesenen <code>Person</code>-Objekte zur\u00fcck.</li> <li><code>TrimCityNames</code>: F\u00fchrt die Datenbereinigung durch (Trimmen der St\u00e4dtenamen).</li> <li><code>Anonymize</code>: Wird f\u00fcr jedes eingelesene <code>Person</code>-Objekt aufgerufen und gibt ein neues <code>Person</code>-Objekt zur\u00fcck, das die anonymisierten Daten enth\u00e4lt.</li> <li><code>WriteToOutput</code>: Schreibt die bereits anonymisierten <code>Person</code>-Objekte in die Ausgabedatei.</li> <li><code>PrintSummary</code>: Gibt eine Zusammenfassung der Verarbeitung am Ende in der Konsole aus.</li> </ul> <p><code>Program.cs</code></p> <ul> <li>Erstellt ein <code>Anonymizer</code>-Objekt und f\u00fchrt es durch einen Aufruf der <code>Run</code>-Funktion aus. Es ist ersichtlich, dass der String f\u00fcr das Maskieren w\u00e4hrend der Anonymisierung als Konstruktorparameter \u00fcbergeben werden muss.</li> </ul> <p>Probieren wir es aus, und f\u00fchren wir das Projekt aus! Stellen wir sicher, dass \u201eOrganizedToFunctions-1\u201c im Visual Studio als Startprojekt festgelegt ist (Rechtsklick darauf und Set as Startup Project), und starten wir es dann:</p> <p></p> <p>Die Ausgabedatei k\u00f6nnen wir im Datei-Explorer finden, sie befindet sich im Ordner \u201eOrganizedToFunctions-1\\bin\\Debug\\net8.0\\\" oder einem \u00e4hnlichen Ordner und hat den Namen \u201eus-500.processed.txt\u201c. \u00d6ffnen wir diese Datei und werfen einen Blick auf die Daten.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#bewertung-der-losung","title":"Bewertung der L\u00f6sung","text":"<ul> <li>Die L\u00f6sung ist grunds\u00e4tzlich gut strukturiert und leicht verst\u00e4ndlich.</li> <li>Sie folgt dem KISS (Keep It Stupid Simple)-Prinzip, verwendet keine unn\u00f6tigen Komplikationen. Das ist gut, da keine potenziellen zuk\u00fcnftigen Erweiterungen zu erwarten sind und keine unterschiedlichen Formate, Logiken usw. unterst\u00fctzt werden m\u00fcssen.</li> <li> <p>Unsere L\u00f6sung folgt jedoch nicht einem der grundlegendsten und bekanntesten Entwurfsprinzipien, das unter dem Namen Single Responsibility Principle (SRP) bekannt ist. Dieses besagt - vereinfacht ausgedr\u00fcckt -, dass eine Klasse nur eine Verantwortung haben sollte (sich grunds\u00e4tzlich nur mit einer Sache besch\u00e4ftigen sollte).</p> <ul> <li>Zweifellos hat unsere <code>Anonymizer</code>-Klasse mehrere Verantwortlichkeiten: Eingabeverarbeitung, Datenbereinigung, Anonymisierung, Ausgabeerstellung usw.</li> <li>Dieses Problem f\u00e4llt bei uns jedoch nicht auf und verursacht keine Probleme, weil jede dieser Verantwortlichkeiten einfach umgesetzt ist und in eine k\u00fcrzere Funktion passt. Wenn jedoch eine der Verantwortlichkeiten komplexer w\u00e4re und in mehreren Funktionen umgesetzt werden m\u00fcsste, sollte sie auf jeden Fall in eine separate Klasse ausgelagert werden.</li> </ul> Warum ist es problematisch, wenn eine Klasse mehrere Verantwortlichkeiten hat? * <ul> <li>Es wird schwieriger, ihr Verhalten zu verstehen, weil sie sich nicht nur auf eine Aufgabe konzentriert.</li> <li>Wenn \u00c4nderungen in einer der Verantwortlichkeiten erforderlich sind, muss eine gro\u00dfe Klasse ge\u00e4ndert und neu getestet werden.</li> </ul> </li> <li> <p>F\u00fcr die L\u00f6sung k\u00f6nnen automatisierte Integrations- (Input-Output) Tests geschrieben werden, aber \u201eechte\u201c Unit-Tests sind nicht m\u00f6glich.</p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_ger/#3-losung-organizedtofunctions-2-twoalgorithms","title":"3. L\u00f6sung (OrganizedToFunctions-2-TwoAlgorithms)","text":"<p>Im Gegensatz zu den vorherigen \"Pl\u00e4nen\" sind neue Benutzeranforderungen aufgetreten. Unser Kunde hat seine Meinung ge\u00e4ndert und bittet um die Implementierung eines anderen Anonymisierungsalgorithmus f\u00fcr einen anderen Datensatz: Das Alter der Personen muss in Bereichen gespeichert werden, das genaue Alter darf nicht erkennbar sein. Zur Vereinfachung werden in diesem Fall die Namen der Personen nicht anonymisiert, betrachten wir dies als eine Art \"Pseudo\"-Anonymisierung (es macht immer noch Sinn, ist es nicht ganz korrekt, dies Anonymisierung zu nennen).</p> <p>Unsere L\u00f6sung, die sowohl den alten als auch den neuen Algorithmus unterst\u00fctzt (aber immer nur einen von beiden), befindet sich im VS-Projekt OrganizedToFunctions-2-TwoAlgorithms. Werfen wir einen Blick auf die <code>Anonymizer</code>-Klasse. Die Grundprinzipien der L\u00f6sung (lassen wir uns diese im Code durchgehen):</p> <ul> <li>Wir haben einen <code>AnonymizerMode</code>-Enum-Typ eingef\u00fchrt, der festlegt, in welchem Modus (mit welchem Algorithmus) die <code>Anonymizer</code>-Klasse verwendet wird.</li> <li>Die <code>Anonymizer</code>-Klasse hat zwei Anonymisierungsoperationen: <code>Anonymize_MaskName</code>, <code>Anonymize_AgeRange</code>.</li> <li>Die <code>Anonymizer</code>-Klasse speichert im <code>_anonymizerMode</code>-Feld, welcher Algorithmus verwendet werden soll: F\u00fcr die beiden Modi haben wir zwei verschiedene Konstruktoren eingef\u00fchrt, die den Wert von <code>_anonymizerMode</code> festlegen.</li> <li>Die <code>Anonymizer</code>-Klasse \u00fcberpr\u00fcft an mehreren Stellen (z.B. in den Methoden <code>Run</code> und <code>GetAnonymizerDescription</code>), welchen Wert <code>_anonymizerMode</code> hat, und verzweigt sich entsprechend.</li> <li> <p>In <code>GetAnonymizerDescription</code> muss dies getan werden, da diese Methode daf\u00fcr verantwortlich ist, eine einzeilige Beschreibung des Anonymisierungsalgorithmus zu erstellen, die am Ende der Verarbeitung im \"Summary\" angezeigt wird. Werfen wir einen Blick auf den Code von <code>PrintSummary</code>, der diese Methode aufruft. Zum Beispiel wird dies als Zusammenfassung auf der Konsole angezeigt, wenn wir den Altersanonymisierer mit einem Bereich von 20 verwenden:</p> <p><code>Summary - Anonymizer (Age anonymizer with range size 20): Persons: 500, trimmed: 2</code></p> </li> </ul>"},{"location":"labor/6-tervezesi-mintak/index_ger/#bewertung-der-losung_1","title":"Bewertung der L\u00f6sung","text":"<p>Insgesamt ist die Qualit\u00e4t unseres Codes im Vergleich zum Vorherigen schlechter geworden. Fr\u00fcher war es kein Problem, dass die Anonymisierungsalgorithmen nicht erweiterbar waren, da es keine Nachfrage danach gab. Aber sobald der Bedarf f\u00fcr einen neuen Algorithmus aufgetreten ist, war es ein Fehler, die L\u00f6sung in dieser Hinsicht nicht erweiterbar zu machen: Ab jetzt m\u00fcssen wir lieber damit rechnen, dass weitere Algorithmen in der Zukunft eingef\u00fchrt werden m\u00fcssen.</p> <p>Warum behaupten wir, dass unser Code nicht erweiterbar ist, wenn \"nur\" ein neuer Enum-Wert und ein paar zus\u00e4tzliche <code>if</code>/<code>switch</code>-Zweige im Code hinzugef\u00fcgt werden m\u00fcssen, wenn ein neuer Algorithmus eingef\u00fchrt wird?</p> <p> Open/Closed Principle Es ist entscheidend, dass wir eine Klasse nur dann als erweiterbar betrachten, wenn es m\u00f6glich ist, neues Verhalten (in unserem Fall einen neuen Algorithmus) ohne Modifikation der Klasse einzuf\u00fchren, indem wir nur den Code erweitern/vergr\u00f6\u00dfern. Das bedeutet, dass der Code der <code>Anonymizer</code>-Klasse nicht ver\u00e4ndert werden sollte, was hier eindeutig nicht der Fall ist. Dies ist das ber\u00fchmte Open/Closed Principle: Die Klasse sollte f\u00fcr Erweiterungen offen und f\u00fcr \u00c4nderungen geschlossen sein. Das Problem bei der Modifikation des Codes ist, dass durch diese \u00c4nderungen sehr wahrscheinlich neue Bugs eingef\u00fchrt werden und der modifizierte Code immer wieder getestet werden muss, was erhebliche Zeit- und Kostenaufw\u00e4nde verursachen kann.</p> <p>Was ist das genaue Ziel und wie erreichen wir es? Es gibt Teile in unserer Klasse, die wir nicht \"einbrennen\" m\u00f6chten:</p> <ul> <li>Diese sind keine Daten, sondern Verhalten (Code, Logik).</li> <li>Wir l\u00f6sen es nicht mit <code>if</code>/<code>switch</code>-Befehlen: Wir f\u00fchren \"Erweiterungspunkte\" ein und stellen sicher, dass an diesen Stellen \"beliebiger\" Code ausgef\u00fchrt werden kann.</li> <li>Den Code dieser variablen/fallspezifischen Teile legen wir in andere Klassen (die aus der Perspektive unserer Klasse \"austauschbar\" sind)!</li> </ul> <p>Note</p> <p>Denken wir nicht an irgendwelche Zauberei, wir werden daf\u00fcr die bekannten Werkzeuge verwenden: Vererbung mit abstrakten/virtuellen Funktionen, Schnittstellen oder Delegaten.</p> <p>Suchen wir nach den Teilen, die fallabh\u00e4ngige, variable Logik enthalten, und die daher nicht direkt in die <code>Anonymizer</code>-Klasse eingebaut werden sollten:</p> <ul> <li>Eine der Logiken ist die Anonymisierungslogik: <code>Anonymize_MaskName</code>/<code>Anonymize_AgeRange</code></li> <li>Die andere ist <code>GetAnonymizerDescription</code></li> </ul> <p>Diese m\u00fcssen vom Code der Klasse getrennt werden, und an diesen Stellen muss die Klasse erweiterbar gemacht werden. Die folgende Abbildung zeigt das allgemeine Ziel:</p> Illustration der allgemeinen L\u00f6sungsmethode <p></p> <p>Wir werden uns drei spezifische Entwurfsmuster und -techniken ansehen, um die oben genannten Ziele zu erreichen:</p> <ul> <li>Template Method Entwurfsmuster</li> <li>Strategy Entwurfsmuster (einschlie\u00dflich Dependency Injection)</li> <li>Delegate (optional mit Lambda-Ausdruck)</li> </ul> <p>Eigentlich haben wir diese Konzepte bereits in unseren Studien verwendet, aber jetzt werden wir sie noch besser kennen lernen und ihre Anwendung umfassender \u00fcben. Die ersten beiden werden wir im Labor untersuchen, das dritte wird dann im Rahmen einer zugeh\u00f6rigen Hausaufgabe behandelt.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#4-losung-3-templatemethodtemplatemethod-1","title":"4. L\u00f6sung (3-TemplateMethod/TemplateMethod-1)","text":"<p>In diesem Schritt werden wir mit der Anwendung des Template Method Entwurfsmusters unsere L\u00f6sung an den erforderlichen Punkten erweiterbar machen.</p> <p>Note</p> <p>Der Name des Musters ist \"irref\u00fchrend\": Es hat nichts mit den in C++ erlernten Template-Methoden zu tun!</p> Klassendiagramm der Template Method basierte L\u00f6sung <p>Das folgende UML-Klassendiagramm veranschaulicht die Template-Methoden-basierte L\u00f6sung mit einem Fokus auf die wesentlichen Punkte:</p> <p></p> <p>Im Muster wird die Trennung der \"unver\u00e4nderlichen\" und \"variablen\" Teile nach den folgenden Prinzipien umgesetzt (es ist sinnvoll, diese anhand des oben gezeigten Klassendiagramms - angewendet auf unser Beispiel - zu verstehen):</p> <ul> <li>Die \"gemeinsamen/unver\u00e4nderlichen\" Teile kommen in eine Basisklasse.</li> <li>Erweiterungspunkte werden hier durch die Einf\u00fchrung abstrakter/virtueller Funktionen geschaffen, die an den Erweiterungspunkten aufgerufen werden.</li> <li>Die fallabh\u00e4ngige Implementierung dieser Erweiterungspunkte kommt in die abgeleiteten Klassen.</li> </ul> <p>Der bekannte \"Trick\" besteht darin, dass, wenn die Basisklasse die abstrakten/virtuellen Funktionen aufruft, der fallabh\u00e4ngige Code in den abgeleiteten Klassen ausgef\u00fchrt wird.</p> <p>In den folgenden Schritten werden wir die vorherige <code>enum</code>- bzw. <code>if</code>/<code>switch</code>-basierte L\u00f6sung in eine Template Method L\u00f6sung umwandeln (es wird kein <code>enum</code> mehr verwendet). Wir werden eine Basisklasse und zwei algorithmusabh\u00e4ngige abgeleitete Klassen einf\u00fchren.</p> <p>Lassen wir uns den Code entsprechend anpassen. Im Visual Studio Solution \"3-TemplateMethod\" befindet sich das Projekt \"TemplateMethod-0-Begin\", das eine Kopie unserer vorherigen L\u00f6sung enth\u00e4lt. In diesem Projekt werden wir arbeiten:</p> <ol> <li>Benennen wir die Klasse <code>Anonymizer</code> in <code>AnonymizerBase</code> um (z. B. in der Quelldatei mit Rechtsklick auf den Klassennamen und Dr\u00fccken von F2).</li> <li>F\u00fcgen wir dem Projekt eine <code>NameMaskingAnonymizer</code>- und eine <code>AgeAnonymizer</code>-Klasse hinzu (Rechtsklick im Projekt, Add/Class).</li> <li>Erben wir die Klassen <code>NameMaskingAnonymizer</code> und <code>AgeAnonymizer</code> von der <code>AnonymizerBase</code>.</li> <li> <p>Verschieben wir die entsprechenden Teile aus der <code>AnonymizerBase</code> in die <code>NameMaskingAnonymizer</code>:</p> <ol> <li>Die <code>_mask</code>-Mitgliedsvariable.</li> <li>Der Konstruktor mit den Parametern <code>string inputFileName, string mask</code>, umbenannt zu <code>NameMaskingAnonymizer</code>, wobei:<ol> <li>Die Zeile <code>_anonymizerMode = AnonymizerMode.Name;</code> entfernt wird.</li> <li> <p>Anstelle von <code>this</code> verwenden wir <code>base</code> f\u00fcr den Konstruktoraufruf.</p> Der Konstruktor Code <pre><code>public NameMaskingAnonymizer(string inputFileName, string mask): base(inputFileName)\n{\n    _mask = mask;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Verschieben wir die entsprechenden Teile aus der <code>AnonymizerBase</code> in die <code>AgeAnonymizer</code>:</p> <ol> <li>Die <code>_rangeSize</code>-Mitgliedsvariable.</li> <li>Der Konstruktor mit den Parametern <code>string inputFileName, string rangeSize</code>, umbenannt zu <code>AgeAnonymizer</code>, wobei:<ol> <li>Die Zeile <code>_anonymizerMode = AnonymizerMode.Age;</code> entfernt wird.</li> <li> <p>Anstelle von <code>this</code> verwenden wir <code>base</code> f\u00fcr den Konstruktoraufruf.</p> Der Konstruktor Code <pre><code>public AgeAnonymizer(string inputFileName, int rangeSize): base(inputFileName)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>In der <code>AnonymizerBase</code>:</p> <ol> <li>L\u00f6schen wir den <code>AnonymizerMode</code> Aufz\u00e4hlungstyp.</li> <li>L\u00f6schen wir das <code>_anonymizerMode</code>-Feld.</li> </ol> </li> </ol> <p>Suchen wir die Teile, die fallabh\u00e4ngige, variable Logiken enthalten, die wir nicht in die wiederverwendbare <code>AnonymizerBase</code>-Klasse einbetten m\u00f6chten:</p> <ul> <li>Eine davon ist <code>Anonymize_MaskName</code>/<code>Anonymize_AgeRange</code>,</li> <li>die andere ist <code>GetAnonymizerDescription</code>.</li> </ul> <p>Dem Muster folgend f\u00fchren wir in der Basisklasse abstrakte (oder m\u00f6glicherweise virtuelle) Methoden ein und rufen diese auf, wobei die fallabh\u00e4ngigen Implementierungen in den abgeleiteten Klassen platziert werden (mit <code>override</code>):</p> <ol> <li>Machen wir die <code>AnonymizerBase</code>-Klasse abstrakt (indem wir das Schl\u00fcsselwort <code>abstract</code> vor <code>class</code> setzen).</li> <li> <p>F\u00fcgen wir in <code>AnonymizerBase</code> die folgende Methode hinzu:</p> <pre><code>protected abstract Person Anonymize(Person person);\n</code></pre> <p>Diese Methode wird f\u00fcr die Durchf\u00fchrung der Anonymisierung verantwortlich sein.</p> </li> <li> <p>Bewegen wir die Methode <code>Anonymize_MaskName</code> in die <code>NameMaskingAnonymizer</code>-Klasse und \u00e4ndern wir ihre Signatur, sodass sie die abstrakte Methode <code>Anonymize</code> der Basisklasse \u00fcberschreibt:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    return new Person(_mask, _mask, person.CompanyName,\n        person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n}\n</code></pre> <p>Der K\u00f6rper der Methode muss nur so ge\u00e4ndert werden, dass anstelle des entfernten <code>mask</code>-Parameters die <code>_mask</code>-Membervariable verwendet wird.</p> </li> <li> <p>Auf die gleiche Weise wie im vorherigen Schritt verschieben wir die Methode <code>Anonymize_AgeRange</code> in die <code>AgeAnonymizer</code>-Klasse und \u00e4ndern ihre Signatur so, dass sie die abstrakte Methode <code>Anonymize</code> der Basisklasse \u00fcberschreibt:</p> <pre><code>protected override Person Anonymize(Person person)\n{\n    ...\n}\n</code></pre> <p>Der K\u00f6rper der Methode muss nur so ge\u00e4ndert werden, dass anstelle des entfernten <code>rangeSize</code>-Parameters die <code>_rangeSize</code>-Membervariable verwendet wird.</p> </li> <li> <p>In der <code>Run</code>-Methode der <code>AnonymizerBase</code>-Klasse k\u00f6nnen wir die <code>Anonymize</code>-Aufrufe im <code>if</code>/<code>else</code>-Ausdruck jetzt durch einen einfachen Aufruf der abstrakten Methode ersetzen:</p> <pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> <p>Stattdessen:</p> <pre><code>var person = Anonymize(persons[i]);\n</code></pre> </li> </ol> <p>Ein unserer Erweiterungspunkte ist fertig. Es bleibt jedoch noch einer, <code>GetAnonymizerDescription</code>, deren Behandlung ebenfalls fallspezifisch ist. Die Umwandlung davon ist sehr \u00e4hnlich zu den vorherigen Schritten:</p> <ol> <li> <p>Kopieren wir die Methode <code>GetAnonymizerDescription</code> aus der Klasse <code>AnonymizerBase</code> in die Klasse <code>NameMaskingAnonymizer</code>, f\u00fcgen wir das Schl\u00fcsselwort <code>override</code> in die Signatur ein und lassen wir im Funktionsk\u00f6rper nur die Logik, die f\u00fcr <code>NameMaskingAnonymizer</code> gilt:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}\n</code></pre> </li> <li> <p>Kopieren wir die Methode <code>GetAnonymizerDescription</code> aus der Klasse <code>AnonymizerBase</code> auch in die Klasse <code>AgeAnonymizer</code>, f\u00fcgen wir das Schl\u00fcsselwort <code>override</code> in die Signatur ein und lassen wir im Funktionsk\u00f6rper nur die Logik, die f\u00fcr <code>AgeAnonymizer</code> gilt:</p> <pre><code>protected override string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n}\n</code></pre> </li> <li> <p>Die Frage ist, was wir mit der Methode <code>GetAnonymizerDescription</code> in <code>AnonymizerBase</code> machen. Wir machen sie nicht abstrakt, sondern zu einer virtuellen Methode, da wir hier ein sinnvolles Standardverhalten bereitstellen k\u00f6nnen: Wir geben einfach den Namen der Klasse zur\u00fcck (der z.B. f\u00fcr die Klasse <code>NameMaskingAnonymizer</code> \"NameMaskingAnonymizer\" w\u00e4re). Auf diese Weise befreien wir uns von der starren <code>switch</code>-Struktur:</p> <pre><code>protected virtual string GetAnonymizerDescription()\n{\n    return GetType().Name;\n}\n</code></pre> <p>Reflexion</p> <p>Mit der aus der <code>object</code>-Klasse geerbten Methode <code>GetType()</code> erhalten wir ein <code>Type</code>-Objekt, das Informationen \u00fcber die Klasse enth\u00e4lt. Dies geh\u00f6rt zum Thema Reflexion, \u00fcber das wir am Ende des Semesters in einer Vorlesung ausf\u00fchrlicher lernen werden.</p> </li> </ol> <p>Es bleibt nur noch eine Sache: In der <code>Main</code>-Methode der <code>Program.cs</code> versuchen wir nun, die Basisklasse <code>AnonymizerBase</code> zu instanziieren (aufgrund der vorherigen Umbenennung). Stattdessen sollten wir eine der beiden abgeleiteten Klassen verwenden. Zum Beispiel:</p> <pre><code>NameMaskingAnonymizer anonymizer = new(\"us-500.csv\", \"***\");\nanonymizer.Run();\n</code></pre> <p>Wir sind fertig! Versuchen wir nun, die Erweiterungspunkte besser zu verstehen, um sicherzustellen, dass sie wirklich funktionieren (aber falls wir im Labor wenig Zeit haben, ist das nicht unbedingt wichtig; etwas \u00c4hnliches haben wir bereits in fr\u00fcheren Semestern in C++/Java durchgef\u00fchrt):</p> <ul> <li>Stellen wir sicher, dass das Projekt TemplateMethod-0-Begin das Startprojekt in Visual Studio ist, falls wir das noch nicht eingestellt haben.</li> <li>Setzen wir einen Haltepunkt in der <code>AnonymizerBase</code>-Klasse auf die Zeile <code>var person = Anonymize(persons[i]);</code>.</li> <li>Wenn der Debugger w\u00e4hrend der Ausf\u00fchrung hier anh\u00e4lt, dr\u00fccken wir <code>F11</code>, um in die Methode hineinzugehen.</li> <li>Wir werden feststellen, dass die Methode der abgeleiteten Klasse <code>AgeAnonymizer</code> aufgerufen wird.</li> </ul> <p>Werfen wir einen Blick auf das Klassendiagramm der L\u00f6sung:</p> Klassendiagramm der Template Method basiertes L\u00f6sung* <p></p> <p>Unsere bisherige L\u00f6sung ist im <code>3-TemplateMethod/TemplateMethod-1</code> Projekt zu finden, falls wir sie brauchen.</p> Warum hei\u00dft das Muster Template Method? * <p>Das Muster tr\u00e4gt den Namen \"Template Method\", weil - unter Verwendung unserer Anwendung als Beispiel - die Methoden <code>Run</code> und <code>PrintSummary</code> \"Schablonenmethoden\" sind, die eine schablonenartige Logik oder Struktur definieren, in der bestimmte Schritte nicht festgelegt sind. Diese Code-Teile werden an abstrakte/virtuelle Methoden delegiert, und die abgeleiteten Klassen bestimmen deren Implementierung.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#bewertung-der-losung_2","title":"Bewertung der L\u00f6sung","text":"<p>\u00dcberpr\u00fcfen wir, ob die L\u00f6sung unsere Ziele erf\u00fcllt:</p> <ul> <li>Die <code>AnonymizerBase</code>-Klasse wurde wiederverwendbarer.</li> <li>Wenn in Zukunft eine neue Anonymisierungslogik erforderlich ist, m\u00fcssen wir nur davon ableiten. Dies ist keine Modifikation, sondern eine Erweiterung.</li> <li>Entsprechend wird das OPEN/CLOSED-Prinzip eingehalten, das hei\u00dft, wir k\u00f6nnen die Logik an den beiden Punkten im Basisklassen-Code anpassen und erweitern, ohne den Code der Basisklasse zu \u00e4ndern.</li> </ul> <p>Soll jede Methode unserer Klasse erweiterbar sein?</p> <p>Beachten wir, dass wir nicht jede Methode der <code>AnonymizerBase</code>-Klasse virtuell gemacht haben, um die Klasse an jeder Stelle erweiterbar zu machen. Wir haben dies nur dort getan, wo wir glauben, dass es in Zukunft erforderlich sein k\u00f6nnte, die Logik zu erweitern.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#5-losung-3-templatemethodtemplatemethod-2-progress","title":"5. L\u00f6sung (3-TemplateMethod/TemplateMethod-2-Progress)","text":"<p>Nehmen wir an, dass es eine neue - relativ einfache - Anforderung gibt:</p> <ul> <li> <p>Beim <code>NameMaskingAnonymizer</code> bleibt die bisher einfache Fortschrittsanzeige bestehen (wir geben nach jeder Zeile an, wie weit wir sind),</p> Einfache Fortschrittsanzeige <p></p> </li> <li> <p>Beim <code>AgeAnonymizer</code> muss die Fortschrittsanzeige jedoch anders aussehen: Es soll nach jeder Zeile angezeigt werden, wie viel Prozent der Verarbeitung abgeschlossen sind.</p> Prozentuale Fortschrittsanzeige <p></p> <p>(Da wir derzeit nur wenige Daten haben (nur 500 Zeilen), wird diese L\u00f6sung am Ende schnell auf 100% springen.)</p> </li> </ul> <p>Die L\u00f6sung ist sehr einfach: Wir wenden das Template Method-Muster in der <code>Run</code>-Methode weiter an und f\u00fchren auch f\u00fcr die Fortschrittsanzeige einen Erweiterungspunkt ein, indem wir die Implementierung in eine virtuelle Methode auslagern.</p> <p>Springen wir direkt zur fertigen L\u00f6sung (3-TemplateMethod/TemplateMethod-2-Progress Projekt):</p> <ul> <li>In der <code>AnonymizerBase</code>-Klasse neue virtuelle Funktion <code>PrintProgress</code> (gibt standardm\u00e4\u00dfig nichts aus)</li> <li>Aufruf dieser Funktion in <code>Run</code></li> <li>Entsprechende Implementierung in <code>NameMaskingAnonymizer</code> und <code>AgeAnonymizer</code> (override)</li> </ul> <p>Dies hat zun\u00e4chst keine wesentlichen Erkenntnisse, aber im n\u00e4chsten Schritt wird es welche geben.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#6-losung-3-templatemethodtemplatemethod-3-progressmultiple","title":"6. L\u00f6sung (3-TemplateMethod/TemplateMethod-3-ProgressMultiple)","text":"<p>Ein neuer - und v\u00f6llig logischer - Bedarf ist aufgetaucht: In Zukunft soll jeder Anonymisierungsalgorithmus mit jeder Art der Fortschrittsanzeige verwendet werden k\u00f6nnen. Dies bedeutet derzeit vier Kreuzkombinationen:</p> Anonymisierer Fortschritt Namensanonymisierer Einfache Fortschritte Namensanonymisierer Prozentualer Fortschritt Altersanonymisierer Einfache Fortschritte Altersanonymisierer Prozentualer Fortschritt <p>Springen wir zur fertigen L\u00f6sung (3-TemplateMethod/TemplateMethod-3-ProgressMultiple Projekt). Statt des Codes \u00f6ffnen wir das <code>Main.cd</code> Klassendiagramm im Projekt und betrachten die L\u00f6sung anhand dieses Diagramms (oder wir k\u00f6nnen das Diagramm unten in der Anleitung ansehen).</p> Template Method basierte L\u00f6sung (zwei Aspekte) Klassendiagramm <p></p> <p>Es ist sp\u00fcrbar, dass etwas \"nicht stimmt\", da f\u00fcr jede Kreuzkombination eine separate abgeleitete Klasse erstellt werden musste. Um den Code-Duplikationen zu verringern, gibt es sogar zus\u00e4tzliche, Zwischenklassen in der Hierarchie. Au\u00dferdem:</p> <ul> <li>Wenn wir in Zukunft einen neuen Anonymisierungsalgorithmus einf\u00fchren, m\u00fcssen wir so viele neue Klassen schreiben (mindestens), wie viele Fortschrittstypen wir unterst\u00fctzen.</li> <li>Wenn wir in Zukunft einen neuen Fortschrittstyp einf\u00fchren, m\u00fcssen wir so viele neue Klassen schreiben (mindestens), wie viele Anonymisierungstypen wir unterst\u00fctzen.</li> </ul> <p>Was hat das Problem verursacht? Dass das Verhalten unserer Klassen entlang mehrerer Dimensionen/Aspekte (in unserem Beispiel Anonymisierung und Fortschritt) erweiterbar gemacht werden muss, und diese in vielen Kreuzkombinationen unterst\u00fctzt werden m\u00fcssen. Wenn wir weitere Aspekte hinzuf\u00fcgen m\u00fcssten (z.B. Art des Lesens oder Generierung der Ausgabe), w\u00fcrde das Problem exponentiell \"explodieren\". In solchen F\u00e4llen ist das Template-Method-Designmuster nicht anwendbar.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#7-losung-4-strategystrategy-1","title":"7. L\u00f6sung (4-Strategy/Strategy-1)","text":"<p>In diesem Schritt werden wir das Strategy-Entwurfsmuster anwenden, um unsere urspr\u00fcngliche L\u00f6sung an den erforderlichen Stellen erweiterbar zu machen. Im Muster wird die Trennung der \"unver\u00e4nderlichen/wiederverwendbaren\" und \"ver\u00e4nderbaren\" Teile wie folgt umgesetzt:</p> <ul> <li>Die \"gemeinsamen/unver\u00e4nderlichen\" Teile werden in eine bestimmte Klasse eingef\u00fcgt (aber es wird keine \"Basisklasse\" sein).</li> <li>Im Gegensatz zum Template Method-Muster verwenden wir hier keine Vererbung, sondern Komposition (Enthaltensein): Das Verhalten in den Erweiterungspunkten wird auf andere Objekte \u00fcbertragen, die als Schnittstellen enthalten sind (und nicht auf abstrakte/virtuelle Funktionen).</li> <li>Dies wird f\u00fcr jeden Aspekt des Verhaltens der Klasse durchgef\u00fchrt, den wir ersetzbar/erweiterbar machen wollen, unabh\u00e4ngig voneinander. Wie wir sehen werden, kann so die kombinatorische Explosion, die im vorherigen Kapitel auftrat, vermieden werden.</li> </ul> <p>Das ist in der Praxis viel einfacher, als es in der Theorie erscheint (wir haben es auch schon in fr\u00fcheren Studien verwendet). Um das zu verstehen, betrachten wir unser Beispiel.</p> <p>Im Folgenden betrachten wir das Klassendiagramm, das die Strategy-basierte L\u00f6sung veranschaulicht (auf die Erkl\u00e4rung nach dem Diagramm basierend).</p> Klassendiagramm der Strategie-basierte L\u00f6sung <p>Das folgende UML-Klassendiagramm veranschaulicht die strategie-basierte L\u00f6sung, mit Fokus auf das Wesentliche:</p> <p></p> <p>Der erste Schritt bei der Anwendung des Strategy-Musters ist die Bestimmung, wie viele verschiedene Aspekte des Verhaltens der Klasse wir erweiterbar machen m\u00f6chten. In unserem Beispiel gibt es vorerst - zumindest - zwei:</p> <ul> <li>Verhalten im Zusammenhang mit der Anonymisierung, das zwei Operationen umfasst:<ul> <li>Anonymisierungslogik</li> <li>Bestimmung der Beschreibung der Anonymisierungslogik (Erzeugung des Beschreibungstextes)</li> </ul> </li> <li>Fortschrittsbehandlung, die eine Operation umfasst:<ul> <li>Fortschrittsanzeige</li> </ul> </li> </ul> <p>Der schwierigste Teil ist damit erledigt, ab jetzt kann man grunds\u00e4tzlich mechanisch arbeiten, indem man dem Strategy-Muster folgt:</p> <ol> <li>F\u00fcr jeden der oben genannten Aspekte muss ein eigenes Strategy-Interface eingef\u00fchrt werden, mit den oben definierten Operationen, und f\u00fcr jedes m\u00fcssen die entsprechende Implementierungen erstellt werden.</li> <li>In der <code>Anonymizer</code>-Klasse muss f\u00fcr jedes Strategy-Interface eine Mitgliedsvariable eingef\u00fchrt werden, und in den Erweiterungspunkten wird \u00fcber diese Mitgliedsvariablen die aktuell eingestellte Strategy-Implementierung verwendet.</li> </ol> <p>Diese Elemente erscheinen auch im obigen Klassendiagramm. Jetzt wechseln wir zum Code. Unsere Ausgangsumgebung befindet sich im \"4-Strategy\"-Ordner im \"Strategy-0-Begin\"-Projekt, in dem wir weiterarbeiten werden. Dies ist dieselbe L\u00f6sung, die das Enum verwendet, wie die, die wir auch als Ausgangspunkt f\u00fcr das Template Method-Muster verwendet haben.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#anonymisierungsstrategie","title":"Anonymisierungsstrategie","text":"<p>Wir beginnen mit der Verwaltung der Anonymisierungsstrategie/-aspekts. F\u00fchren wir die zugeh\u00f6rige Schnittstelle ein:</p> <ol> <li>Erstellen wir im Projekt einen Ordner namens <code>AnonymizerAlgorithms</code> (Rechtsklick auf das \"Strategy-0-Begin\"-Projekt, dann Add/New Folder Men\u00fc). In den n\u00e4chsten Schritten f\u00fcgen wir jede Schnittstelle und Klasse in eine separate Datei mit dem entsprechenden Namen im gewohnten Format ein!</li> <li> <p>F\u00fcgen wir in diesem Ordner eine Schnittstelle <code>IAnonymizerAlgorithm</code> mit folgendem Code hinzu:</p> IAnonymizerAlgorithm.cs<pre><code>public interface IAnonymizerAlgorithm\n{\n    Person Anonymize(Person person);\n    string GetAnonymizerDescription() =&gt; GetType().Name;\n}\n</code></pre> <p>Es ist auch bemerkenswert, dass wir in modernen C#-Versionen bei Bedarf den Methoden in Schnittstellen eine Standardimplementierung geben k\u00f6nnen, wie es bei der Methode <code>GetAnonymizerDescription</code> der Fall ist!</p> </li> </ol> <p>Jetzt erstellen wir die Implementierung f\u00fcr die Anonymisierung von Namen (also eine Strategy-Implementierung).</p> <ol> <li>F\u00fcgen wir eine <code>NameMaskingAnonymizerAlgorithm</code> Klasse in denselben Ordner hinzu.</li> <li>Verschieben wir die zugeh\u00f6rige <code>_mask</code> Mitgliedsvariable aus der <code>Anonymizer</code>-Klasse in die <code>NameMaskingAnonymizerAlgorithm</code> Klasse.</li> <li> <p>F\u00fcgen wir folgenden Konstruktor in die <code>NameMaskingAnonymizerAlgorithm</code> Klasse ein:</p> <pre><code>public NameMaskingAnonymizerAlgorithm(string mask)\n{\n    _mask = mask;\n}\n</code></pre> </li> <li> <p>Implementieren wir die <code>IAnonymizerAlgorithm</code> Schnittstelle. Nachdem wir den Schnittstellennamen nach dem Klassennamen als <code>: IAnonymizerAlgorithm</code> hinzugef\u00fcgt haben, ist es sinnvoll, mit Visual Studio das Grundger\u00fcst f\u00fcr die Methoden zu erzeugen: Platzieren wir den Cursor auf den Schnittstellennamen (klicken wir im Quellcode darauf), verwenden wir die Tastenkombination 'ctrl' + '.', und w\u00e4hlen wir im Men\u00fc \"Implement interface\". Hinweis: Da es f\u00fcr die <code>GetAnonymizerDescription</code> Methode bereits eine Standardimplementierung in der Schnittstelle gibt, wird nur die <code>Anonymize</code> Methode generiert. Das ist momentan in Ordnung.</p> </li> <li> <p>\u00dcbernehmen wir den Code der <code>Anonymize_MaskName</code> Methode aus der <code>Anonymizer</code>-Klasse in die <code>Anonymize</code> Methode der <code>NameMaskingAnonymizerAlgorithm</code>. Der Methodenk\u00f6rper muss nur so ge\u00e4ndert werden, dass nicht mehr der nicht mehr existierende <code>mask</code> Parameter, sondern die <code>_mask</code> Membervariable verwendet wird. L\u00f6schen wir dann die <code>Anonymize</code> Methode in der <code>Anonymizer</code> Klasse.</p> </li> <li> <p>Jetzt wenden wir uns der Implementierung der <code>GetAnonymizerDescription</code> Methode im Strategy Interface zu. Kopieren wir die <code>GetAnonymizerDescription</code> Methode aus der <code>Anonymizer</code> Klasse in die <code>NameMaskingAnonymizerAlgorithm</code> Klasse und lassen wir nur die Logik f\u00fcr den Namensanonymisierer \u00fcbrig, indem wir die Methode \u00f6ffentlich machen:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"NameMasking anonymizer with mask {_mask}\";\n}\n</code></pre> </li> <li> Mit dieser Implementierung haben wir die Strategy f\u00fcr die Namensanonymisierung abgeschlossen. Der vollst\u00e4ndige Code sieht nun wie folgt aus: NameMaskingAnonymizerAlgorithm.cs<pre><code>public class NameMaskingAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly string _mask;\n\n    public NameMaskingAnonymizerAlgorithm(string mask)\n    {\n        _mask = mask;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        return new Person(_mask, _mask, person.CompanyName,\n            person.Address, person.City, person.State, person.Age, person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"NameMasking anonymizer with mask {_mask}\";\n    }\n}\n</code></pre> </li> </ol> <p>Im n\u00e4chsten Schritt erstellen wir die Implementierung des <code>IAnonymizerAlgorithm</code> Strategy-Interfaces f\u00fcr die Anonymisierung von Alter.</p> <ol> <li>Erstellen wir eine <code>AgeAnonymizerAlgorithm</code>-Klasse im gleichen Ordner (AnonymizerAlgorithms).</li> <li>Verschieben wir die zugeh\u00f6rige <code>_rangeSize</code>-Membervariable aus der <code>Anonymizer</code>-Klasse in die <code>AgeAnonymizerAlgorithm</code>-Klasse.</li> <li> <p>F\u00fcgen wir den folgenden Konstruktor in die <code>AgeAnonymizerAlgorithm</code>-Klasse ein:</p> <pre><code>public AgeAnonymizerAlgorithm(int rangeSize)\n{\n    _rangeSize = rangeSize;\n}\n</code></pre> </li> <li> <p>Implementieren wir die <code>IAnonymizerAlgorithm</code>-Schnittstelle. Nachdem wir den Schnittstellennamen <code>: IAnonymizerAlgorithm</code> nach dem Klassennamen hinzugef\u00fcgt haben, ist es ratsam, das Skelett der <code>Anonymize</code>-Methode mithilfe von Visual Studio wie zuvor zu generieren.</p> </li> <li>\u00dcbertragen wir den Code der <code>Anonymize_AgeRange</code>-Methode aus der <code>Anonymizer</code>-Klasse in die <code>AgeAnonymizerAlgorithm</code>.<code>Anonymize</code>-Methode. Der Code muss nur so angepasst werden, dass anstelle des nicht mehr existierenden <code>rangeSize</code>-Parameters nun die <code>_rangeSize</code>-Membervariable verwendet wird. L\u00f6schen wir dann die <code>Anonymize_AgeRange</code>-Methode in der <code>Anonymizer</code>-Klasse.</li> <li> <p>Jetzt gehen wir weiter mit der Implementierung der <code>GetAnonymizerDescription</code>-Methode des Strategy-Interfaces. Kopieren wir die <code>GetAnonymizerDescription</code>-Methode aus der <code>Anonymizer</code>-Klasse in die <code>AgeAnonymizerAlgorithm</code>-Klasse und lassen wir im Methodenk\u00f6rper nur die Logik f\u00fcr die Altersanonymisierung, und machen wir die Methode \u00f6ffentlich:</p> <pre><code>public string GetAnonymizerDescription()\n{\n    return $\"Age anonymizer with range size {_rangeSize}\";\n} \n</code></pre> </li> <li> Damit ist die Implementierung der Strategie f\u00fcr die Altersanonymisierung abgeschlossen, der gesamte Code lautet wie folgt AgeAnonymizerAlgorithm.cs<pre><code>public class AgeAnonymizerAlgorithm: IAnonymizerAlgorithm\n{\n    private readonly int _rangeSize;\n\n    public AgeAnonymizerAlgorithm(int rangeSize)\n    {\n        _rangeSize = rangeSize;\n    }\n\n    public Person Anonymize(Person person)\n    {\n        // This is whole number integer arithmetics, e.g for 55 / 20 we get 2\n        int rangeIndex = int.Parse(person.Age) / _rangeSize;\n        string newAge = $\"{rangeIndex * _rangeSize}..{(rangeIndex + 1) * _rangeSize}\";\n\n        return new Person(person.FirstName, person.LastName, person.CompanyName,\n            person.Address, person.City, person.State, newAge,\n            person.Weight, person.Decease);\n    }\n\n    public string GetAnonymizerDescription()\n    {\n        return $\"Age anonymizer with range size {_rangeSize}\";\n    }\n}\n</code></pre> </li> </ol> <p> Beachten wir unbedingt, dass die Schnittstelle und ihre Implementierungen ausschlie\u00dflich mit der Anonymisierung zu tun haben, ohne jegliche andere Logik (z. B. Fortschrittsanzeige)!</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#fortschrittsstrategie","title":"Fortschrittsstrategie","text":"<p>Im n\u00e4chsten Schritt f\u00fchren wir die Schnittstelle und die Implementierungen f\u00fcr die Fortschrittsanzeige ein:</p> <ol> <li>Erstellen wir im Projekt einen Ordner namens <code>Progresses</code>. In den folgenden Schritten f\u00fcgen wir jede Schnittstelle und jede Klasse in eine separate, benannte Quelldatei gem\u00e4\u00df den \u00fcblichen Konventionen ein.</li> <li> <p>F\u00fcgen wir in diesem Ordner eine <code>IProgress</code>-Schnittstelle mit folgendem Code hinzu:</p> L\u00f6sung IProgress.cs<pre><code>public interface IProgress\n{\n    void Report(int count, int index);\n}\n</code></pre> </li> <li> <p>F\u00fcgen wir eine Implementierung dieser Schnittstelle f\u00fcr den einfachen Fortschritt in denselben Ordner ein. Die Implementierung wurde aus der <code>PrintProgress</code>-Methode unserer <code>Anonymizer</code>-Klasse abgeleitet:</p> L\u00f6sung SimpleProgress.cs<pre><code>public class SimpleProgress: IProgress\n{\n    public void Report(int count, int index)\n    {\n        Console.WriteLine($\"{index + 1}. person processed\");\n    }\n}\n</code></pre> </li> <li> <p>F\u00fcgen wir eine Implementierung dieser Schnittstelle f\u00fcr den Prozentsatz-Fortschritt in denselben Ordner ein. Wir werden uns nicht mit der Interpretation des Codes befassen. Diese L\u00f6sung existiert in unserer <code>Anonymizer</code>-Klasse nicht, da wir sie nur in unserer Template Method-basierten L\u00f6sung eingef\u00fchrt haben (die wir dort nicht im Detail betrachtet haben, aber sie ist praktisch identisch in ihrer Logik):</p> L\u00f6sung PercentProgress.cs<pre><code>public class PercentProgress: IProgress\n{\n    public void Report(int count, int index)\n    {\n        int percentage = (int)((double)(index+1) / count * 100);\n\n        Console.Write($\"\\rProcessing: {percentage} %\");\n\n        if (index == count - 1)\n            Console.WriteLine();\n    }\n}\n</code></pre> </li> </ol> <p> Beachten wir unbedingt, dass die Schnittstelle und ihre Implementierungen ausschlie\u00dflich mit der Fortschrittsanzeige zu tun haben, ohne jegliche andere Logik (z. B. Anonymisierung)!</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#anwendung-der-strategien","title":"Anwendung der Strategien","text":"<p>Der n\u00e4chste wichtige Schritt ist es, die Basisklasse des Anonymisierers mithilfe der oben eingef\u00fchrten Strategien wiederverwendbar und erweiterbar zu machen. Im <code>Anonymizer.cs</code>-Datei:</p> <ol> <li> <p>L\u00f6schen wir das Folgende:</p> <ul> <li><code>AnonymizerMode</code>-Enum-Typ</li> <li><code>_anonymizerMode</code>-Feld (sowie die Felder <code>_mask</code> und <code>_rangeSize</code>, falls diese vorher noch vorhanden sind)</li> </ul> </li> <li> <p>F\u00fchren wir jeweils ein Strategie-Interface-Typ-Feld ein:</p> <pre><code>private readonly IProgress _progress;\nprivate readonly IAnonymizerAlgorithm _anonymizerAlgorithm;\n</code></pre> </li> <li> <p>F\u00fcgen wir am Anfang der Datei die entsprechenden <code>using</code>-Anweisungen hinzu:</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> <li> <p>Die in dem vorherigen Punkt eingef\u00fchrten Felder <code>_progress</code> und <code>_anonymizerAlgorithm</code> haben anfangs den Wert <code>null</code>. Im Konstruktor setzen wir diese Referenzen auf die f\u00fcr unsere Anforderungen passende Implementierung. Zum Beispiel:</p> <pre><code>public Anonymizer(string inputFileName, string mask) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new NameMaskingAnonymizerAlgorithm(mask);\n}\n\npublic Anonymizer(string inputFileName, int rangeSize) : this(inputFileName)\n{\n    _progress = new PercentProgress();\n    _anonymizerAlgorithm = new AgeAnonymizerAlgorithm(rangeSize);\n}\n</code></pre> </li> </ol> <p>Im <code>Anonymizer</code>-Klasse \u00fcbergeben wir die aktuell eingebettete, aber anonymisierungsabh\u00e4ngige Logik an die von der <code>_anonymizerAlgorithm</code>-Membervariable referenzierte Strategy-Implementierung:</p> <ol> <li> <p>In der <code>Run</code>-Methode der Klasse delegieren wir die <code>Anonymize</code>-Aufrufe, die sich im <code>if</code>/<code>else</code>-Ausdruck befinden, nun an das <code>_anonymizerAlgorithm</code>-Objekt:</p> <pre><code>Person person;\nif (_anonymizerMode == AnonymizerMode.Name)\n    person = Anonymize_MaskName(persons[i], _mask);\nelse if (_anonymizerMode == AnonymizerMode.Age)\n    person = Anonymize_AgeRange(persons[i], _rangeSize);\nelse\n    throw new NotSupportedException(\"The requested anonymization mode is not supported.\");\n</code></pre> <p>Stattdessen:</p> <pre><code>Person person = _anonymizerAlgorithm.Anonymize(persons[i]);\n</code></pre> </li> <li> <p>Falls wir dies noch nicht getan haben, l\u00f6schen wir die <code>Anonymize_MaskName</code>- und <code>Anonymize_AgeRange</code>-Methoden, da deren Code jetzt in die Strategy-Implementierungen verschoben wurde und vom Rest der Klasse getrennt ist.</p> </li> <li> <p>Unsere <code>PrintSummary</code>-Methode ruft die unflexible, auf <code>switch</code> basierende <code>GetAnonymizerDescription</code>-Methode auf. Diese <code>GetAnonymizerDescription</code>-Methode ersetzen wir, delegieren sie an das <code>_anonymizerAlgorithm</code>-Objekt. In der <code>PrintSummary</code>-Methode (nur das Wesentliche hervorgehoben):</p> <pre><code>    ... GetAnonymizerDescription() ...\n</code></pre> <p>Stattdessen:</p> <pre><code>    ... _anonymizerAlgorithm.GetAnonymizerDescription() ...\n</code></pre> <p>Ein paar Zeilen weiter unten l\u00f6schen wir die <code>GetAnonymizerDescription</code>-Methode aus der Klasse (ihr Code wurde in die entsprechenden Strategy-Implementierungen verschoben).</p> </li> </ol> <p>Der letzte Schritt ist der Austausch der im <code>Anonymizer</code>-Klasse eingebetteten Fortschrittsverwaltung:</p> <ol> <li> <p>Auch hier delegieren wir die Anfrage an das zuvor eingef\u00fchrte <code>_progress</code>-Objekt. In der <code>Run</code>-Methode muss eine Zeile ausgetauscht werden:</p> <pre><code>PrintProgress(i);\n</code></pre> <p>Stattdessen:</p> <pre><code>_progress.Report(persons.Count, i);\n</code></pre> </li> <li> <p>L\u00f6schen wir die <code>PrintProgress</code>-Methode, da ihr Code nun in eine passende Strategy-Implementierung verschoben wurde und von der Klasse getrennt ist.</p> </li> </ol> <p>Wir sind fertig, die fertige L\u00f6sung befindet sich im \"4-Strategy/Strategy-1\"-Projekt (falls wir irgendwo stecken geblieben sind oder der Code nicht kompiliert, k\u00f6nnen wir ihn hier mit der L\u00f6sung vergleichen).</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#bewertung-der-losung_3","title":"Bewertung der L\u00f6sung","text":"<p>Mit der Einf\u00fchrung des Strategy-Musters sind wir fertig. In seiner jetzigen Form wird es jedoch so gut wie nie verwendet. \u00dcberpr\u00fcfen wir unsere L\u00f6sung: Ist sie tats\u00e4chlich wiederverwendbar, und ist es m\u00f6glich, den Anonymisierungsalgorithmus sowie die Fortschrittsbehandlung zu \u00e4ndern, ohne die <code>Anonymizer</code>-Klasse zu modifizieren? Daf\u00fcr m\u00fcssen wir \u00fcberpr\u00fcfen, ob es im Code irgendwo Implementierungsabh\u00e4ngigkeiten gibt.</p> <p>Leider finden wir solche Stellen. Im Konstruktor ist festgelegt, welche Implementierung des Algorithmus und der Fortschrittsbehandlung erstellt wird. Dies m\u00fcssen wir unbedingt im Code beachten! Wenn wir den Algorithmus oder den Fortschrittsmodus \u00e4ndern m\u00f6chten, m\u00fcssen wir den Typ hinter dem <code>new</code>-Operator in diesen Zeilen \u00e4ndern, was eine Modifikation der Klasse mit sich bringt.</p> <p>Viele \u2013 v\u00f6llig zu Recht \u2013 betrachten dies in dieser Form nicht als eine echte Strategie-basierte L\u00f6sung. Die vollst\u00e4ndige L\u00f6sung werden wir im n\u00e4chsten Schritt umsetzen.</p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#8-losung-4-strategystrategy-2-di","title":"8. L\u00f6sung (4-Strategy/Strategy-2-DI)","text":"<p> Dependency Injection (DI) Die L\u00f6sung besteht in der Anwendung von Dependency Injection (kurz DI). Das Prinzip dabei ist, dass die Klasse ihre Verhaltensabh\u00e4ngigkeiten (diese sind die Strategy-Implementierungen) nicht selbst instanziiert, sondern diese von au\u00dfen \u00fcbergeben bekommt, z. B. als Konstruktorparameter oder sogar als Properties oder Setter-Methoden. Nat\u00fcrlich unter der Verwendung von Schnittstellentypen!</p> <p>Passen wir die <code>Anonymizer</code>-Klasse entsprechend an, sodass wir die Strategy-Implementierungen nicht selbst instanziieren, sondern diese \u00fcber Konstruktorparameter erhalten:</p> <ol> <li>L\u00f6schen wir alle drei Konstruktoren.</li> <li> <p>F\u00fcgen wir den folgenden Konstruktor hinzu:</p> <pre><code>public Anonymizer(string inputFileName, IAnonymizerAlgorithm anonymizerAlgorithm, IProgress progress = null)\n{\n    ArgumentException.ThrowIfNullOrEmpty(inputFileName);\n    ArgumentNullException.ThrowIfNull(anonymizerAlgorithm);\n\n    _inputFileName = inputFileName;\n    _anonymizerAlgorithm = anonymizerAlgorithm;\n    _progress = progress;\n}\n</code></pre> <p>Wie zu sehen ist, ist die Angabe des <code>progress</code>-Parameters nicht zwingend erforderlich, da der Benutzer der Klasse m\u00f6glicherweise keine Fortschrittsinformationen ben\u00f6tigt.</p> </li> <li> <p>Da die _progress-Strategie auch null sein kann, m\u00fcssen wir eine Nullpr\u00fcfung w\u00e4hrend der Verwendung einf\u00fchren. Anstelle des \".\"-Operators verwenden wir den \"?.\"-Operator:</p> <pre><code>_progress?.Report(persons.Count,i);\n</code></pre> </li> <li> <p>Jetzt sind wir fertig, die <code>Anonymizer</code>-Klasse ist vollst\u00e4ndig von den Strategy-Implementierungen entkoppelt. Wir haben nun die M\u00f6glichkeit, die <code>Anonymizer</code>-Klasse mit jeder beliebigen Kombination von Anonymisierungsalgorithmen und Fortschrittsbehandlungen zu verwenden (ohne die Klasse selbst zu \u00e4ndern). Erstellen wir drei <code>Anonymizer</code>-Instanzen mit verschiedenen Kombinationen im <code>Main</code>-Methode der <code>Program.cs</code>-Datei (l\u00f6schen wir den bestehenden Code zuvor aus der <code>Main</code>-Methode):</p> <pre><code>Anonymizer p1 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new SimpleProgress());\np1.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p2 = new(\"us-500.csv\",\n    new NameMaskingAnonymizerAlgorithm(\"***\"),\n    new PercentProgress());\np2.Run();\n\nConsole.WriteLine(\"--------------------\");\n\nAnonymizer p3 = new(\"us-500.csv\",\n    new AgeAnonymizerAlgorithm(20),\n    new SimpleProgress());\np3.Run();\n</code></pre> </li> <li> <p>Um sicherzustellen, dass der Code funktioniert, f\u00fcgen wir am Anfang der Datei die erforderlichen <code>using</code>-Anweisungen ein:</p> <pre><code>using Lab_Extensibility.AnonymizerAlgorithms;\nusing Lab_Extensibility.Progresses;\n</code></pre> </li> </ol> <p>Wir sind fertig, die L\u00f6sung ist im Projekt \"4-Strategy/Strategy-2-DI\" zu finden (falls wir irgendwo stecken bleiben oder der Code nicht kompiliert, k\u00f6nnen wir dies mit der L\u00f6sung vergleichen).</p> <p>\u00dcberpr\u00fcfung der Funktionsweise</p> <p>W\u00e4hrend der \u00dcbung wird wahrscheinlich keine Zeit f\u00fcr diese \u00dcberpr\u00fcfung bleiben, aber wer sich unsicher ist, \"warum das Strategy-Muster funktioniert\" und warum sich das Verhalten in den oben genannten vier F\u00e4llen unterscheidet, sollte Breakpoints in der <code>Program.cs</code>-Datei an den vier <code>Run</code>-Funktionsaufrufen setzen und durch die Funktionen im Debugger eintreten, um zu \u00fcberpr\u00fcfen, dass immer die richtige Strategy-Implementierung aufgerufen wird.</p> <p>Im Projekt befindet sich ein Klassendiagramm (<code>Main.cd</code>), das die fertige L\u00f6sung ebenfalls veranschaulicht:</p> Klassendiagramm der Strategy-basierten L\u00f6sung <p>Das folgende UML-Klassendiagramm veranschaulicht unsere Strategy-basierte L\u00f6sung:</p> <p></p>"},{"location":"labor/6-tervezesi-mintak/index_ger/#bewertung-der-losung_4","title":"Bewertung der L\u00f6sung","text":"<p>\u00dcberpr\u00fcfen wir, ob die L\u00f6sung unsere Ziele erreicht:</p> <ul> <li>Der <code>Anonymizer</code> ist zu einer wiederverwendba(re)ren Klasse geworden.</li> <li>Wenn in der Zukunft eine neue Anonymisierungslogik ben\u00f6tigt wird, muss nur eine neue <code>IAnonymizerAlgorithm</code>-Implementierung eingef\u00fchrt werden. Dies ist keine \u00c4nderung, sondern eine Erweiterung.</li> <li>Wenn in der Zukunft eine neue Fortschrittslogik ben\u00f6tigt wird, muss nur eine neue <code>IProgress</code>-Implementierung eingef\u00fchrt werden. Dies ist keine \u00c4nderung, sondern eine Erweiterung.</li> <li>Die beiden obigen Punkte erf\u00fcllen das OPEN/CLOSED-Prinzip, d. h. wir k\u00f6nnen die Logik des <code>Anonymizer</code> anpassen und erweitern, ohne den Code der Klasse zu \u00e4ndern.</li> <li>Hier m\u00fcssen wir nicht die kombinatorische Explosion f\u00fcr die Template Method bef\u00fcrchten: Jede <code>IAnonymizerAlgorithm</code>-Implementierung kann bequem mit jeder <code>IProgress</code>-Implementierung verwendet werden, ohne dass neue Klassen f\u00fcr die Kombinationen eingef\u00fchrt werden m\u00fcssen (dies haben wir in der <code>Program.cs</code>-Datei gesehen).</li> </ul> <p>Weitere Vorteile von Strategy im Vergleich zur Template Method *</p> <ul> <li>Es kann auch ein Verhalten zur Laufzeit ersetzt werden. Wenn es notwendig w\u00e4re, dass wir nach der Erstellung eines bestimmten <code>Anonymizer</code>-Objekts das Anonymisierungs- oder Progress-Verhalten \u00e4ndern k\u00f6nnen, dann k\u00f6nnten wir das leicht tun (wir m\u00fcssten nur eine <code>SetAnonimizerAlgorithm</code>- bzw. <code>SetProgress</code>-Methode einf\u00fchren, in der das erhaltene Implementierung auf das von der Klasse verwendete Strategy gesetzt wird).</li> <li>Unterst\u00fctzung der Unit-Tests (dies betrachten wir im Labor nicht).</li> </ul>"},{"location":"labor/7-adatkezeles/","title":"7. Adatkezel\u00e9s","text":""},{"location":"labor/7-adatkezeles/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9lja az ADO.NET programoz\u00e1si modellj\u00e9nek megismer\u00e9se \u00e9s a leggyakoribb adatkezel\u00e9si probl\u00e9m\u00e1k, buktat\u00f3k szeml\u00e9ltet\u00e9se alapvet\u0151 CRUD m\u0171veletek meg\u00edr\u00e1s\u00e1n kereszt\u00fcl.</p> <p>Kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok: Adatkezel\u00e9s, ADO.NET alapismeretek.</p>"},{"location":"labor/7-adatkezeles/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer</li> <li>A gyakorlat sor\u00e1n Visual Studio-ban az SQL Server Object Explorer-t fogjuk haszn\u00e1lni az adatb\u00e1zis objektumok k\u00f6z\u00f6tti navig\u00e1l\u00e1s\u00e1ra \u00e9s a lek\u00e9rdez\u00e9sek futtat\u00e1s\u00e1ra. Ehhez sz\u00fcks\u00e9g lehet az SQL Server Data Tools komponensre, melyet legegyszer\u0171bben az Individual Components oldalon tudunk telep\u00edteni a Visual Studio Installer-ben, de a Data Storage and Processing workload is tartalmazza ezt.</li> </ul> <p>Gyakorlat Linuxon vagy Macen</p> <p>A gyakorlat anyag alapvet\u0151en Windowsra \u00e9s Visual Studio-ra k\u00e9sz\u00fclt, de - n\u00e9mik\u00e9ppen m\u00e1s \u00faton - elv\u00e9gezhet\u0151 m\u00e1s oper\u00e1ci\u00f3s rendszereken is, mivel a .NET SDK t\u00e1mogatott Linuxon \u00e9s Mac-en is, Linuxon:</p> <ul> <li>Visual Studio helyett, sz\u00f6vegszerkeszt\u0151vel (pl.: VSCode) \u00e9s CLI eszk\u00f6z\u00f6kkel.</li> <li>Az SQL szervernek van Linuxos v\u00e1ltozata, Mac-en pedig Dockerben futtathat\u00f3 (de Linuxon is tal\u00e1n a Docker legk\u00e9nyelmesebb m\u00f3d a futtat\u00e1s\u00e1ra).</li> <li>Az adatok vizualiz\u00e1ci\u00f3j\u00e1ra haszn\u00e1lhat\u00f3 a szint\u00e9n keresztplatformos Azure Data Studio eszk\u00f6z.</li> </ul>"},{"location":"labor/7-adatkezeles/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el itt. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre:</p> <p><code>git clone https://github.com/bmeviauab00/lab-adatkezeles-megoldas</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/7-adatkezeles/#bevezeto","title":"Bevezet\u0151","text":"Megjegyz\u00e9s gyakorlatvezet\u0151knek <p>Ezt a fejezetet gyakorlaton nem kell a le\u00edrtaknak megfelel\u0151 r\u00e9szletess\u00e9ggel ismertetni, a fontosabb fogalmakat azonban mindenk\u00e9ppen ismertess\u00fck r\u00f6viden.</p>"},{"location":"labor/7-adatkezeles/#adonet","title":"ADO.NET","text":"<p>Alacsony szint\u0171 adatb\u00e1zis-kezel\u00e9sre a .NET platformon az ADO.NET \u00e1ll rendelkez\u00e9sre, seg\u00edts\u00e9g\u00e9vel rel\u00e1ci\u00f3s adatb\u00e1zisokat tudunk el\u00e9rni.</p> <p>Az ADO.NET haszn\u00e1lata sor\u00e1n k\u00e9t elt\u00e9r\u0151 adathozz\u00e1f\u00e9r\u00e9si modellt alkalmazhatunk:</p> <ul> <li>Kapcsolatalap\u00fa modell</li> <li>Kapcsolat n\u00e9lk\u00fcli modell</li> </ul> <p>Az al\u00e1bbi k\u00e9t blokkot lenyitva \u00e1ttekint\u00e9st kaphatunk a k\u00e9t modell alapelv\u00e9r\u0151l.</p> A Kapcsolatalap\u00fa modell alapelvei <p>L\u00e9nyege az, hogy az adatb\u00e1zis-kapcsolatot v\u00e9gig nyitva tartjuk, am\u00edg az adatokat lek\u00e9rdezz\u00fck, m\u00f3dos\u00edtjuk, majd a v\u00e1ltoztat\u00e1sokat az adatb\u00e1zisba vissza\u00edrjuk. A megold\u00e1sra DataReader objektumokat haszn\u00e1lhatunk (l\u00e1sd k\u00e9s\u0151bb). A megold\u00e1s el\u0151nye az egyszer\u0171s\u00e9g\u00e9ben rejlik (egyszer\u0171bb programoz\u00e1si modell \u00e9s konkurenciakezel\u00e9s). A megold\u00e1s h\u00e1tr\u00e1nya, hogy a folyamatosan fenntartott h\u00e1l\u00f3zati kapcsolat miatt sk\u00e1l\u00e1zhat\u00f3s\u00e1gi probl\u00e9m\u00e1k ad\u00f3dhatnak. Ez azt jelenti, hogy az adatkezel\u0151h\u00f6z t\u00f6rt\u00e9n\u0151 nagysz\u00e1m\u00fa p\u00e1rhuzamos felhaszn\u00e1l\u00f3i hozz\u00e1f\u00e9r\u00e9s eset\u00e9n folyamatosan nagysz\u00e1m\u00fa adatb\u00e1zis kapcsolat \u00e9l, ami adatkezel\u0151 rendszerek eset\u00e9n a teljes\u00edtm\u00e9ny szempontj\u00e1b\u00f3l k\u00f6lts\u00e9ges er\u0151forr\u00e1snak sz\u00e1m\u00edt. \u00cdgy a fejleszt\u00e9s sor\u00e1n c\u00e9lszer\u0171 arra t\u00f6rekedni, hogy az adatb\u00e1zis kapcsolatokat miel\u0151bb z\u00e1rjuk le.</p> <p>A modell el\u0151nyei:</p> <ul> <li>Egyszer\u0171bb a konkurencia kezel\u00e9se</li> <li>Az adatok mindenhol a legfrissebbek</li> </ul> <p>Megjegyz\u00e9s: ezek az el\u0151ny\u00f6k akkor jelentkeznek, ha az adatb\u00e1zis hozz\u00e1f\u00e9r\u00e9shez az adatkezel\u0151 szigor\u00fa z\u00e1rakat haszn\u00e1l \u2013 ezt mi a hozz\u00e1f\u00e9r\u00e9s sor\u00e1n megfelel\u0151 tranzakci\u00f3 izol\u00e1ci\u00f3s szint megad\u00e1s\u00e1val tudjuk szab\u00e1lyozni. (Ennek technik\u00e1i k\u00e9s\u0151bbi tanulm\u00e1nyok sor\u00e1n ker\u00fclnek ismertet\u00e9sre.)</p> <p>H\u00e1tr\u00e1nyok:</p> <ul> <li>Folyamatos h\u00e1l\u00f3zati kapcsolat</li> <li>Sk\u00e1l\u00e1zhat\u00f3s\u00e1g hi\u00e1nya</li> </ul> A Kapcsolat-n\u00e9lk\u00fcli modell alapelvei <p>A kapcsolatalap\u00fa modellel ellent\u00e9tben az adatok megjelen\u00edt\u00e9se \u00e9s mem\u00f3ri\u00e1ban t\u00f6rt\u00e9n\u0151 m\u00f3dos\u00edt\u00e1sa sor\u00e1n nem tartunk fent adatb\u00e1zis kapcsolatot. Ennek megfelel\u0151en a f\u0151bb l\u00e9p\u00e9sek a k\u00f6vetkez\u0151k: a kapcsolat felv\u00e9tel\u00e9t \u00e9s az adatok lek\u00e9rdez\u00e9s\u00e9t k\u00f6vet\u0151en azonnal bontjuk a kapcsolatot. Az adatokat ezt k\u00f6vet\u0151en tipikusan megjelen\u00edtj\u00fck \u00e9s lehet\u0151s\u00e9get biztos\u00edtunk a felhaszn\u00e1l\u00f3nak az adatok m\u00f3dos\u00edt\u00e1s\u00e1ra (rekordok felv\u00e9tele, m\u00f3dos\u00edt\u00e1sa, t\u00f6rl\u00e9se ig\u00e9ny szerint). A m\u00f3dos\u00edt\u00e1sok ment\u00e9se sor\u00e1n \u00fajra felvessz\u00fck az adatkapcsolatot, mentj\u00fck az adatb\u00e1zisba a v\u00e1ltoztat\u00e1sokat \u00e9s z\u00e1rjuk a kapcsolatot. Term\u00e9szetesen a modell megk\u00f6veteli, hogy a lek\u00e9rdez\u00e9se \u00e9s a m\u00f3dos\u00edt\u00e1sok vissza\u00edr\u00e1sa k\u00f6z\u00f6tt \u2013 amikor nincs kapcsolatunk az adatb\u00e1zissal \u2013 az adatokat \u00e9s a v\u00e1ltoztat\u00e1sokat a mem\u00f3ri\u00e1ban nyilv\u00e1ntartsuk. Erre az ADO.NET k\u00f6rnyezetben nagyon k\u00e9nyelmes megold\u00e1st ny\u00fajt a <code>DataSet</code> objektumok alkalmaz\u00e1sa.</p> <p>A modell el\u0151nyei:</p> <ul> <li>Nem sz\u00fcks\u00e9ges folyamatos h\u00e1l\u00f3zati kapcsolat</li> <li>Sk\u00e1l\u00e1zhat\u00f3s\u00e1g</li> </ul> <p>H\u00e1tr\u00e1nyok</p> <ul> <li>Az adatok nem mindig a legfrissebbek</li> <li>\u00dctk\u00f6z\u00e9sek lehets\u00e9gesek</li> </ul> <p>Megjegyz\u00e9s: Sz\u00e1mos lehet\u0151s\u00e9g\u00fcnk van arra, hogy az objektumokat \u00e9s kapcsol\u00f3d\u00f3 v\u00e1ltoz\u00e1sokat nyilv\u00e1ntartsuk a mem\u00f3ri\u00e1ban. A <code>DataSet</code> csak az egyik lehets\u00e9ges technika. De haszn\u00e1lhatunk erre a c\u00e9lra k\u00f6z\u00f6ns\u00e9ges objektumokat, illetve ezek menedzsel\u00e9s\u00e9t megk\u00f6nny\u00edt\u0151 - az ADO.NET-n\u00e9l korszer\u0171bb - .NET technol\u00f3gi\u00e1kat (pl. Entity Framework Core).</p>"},{"location":"labor/7-adatkezeles/#a-kapcsolatalapu-modell","title":"A kapcsolatalap\u00fa modell","text":"<p>A labor keret\u00e9ben a kapcsolatalap\u00fa modellt ismerj\u00fck meg.</p> <p>Az alapfolyamat a k\u00f6vetkez\u0151:</p> <ol> <li>Kapcsolat l\u00e9trehoz\u00e1sa az alkalmaz\u00e1s, illetve az adatb\u00e1zis kezel\u0151 rendszer k\u00f6z\u00f6tt (<code>Connection</code> objektum felhaszn\u00e1l\u00e1s\u00e1val).</li> <li>A futtatand\u00f3 SQL utas\u00edt\u00e1s \u00f6ssze\u00e1ll\u00edt\u00e1sa (<code>Command</code> objektum felhaszn\u00e1l\u00e1s\u00e1val).</li> <li>Utas\u00edt\u00e1s futtat\u00e1sa (<code>Command</code> objektum felhaszn\u00e1l\u00e1s\u00e1val).</li> <li>Lek\u00e9rdez\u00e9sek eset\u00e9n a visszakapott rekordhalmaz feldolgoz\u00e1sa (<code>DataReader</code> objektum felhaszn\u00e1l\u00e1s\u00e1val). Erre a m\u00f3dos\u00edt\u00f3 parancsok eset\u00e9n \u00e9rtelemszer\u0171en nincs sz\u00fcks\u00e9g.</li> <li>Kapcsolat lez\u00e1r\u00e1sa.</li> </ol> <p>Mint a fentiekb\u0151l kider\u00fcl, az adatb\u00e1zissal val\u00f3 kommunik\u00e1ci\u00f3nak ebben a modellben h\u00e1rom f\u0151 \u00f6sszetev\u0151je van:</p> <ul> <li>Connection</li> <li>Command</li> <li>Data Reader</li> </ul> <p>Ezek az \u00f6sszetev\u0151k egy-egy oszt\u00e1lyk\u00e9nt jelennek meg, adatb\u00e1zis-kezel\u0151-f\u00fcggetlen r\u00e9sz\u00fck a BCL System.Data.Common n\u00e9vter\u00e9ben tal\u00e1lhat\u00f3 <code>DbConnection</code>, <code>DbCommand</code>, illetve <code>DbDataReader</code> n\u00e9ven. Ezek absztrakt oszt\u00e1lyok, az adatb\u00e1zis-kezel\u0151k gy\u00e1rt\u00f3inak feladata, hogy ezekb\u0151l lesz\u00e1rmazva meg\u00edrj\u00e1k a konkr\u00e9t adatb\u00e1zis-kezel\u0151ket t\u00e1mogat\u00f3 v\u00e1ltozatokat.</p> <p>Mindh\u00e1rom ADO.NET \u00f6sszetev\u0151 t\u00e1mogatja a Dispose mint\u00e1t, \u00edgy <code>using</code> blokkban haszn\u00e1lhat\u00f3k \u2013 haszn\u00e1ljuk is \u00edgy, amikor csak tudjuk. Az adatb\u00e1zis-kezel\u0151 \u00e1ltal\u00e1ban m\u00e1sik g\u00e9pen tal\u00e1lhat\u00f3, mint ahol a k\u00f3dunk fut (a labor sor\u00e1n pont nem :)), \u00edgy tekints\u00fcnk ezekre, mint t\u00e1voli h\u00e1l\u00f3zati er\u0151forr\u00e1sokra.</p> <p>A Microsoft SQL Server-t t\u00e1mogat\u00f3 v\u00e1ltozat a Microsoft.Data.SqlClient NuGet csomagban, az \u201eSql\u201d prefix\u0171 oszt\u00e1lyokban tal\u00e1lhat\u00f3k (<code>SqlConnection</code>, <code>SqlCommand</code> \u00e9s <code>SqlDataReader</code>).</p> <p>A t\u00f6bbi gy\u00e1rt\u00f3 k\u00fcl\u00f6n dll-(ek)be teszi a saj\u00e1t v\u00e1ltozat\u00e1t, az \u00edgy l\u00e9trej\u00f6tt komponenst data provider-nek nevezik. Teljess\u00e9g ig\u00e9nye n\u00e9lk\u00fcl n\u00e9h\u00e1ny p\u00e9lda:</p> <ul> <li>PostgreSQL</li> <li>SQLite </li> <li>Oracle</li> </ul>"},{"location":"labor/7-adatkezeles/#connection","title":"Connection","text":"<p>Ez teremti meg a kapcsolatot a programunk, illetve az adatb\u00e1zis-kezel\u0151-rendszer k\u00f6z\u00f6tt. Inicializ\u00e1l\u00e1s\u00e1hoz sz\u00fcks\u00e9g van egy connection string-re, mely a kapcsolat fel\u00e9p\u00edt\u00e9s\u00e9hez sz\u00fcks\u00e9ges adatokat adja meg a driver sz\u00e1m\u00e1ra. Adatb\u00e1zisgy\u00e1rt\u00f3nk\u00e9nt elt\u00e9r\u0151 a bels\u0151 form\u00e1tuma (b\u0151vebben).</p> <p>\u00daj <code>Connection</code> p\u00e9ld\u00e1nyos\u00edt\u00e1sakor nem biztos, hogy t\u00e9nyleg \u00faj kapcsolat fog l\u00e9trej\u00f6nni az adatb\u00e1zis fel\u00e9, a driverek \u00e1ltal\u00e1ban connection pooling-ot alkalmaznak, hasonl\u00f3an, mint a thread pool eset\u00e9ben, \u00fajrahaszn\u00e1lhatj\u00e1k a kor\u00e1bbi (\u00e9ppen nem haszn\u00e1lt) kapcsolatokat.</p> <p>A <code>Connection</code> k\u00fcl\u00f6n\u00f6sen k\u00f6lts\u00e9ges nem fel\u00fcgyelt er\u0151forr\u00e1sokat haszn\u00e1l, \u00edgy kiemelten fontos, hogy a lehet\u0151 leghamarabb gondoskodjunk lez\u00e1r\u00e1s\u00e1r\u00f3l, amikor m\u00e1r nincs r\u00e1 sz\u00fcks\u00e9g (pl. a <code>Dispose()</code> h\u00edv\u00e1s\u00e1val, amit az esetek t\u00f6bbs\u00e9g\u00e9ben legegyszer\u0171bben a <code>using</code> blokk alkalmaz\u00e1s\u00e1val tehet\u00fcnk meg).</p>"},{"location":"labor/7-adatkezeles/#command","title":"Command","text":"<p>Ennek seg\u00edts\u00e9g\u00e9vel vagyunk k\u00e9pesek \u201eutas\u00edt\u00e1sokat\u201d megfogalmazni az adatb\u00e1zis kezel\u0151 sz\u00e1m\u00e1ra. Ezeket SQL nyelven kell megfogalmaznunk. A <code>Command</code>-nak be kell \u00e1ll\u00edtani egy kapcsolatot \u2013 ezen kereszt\u00fcl fog a parancs v\u00e9grehajt\u00f3dni. A parancsnak k\u00fcl\u00f6nb\u00f6z\u0151 eredm\u00e9nye lehet, ennek megfelel\u0151en k\u00fcl\u00f6nb\u00f6z\u0151 f\u00fcggv\u00e9nyekkel futtatjuk a parancsot:</p> <ul> <li>ExecuteReader: Eredm\u00e9nyhalmaz (result set) lek\u00e9rdez\u00e9se</li> <li>ExecuteScalar: Skal\u00e1r \u00e9rt\u00e9k lek\u00e9rdez\u00e9se</li> <li>ExecuteNonQuery: Nincs visszat\u00e9r\u00e9si \u00e9rt\u00e9k (Pl: INSERT, UPDATE \u00e9s DELETE), viszont a m\u0171velet k\u00f6vetkezt\u00e9ben \u00e9rintett rekordok sz\u00e1m\u00e1t visszakapjuk</li> </ul>"},{"location":"labor/7-adatkezeles/#data-reader","title":"Data Reader","text":"<p>Ha a parancs eredm\u00e9nye eredm\u00e9nyhalmaz, akkor ennek a komponensnek a seg\u00edts\u00e9g\u00e9vel tudjuk az adatokat kiolvasni. Az eredm\u00e9nyhalmaz egy t\u00e1bl\u00e1zatnak tekinthet\u0151, a <code>Data Reader</code> ezen tud soronk\u00e9nt v\u00e9gignavig\u00e1lni (csak egyes\u00e9vel el\u0151refel\u00e9!). A kurzor egyszerre egy soron \u00e1ll, ha a sorb\u00f3l a sz\u00fcks\u00e9ges adatokat kiolvastuk, a kurzort egy sorral el\u0151re l\u00e9ptethetj\u00fck. Csak az aktu\u00e1lis sorb\u00f3l tudunk olvasni. Kezdetben a kurzor nem az els\u0151 soron \u00e1ll, azt egyszer l\u00e9ptetn\u00fcnk kell, hogy az els\u0151 sorra \u00e1lljon.</p> <p>Megjegyz\u00e9s: navig\u00e1l\u00e1s kliens oldalon t\u00f6rt\u00e9nik a mem\u00f3ri\u00e1ban, nincs k\u00f6ze az egyes adatkezel\u0151k \u00e1ltal t\u00e1mogatott kiszolg\u00e1l\u00f3 oldali kurzorokhoz.</p>"},{"location":"labor/7-adatkezeles/#1-feladat-adatbazis-elokeszitese","title":"1. Feladat \u2013 Adatb\u00e1zis el\u0151k\u00e9sz\u00edt\u00e9se","text":"<p>Els\u0151k\u00e9nt sz\u00fcks\u00e9g\u00fcnk van egy adatb\u00e1zis-kezel\u0151re. Ezt val\u00f3s k\u00f6rnyezetben dedik\u00e1lt szerveren fut\u00f3, adatb\u00e1zis adminisztr\u00e1torok \u00e1ltal fel\u00fcgyelt, teljes-\u00e9rt\u00e9k\u0171 adatb\u00e1zis-kezel\u0151k jelentik. Fejleszt\u00e9si id\u0151ben, lok\u00e1lis tesztel\u00e9shez azonban k\u00e9nyelmesebb egy fejleszt\u0151i adatb\u00e1zis-kezel\u0151 haszn\u00e1lata. A Visual Studio telep\u00edt\u00e9s\u00e9nek r\u00e9szek\u00e9nt kapunk is egy ilyen adatb\u00e1zismotort, ez a LocalDB, mely a teljes-\u00e9rt\u00e9k\u0171 SQL Server egyszer\u0171s\u00edtett v\u00e1ltozata. F\u0151bb tulajdons\u00e1gai:</p> <ul> <li>nem csak a Visual Studio-val, hanem k\u00fcl\u00f6n is telep\u00edthet\u0151,</li> <li>az adatb\u00e1zismotor szinte teljes m\u00e9rt\u00e9kben kompatibilis a teljes-\u00e9rt\u00e9k\u0171 Microsoft SQL Server-rel,</li> <li>alapvet\u0151en arr\u00f3l a g\u00e9pr\u0151l \u00e9rhet\u0151 el, melyre telep\u00edtett\u00fck,</li> <li>t\u00f6bb p\u00e9ld\u00e1ny is l\u00e9trehozhat\u00f3 ig\u00e9ny szerint, a p\u00e9ld\u00e1nyok alapvet\u0151en a l\u00e9trehoz\u00f3 oper\u00e1ci\u00f3s rendszer felhaszn\u00e1l\u00f3ja sz\u00e1m\u00e1ra \u00e9rhet\u0151k el (ig\u00e9ny eset\u00e9n megoszthat\u00f3 egy p\u00e9ld\u00e1ny a felhaszn\u00e1l\u00f3k k\u00f6z\u00f6tt),</li> <li>a saj\u00e1t p\u00e9ld\u00e1nyok kezel\u00e9se (l\u00e9trehoz\u00e1s, t\u00f6rl\u00e9s stb.) nem ig\u00e9nyel adminisztr\u00e1tori jogokat.</li> </ul> ssqllocaldb parancssori eszk\u00f6z <p>A gyakorlat sor\u00e1n nincs sz\u00fcks\u00e9g\u00fcnk erre, de a p\u00e9ld\u00e1nyok kezel\u00e9s\u00e9re az <code>sqllocaldb</code> parancssori eszk\u00f6z haszn\u00e1lhat\u00f3.  N\u00e9h\u00e1ny parancs, melyet az <code>sqllocaldb</code> ut\u00e1n be\u00edrva alkalmazhatunk:</p> Paracs Le\u00edr\u00e1s info az aktu\u00e1lis felhaszn\u00e1l\u00f3 sz\u00e1m\u00e1ra l\u00e1that\u00f3 p\u00e9ld\u00e1nyok list\u00e1ja create \u201elocdb\u201d \u00faj p\u00e9ld\u00e1ny l\u00e9trehoz\u00e1sa \u201elocdb\u201d n\u00e9vvel delete \u201elocdb\u201d \u201elocdb\u201d nev\u0171 p\u00e9ld\u00e1ny t\u00f6rl\u00e9se start \u201elocdb\u201d \u201elocdb\u201d nev\u0171 p\u00e9ld\u00e1ny ind\u00edt\u00e1sa stop \u201elocdb\u201d \u201elocdb\u201d nev\u0171 p\u00e9ld\u00e1ny le\u00e1ll\u00edt\u00e1sa <p>A Visual Studio is telep\u00edt, illetve ind\u00edt LocalDB p\u00e9ld\u00e1nyokat, ez\u00e9rt \u00e9rdemes megn\u00e9zni, hogy a Visual Studio alapesetben milyen p\u00e9ld\u00e1nyokat l\u00e1t.</p> <ol> <li>Ind\u00edtsuk el a Visual Studio-t, a View men\u00fcb\u0151l v\u00e1lasszuk az SQL Server Object Explorer-t (SSOE).</li> <li>Nyissuk ki az SQL Server csom\u00f3pontot, ha alatta l\u00e1tunk tov\u00e1bbi csom\u00f3pontokat, akkor nyert \u00fcgy\u00fcnk van, nyissuk ki valamelyiket (ilyenkor indul el a p\u00e9ld\u00e1ny, ha nincs elind\u00edtva, \u00edgy lehet, hogy v\u00e1rni kell kicsit).</li> <li>Ha nem jelent meg semmi, akkor parancssorb\u00f3l az <code>mssqllocaldb info</code> parancs megadja a l\u00e9tez\u0151 p\u00e9ld\u00e1nyokat. V\u00e1lasszuk az SQL Server csom\u00f3ponton jobbklikkelve az Add SQL Server opci\u00f3t, majd adjuk meg valamelyik l\u00e9tez\u0151 p\u00e9ld\u00e1nyt, pl.: (localdb)\\MSSQLLocalDB</li> <li>A megjelen\u0151 Databases csom\u00f3ponton v\u00e1lasszuk a New Database opci\u00f3t, itt adjunk meg egy adatb\u00e1zisnevet. (Laboron, mivel t\u00f6bb hallgat\u00f3 is haszn\u00e1lhatja ugyanazt az oper\u00e1ci\u00f3s rendszer felhaszn\u00e1l\u00f3t, javasolt a Neptun k\u00f3d, mint n\u00e9v haszn\u00e1lata).</li> <li>Az \u00faj adatb\u00e1zis csom\u00f3pontj\u00e1n jobbklikkelve v\u00e1lasszuk a New Query opci\u00f3t, ami egy \u00faj query ablakot nyit.</li> <li>Nyissuk meg vagy t\u00f6lts\u00fck le a Northwind adatb\u00e1zis inicializ\u00e1l\u00f3 szkriptet.</li> <li>M\u00e1soljuk be a teljes szkriptet a query ablakba.</li> <li>Futtassuk le a szkriptet a kis z\u00f6ld ny\u00edllal (Execute). Figyelj\u00fcnk oda, hogy j\u00f3 adatb\u00e1zis (melyet fenti 4. l\u00e9p\u00e9sben hoztunk l\u00e9tre) legyen kiv\u00e1lasztva a query ablak tetej\u00e9n a leg\u00f6rd\u00fcl\u0151ben!.</li> <li>Ellen\u0151rizz\u00fck, hogy az adatb\u00e1zisunkban megjelentek-e t\u00e1bl\u00e1k, n\u00e9zetek.</li> <li>Fedezz\u00fck fel az SSOE legfontosabb funkci\u00f3it (t\u00e1bl\u00e1k adatainak, s\u00e9m\u00e1j\u00e1nak lek\u00e9rdez\u00e9se stb.).</li> </ol> <p>MSSQL menedzsment eszk\u00f6z\u00f6k</p> <p>A Visual Studio-ban k\u00e9t eszk\u00f6zzel is kezelhet\u00fcnk adatb\u00e1zisokat: a Server Explorer-rel \u00e9s az SQL Server Object Explorer-rel is. El\u0151bbi egy \u00e1ltal\u00e1nosabb eszk\u00f6z, mely nem csak adatb\u00e1zis, hanem egy\u00e9b szerver er\u0151forr\u00e1sok (pl. Azure szerverek) kezel\u00e9s\u00e9re is alkalmas, m\u00edg a m\u00e1sik kifejezetten csak adatb\u00e1zis-kezel\u00e9sre van kihegyezve. Mindkett\u0151 el\u00e9rhet\u0151 a View men\u00fcb\u0151l \u00e9s mindkett\u0151 hasonl\u00f3 funkci\u00f3kat ad adatb\u00e1zis-kezel\u00e9shez, ez\u00e9rt ebben a m\u00e9r\u00e9sben csak az egyiket (SQL Server Object Explorer) haszn\u00e1ljuk.</p> <p>Amikor nem \u00e1ll rendelkez\u00e9s\u00fcnkre a Visual Studio fejleszt\u0151k\u00f6rnyezet, akkor az adatb\u00e1zisunk menedzsel\u00e9s\u00e9re az (ingyenes) SQL Server Management Studio-t vagy a szint\u00e9n ingyenes \u00e9s multiplatform Azure Data Studio-t tudjuk haszn\u00e1lni.</p>"},{"location":"labor/7-adatkezeles/#2-feladat-lekerdezes-adonet-sqldatareader-rel","title":"2. Feladat \u2013 Lek\u00e9rdez\u00e9s ADO.NET SqlDataReader-rel","text":"<p>A feladat egy olyan C# nyelv\u0171 konzol alkalmaz\u00e1s elk\u00e9sz\u00edt\u00e9se, amely haszn\u00e1lja a Northwind adatb\u00e1zis <code>Shippers</code> t\u00e1bl\u00e1j\u00e1nak rekordjait.</p> <ol> <li> <p>Hozzunk l\u00e9tre egy C# nyelv\u0171 konzolos alkalmaz\u00e1st. A projekt t\u00edpusa Console App legyen, \u00e9s NE a Console App (.NET Framework):</p> <ul> <li>A projekt neve legyen AdoExample</li> <li>A Target Framework legyen .NET 8</li> <li>Pip\u00e1ljuk be a Do not use top-level statements kapcsol\u00f3t</li> </ul> </li> <li> <p>Keress\u00fck ki a connection string-et az SSOE-b\u0151l: jobbklikk az adatb\u00e1zis-kapcsolatunkon (pirossal jel\u00f6lve az al\u00e1bbi \u00e1br\u00e1n) / Properties.</p> <p></p> </li> <li> <p>M\u00e1soljuk a Properties ablakb\u00f3l a Connection String tulajdons\u00e1g \u00e9rt\u00e9k\u00e9t egy v\u00e1ltoz\u00f3ba, a <code>Program</code> oszt\u00e1lyba.</p> <pre><code>private const string ConnString = @\"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=neptun;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\";\n</code></pre> <p>SQL Server connection string form\u00e1tuma</p> <p>MSSQL eset\u00e9ben a connection string kulcs \u00e9rt\u00e9kp\u00e1rokat tartalmaz pontosvessz\u0151vel elv\u00e1lasztva. A <code>Data Source</code> kulcs alatt az SQL szerver p\u00e9ld\u00e1ny neve, az<code>Initial Catalog</code> kulcs alatt pedig az adatb\u00e1zis neve szerepel. Az <code>Integrated Security=true</code> kapcsol\u00f3 pedig a Windows autentik\u00e1ci\u00f3t jelenti.</p> <p>@-os string (C# verbatim string)</p> <p>A <code>@</code> egy speci\u00e1lis karakter (verbatim identifier), amit itt arra haszn\u00e1lunk, hogy a connection string-ben megjelen\u0151 backslash karakter (<code>\\</code>) ne felold\u00f3jelk\u00e9nt (escape character) ker\u00fclj\u00f6n \u00e9rtelmez\u00e9sre.</p> </li> <li> <p>Vegy\u00fck fel a projektbe a <code>Microsoft.Data.SqlClient</code> NuGet csomagot. Ezt k\u00e9tf\u00e9lek\u00e9ppen tehetj\u00fck meg:</p> <ul> <li>A) Visual Studio NuGet kezel\u0151ben:<ol> <li>Projekten jobb gomb / Manage NuGet Packages..., a megjelen\u0151 oldalon Browse oldalra v\u00e1lt\u00e1s.</li> <li>A keres\u0151be Microsoft.Data.SqlClient be\u00edr\u00e1sa.</li> <li>A Version mez\u0151ben az 5.0.1 kiv\u00e1laszt\u00e1sa (laboron az\u00e9rt v\u00e1lasztjuk ki ezt a verzi\u00f3t, mert ez szerepel a g\u00e9peken a NuGet cache-ben, otthoni gyakorl\u00e1s sor\u00e1n v\u00e1lasszuk ink\u00e1bb a Latest stable-t).</li> </ol> </li> <li> <p>B) Bem\u00e1soljuk az al\u00e1bbi csomag referenci\u00e1t a a projektf\u00e1jlba:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.0.1\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> </li> </ul> <p>NuGet csomagkezel\u0151</p> <p>A NuGet egy olyan online csomagkezel\u0151 rendszer, ahonnan .NET alap\u00fa projektjeinkbe tudunk k\u00fcls\u0151 f\u00fcgg\u0151s\u00e9geket, oszt\u00e1lyk\u00f6nyvt\u00e1rakat egyszer\u0171en, verzi\u00f3zott form\u00e1ban behivatkozni. B\u0151vebben az els\u0151 el\u0151ad\u00e1son szerepel.</p> </li> <li> <p>\u00cdrjunk lek\u00e9rdez\u0151 f\u00fcggv\u00e9nyt, mely lek\u00e9rdezi az \u00f6sszes sz\u00e1ll\u00edt\u00f3t:</p> <pre><code>private static void GetShippers()\n{\n    using (var conn = new SqlConnection(ConnString))\n    using (var command = new SqlCommand(\"SELECT ShipperID, CompanyName, Phone FROM Shippers\", conn))\n    {\n        conn.Open();\n        Console.WriteLine(\"{0,-10}{1,-20}{2,-20}\", \"ShipperID\", \"CompanyName\", \"Phone\");\n        Console.WriteLine(new string('-', 60));\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine(\n                    $\"{reader[\"ShipperID\"],-10}\" +\n                    $\"{reader[\"CompanyName\"],-20}\" +\n                    $\"{reader[\"Phone\"],-20}\");\n            }\n        }\n    }\n}\n</code></pre> <p>A kapcsolat alap\u00fa modell folyamata:</p> <ul> <li>Kapcsolat, parancs inicializ\u00e1l\u00e1sa</li> <li>Kapcsolat megnyit\u00e1sa</li> <li>Parancs futtat\u00e1sa</li> <li>Eredm\u00e9ny feldolgoz\u00e1sa</li> <li>Kapcsolat bont\u00e1sa, takar\u00edt\u00e1s</li> </ul> <p>N\u00e9h\u00e1ny megjegyz\u00e9s a k\u00f3dhoz</p> <ul> <li>A <code>DataReader</code>-t a parancs futtat\u00e1s\u00e1nak eredm\u00e9nyek\u00e9nt kapjuk meg, nem pedig k\u00f6zvetlen\u00fcl p\u00e9ld\u00e1nyos\u00edtjuk</li> <li>A parancs futtat\u00e1sa el\u0151tt meg kell nyitnunk a kapcsolatot</li> <li>A <code>DbConnection</code> p\u00e9ld\u00e1nyos\u00edt\u00e1sakor nem nyit\u00f3dik meg a kapcsolat (nem t\u00f6rt\u00e9nik h\u00e1l\u00f3zati kommunik\u00e1ci\u00f3)</li> <li>A <code>DataReader.Read()</code> f\u00fcggv\u00e9nye mutatja, hogy van-e m\u00e9g adat az eredm\u00e9nyhalmazban</li> <li>A <code>DataReader</code>-t az eredm\u00e9nyhalmazban tal\u00e1lhat\u00f3 oszlopok nev\u00e9vel indexelhetj\u00fck \u2013 az eredm\u00e9ny <code>object</code> lesz, \u00edgy, ha konkr\u00e9tabb t\u00edpusra van sz\u00fcks\u00e9g\u00fcnk cast-olni kell</li> <li>A ford\u00edt\u00f3 nem \u00e9rtelmezi az SQL parancs sz\u00f6veg\u00e9t (az csak egy string), hanem majd csak az adatb\u00e1zis, \u00edgy hib\u00e1s SQL eset\u00e9n csak fut\u00e1si idej\u0171 kiv\u00e9telt kapunk</li> <li>Figyelj\u00fck meg, hogy az adatb\u00e1zis s\u00e9ma v\u00e1ltoz\u00e1sa eset\u00e9n, pl. egy oszlop \u00e1tnevez\u00e9se ut\u00e1n, h\u00e1ny helyen kell k\u00e9zzel \u00e1t\u00edrni string-eket a k\u00f3dban</li> <li><code>$</code>-ral prefixelve string interpol\u00e1ci\u00f3t alkalmazhatunk, azaz k\u00f6zvetlen\u00fcl a string-be \u00e1gyazhatunk ki\u00e9rt\u00e9kelend\u0151 kifejez\u00e9seket (C# 6-os k\u00e9pess\u00e9g). A <code>$@</code> seg\u00edts\u00e9g\u00e9vel t\u00f6bbsoros string interpol\u00e1ci\u00f3s kifejez\u00e9seket \u00edrhatunk (a sort\u00f6r\u00e9st a {}-k k\u00f6z\u00f6tt kell betenn\u00fcnk, k\u00fcl\u00f6nben a kimeneten is megjelenik). \u00c9rdekess\u00e9g: C# 8-t\u00f3l f\u00f6lfele b\u00e1rmilyen sorrendben \u00edrhatjuk a $ \u00e9s @ karaktereket, teh\u00e1t a <code>$@</code> \u00e9s a <code>@$</code> is helyesnek sz\u00e1m\u00edt.</li> <li> <p>A using kulcssz\u00f3 blokk utas\u00edt\u00e1s helyett egysoros kifejez\u00e9sk\u00e9nt is haszn\u00e1lhat\u00f3. Ilyen esetben a using blokk v\u00e9ge a tartalmaz\u00f3 blokkig tart (eset\u00fcnkben a f\u00fcggv\u00e9ny v\u00e9g\u00e9ig). Ezzel cs\u00f6kkenthet\u0151 a beh\u00faz\u00e1sok sz\u00e1ma, de ne legyen automatikus reflex a haszn\u00e1lata, mert el\u0151fordulhat, hogy hamarabb c\u00e9lszer\u0171 kik\u00e9nyszer\u00edteni az er\u0151forr\u00e1sok felszabad\u00edt\u00e1s\u00e1t, mint a tartalmaz\u00f3 blokk v\u00e9ge.</p> <pre><code>private static void GetShippers()\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"SELECT ShipperID, CompanyName, Phone FROM Shippers\", conn);\n\n    conn.Open();\n\n    Console.WriteLine(\"{0,-10}{1,-20}{2,-20}\",\"ShipperID\", \"CompanyName\", \"Phone\");\n    Console.WriteLine(new string('-', 60));\n\n    using var reader = command.ExecuteReader();\n    while (reader.Read())\n    {\n        Console.WriteLine(\n            $\"{reader[\"ShipperID\"],-10}\" +\n            $\"{reader[\"CompanyName\"],-20}\" +\n            $\"{reader[\"Phone\"],-20}\");\n    }\n}\n</code></pre> <p>A tov\u00e1bbiakban ezt a m\u00f3dszert haszn\u00e1ljuk a beh\u00faz\u00e1sok \u00e9s z\u00e1r\u00f3jelek megsp\u00f3rol\u00e1sa \u00e9rdek\u00e9ben.</p> </li> </ul> </li> <li> <p>H\u00edvjuk meg \u00faj f\u00fcggv\u00e9ny\u00fcnket a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l.</p> <pre><code>private static void Main(string[] args)\n{\n    GetShippers();\n}\n</code></pre> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st. Rontsuk el az SQL-t, \u00e9s \u00fagy is pr\u00f3b\u00e1ljuk ki.</p> </li> </ol>"},{"location":"labor/7-adatkezeles/#3-feladat-beszuras-sql-utasitassal","title":"3. Feladat \u2013 Besz\u00far\u00e1s SQL utas\u00edt\u00e1ssal","text":"<ol> <li> <p>\u00cdrjunk f\u00fcggv\u00e9nyt, mely \u00faj sz\u00e1ll\u00edt\u00f3t sz\u00far be az adatb\u00e1zisba:</p> <pre><code>private static void InsertShipper(string companyName, string phone)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\n        \"INSERT INTO Shippers(CompanyName, Phone) VALUES(@name,@phone)\", conn);\n    command.Parameters.AddWithValue(\"@name\", companyName);\n    command.Parameters.AddWithValue(\"@phone\", phone);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} rows affected\");\n}\n</code></pre> <p>Itt olyan SQL-t kell \u00edrnunk, melynek az \u00f6ssze\u00e1ll\u00edt\u00e1s\u00e1n\u00e1l k\u00edv\u00fclr\u0151l kapott v\u00e1ltoz\u00f3k \u00e9rt\u00e9keit is felhaszn\u00e1ltuk. A string \u00f6sszerak\u00e1s\u00e1hoz egyszer\u0171en a string \u00f6sszef\u0171z\u00e9s oper\u00e1tort, string interpol\u00e1ci\u00f3t vagy <code>string.Format</code>-ot is haszn\u00e1lhattunk volna, de ez biztons\u00e1gi kock\u00e1zatot (SQL Injection \u2013 b\u0151vebben l\u00e1sd lentebb) rejt \u2013 SOHA!!! ne rakjuk \u00f6ssze az SQL-t string m\u0171velettel. Helyette \u00edrjuk meg \u00fagy az SQL-t, hogy ahov\u00e1 a v\u00e1ltoz\u00f3k \u00e9rt\u00e9keit \u00edrn\u00e1nk, oda param\u00e9terhivatkoz\u00e1sokat tesz\u00fcnk. SQL Server eset\u00e9ben a hivatkoz\u00e1s szintaxisa: @param\u00e9tern\u00e9v.</p> <p>A parancs futtat\u00e1s\u00e1hoz a param\u00e9terek \u00e9rt\u00e9keit is \u00e1t kell adnunk az adatb\u00e1zisnak, ugyanis az fogja elv\u00e9gezni a param\u00e9terek hely\u00e9re az \u00e9rt\u00e9kek behelyettes\u00edt\u00e9s\u00e9t.</p> <p>A besz\u00far\u00e1si parancs kimenete nem eredm\u00e9nyhalmaz, \u00edgy az <code>ExecuteNonQuery</code> m\u0171velettel kell futtatnuk, mely visszaadja besz\u00fart sorok sz\u00e1m\u00e1t.</p> </li> <li> <p>H\u00edvjuk meg \u00faj f\u00fcggv\u00e9ny\u00fcnket a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l.</p> <pre><code>GetShippers();\nInsertShipper(\"Super Shipper\",\"49-98562\");\nGetShippers();\n</code></pre> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, ellen\u0151rizz\u00fck a konzolban \u00e9s az SSOE-ben is, hogy beker\u00fclt-e az \u00faj sor. Az SSOE-ben val\u00f3 gyors \u00e9s k\u00e9nyelmes ellen\u0151rz\u00e9shez a <code>Shippers</code> t\u00e1bla context men\u00fcj\u00e9b\u0151l v\u00e1lasszuk a View Data lehet\u0151s\u00e9get.</p> </li> </ol>"},{"location":"labor/7-adatkezeles/#4-feladat-modositas-tarolt-eljarassal","title":"4. Feladat - M\u00f3dos\u00edt\u00e1s t\u00e1rolt elj\u00e1r\u00e1ssal","text":"<ol> <li> <p>Tanulm\u00e1nyozzuk SSOE-ben a <code>Product_Update</code> t\u00e1rolt elj\u00e1r\u00e1s k\u00f3dj\u00e1t. Ehhez nyissuk le a Programmability alatt tal\u00e1lhat\u00f3 Stored Procedures csom\u00f3pontot, majd a <code>Product_Update</code> t\u00e1rolt elj\u00e1r\u00e1s context men\u00fcj\u00e9b\u0151l v\u00e1lasszuk a View Code lehet\u0151s\u00e9get.</p> <p>Programk\u00f3d az adatb\u00e1zisban</p> <p>A nagyobb adatkezel\u0151 rendszerek lehet\u0151s\u00e9get biztos\u00edtanak arra, hogy programk\u00f3dot defini\u00e1ljunk mag\u00e1ban az adatkezel\u0151 adatb\u00e1zis\u00e1ban. Ezeket t\u00e1rol elj\u00e1r\u00e1soknak (stored procedure) nevezz\u00fck. A nyelve adatkezel\u0151 f\u00fcgg\u0151, de MSSQL eset\u00e9ben ez T-SQL.</p> <p>Manaps\u00e1g m\u00e1r egyre ink\u00e1bb kezd kikopni az a gyakorlat az iparb\u00f3l, hogy komolyabb \u00fczleti logik\u00e1t az adatb\u00e1zisban helyezz\u00fcnk el, mivel ezeknek az SQL dialektusoknak az eszk\u00f6zk\u00e9szlete ma m\u00e1r j\u00f3val korl\u00e1tosabb, mint egy magas szint\u0171 programoz\u00e1si nyelv\u00e9 (C#, Java). R\u00e1ad\u00e1sul a rendszer tesztelhet\u0151s\u00e9g\u00e9t nagyban rontja a t\u00e1rolt elj\u00e1r\u00e1sok haszn\u00e1lata. Ennek ellen\u00e9re n\u00e9ha indokolt lehet az adatb\u00e1zisban tartani valamennyi logik\u00e1t, amikor ki szeretn\u00e9nk azt haszn\u00e1lni, hogy az adatokhoz k\u00f6zel futnak a programk\u00f3djaink, pl. ha nem akarjuk megutaztatni a h\u00e1l\u00f3zaton az adatot egy egyszer\u0171 t\u00f6meges adatkarbantart\u00e1s \u00e9rdek\u00e9ben.</p> </li> <li> <p>\u00cdrjunk f\u00fcggv\u00e9nyt, mely ezt a t\u00e1rolt elj\u00e1r\u00e1st h\u00edvja</p> <pre><code>private static void UpdateProduct(int productID, string productName, decimal price)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"Product_Update\", conn);\n\n    command.CommandType = CommandType.StoredProcedure;\n\n    command.Parameters.AddWithValue(\"@ProductID\", productID);\n    command.Parameters.AddWithValue(\"@ProductName\", productName);\n    command.Parameters.AddWithValue(\"@UnitPrice\", price);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} rows affected\");\n}\n</code></pre> <p>A <code>Command</code>-nak a t\u00e1rolt elj\u00e1r\u00e1s nev\u00e9t kellett megadni, \u00e9s a parancs t\u00edpus\u00e1t kellett \u00e1t\u00e1ll\u00edtani, egy\u00e9bk\u00e9nt szerkezetileg hasonl\u00edt a kor\u00e1bbi besz\u00far\u00f3 k\u00f3dra.</p> </li> <li> <p>H\u00edvjuk meg az \u00faj f\u00fcggv\u00e9ny\u00fcnket a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l, p\u00e9ld\u00e1ul az al\u00e1bbi param\u00e9terez\u00e9ssel:</p> <pre><code>UpdateProduct(1, \"MyProduct\", 50);\n</code></pre> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, ellen\u0151rizz\u00fck a konzolban \u00e9s az SSOE-ben is, hogy m\u00f3dosult-e az 1-es azonos\u00edt\u00f3j\u00fa term\u00e9k.</p> </li> </ol>"},{"location":"labor/7-adatkezeles/#5-feladat-sql-injection","title":"5. Feladat - SQL Injection","text":"<ol> <li> <p>\u00cdrjuk meg a besz\u00far\u00f3 f\u00fcggv\u00e9nyt \u00fagy, hogy string interpol\u00e1ci\u00f3val rakja \u00f6ssze az SQL-t.</p> <pre><code>private static void InsertShipper2(string companyName, string phone)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\n        $\"INSERT INTO Shippers(CompanyName, Phone) VALUES('{companyName}','{phone}')\",\n        conn);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n    Console.WriteLine($\"{affectedRows} row(s) inserted\");\n}\n</code></pre> </li> <li> <p>H\u00edvjuk meg \u00faj f\u00fcggv\u00e9ny\u00fcnket a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l \u201especi\u00e1lisan\u201d param\u00e9terezve.</p> <pre><code>InsertShipper2(\"Super Shipper\", \"49-98562'); DELETE FROM Shippers;--\");\n</code></pre> <p>\u00dagy \u00e1ll\u00edtottuk \u00f6ssze a m\u00e1sodik param\u00e9tert, hogy az lez\u00e1rja az eredeti utas\u00edt\u00e1st, ezut\u00e1n tetsz\u0151leges (!!!) SQL-t \u00edrhatunk, v\u00e9g\u00fcl kikommentezz\u00fck az eredeti utas\u00edt\u00e1s marad\u00e9k\u00e1t (<code>--</code>).</p> </li> <li> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st, hib\u00e1t kell kapjunk, mely arra utal, hogy valamelyik sz\u00e1ll\u00edt\u00f3 nem t\u00f6r\u00f6lhet\u0151 idegen kulcs hivatkoz\u00e1s miatt.</p> <p>Teh\u00e1t a <code>DELETE FROM</code> is lefutott! N\u00e9zz\u00fck meg debugger-rel (pl. a <code>conn.Open</code> utas\u00edt\u00e1son \u00e1llva), hogy mi a v\u00e9gleges SQL (<code>command.CommandText</code>).</p> <p>Tanuls\u00e1gok:</p> <ul> <li>SOSE f\u0171zz\u00fcnk \u00f6ssze programozottan SQL-t (semmilyen m\u00f3dszerrel), mert azzal kitessz\u00fck a k\u00f3dunkat SQL Injection alap\u00fa t\u00e1mad\u00e1snak.</li> <li>Az adatb\u00e1zis \u00e1ll\u00edtsa \u00f6ssze a v\u00e9gleges SQL-t az SQL param\u00e9terek alapj\u00e1n, mert ilyenkor biztos\u00edtott, hogy a param\u00e9ter \u00e9rt\u00e9kek nem fognak SQL-k\u00e9nt \u00e9rtelmez\u0151dni (hi\u00e1ba \u00edrunk be SQL-t). Haszn\u00e1ljunk param\u00e9terezett SQL-t vagy t\u00e1rolt elj\u00e1r\u00e1st.</li> <li>Haszn\u00e1ljunk adatb\u00e1zis k\u00e9nyszereket, pl. a v\u00e9letlen t\u00f6rl\u00e9s ellen is v\u00e9d.</li> <li>Konfigur\u00e1ljunk adatb\u00e1zisban felhaszn\u00e1l\u00f3kat k\u00fcl\u00f6nb\u00f6z\u0151 jogosults\u00e1gokkal, a programunk connection string-j\u00e9ben megadott felhaszn\u00e1l\u00f3 csak a m\u0171k\u00f6d\u00e9shez sz\u00fcks\u00e9ges minim\u00e1lis jogokkal rendelkezzen. A mi eset\u00fcnkben nem adtunk meg felhaszn\u00e1l\u00f3t, a windows-os felhaszn\u00e1l\u00f3k\u00e9nt fogunk csatlakozni.</li> </ul> </li> <li> <p>H\u00edvjuk meg az eredeti (vagyis a biztons\u00e1gos, SQL param\u00e9tereket haszn\u00e1l\u00f3) besz\u00far\u00f3 f\u00fcggv\u00e9nyt a \u201especi\u00e1lis\u201d param\u00e9terez\u00e9ssel, hogy l\u00e1ssuk, m\u0171k\u00f6dik-e a v\u00e9delem:</p> <pre><code>InsertShipper(\"Super Shipper\", \"49-98562'); DELETE FROM Shippers;--\");\nInsertShipper(\"XXX');DELETE FROM Shippers;--\", \"49-98562\");\n</code></pre> <p>Az els\u0151n\u00e9l nem f\u00e9r\u00fcnk bele a m\u00e9retkorl\u00e1tba, a m\u00e1sodik lefut, de csak egy \u201efurcsa\u201d nev\u0171 sz\u00e1ll\u00edt\u00f3 ker\u00fclt be. A param\u00e9ter \u00e9rt\u00e9ke t\u00e9nyleg \u00e9rt\u00e9kk\u00e9nt \u00e9rtelmez\u0151d\u00f6tt nem pedig SQL-k\u00e9nt. Nem \u00fagy mint itt:</p> <p></p> </li> </ol>"},{"location":"labor/7-adatkezeles/#6-feladat-torles","title":"6. Feladat - T\u00f6rl\u00e9s","text":"<ol> <li> <p>\u00cdrjunk egy \u00faj f\u00fcggv\u00e9nyt, mely kit\u00f6r\u00f6l egy adott sz\u00e1ll\u00edt\u00f3t.</p> <pre><code>private static void DeleteShipper(int shipperID)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"DELETE FROM Shippers WHERE ShipperID = @ShipperID\", conn);\n    command.Parameters.AddWithValue(\"@ShipperID\", shipperID);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} row(s) affected\");\n}\n</code></pre> </li> <li> <p>H\u00edvjuk meg \u00faj f\u00fcggv\u00e9ny\u00fcnket a <code>Main</code> f\u00fcggv\u00e9nyb\u0151l, pl. 1-gyel param\u00e9terezve.</p> </li> <li>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st. Val\u00f3sz\u00edn\u0171leg kiv\u00e9telt kapunk, ugyanis van hivatkoz\u00e1s (idegen kulcs k\u00e9nyszerrel) az adott rekordra.</li> <li>SSOE-b\u0151l n\u00e9zz\u00fck ki az azonos\u00edt\u00f3j\u00e1t egy olyan sz\u00e1ll\u00edt\u00f3nak, melyet mi vett\u00fcnk fel. Adjuk \u00e1t ezt az azonos\u00edt\u00f3t a t\u00f6rl\u0151 f\u00fcggv\u00e9nynek \u2013 ezt m\u00e1r ki tudja t\u00f6r\u00f6lni, hiszen nincs r\u00e1 hivatkoz\u00e1s.</li> </ol> <p>T\u00f6rl\u00e9si strat\u00e9gi\u00e1k</p> <p>L\u00e1that\u00f3, hogy a t\u00f6rl\u00e9s igen kock\u00e1zatos \u00e9s kisz\u00e1m\u00edthatatlan m\u0171velet az idegen kulcs k\u00e9nyszerek miatt. N\u00e9h\u00e1ny m\u00f3dszer a t\u00f6rl\u00e9s kezel\u00e9s\u00e9re:</p> <ul> <li>nem enged\u00e9lyezz\u00fck a t\u00f6rl\u00e9st: Ha hivatkoznak a t\u00f6rlend\u0151 rekordra, az adatb\u00e1zis hib\u00e1val t\u00e9r vissza (ahogy fent is l\u00e1thattuk).</li> <li>kaszk\u00e1d t\u00f6rl\u00e9s \u2013 az idegen kulcs k\u00e9nyszeren be\u00e1ll\u00edthat\u00f3, hogy a hivatkozott rekord t\u00f6rl\u00e9sekor a hivatkoz\u00f3 rekord is t\u00f6rl\u0151dj\u00f6n. Gyakran ez oda vezet, hogy minden idegen kulcs k\u00e9nyszer\u00fcnk ilyen lesz, \u00e9s egy (v\u00e9letlen) t\u00f6rl\u00e9ssel v\u00e9gigt\u00f6r\u00f6lhetj\u00fck ak\u00e1r a teljes adatb\u00e1zist, azaz nehezen j\u00f3solhat\u00f3 a t\u00f6rl\u00e9s hat\u00e1sa.</li> <li>hivatkoz\u00e1s NULL-oz\u00e1sa \u2013 az idegen kulcs k\u00e9nyszeren be\u00e1ll\u00edthat\u00f3, hogy a hivatkozott rekord t\u00f6rl\u00e9sekor a hivatkoz\u00f3 rekord idegen kulcs mez\u0151je <code>NULL</code> \u00e9rt\u00e9k\u0171 legyen. Csak akkor alkalmazhat\u00f3, ha a modell\u00fcnkben az adott idegen kulcs mez\u0151 <code>NULL</code>-ozhat\u00f3.</li> <li>logikai t\u00f6rl\u00e9s (soft delete) \u2013 t\u00f6rl\u00e9s m\u0171velet helyett csak egy flag oszlopot (pl. <code>IsDeleted</code>) \u00e1ll\u00edtunk be. El\u0151nye, hogy nem kell az idegen kulcs k\u00e9nyszerekkel foglalkoznunk, a t\u00f6r\u00f6lt adat rendelkez\u00e9sre \u00e1ll, ha sz\u00fcks\u00e9g lenne r\u00e1 (pl. undelete m\u0171velet). \u00c1m a m\u0171k\u00f6d\u00e9s bonyol\u00f3dik, mert foglalkozni kell azzal, hogy hogyan \u00e9s mikor sz\u0171rj\u00fck a t\u00f6r\u00f6lt rekordokat (pl. hogy ne jelenjenek meg a fel\u00fcleten, statisztik\u00e1kban), vagy hogyan kezelj\u00fck, ha egy nem t\u00f6r\u00f6lt rekord t\u00f6r\u00f6lt rekordra hivatkozik.</li> </ul>"},{"location":"labor/7-adatkezeles/#kitekintes","title":"Kitekint\u00e9s","text":"<p>A fenti ADO.NET alapm\u0171veleteket ebben az itt l\u00e1tott alapform\u00e1ban ritk\u00e1n haszn\u00e1lj\u00e1k k\u00e9t okb\u00f3l kifoly\u00f3an (m\u00e9g akkor is, ha ez a megk\u00f6zel\u00edt\u00e9s adja a legjobb teljes\u00edtm\u00e9nyt):</p> <ul> <li>Gyenge t\u00edpusoss\u00e1g (egy rekord adatait beolvasni egy oszt\u00e1ly property-jeibe igen k\u00f6r\u00fclm\u00e9nyes, cast-olni kell stb.)</li> <li>String-be k\u00f3dolt SQL (az elg\u00e9pel\u00e9sb\u0151l ered\u0151 hib\u00e1k csak fut\u00e1si id\u0151ben der\u00fclnek ki)</li> </ul> <p>Az el\u0151bbire megold\u00e1st jelenthetnek a k\u00fcl\u00f6nb\u00f6z\u0151 ADO.NET-et kieg\u00e9sz\u00edt\u0151 komponensek, pl.:</p> <ul> <li>Dapper</li> <li>PetaPoco</li> </ul> <p>Ezek a megold\u00e1sok egy minim\u00e1lis teljes\u00edtm\u00e9nyvesztes\u00e9g\u00e9rt cser\u00e9be nagyobb k\u00e9nyelmet k\u00edn\u00e1lnak.</p> <p>Mindk\u00e9t probl\u00e9m\u00e1ra megold\u00e1st jelentenek az ORM (Object-Relational-Mapping) rendszerek, cser\u00e9be ezek nagyobb overheaddel j\u00e1rnak, mint az el\u0151bb eml\u00edtett megold\u00e1sok. Az ORM-ek lek\u00e9pez\u00e9st alak\u00edtanak ki az adatb\u00e1zis \u00e9s az OO oszt\u00e1lyaink k\u00f6z\u00f6tt, \u00e9s ennek a lek\u00e9pez\u00e9snek a seg\u00edts\u00e9g\u00e9vel egyszer\u0171s\u00edtik az adatb\u00e1zis m\u0171veleteket. Az oszt\u00e1lyainkon v\u00e9gzett, t\u00edpusos k\u00f3ddal le\u00edrt m\u0171veleteinket automatikusan \u00e1tford\u00edtj\u00e1k a megfelel\u0151 adatb\u00e1zis m\u0171veletekre, \u00edgy a mem\u00f3riabeli objektummodell\u00fcnket szinkronban tartj\u00e1k az adatb\u00e1zissal. Az ORM-ek ebb\u0151l k\u00f6vetkez\u0151en kapcsolat n\u00e9lk\u00fcli modellt haszn\u00e1lnak. Ismertebb .NET-es ORM-ek:</p> <ul> <li>ADO.NET DataSet \u2013 els\u0151 gener\u00e1ci\u00f3s ORM, ma m\u00e1r nagyon ritk\u00e1n haszn\u00e1ljuk</li> <li>Entity Framework 6.x \u2013 (r\u00e9gi) .NET Framework leggyakrabban haszn\u00e1lt ORM keretrendszere</li> <li>Entity Framework Core (EF Core) \u2013 a jelenleg els\u0151dlegesen haszn\u00e1lt .NET ORM (open source)</li> <li>NHibernate \u2013 a Java-s Hibernate .NET-es portja (open source)</li> </ul> <p>Az Entity Framework Core-ral r\u00e9szletesebben foglalkozunk az Adatvez\u00e9relt rendszerek specializ\u00e1ci\u00f3 t\u00e1rgyban illetve a Szoftverfejleszt\u00e9s .NET platformon v\u00e1laszthat\u00f3 t\u00e1rgyban.</p>"},{"location":"labor/7-adatkezeles/index_ger/","title":"7. Datenverwaltung","text":""},{"location":"labor/7-adatkezeles/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>Das Ziel der \u00dcbung ist, das Programmierungsmodell von ADO.NET zu erlernen und die h\u00e4ufigsten Datenverwaltungsprobleme und Fallstricke durch das Schreiben grundlegender CRUD-Operationen zu veranschaulichen.</p> <p>Zugeh\u00f6rige Pr\u00e4sentationen: Datenverwaltung, ADO.NET-Grundlagen.</p>"},{"location":"labor/7-adatkezeles/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung der \u00dcbung ben\u00f6tigten Werkzeuge:</p> <ul> <li>Visual Studio 2022</li> <li>Betriebssystem Windows 10 oder Windows 11</li> <li>In dieser \u00dcbung werden wir den SQL Server Object Explorer in Visual Studio verwenden, um zwischen Datenbankobjekten zu navigieren und Abfragen auszuf\u00fchren. Dazu ist m\u00f6glicherweise die Komponente SQL Server Data Tools erforderlich, die am einfachsten auf der Seite Individual Components im Visual Studio Installer installiert wird, aber auch im Workload Data Storage and Processing enthalten ist.</li> </ul> <p>\u00dcbung unter Linux oder Mac</p> <p>Das \u00dcbungsmaterial ist grunds\u00e4tzlich f\u00fcr Windows und Visual Studio gedacht, kann aber - auf eine etwas andere Weise - auch auf anderen Betriebssystemen durchgef\u00fchrt werden, da das .NET SDK auch unter Linux und Mac unterst\u00fctzt ist. Unter Linux:</p> <ul> <li>Verwenden Sie anstelle von Visual Studio einen Texteditor (z. B.: VSCode) und CLI-Tools.</li> <li>Es gibt eine Linux-Version von SQL Server, und auf dem Mac kann er in Docker ausgef\u00fchrt werden (aber Docker ist wahrscheinlich der bequemste Weg, um ihn auch unter Linux auszuf\u00fchren).</li> <li>Zur Visualisierung der Daten kann das ebenfalls plattform\u00fcbergreifende Tool Azure Data Studio verwendet werden.</li> </ul>"},{"location":"labor/7-adatkezeles/index_ger/#losung","title":"L\u00f6sung","text":"Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist auf GitHub hier verf\u00fcgbar. Der einfachste Weg, es herunterzuladen, ist, es von der Kommandozeile aus mit dem Befehl <code>git clone</code> auf Ihren Computer zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-adatkezeles-megoldas</code></p> <p>Sie m\u00fcssen Git auf Ihrem Rechner installiert haben, weitere Informationen hier.</p>"},{"location":"labor/7-adatkezeles/index_ger/#einfuhrung","title":"Einf\u00fchrung","text":"Bemerkung f\u00fcr \u00dcbungsleiter/in <p>Dieses Kapitel muss in der \u00dcbung nicht so ausf\u00fchrlich erkl\u00e4rt werden wie es geschrieben ist, aber die wichtigsten Begriffe sollten kurz erl\u00e4utert werden.</p>"},{"location":"labor/7-adatkezeles/index_ger/#adonet","title":"ADO.NET","text":"<p>F\u00fcr die Datenbankverwaltung auf niedriger Ebene auf der .NET-Plattform ist ADO.NET verf\u00fcgbar, mit dessen Hilfe relationale Datenbanken zugegriffen werden k\u00f6nnen.</p> <p>Bei der Verwendung von ADO.NET k\u00f6nnen Sie zwei verschiedene Datenzugriffsmodelle verwenden:</p> <ul> <li>Verbindungsbasiertes Modell</li> <li>Verbindungsloses Modell</li> </ul> <p>Wenn Sie auf die zwei Bl\u00f6cke unten klicken, k\u00f6nnen Sie sich einen \u00dcberblick \u00fcber die Grunds\u00e4tze der zwei Modelle verschaffen.</p> Grungprinzipen der Verbindungsbasiertes Modell <p>Die Idee ist, die Datenbankverbindung die ganze Zeit \u00fcber offen zu halten, w\u00e4hrend die Daten abgefragt und ge\u00e4ndert werden und die \u00c4nderungen dann in die Datenbank zur\u00fcckgeschrieben werden. DataReader-Objekte k\u00f6nnen zur L\u00f6sung verwendet werden (siehe sp\u00e4ter). Der Vorteil dieser L\u00f6sung liegt in ihrer Einfachheit (einfacheres Programmierungsmodell und Konkurenzmanagement). Der Nachteil dieser L\u00f6sung ist, dass aufgrund der st\u00e4ndig offen gehaltene Netzwerkverbindung Skalierbarkeitsprobleme auftreten k\u00f6nnen. Dies bedeutet, dass bei einer gro\u00dfen Anzahl von gleichzeitigen Benutzerzugriffen auf den Dataverwalter eine gro\u00dfe Anzahl von Datenbankverbindungen st\u00e4ndig aktiv ist, was eine kostspielige Ressource in Bezug auf die Leistung von Dataverwaltungssystemen darstellt. Daher ist es ratsam, w\u00e4hrend der Entwicklung zu versuchen, die Datenbankverbindungen so bald wie m\u00f6glich zu schlie\u00dfen.</p> <p>Vorteile des Modells:</p> <ul> <li>Einfachere Verwaltung des Wettbewerbs (Konkurenz)</li> <li>Die Daten sind \u00fcberall am neuesten</li> </ul> <p>Bemerkung: Diese Vorteile gelten nur, wenn der Datenverwalter f\u00fcr den Datenbankzugriff strikten Sperren benutzt - wir k\u00f6nnen dies mit dem Angabe des entsprechenden Transaktionsisolierungsgrades w\u00e4hrend des Zugriffs steuern. (Die Techniken daf\u00fcr werden in sp\u00e4teren Studien beschrieben.)</p> <p>Nachteile:</p> <ul> <li>Kontinuierliche Netzwerkverbindung</li> <li>Mangelnde Skalierbarkeit</li> </ul> Grungprinzipen der Verbindungsloses Modell <p>Im Gegensatz zum verbindungsbasierten Modell wird keine Datenbankverbindung aufrechterhalten, wenn Daten angezeigt und im Speicher ge\u00e4ndert werden. Die wichtigsten Schritte sind demnach folgende: Nach dem Aufbau der Verbindung und dem Abfrage der Daten wird die Verbindung sofort wieder geschlossen. Die Daten werden dann in der Regel angezeigt, und der Benutzer hat die M\u00f6glichkeit, die Daten zu \u00e4ndern (Datens\u00e4tze hinzuzuf\u00fcgen, zu \u00e4ndern oder zu l\u00f6schen, je nach Bedarf). Wenn wir \u00c4nderungen speichern, stellen wir die Datenverbindung wieder her, speichern die \u00c4nderungen in der Datenbank und schlie\u00dfen die Verbindung. Nat\u00fcrlich setzt das Modell voraus, dass wir zwischen der Abfrage der Daten und dem Zur\u00fcchschreiben der \u00c4nderungen - wenn wir keine Verbindung mit der Datenbank haben - die Daten und \u00c4nderungen im Speicher halten. Eine sehr bequeme L\u00f6sung daf\u00fcr ist in der ADO.NET-Umgebung die Verwendung von <code>DataSet</code>-Objekten.</p> <p>Vorteile des Modells:</p> <ul> <li>Keine st\u00e4ndige Netzwerkverbindung erforderlich</li> <li>Skalierbarkeit</li> </ul> <p>Nachteile:</p> <ul> <li>Die Daten sind nicht immer am neuesten</li> <li>Kollisionen sind m\u00f6glich</li> </ul> <p>Bemerkung: Es gibt mehrere M\u00f6glichkeiten, Objekte und damit verbundene \u00c4nderungen im Speicher zu speichern. Das <code>DataSet</code> ist nur eine der m\u00f6glichen Techniken. Sie k\u00f6nnen aber auch gew\u00f6hnliche Objekte und .NET-Technologien (z. B. Entity Framework Core) verwenden, die die Verwaltung dieser Objekte erleichtern und fortschrittlicher sind als ADO.NET.</p>"},{"location":"labor/7-adatkezeles/index_ger/#das-verbindungsbasierte-modell","title":"Das verbindungsbasierte Modell","text":"<p>Im Labor werden wir das verbindungsbasierte Modell kennenlernen.</p> <p>Das grundlegende Verfahren ist wie folgt:</p> <ol> <li>Erstellen wir eine Verbindung zwischen der Anwendung und dem Datenbankmanagementsystem (mit dem Objekt <code>Connection</code>).</li> <li>Erstellen wir die auszuf\u00fchrende SQL-Anweisung (unter Verwendung des Objekts <code>Command</code>).</li> <li>F\u00fchren wir einen Befehl aus (unter Verwendung des Objekts <code>Command</code>).</li> <li>Verarbeitung des zur\u00fcckgegebenen Datensatzes f\u00fcr Abfragen (unter Verwendung des <code>DataReader</code>-Objekts). F\u00fcr Modifikatorbefehle ist dies nat\u00fcrlich nicht notwendig.</li> <li>Schlie\u00dfen der Verbindung.</li> </ol> <p>Wie oben zu sehen ist, hat die Kommunikation mit der Datenbank in diesem Modell drei Hauptkomponenten:</p> <ul> <li>Connection</li> <li>Command</li> <li>DataReader</li> </ul> <p>Diese Komponenten werden als Klasse dargestellt, deren datenbankunabh\u00e4ngiger Teil im BCL-Namensraum System.Data.Common unter Namen <code>DbConnection</code>, <code>DbCommand</code> und <code>DbDataReader</code> zu finden ist. Es handelt sich um abstrakte Klassen, und es ist die Aufgabe der Anbieter von Datenbankmanagern, Versionen zu schreiben, die bestimmte von ihnen abgeleitete Datenbankmanager unterst\u00fctzen.</p> <p>Alle drei ADO.NET-Komponenten unterst\u00fctzen das Dispose-Muster, so dass sie im <code>using</code>-Block verwendet werden k\u00f6nnen - lassen wir uns sie auf diese Weise verwenden, wann immer wir k\u00f6nnen. Der Datenbankmanager befindet sich in der Regel auf einem anderen Rechner als der, auf dem unser Code l\u00e4uft (nicht im Labor :)), also betrachten wir sie als entfernte Netzwerkressourcen.</p> <p>Die Version, die Microsoft SQL Server unterst\u00fctzt, finden wir im NuGet-Paket Microsoft.Data.SqlClient in Klassen mit dem Pr\u00e4fix \"Sql\" (<code>SqlConnection</code>, <code>SqlCommand</code> und <code>SqlDataReader</code>).</p> <p>Andere Anbieter packen ihre eigene Version je in eine separate DLL(s), die daraus resultierende Komponente wird als data provider bezeichnet. Einige Beispiele ohne Anspruch auf Vollst\u00e4ndigkeit:</p> <ul> <li>PostgreSQL</li> <li>SQLite </li> <li>Oracle</li> </ul>"},{"location":"labor/7-adatkezeles/index_ger/#connection","title":"Connection","text":"<p>Dies ist die Verbindung zwischen unserem Programm und dem Datenbankverwaltungssystem. Um sie zu initialisieren, ben\u00f6tigen wir einen Verbindungsstring (connection string), der dem Treiber (driver) die notwendigen Informationen zum Aufbau der Verbindung gibt. Das interne Format variiert von Datenbankanbieter zu Datenbankanbieter (weitere Informationen).</p> <p>Wenn eine neue <code>Connection</code> instanziiert wird, ist nicht garantiert, dass tats\u00e4chlich eine neue Verbindung zur Datenbank hergestellt wird. Die Treiber verwenden in der Regel Connection-Pooling, \u00e4hnlich wie Thread-Pooling, um fr\u00fchere (derzeit nicht verwendete) Verbindungen wieder zu verwenden.</p> <p><code>Connection</code> ist eine besonders teure, nicht verwaltete Ressource, daher muss sichergestellt werden, dass sie so schnell wie m\u00f6glich geschlossen wird, wenn sie nicht mehr ben\u00f6tigt wird (z. B. durch den Aufruf von <code>Dispose()</code>, was in den meisten F\u00e4llen am einfachsten mit dem <code>using</code>-Block geschieht).</p>"},{"location":"labor/7-adatkezeles/index_ger/#command","title":"Command","text":"<p>So k\u00f6nnen wir \"Anweisungen\" f\u00fcr den Datenbankmanager formulieren. Diese m\u00fcssen wir in SQL bestimmen. F\u00fcr <code>Command</code> muss eine Verbindung eingestellt werden - hier wird der Befehl ausgef\u00fchrt. Der Befehl kann verschiedene Ergebnisse haben, dementsprechend wird der Befehl mit verschiedenen Funktionen ausgef\u00fchrt:</p> <ul> <li>ExecuteReader: Abfrage einer Ergebnismenge (result set)</li> <li>ExecuteScalar: Abfrage des Skalar</li> <li>ExecuteNonQuery: Kein R\u00fcckgabewert (z.B: INSERT, UPDATE und DELETE), aber die Anzahl der von der Operation betroffenen Datens\u00e4tze wird zur\u00fcckgegeben</li> </ul>"},{"location":"labor/7-adatkezeles/index_ger/#datareader","title":"DataReader","text":"<p>Wenn das Ergebnis des Befehls eine Ergebnismenge ist, k\u00f6nnen wir diese Komponente verwenden, um die Daten zu lesen. Die Ergebnismenge kann als Tabelle angezeigt werden, <code>Data Reader</code> kann Zeile f\u00fcr Zeile (nur eine nach der anderen und vorw\u00e4rts!) durch sie navigieren. Der Cursor befindet sich jeweils in einer Zeile. Sobald die gew\u00fcnschten Daten aus der Zeile gelesen wurden, kann der Cursor eine Zeile weiterbewegt werden. Wir k\u00f6nnen nur aus der aktuellen Zeile lesen. Zu Beginn steht der Cursor nicht in der ersten Zeile, wir m\u00fcssen ihn einmal bewegen, um ihn in die erste Zeile zu setzen.</p> <p>Bemerkung: Die Navigation erfolgt im Speicher auf der Seite der Client, sie hat nichts mit den serverseitigen Cursors zu tun, die von jedem Datenverwaltern unterst\u00fctzt werden.</p>"},{"location":"labor/7-adatkezeles/index_ger/#1-aufgabe-vorbereitung-der-datenbank","title":"1. Aufgabe - Vorbereitung der Datenbank","text":"<p>Zuerst brauchen wir einen Datenbankmanager. In einer realen Umgebung wird dies durch voll funktionsf\u00e4hige Datenbankmanager erreicht, die auf dedizierten Servern laufen und von Datenbankadministratoren \u00fcberwacht werden. W\u00e4hrend der Entwicklungszeit, f\u00fcr lokale Tests, ist es jedoch bequemer, einen Datenbankmanager f\u00fcr Entwickler zu verwenden. Als Teil der Visual Studio-Installation erhalten wir eine solche Datenbank-Engine, LocalDB, die eine vereinfachte Version des voll funktionsf\u00e4higen SQL Servers ist. Seine Hauptmerkmale sind:</p> <ul> <li>kann nicht nur mit Visual Studio, sondern auch separat installiert werden,</li> <li>die Datenbank-Engine ist fast vollst\u00e4ndig kompatibel mit dem vollwertigen Microsoft SQL Server,</li> <li>ist grunds\u00e4tzlich auf dem Rechner verf\u00fcgbar, auf dem es installiert ist,</li> <li>mehrere Instanzen k\u00f6nnen bei Bedarf erstellt werden, die Instanzen stehen im Wesentlichen dem Benutzer des erstellenden Betriebssystems zur Verf\u00fcgung (eine Instanz kann bei Bedarf von mehreren Benutzern gemeinsam genutzt werden),</li> <li>f\u00fcr die Verwaltung eigener Instanzen (Erstellen, L\u00f6schen usw.) sind keine Administratorrechte erforderlich.</li> </ul> ssqllocaldb Kommandozeilenwerkzeug <p>In der \u00dcbung brauchen wir das nicht, aber wir k\u00f6nnen das <code>sqllocaldb</code> Kommandozeilenwerkzeug verwenden, um Instanzen zu verwalten.  Einige Befehle, die durch Eingabe nach <code>sqllocaldb</code> verwendet werden k\u00f6nnen:</p> Befehl Beschreibung info Liste der Instanzen, die f\u00fcr den aktuellen Benutzer sichtbar sind create \"locdb\" Erstellen einer neuen Instanz mit dem Namen \"locdb\" delete \"locdb\" L\u00f6schen der Instanz mit dem Namen \"locdb\" start \"locdb\" Starten der Instanz mit dem Namen \"locdb\" stopp \"locdb\" Stoppen der Instanz mit dem Namen \"locdb\" <p>Visual Studio installiert und startet auch LocalDB-Instanzen, so dass es sich lohnt, zu \u00fcberpr\u00fcfen, was Visual Studio standardm\u00e4\u00dfig sieht.</p> <ol> <li>Starten Sie Visual Studio und w\u00e4hlen Sie SQL Server Object Explorer (SSOE) aus dem Men\u00fc Ansicht.</li> <li>\u00d6ffnen Sie den SQL Server-Knoten. Wenn Sie andere Knoten darunter sehen, haben Sie einen erfolgreichen Fall, \u00f6ffnen Sie einen davon (dadurch wird die Instanz gestartet, falls sie noch nicht gestartet ist, Sie m\u00fcssen also m\u00f6glicherweise etwas warten).</li> <li>Wenn nichts erscheint, gibt der Befehl <code>mssqllocaldb info</code> in der Befehlszeile die vorhandenen Instanzen zur\u00fcck. Klicken Sie mit der rechten Maustaste auf den Knoten SQL Server und w\u00e4hlen Sie Add SQL Server, dann geben Sie eine vorhandene Instanz an, z. B. (localdb)MSSQLLocalDB</li> <li>W\u00e4hlen Sie im erscheinenden Knoten Databases die Option New Database und geben Sie einen Datenbanknamen ein. (Da in der \u00dcbungen mehrere Sch\u00fcler denselben Betriebssystembenutzer verwenden k\u00f6nnen, empfiehlt es sich, den Neptun-Code als Namen zu verwenden).</li> <li>Klicken Sie mit der rechten Maustaste auf den neuen Datenbankknoten und w\u00e4hlen Sie New Query, wodurch sich ein neues Abfragefenster \u00f6ffnet.</li> <li>\u00d6ffnen Sie oder laden herunter das Northwind Datenbankinitialisierungsskript.</li> <li>Kopieren Sie das vollst\u00e4ndige Skript in das Abfragefenster.</li> <li>F\u00fchren Sie das Skript aus, indem Sie auf den kleinen gr\u00fcnen Pfeil (Execute) klicken. Beobachten Sie darauf, dass die gute Datenbank (die in Schritt 4 oben erstellt wurde) oben im Abfragefenster in der Dropdown-Liste ausgew\u00e4hlt ist!</li> <li>Pr\u00fcfen Sie, ob Tabellen und Ansichten in unserer Datenbank erzeugt werden.</li> <li>Sehen wir uns die wichtigsten Funktionen von SSOE an (Abruf von Daten aus Tabellen, Schemata usw.).</li> </ol> <p>MSSQL-Verwaltungstools</p> <p>In Visual Studio k\u00f6nnen Sie Datenbanken mit zwei Tools verwalten: dem Server Explorer und dem SQL Server Object Explorer. Ersteres ist ein allgemeineres Tool, das nicht nur Datenbanken, sondern auch andere Serverressourcen (z. B. Azure-Server) verwalten kann, w\u00e4hrend letzteres speziell auf die Datenbankverwaltung ausgerichtet ist. Auf beide kann \u00fcber das Men\u00fc View zugegriffen werden, und beide bieten \u00e4hnliche Datenbankverwaltungsfunktionen, weshalb wir in dieser \u00dcbung nur einen (SQL Server Object Explorer) verwenden werden.</p> <p>Wenn die Visual Studio-Entwicklungsumgebung nicht f\u00fcr unsere Verf\u00fcgung steht, k\u00f6nnen wir das (kostenlose) SQL Server Management Studio oder das kostenlose und plattform\u00fcbergreifende Azure Data Studio verwenden, um unsere Datenbank zu verwalten.</p>"},{"location":"labor/7-adatkezeles/index_ger/#2-aufgabe-abfrage-mit-adonet-sqldatareader","title":"2. Aufgabe - Abfrage mit ADO.NET SqlDataReader","text":"<p>Die Aufgabe ist eine C#-Konsolenanwendung zu erstellen, die die Datens\u00e4tze der Northwind-Datenbanktabelle <code>Shippers</code> verwendet.</p> <ol> <li> <p>Erstellen Sie eine Konsolenanwendung in C#. Der Projekttyp sollte Console App und NICHT Console App (.NET Framework) sein:</p> <ul> <li>Der Projektname sollte AdoExample lauten</li> <li>Das Target Framework sollte .NET 8 sein</li> <li>Aktivieren Sie die Option Do not use top-level statements </li> </ul> </li> <li> <p>Suchen Sie die Verbindungsstring (connection string) aus der SSOE: Klicken Sie mit der rechten Maustaste auf unsere Datenbankverbindung (in der Abbildung unten rot markiert) / Properties.</p> <p></p> </li> <li> <p>Kopieren Sie die Eigenschaft Connection String aus dem Fenster Properties in eine Variable der Klasse <code>Program</code>. </p> <pre><code>private const string ConnString = @\"Data Source=(localdb)MSSQLLocalDB;Initial Catalog=neptun;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\";\n</code></pre> <p>SQL Server-Verbindungsstringformat</p> <p>Bei MSSQL enth\u00e4lt das Verbindungsstrings Schl\u00fcssel-Wert Paare, die durch Semikolon getrennt sind. Unter dem Schl\u00fcssel <code>Data Source</code> steht der Name der SQL-Server-Instanz und unter dem Schl\u00fcssel <code>Initial Catalog</code> der Name der Datenbank. Die Option <code>Integrated Security=true</code> steht f\u00fcr die Windows-Authentifizierung.</p> <p>String mit @ (C# verbatim string)</p> <p><code>@</code> ist ein Sonderzeichen (verbatim identifier), das hier verwendet wird, um zu vermeiden, dass das Backslash-Zeichen (<code>\\</code>) in der Verbindungszeichenfolge als Escape-Zeichen interpretiert wird.</p> </li> <li> <p>F\u00fcgen Sie das NuGet-Paket <code>Microsoft.Data.SqlClient</code> zum Projekt hinzu. Es gibt zwei M\u00f6glichkeiten, dies zu tun:</p> <ul> <li>A) in NuGet-Manager von Visual Studio:<ol> <li>Auf dem Projekt rechte Taste / Manage NuGet Packages..., auf der erscheinenden Seite wechseln Sie zu Browse.</li> <li>Geben Sie in das Suchfeld Microsoft.Data.SqlClient.</li> <li>W\u00e4hlen Sie im Feld Version die Version 5.0.1 aus (im Labor w\u00e4hlen wir diese Version, weil sie sich im NuGet-Cache auf den Rechnern befindet; f\u00fcr \u00dcben zu Hause w\u00e4hlen Sie die Latest stable Version).</li> </ol> </li> <li> <p>B) Wir kopieren den folgenden Paketverweis in die Projektdatei:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.0.1\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> </li> </ul> <p>NuGet Package Manager</p> <p>NuGet ist ein Online-Paketverwaltungssystem, mit dem Sie externe Abh\u00e4ngigkeiten und Klassenbibliotheken in versionierter Form mit Ihren .NET-basierten Projekten verkn\u00fcpfen k\u00f6nnen. Mehr Information \u00fcber es war in der ersten Vorlesung.</p> </li> <li> <p>Schreiben Sie eine Abfragefunktion, die alle Lieferer abfragt:</p> <pre><code>private static void GetShippers()\n{\n    using (var conn = new SqlConnection(ConnString))\n    using (var command = new SqlCommand(\"SELECT ShipperID, CompanyName, Phone FROM Shippers\", conn))\n    {\n        conn.Open();\n        Console.WriteLine(\"{0,-10}{1,-20}{2,-20}\", \"ShipperID\", \"CompanyName\", \"Phone\");\n        Console.WriteLine(new string('-', 60));\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine(\n                    $\"{reader[\"ShipperID\"],-10}\" +\n                    $\"{reader[\"CompanyName\"],-20}\" +\n                    $\"{reader[\"Phone\"],-20}\");\n            }\n        }\n    }\n}\n</code></pre> <p>Das Verfahren des verbindungsbasierten Modells:</p> <ul> <li>Verbindung und Befehl initialisieren</li> <li>Verbindung \u00f6ffnen</li> <li>Ausf\u00fchren eines Befehls</li> <li>Verarbeitung des Ergebnisses</li> <li>Verbindung schlie\u00dfen, Reinigung</li> </ul> <p>Einige Bemerkungen zum Code</p> <ul> <li><code>DataReader</code>erh\u00e4lt man als Ergebnis der Ausf\u00fchrung des Befehls, nicht durch direkte Instanziierung</li> <li>Die Verbindung muss vor der Ausf\u00fchrung des Befhels ge\u00f6ffnet werden.</li> <li>Bei der Instanziierung von <code>DbConnection</code> wird die Verbindung nicht ge\u00f6ffnet (keine Netzwerkkommunikation)</li> <li>Die Funktion <code>DataReader.Read()</code> zeigt an, ob noch Daten in der Ergebnismenge vorhanden sind</li> <li>Sie k\u00f6nnen <code>DataReader</code> mit den Namen der Spalten in der Ergebnismenge indizieren - das Ergebnis wird <code>object</code> sein, wenn Sie also einen spezifischeren Typ ben\u00f6tigen, m\u00fcssen Sie einen Cast durchf\u00fchren</li> <li>Der Compiler interpretiert den SQL-Befehlstext nicht (es ist nur ein String), nur die Datenbank tut dies, daher erhalten Sie im Falle eines SQL-Fehlers eine Laufzeitausnahme</li> <li>Beachten Sie, dass, an wie viele Stellen im Code Strings manuell umgeschrieben werden soll, wenn sich das Datenbankschema \u00e4ndert, z.B. nach der Umbenennung einer Spalte. </li> <li>Mit <code>$</code> k\u00f6nnen Sie String-Interpolation verwenden, d. h. Ausdr\u00fccke einbetten, die direkt im String ausgewertet werden (C# 6-F\u00e4higkeit). <code>$@</code> erm\u00f6glicht es Ihnen, mehrzeilige String-Interpolationsausdr\u00fccke zu schreiben (Sie m\u00fcssen den Zeilenumbruch zwischen {} einf\u00fcgen, sonst wird er in der Ausgabe angezeigt). Interessante Tatsache: Ab C# 8 k\u00f6nnen Sie $- und @-Zeichen in beliebiger Reihenfolge schreiben, daher sind auch <code>$@</code> und <code>@$</code> korrekt.</li> <li> <p>Das using-Schl\u00fcsselwort kann als einzeiliger Ausdruck anstelle einer Blockanweisung verwendet werden. In diesem Fall reicht das Ende des using-Blocks bis zum Ende des enthaltenden Blocks (in unserem Fall das Ende der Funktion). Dies reduziert die Anzahl der Einz\u00fcge, sollte aber seine Benutzung kein automatischer Reflex sein, da es sinnvoll sein kann, die Freigabe von Ressourcen fr\u00fcher als am Ende des enthaltenden Blocks zu erzwingen.</p> <pre><code>private static void GetShippers()\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"SELECT ShipperID, CompanyName, Phone FROM Shippers\", conn);\n\n    conn.Open();\n\n    Console.WriteLine(\"{0,-10}{1,-20}{2,-20}\",\"ShipperID\", \"CompanyName\", \"Phone\");\n    Console.WriteLine(new string('-', 60));\n\n    using var reader = command.ExecuteReader();\n    while (reader.Read())\n    {\n        Console.WriteLine(\n            $\"{reader[\"ShipperID\"],-10}\" +\n            $\"{reader[\"CompanyName\"],-20}\" +\n            $\"{reader[\"Phone\"],-20}\");\n    }\n}\n</code></pre> <p>Diese Methode wird im Folgenden verwendet, um Einz\u00fcge und Klammern zu speichern.</p> </li> </ul> </li> <li> <p>Rufen Sie unsere neue Funktion von <code>Main</code> aus auf.</p> <pre><code>private static void Main(string[] args)\n{\n    GetShippers();\n}\n</code></pre> </li> <li> <p>Probieren wir die App aus. Wir sollten SQL zerst\u00f6ren und es auf diese Weise versuchen.</p> </li> </ol>"},{"location":"labor/7-adatkezeles/index_ger/#3-aufgabe-einfugen-mit-sql-anweisung","title":"3. Aufgabe - Einf\u00fcgen mit SQL-Anweisung","text":"<ol> <li> <p>Schreiben Sie eine Funktion zum Einf\u00fcgen eines neuen Lieferer in die Datenbank:</p> <pre><code>private static void InsertShipper(string companyName, string phone)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\n        \"INSERT INTO Shippers(CompanyName, Phone) VALUES(@name,@phone)\", conn);\n    command.Parameters.AddWithValue(\"@name\", companyName);\n    command.Parameters.AddWithValue(\"@phone\", phone);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} rows affected\");\n}\n</code></pre> <p>Hier m\u00fcssen wir solches SQL schreiben, f\u00fcr dessen Erstellung auch solche Variablenwerten verwendet werden, die wir von au\u00dfen erhalten haben. Um die Zeichenkette zusammenzusetzen, h\u00e4tten wir einfach den Operator f\u00fcr die Zeichenkettenverkettung, die Zeichenketteninterpolation oder <code>string.Format</code> verwenden k\u00f6nnen, aber das hat ein Sicherheitsrisiko (SQL Injection - siehe unten f\u00fcr weitere Details) - NIEMALS!!! darf SQL mit einer Zeichenkettenoperation zusammengesetzt werden. Stattdessen sollten wir SQL so schreiben, dass wir an die Stelle der Werte von Variablen, Parameterreferenzen setzen. Bei SQL Server lautet die Syntax des Verweises @parametername.</p> <p>Um den Befehl auszuf\u00fchren, m\u00fcssen wir auch die Werte der Parameter an die Datenbank \u00fcbergeben, da diese die Ersetzung der Werte f\u00fcr die Parameter vornimmt.</p> <p>Die Ausgabe des Einf\u00fcgebefehls ist keine Ergebnismenge, daher muss er mit <code>ExecuteNonQuery</code> ausgef\u00fchrt werden, das die Anzahl der eingef\u00fcgten Zeilen zur\u00fcckgibt.</p> </li> <li> <p>Rufen Sie unsere neue Funktion von <code>Main</code> aus auf.</p> <pre><code>GetShippers();\nInsertShipper(\"Super Shipper\",\"49-98562\");\nGetShippers();\n</code></pre> </li> <li> <p>Probieren wir die Anwendung aus und pr\u00fcfen wir in der Konsole und in der SSOE, ob die neue Zeile eingef\u00fcgt wurde. F\u00fcr eine schnelle und bequeme \u00dcberpr\u00fcfung in SSOE w\u00e4hlen Sie View Data aus dem Kontextmen\u00fc der Tabelle <code>Shippers</code>. </p> </li> </ol>"},{"location":"labor/7-adatkezeles/index_ger/#4-aufgabe-modifikation-durch-gespeicherte-prozedur","title":"4. Aufgabe - Modifikation durch gespeicherte Prozedur","text":"<ol> <li> <p>Schauen Sie den Code des gespeicherten Verfahrens <code>Product_Update</code> in SSOE an. \u00d6ffnen Sie dazu den Knoten Programmability / Stored Procedures, und w\u00e4hlen Sie dann View Code aus dem Kontextmen\u00fc der gespeicherten Prozedur <code>Product_Update</code>. </p> <p>Programmcode in der Datenbank</p> <p>Die gro\u00dfen Datenverwaltungssysteme bieten die M\u00f6glichkeit, Programmcode in der Datenbank des Datenverwalters selbst zu definieren. Diese werden als gespeicherte Verfahren bezeichnet. Die Sprache ist abh\u00e4ngig von der Datensteuerung, aber f\u00fcr MSSQL ist es T-SQL.</p> <p>Heutzutage wird die Praxis, ernsthafte Gesch\u00e4ftslogik in die Datenbank zu packen, immer mehr aus der Industrie verdr\u00e4ngt, da der Werkzeugsatz dieser SQL-Dialekte nun viel begrenzter ist als der einer h\u00f6heren Programmiersprache (C#, Java). Dar\u00fcber hinaus wird die Testbarkeit des Systems durch die Verwendung von gespeicherten Prozeduren stark beeintr\u00e4chtigt. Dennoch kann es manchmal sinnvoll sein, einen Teil der Logik in der Datenbank zu belassen, wenn wir den Vorteil nutzen wollen, dass unser Code in der N\u00e4he der Daten l\u00e4uft, z. B. wenn wir f\u00fcr eine einfache Massenpflege von Daten nicht \u00fcber das Netz gehen wollen.</p> </li> <li> <p>Schreiben Sie eine Funktion, die diese gespeicherte Prozedur aufruft</p> <pre><code>private static void UpdateProduct(int productID, string productName, decimal price)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"Product_Update\", conn);\n\n    command.CommandType = CommandType.StoredProcedure;\n\n    command.Parameters.AddWithValue(\"@ProductID\", productID);\n    command.Parameters.AddWithValue(\"@ProductName\", productName);\n    command.Parameters.AddWithValue(\"@UnitPrice\", price);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} rows affected\");\n}\n</code></pre> <p>Der <code>Command</code> musste der Name der gespeicherten Prozedur gegeben werden und der Typ des Befehls musste ge\u00e4ndert werden, ansonsten ist er strukturell \u00e4hnlich wie der vorherige Einf\u00fcgecode.</p> </li> <li> <p>Rufen Sie unsere neue Funktion von <code>Main</code> aus auf, z. B. mit den folgenden Parametern:</p> <pre><code>UpdateProduct(1, \"MyProduct\", 50);\n</code></pre> </li> <li> <p>Probieren wir die Anwendung aus und pr\u00fcfen in der Konsole und in SSOE, ob das Produkt mit der ID 1 ge\u00e4ndert wurde.</p> </li> </ol>"},{"location":"labor/7-adatkezeles/index_ger/#5-aufgabe-sql-injektion","title":"5. Aufgabe - SQL-Injektion","text":"<ol> <li> <p>Schreiben wir die Einf\u00fcgefunktion so, dass der SQL-Befehl mit Hilfe der String-Interpolation zusammengef\u00fcgt wird.</p> <pre><code>private static void InsertShipper2(string companyName, string phone)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\n        $\"INSERT INTO Shippers(CompanyName, Phone) VALUES('{companyName}','{phone}')\",\n        conn);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n    Console.WriteLine($\"{affectedRows} row(s) inserted\");\n}\n</code></pre> </li> <li> <p>Rufen Sie unsere neue Funktion von <code>Main</code> mit \"speziellen\" Parametern auf.</p> <pre><code>InsertShipper2(\"Super Shipper\", \"49-98562'); DELETE FROM Shippers;--\");\n</code></pre> <p>Der zweite Parameter wird so gesetzt, dass die urspr\u00fcngliche Anweisung geschlossen wird, dann k\u00f6nnen wir beliebiges (!!!) SQL schreiben und schlie\u00dflich den Rest der urspr\u00fcnglichen Anweisung auskommentieren, (<code>--</code>).</p> </li> <li> <p>Probieren Sie die Anwendung aus, sollten Sie einen Fehler erhalten, der angibt, dass ein Lieferant aufgrund eines Fremdschl\u00fcsselverweises nicht gel\u00f6scht werden kann.</p> <p>Also <code>DELETE FROM</code> ist auch gelaufen! Pr\u00fcfen wir mit dem Debugger (z. B. durch Anhalten bei der Anweisung <code>conn.Open</code> ), wie das endg\u00fcltige SQL (<code>command.CommandText</code>) lautet.</p> <p>Lehre gelernt:</p> <ul> <li>F\u00fcgen Sie SQL NIE programmatisch zusammen (egal mit welcher Methode), da dies Ihren Code f\u00fcr SQL-Injection-basierte Angriffe anf\u00e4llig macht.</li> <li>Die Datenbank sollte das endg\u00fcltige SQL auf der Grundlage der SQL-Parameter zusammensetzen, denn dann ist gew\u00e4hrleistet, dass die Parameterwerte nicht als SQL interpretiert werden (selbst wenn SQL eingegeben wird). Verwenden Sie parametrisiertes SQL oder gespeicherte Prozeduren.</li> <li>Verwenden Sie Datenbankbeschr\u00e4nkungen, z. B. zum Schutz vor versehentlichem L\u00f6schen.</li> <li>Konfigurieren Sie Benutzer in der Datenbank mit unterschiedlichen Rechten. Der in der Verbindungszeichenfolge Ihres Programms angegebene Benutzer sollte nur die f\u00fcr den Betrieb erforderlichen Mindestrechte haben. In unserem Fall haben wir keinen Benutzer angegeben, wir werden uns als Windows-Benutzer verbinden.</li> </ul> </li> <li> <p>Rufen wir nun die urspr\u00fcngliche (d.h. die sichere, mit SQL-Parametern versehene) Einf\u00fcgefunktion mit der \"speziellen\" Parametrisierung auf, um zu sehen, ob der Schutz funktioniert:</p> <pre><code>InsertShipper(\"Super Shipper\", \"49-98562'); DELETE FROM Shippers;--\");\nInsertShipper(\"XXX');DELETE FROM Shippers;--\", \"49-98562\");\n</code></pre> <p>Der erste passt nicht in die Gr\u00f6\u00dfenbeschr\u00e4nkung, der zweite l\u00e4uft, aber nur ein \"seltsam\" benannter Anbieter ist enthalten. Der Parameterwert wurde tats\u00e4chlich als Wert und nicht als SQL interpretiert. Nicht so wie hier:</p> <p></p> </li> </ol>"},{"location":"labor/7-adatkezeles/index_ger/#6-aufgabe-loschen","title":"6. Aufgabe - L\u00f6schen","text":"<ol> <li> <p>Schreiben Sie eine neue Funktion zum L\u00f6schen eines bestimmten Lieferanten.</p> <pre><code>private static void DeleteShipper(int shipperID)\n{\n    using var conn = new SqlConnection(ConnString);\n    using var command = new SqlCommand(\"DELETE FROM Shippers WHERE ShipperID = @ShipperID\", conn);\n    command.Parameters.AddWithValue(\"@ShipperID\", shipperID);\n\n    conn.Open();\n\n    int affectedRows = command.ExecuteNonQuery();\n\n    Console.WriteLine($\"{affectedRows} row(s) affected\");\n}\n</code></pre> </li> <li> <p>Rufen wir unsere neue Funktion von <code>Main</code> auf, parametrisiert mit, sagen wir, 1.</p> </li> <li>Probieren wir die App aus. Sie werden wahrscheinlich eine Ausnahme erhalten, da ein Verweis (mit Fremdschl\u00fcssel-Beschr\u00e4nkung) auf den Datensatz besteht.</li> <li>In SSOE suchen wir nach der ID eines Lieferanten, den wir beauftragt haben. \u00dcbergeben wir diesen Bezeichner an die L\u00f6schfunktion - sie kann ihn l\u00f6schen, da es keinen Verweis auf ihn gibt.</li> </ol> <p>L\u00f6schstrategien</p> <p>Es zeigt sich, dass das L\u00f6schen aufgrund der Fremdschl\u00fcssel-Beschr\u00e4nkungen eine sehr riskante und unvorhersehbare Operation ist. Einige M\u00f6glichkeiten, die L\u00f6schung zu verwalten:</p> <ul> <li>Wir erlauben keine L\u00f6schung: Wenn der zu l\u00f6schende Datensatz referenziert ist, gibt die Datenbank einen Fehler zur\u00fcck (wie oben gezeigt).</li> <li>L\u00f6schkaskade - die Fremdschl\u00fcssel-Beschr\u00e4nkung kann so eingestellt werden, dass der referenzierte Datensatz (die das Referenz auf die anderen hat) gel\u00f6scht wird, wenn der referenzierte Datensatz (wo das Referenz zeigt) gel\u00f6scht wird. Dies f\u00fchrt oft dazu, dass alle unsere Fremdschl\u00fcssel-Beschr\u00e4nkungen so aussehen, und eine (versehentliche) L\u00f6schung kann die gesamte Datenbank ausl\u00f6schen, d.h. die Auswirkungen der L\u00f6schung sind schwer vorherzusagen.</li> <li>NULL der Referenz - die Fremdschl\u00fcssel-Beschr\u00e4nkung kann so eingestellt werden, dass das Fremdschl\u00fcsselfeld des referenzierten Datensatzes auf <code>NULL</code> gesetzt wird, wenn der referenzierte Datensatz gel\u00f6scht wird. Nur anwendbar, wenn das Fremdschl\u00fcsselfeld in Ihrem Modell auf <code>NULL</code> gesetzt werden kann.</li> <li>logisches L\u00f6schen (soft delete) - anstelle eines L\u00f6schvorgangs wird nur eine Flaggenspalte (z.B. <code>IsDeleted</code>) gesetzt. Der Vorteil ist, dass Sie sich nicht mit Fremdschl\u00fcssel-Beschr\u00e4nkungen befassen m\u00fcssen und die gel\u00f6schten Daten bei Bedarf verf\u00fcgbar sind (z. B. beim R\u00fcckg\u00e4ngigmachen des L\u00f6schvorgangs). Der Vorgang ist jedoch kompliziert, da man sich damit befassen muss, wie und wann gel\u00f6schte Datens\u00e4tze gefiltert werden sollen (z. B. damit sie nicht in der Schnittstelle oder in der Statistik erscheinen) oder wie man damit umgeht, wenn ein nicht gel\u00f6schter Datensatz auf einen gel\u00f6schten Datensatz verweist.</li> </ul>"},{"location":"labor/7-adatkezeles/index_ger/#ausblick","title":"Ausblick","text":"<p>Die oben genannten grundlegenden ADO.NET-Operationen in der hier gezeigten Form werden aus zwei Gr\u00fcnden selten verwendet (auch wenn dieser Ansatz die beste Leistung bietet):</p> <ul> <li>Schlechte Typisierung (das Einlesen der Daten eines Datensatzes in die Eigenschaften einer Klasse ist sehr umst\u00e4ndlich, Cast usw.)</li> <li>SQL kodiert in Strings (Fehler aufgrund von Tippfehlern werden erst zur Laufzeit erkannt)</li> </ul> <p>Ersteres kann durch verschiedene Komponenten gel\u00f6st werden, die ADO.NET erg\u00e4nzen, wie z.B.:</p> <ul> <li>Dapper</li> <li>PetaPoco</li> </ul> <p>Diese L\u00f6sungen bieten mehr Komfort bei minimalen Leistungseinbu\u00dfen.</p> <p>Beide Probleme werden durch ORM-Systeme (Object-Relational-Mapping) gel\u00f6st, die jedoch einen h\u00f6heren Overhead haben als die oben genannten L\u00f6sungen. ORMs erstellen ein Mapping zwischen der Datenbank und unseren OO-Klassen und verwenden dieses Mapping, um Datenbankoperationen zu vereinfachen. Unsere in Typcode geschriebenen Operationen mit unseren Klassen werden automatisch in die entsprechenden Datenbankoperationen \u00fcbersetzt, so dass unser In-Memory-Objektmodell mit der Datenbank synchronisiert wird. ORMs verwenden daher ein verbindungsloses Modell. Besser bekannte .NET ORMs:</p> <ul> <li>ADO.NET DataSet - ORM der ersten Generation, jetzt sehr selten verwendet</li> <li>Entity Framework 6.x - das am h\u00e4ufigsten verwendete ORM-Framework im (alten) .NET Framework</li> <li>Entity Framework Core (EF Core) - derzeit das wichtigste .NET ORM (Open Source)</li> <li>NHibernate - die .NET-Portierung von Hibernate f\u00fcr Java (Open Source)</li> </ul> <p>Das Entity Framework Core wird in der Spezialisierung Adatvez\u00e9relt rendszerek und im Wahlfach Szoftverfejleszt\u00e9s .NET platformon ausf\u00fchrlicher behandelt.</p>"},{"location":"labor/old-5-mvvm/","title":"5. MVVM","text":""},{"location":"labor/old-5-mvvm/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A labor sor\u00e1n egy recept b\u00f6ng\u00e9sz\u0151 alkalmaz\u00e1st fogunk k\u00e9sz\u00edteni, amelyben alkalmazzuk az MVVM tervez\u00e9si mint\u00e1t.</p>"},{"location":"labor/old-5-mvvm/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A labor elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> </ul>"},{"location":"labor/old-5-mvvm/#kiindulo-projekt","title":"Kiindul\u00f3 projekt","text":"<p>Kl\u00f3nozzuk le a kiindul\u00f3 projektet az al\u00e1bbi paranccsal:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo\n</code></pre> A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el a <code>megoldas</code> \u00e1gon. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre a <code>megoldas</code> \u00e1gat:</p> <p><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo -b megoldas</code></p>"},{"location":"labor/old-5-mvvm/#az-mvvm-mintarol","title":"Az MVVM mint\u00e1r\u00f3l","text":"<p>Az MVVM (Model-View-ViewModel) egy architektur\u00e1lis tervez\u00e9si minta, amelyet a XAML alkalmaz\u00e1sok fejleszt\u00e9se sor\u00e1n haszn\u00e1lhatunk, de gyakran m\u00e1s kliens oldali technol\u00f3gi\u00e1k eset\u00e9ben is megjelenik. Az MVVM minta c\u00e9lja, hogy a felhaszn\u00e1l\u00f3i fel\u00fcletet \u00e9s a m\u00f6g\u00f6tte l\u00e9v\u0151 logik\u00e1t sz\u00e9tv\u00e1lassza, \u00e9s ezzel egy laz\u00e1bb csatol\u00e1s\u00fa alkalmaz\u00e1st hozzon l\u00e9tre, ami n\u00f6veli a tesztelhet\u0151s\u00e9get, a karbantarthat\u00f3s\u00e1got \u00e9s az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got.</p> <p>Az MVVM minta h\u00e1rom (+1) f\u0151 r\u00e9szb\u0151l \u00e1ll:</p> <ul> <li>Model: Az alkalmaz\u00e1s \u00fczleti modellj\u00e9t tartalmazza, amelyet a ViewModel-ek haszn\u00e1lhatnak az adatok t\u00e1rol\u00e1s\u00e1ra.</li> <li>View: A felhaszn\u00e1l\u00f3i fel\u00fclet le\u00edr\u00e1s\u00e1t tartalmazza, \u00e9s a tiszt\u00e1n a n\u00e9zetekhez kapcsol\u00f3d\u00f3 logik\u00e1t (pl.: anim\u00e1ci\u00f3k kezel\u00e9s\u00e9t).</li> <li>ViewModel: A n\u00e9zet absztrakci\u00f3ja, mely tartalmazza a n\u00e9zet \u00e1llapot\u00e1t \u00e9s a n\u00e9zeten v\u00e9grehajthat\u00f3 m\u0171veleteket, n\u00e9zet f\u00fcggetlen\u00fcl. A laza csatol\u00e1st a ViewModel \u00e9s a n\u00e9zet k\u00f6z\u00f6tt az adatk\u00f6t\u00e9s biztos\u00edtja.</li> <li>Services (szolg\u00e1ltat\u00e1sok): Az alkalmaz\u00e1s \u00fczleti logik\u00e1j\u00e1t tartalmaz\u00f3 oszt\u00e1lyok, amelyeket a ViewModel-ek haszn\u00e1lnak. Ha minden \u00fczleti logika a ViewModel-ekben lenne, azok t\u00fal bonyolultak \u00e9s \u00e1tl\u00e1thatatlanok lenn\u00e9nek. Ez nem az MVVM minta r\u00e9sze, de itt eml\u00edtj\u00fck meg, mert mi is \u00edgy fogjuk haszn\u00e1lni az alkalmaz\u00e1s architekt\u00far\u00e1j\u00e1t.</li> </ul> <p>\u00daj:</p> <ul> <li>Model: Domainspecifikus adatokat fog \u00f6ssze, melyet a ViewModel-ek haszn\u00e1lhatnak az adatok t\u00e1rol\u00e1s\u00e1ra. Pl. Recipe/Product/Order oszt\u00e1ly, egy recept/term\u00e9k/megrendel\u00e9s adatait fogja \u00f6ssze.</li> <li>View: A felhaszn\u00e1l\u00f3i fel\u00fclet le\u00edr\u00e1s\u00e1t tartalmazza, (\u00e9s a tiszt\u00e1n a n\u00e9zetekhez kapcsol\u00f3d\u00f3 logik\u00e1t, pl. anim\u00e1ci\u00f3k kezel\u00e9s\u00e9t). Tipikusan Window, Page, UserControl lesz\u00e1rmazott oszt\u00e1ly, XAML-beli deklarat\u00edv le\u00edr\u00e1ssal, a code-behind sokszor \u00fcres (mert a logika a ViewModel-ben van).</li> <li>ViewModel: A n\u00e9zethez tartoz\u00f3 logika van benne: tartalmazza a n\u00e9zet \u00e1llapot\u00e1t \u00e9s a n\u00e9zeten v\u00e9grehajthat\u00f3 m\u0171veleteket. F\u00fcggetlen a n\u00e9zett\u0151l, a laza csatol\u00e1st a ViewModel \u00e9s a n\u00e9zet k\u00f6z\u00f6tt adatk\u00f6t\u00e9s biztos\u00edtja (a n\u00e9zet vez\u00e9rl\u0151i k\u00f6tnek a ViewModel tulajdons\u00e1gaihoz). Unit tesztelhet\u0151!</li> <li>Services (szolg\u00e1ltat\u00e1sok): Az alkalmaz\u00e1s \u00fczleti/alkalmaz\u00e1s logik\u00e1j\u00e1t tartalmaz\u00f3 oszt\u00e1lyok, amelyeket a ViewModel-ek haszn\u00e1lnak. Ha minden \u00fczleti logika a ViewModel-ekben lenne, azok t\u00fal bonyolultak \u00e9s \u00e1tl\u00e1thatatlanok lenn\u00e9nek. Ez nem az MVVM minta r\u00e9sze, de itt eml\u00edtj\u00fck meg, mert mi is \u00edgy fogjuk fel\u00e9p\u00edteni az alkalmaz\u00e1s architekt\u00far\u00e1j\u00e1t.</li> </ul> <p></p> <p> Mihez k\u00e9sz\u00edt\u00fcnk ViewModel oszt\u00e1lyokat?</p> <ul> <li>Az egyes n\u00e9zetekhez (pl. Window, Page, Dialog, UserControl) mindig k\u00e9sz\u00edt\u00fcnk ViewModel oszt\u00e1lyt, \u00e9s bel\u0151le egy n\u00e9zethez egy objektumot hozunk l\u00e9tre.  Pl. MainPage-hez MainPageViewModel, DancerDialog-hoz DancerDialogViewModel. Ezt a gyakorlat sor\u00e1n is alkalmazzuk.</li> <li>Az egyes modell oszt\u00e1lyokhoz (pl. Recipe, Product, Dancer stb.) opcion\u00e1lisan k\u00e9sz\u00edthet\u00fcnk csomagol\u00f3 ViewModel oszt\u00e1lyokat (pl. RecipeViewModel, ProductViewModel, DancerViewModel), ilyeneket a gyakorlat sor\u00e1n nem fogunk k\u00e9sz\u00edteni. Ez az\u00e9rt van, mert nem a Strict, hanem a Relaxed MVVM mint\u00e1t k\u00f6vetj\u00fck (l\u00e1sd el\u0151ad\u00e1s).</li> </ul>"},{"location":"labor/old-5-mvvm/#0-feladat-projekt-felepitese","title":"0. Feladat - Projekt fel\u00e9p\u00edt\u00e9se","text":"<p>Az alkalmaz\u00e1s v\u00e1za m\u00e1r el\u0151 van k\u00e9sz\u00edtve. Tekints\u00fck \u00e1t a projekt fel\u00e9p\u00edt\u00e9s\u00e9t.</p> <p>Az <code>MvvmLab</code> a futtathat\u00f3 alkalmaz\u00e1s projektje, amely WinUI keretrendszert haszn\u00e1l a megjelen\u00edt\u00e9si r\u00e9teg\u00e9ben a m\u00e1r tanult XAML nyelvvel. Az <code>MvvmLab.Core</code> projekt (class library) a teljesen n\u00e9zet f\u00fcggetlen \u00fczleti logik\u00e1kat tartalmazza.</p> <p>Ami sz\u00e1munkra fontos a kiindul\u00f3 projektben:</p> <ul> <li><code>App.xaml.cs</code>: Az alkalmaz\u00e1s bel\u00e9p\u00e9si pontja, amely haszn\u00e1lja a modern .NET alkalmaz\u00e1sokban alkalmazott Host Builder \u00e9s Dependency Injection mint\u00e1kat. A f\u00e9l\u00e9vnek ez nem az anyaga, de a f\u00fcgg\u0151s\u00e9g injekt\u00e1l\u00e1sr\u00f3l m\u00e9g a labor sor\u00e1n lesz sz\u00f3.</li> <li><code>Views</code> mappa: Az alkalmaz\u00e1s n\u00e9zeteit tartalmazza, jelenleg a <code>MainPage</code>-et</li> <li><code>ViewModels</code> mappa: Az alkalmaz\u00e1s ViewModel-jeit tartalmazza, jelenleg a <code>MainPageViewModel</code>-t</li> <li><code>INagivationService</code> (<code>Services</code> mapp\u00e1ban): oldalak k\u00f6z\u00f6tti navig\u00e1ci\u00f3hoz haszn\u00e1lt szolg\u00e1ltat\u00e1s</li> </ul> <p>MVVM \u00e9s Boilerplate k\u00f6nyvt\u00e1rak</p> <p>MVVM mint\u00e1t ritk\u00e1n szoktunk kiz\u00e1r\u00f3lag a .NET keretrendszerre t\u00e1maszkodva implement\u00e1lni. \u00c9rdemes haszn\u00e1lni valamilyen MVVM k\u00f6nyvt\u00e1rat, amelyek seg\u00edts\u00e9g\u00e9vel a k\u00f3dunk t\u00f6m\u00f6rebb, \u00e1tl\u00e1that\u00f3bb, \u00e9s kevesebb boilerplate k\u00f3dot fog tartalmazni. A k\u00f6nyvt\u00e1rak k\u00f6z\u00fcl a legelterjedtebbek a k\u00f6vetkez\u0151k:</p> <ul> <li>MVVM Toolkit: Microsoft \u00e1ltal gondozott MVVM k\u00f6nyvt\u00e1r</li> <li>Prism: R\u00e9gen Microsoft gondoz\u00e1s\u00e1ban \u00e1llt \u00e9s nagyon elterjedt volt, de m\u00e1r k\u00fcls\u0151 fejleszt\u0151k tartj\u00e1k karban \u00e9s fizet\u0151s lett id\u0151 k\u00f6zben.</li> <li>ReactiveUI: A Reactive Extensions (Rx) k\u00f6nyvt\u00e1rakat haszn\u00e1lja a ViewModel \u00e1llapot\u00e1nak kezel\u00e9s\u00e9re, \u00e9s a n\u00e9zet \u00e9s ViewModel k\u00f6z\u00f6tti adatk\u00f6t\u00e9sre. Ez a k\u00f6nyvt\u00e1r ny\u00fajtja a legt\u00f6bb szolg\u00e1ltat\u00e1st, de a legnehezebben tanulhat\u00f3 is.</li> <li>Uno.Extensions: MVVM Toolkitre \u00e9p\u00fcl, de t\u00f6bb olyan szolg\u00e1ltat\u00e1st is tartalmaz, amelyek a WinUI keretrendszer hi\u00e1nyoss\u00e1gait p\u00f3tolj\u00e1k.</li> </ul> <p>A labor sor\u00e1n a Microsoft \u00e1ltal gondozott MVVM Toolkitet fogjuk haszn\u00e1lni.</p> <p>A kiindul\u00f3 projekt pedig a Windows Template Studio Visual Studio kieg\u00e9sz\u00edt\u0151 seg\u00edts\u00e9g\u00e9vel k\u00e9sz\u00fclt.</p>"},{"location":"labor/old-5-mvvm/#1-feladat-receptek-fooldal","title":"1. Feladat - Receptek f\u0151oldal","text":"<p>A megold\u00e1s sor\u00e1n \"alulr\u00f3l\", az adatok fel\u0151l fogunk \u00e9p\u00edtkezni \u00e9s fokozatosan fogunk eljutni a n\u00e9zetig. Ugyan a val\u00f3 \u00e9letben egy top-bottom fejleszt\u00e9s gyakran hasznosabb, de a labor sor\u00e1n az id\u0151 r\u00f6vids\u00e9ge miatt az alulr\u00f3l \u00e9p\u00edtkez\u00e9s gyorsabb \u00e9s egyszer\u0171bb, mert \u00edgy nem kell az adatokat mockolni. Az al\u00e1bbi \u00e1bra a f\u0151oldalhoz tartoz\u00f3 fontosabb oszt\u00e1lyokat tekinti \u00e1t.</p> <p> A f\u0151oldal MMVM alap\u00fa megval\u00f3s\u00edt\u00e1sa <p>Fontosabb elemek:</p> <ul> <li><code>MainPage</code>: ez a View, egy Page lesz\u00e1rmazott, a fel\u00fclet XAML alap\u00fa le\u00edr\u00e1sa.</li> <li><code>MainPageViewModel</code>: a f\u0151oldalhoz (<code>MainPage</code>) tartoz\u00f3 ViewModel. Egy (gener\u00e1lt) <code>RecipeGroups</code> tulajdons\u00e1gban receptcsoportokat, a receptcsoportokban recepteket tartalmaz. A n\u00e9zet ezen a receptcsoportok fejl\u00e9c\u00e9t, illetve a csoportokban lev\u0151 receptek fejl\u00e9c\u00e9t \u00e9s k\u00e9peit jelen\u00edti meg adatk\u00f6t\u00e9ssel.</li> <li><code>RecipeGroup</code> \u00e9s <code>Recipe</code>: a receptcsoportokat \u00e9s a recepteket reprezent\u00e1l\u00f3 modell oszt\u00e1lyok.</li> <li><code>RecipeService</code>: alkalmaz\u00e1slogika/adatel\u00e9r\u00e9s a receptek kezel\u00e9s\u00e9hez (egy t\u00e1voli szolg\u00e1ltat\u00e1ssal kommunik\u00e1l), a ViewModel haszn\u00e1lja.</li> </ul>"},{"location":"labor/old-5-mvvm/#11-adateleresi-szolgaltatas","title":"1.1 Adatel\u00e9r\u00e9si szolg\u00e1ltat\u00e1s","text":"<p>Kezdj\u00fck az adatel\u00e9r\u00e9si r\u00e9teggel, amit most tekinthet\u00fcnk az MVVM mint\u00e1ban a modell r\u00e9tegnek is.</p> <p>Az alkalmaz\u00e1sunk adatait egy webszerverr\u0151l k\u00e9rdezi le (\u00fan. REST API-n, HTTP-n kereszt\u00fcl \u00e9ri el). Az ehhez hasonl\u00f3 kliens-szerver architekt\u00far\u00e1j\u00fa alkalmaz\u00e1sok egy kifejezetten gyakori megold\u00e1snak sz\u00e1m\u00edtanak a modern alkalmaz\u00e1sok fejleszt\u00e9se sor\u00e1n. Err\u0151l b\u0151vebben a k\u00f6vetkez\u0151 f\u00e9l\u00e9vben a Mobil \u00e9s Webes szoftverek, illetve az Adatvez\u00e9relt alkalmaz\u00e1sok t\u00e1rgyakban lesz sz\u00f3. Most el\u00e9g annyit tudni, hogy a kliens alkalmaz\u00e1sunk HTTP k\u00e9r\u00e9seket fog k\u00fcldeni a szervernek, amelyekre a szerver v\u00e1laszolni fog, m\u00e9gpedig JSON form\u00e1tumban szolg\u00e1ltat adatokat.</p> <p> Kliens-szerver architekt\u00fara <p>A t\u00e1voli szolg\u00e1ltat\u00e1s a k\u00f6vetkez\u0151 c\u00edmen \u00e9rhet\u0151 el: https://bmecookbook2.azurewebsites.net/api. A szolg\u00e1ltat\u00e1shoz pedig tartozik egy OpenApi alap\u00fa dokument\u00e1ci\u00f3 a https://bmecookbook2.azurewebsites.net/swagger c\u00edmen. Tanulm\u00e1nyozzuk ezt \u00e1t, vagy ak\u00e1r pr\u00f3b\u00e1ljuk ki a v\u00e9gpotokat a Swagger fel\u00fclet\u00e9n kereszt\u00fcl (ehhez \u00edrjuk be az el\u0151z\u0151 \"swagger\" v\u00e9gz\u0151d\u00e9s\u0171 URL-t egy b\u00f6ng\u00e9sz\u0151 c\u00edmsor\u00e1ba). Az els\u0151 feladathoz a <code>/api/Recipes/Groups</code> v\u00e9gpontot fogjuk haszn\u00e1lni, amely a receptek csoportos\u00edt\u00e1s\u00e1t adja vissza.</p> <p>Vegy\u00fcnk fel az <code>MvvmLab.Core</code> projekt <code>Models</code> mapp\u00e1j\u00e1ba egy \u00faj oszt\u00e1lyt <code>RecipeGroup</code> n\u00e9ven.</p> <p>A swagger seg\u00edts\u00e9g\u00e9vel h\u00edvjuk meg az \"api/Recipes/Groups\" v\u00e9gpontot (pontosabban egy http GET k\u00e9r\u00e9st k\u00fcldj\u00fc)</p> <ul> <li>A swagger fel\u00fcleten a \"Get api/Recipes/Groups\" v\u00e9gpont le\u00edr\u00e1st nyissuk le</li> <li>Kattintsunk az Execute gombon</li> <li>A szolg\u00e1ltat\u00e1s \u00e1ltal k\u00fcld\u00f6tt JSON v\u00e1lasz a \"Response body\" alatt jelenik meg: itt azt l\u00e1tjuk, hogy a v\u00e1laszban receptcsoportokat kaptunk. Minden csoportnak van egy \"title\"-je (pl. Chinese, Mexican, Italian), \u00e9s a csoportok alatt tal\u00e1lhat\u00f3k <code>[]</code> k\u00f6z\u00f6tt (JSON t\u00f6mb) a csoportban lev\u0151 receptek adatai. </li> <li> <p>M\u00e1soljunk v\u00e1g\u00f3lapra egy <code>RecipeGroup</code>-nyi JSON adatot. Haszn\u00e1lhatjuk az \"Example Value\" alatti kimenetet is a v\u00e1g\u00f3lapra m\u00e1sol\u00e1skor (de a nyit\u00f3 [ \u00e9s z\u00e1r\u00f3 ] karatereket ne m\u00e1soljuk ki). Ha valami\u00e9rt elakadn\u00e1nk, az al\u00e1bbi leny\u00edl\u00f3 szakaszb\u00f3l is kim\u00e1solhatjuk a v\u00e1g\u00f3lapra a tartalmat:</p> V\u00e1g\u00f3lapra m\u00e1soland\u00f3 <pre><code>{\n    \"Title\": \"string\",\n    \"Recipes\": [\n        {\n            \"Id\": 0,\n            \"Title\": \"string\",\n            \"BackgroundImage\": \"string\"\n        }\n    ]\n}\n</code></pre> </li> </ul> <p>Visual Studio-ban az <code>Edit</code> men\u00fc <code>Paste Special</code> men\u00fcpontj\u00e1ban a <code>Paste JSON as Classes</code> men\u00fcpontot v\u00e1lasztva illessz\u00fck be a v\u00e1g\u00f3lap tartalm\u00e1t. Ekkor olyan oszt\u00e1lyokat gener\u00e1l a VS, mely megfelel a beillesztett JSON szerkezet\u00e9nek.</p> <p></p> <p>A kapott oszt\u00e1lyokat \u00e1tnevezhetj\u00fck, hogy a C# k\u00f3dol\u00e1si konvenci\u00f3knak megfeleljenek. A <code>Rootobject</code> oszt\u00e1lyt nevezz\u00fck \u00e1t <code>RecipeGroup</code>-ra, a <code>Recipe</code> oszt\u00e1lyt pedig <code>RecipeHeader</code>-re.</p> <pre><code>public class RecipeGroup\n{\n    public string Title { get; set; }\n    public RecipeHeader[] Recipes { get; set; }\n}\n\npublic class RecipeHeader\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string BackgroundImage { get; set; }\n}\n</code></pre> <p><code>List&lt;T&gt;</code> haszn\u00e1lata</p> <p>Eset\u00fcnkben nem volt r\u00e1 sz\u00fcks\u00e9g (mert nem b\u0151vj\u00fck receptgy\u0171jtem\u00e9nyeket), de ha k\u00e9nyelmesebb sz\u00e1munkra, akkor nyugodtan \u00edrjuk \u00e1t a gener\u00e1lt k\u00f3dban a t\u00f6mb\u00f6ket <code>List&lt;T&gt;</code>-re.</p> <p>K\u00e9sz\u00edts\u00fcnk egy <code>IRecipeService</code> interf\u00e9szt az <code>MvvmLab.Core.Services</code> n\u00e9vt\u00e9rbe, amelyen kereszt\u00fcl el fogjuk \u00e9rni a t\u00e1voli szolg\u00e1ltat\u00e1st. Az interf\u00e9szben egy <code>GetRecipeGroupsAsync</code> met\u00f3dust hozzunk l\u00e9tre, amely a recept csoportokat k\u00e9rdezi le \u00e9s adja vissza.</p> <pre><code>public interface IRecipeService\n{\n    public Task&lt;RecipeGroup[]&gt; GetRecipeGroupsAsync();\n}\n</code></pre> <p>Task visszat\u00e9r\u00e9si \u00e9rt\u00e9k</p> <p>Az interf\u00e9szben a t\u00e9nyleges visszat\u00e9r\u00e9si \u00e9rt\u00e9ket (<code>RecipeGroup[]</code>) egy <code>Task&lt;T&gt;</code> objektumba csomagoljuk, mivel a h\u00e1l\u00f3zati m\u0171veleteket aszinkron c\u00e9lszer\u0171 implement\u00e1lni. .NET-ben az aszinkron megval\u00f3s\u00edt\u00e1s legkorszer\u0171bb \u00e9s legegyszer\u0171bb m\u00f3dja a <code>Task</code>-ok alkalmaz\u00e1sa. Az aszinkronit\u00e1s pedig azt biztos\u00edtja itt sz\u00e1munkra, hogy ha a h\u00e1l\u00f3zati k\u00e9r\u00e9s sok\u00e1ig tart, akkor se fagyjon be a felhaszn\u00e1l\u00f3i fel\u00fclet (\u00e9s mindezt k\u00fcl\u00f6n sz\u00e1lak ind\u00edt\u00e1sa n\u00e9lk\u00fcl).</p> <p>Az interf\u00e9sz implement\u00e1ci\u00f3j\u00e1t a <code>MvvmLab.Core.Services</code> n\u00e9vt\u00e9rben hozzuk l\u00e9tre <code>RecipeService</code> n\u00e9ven. A szolg\u00e1ltat\u00e1sunk a <code>HttpClient</code> be\u00e9p\u00edtett .NET oszt\u00e1lyt fogja haszn\u00e1lni a REST API h\u00edv\u00e1sokhoz. A <code>GetFromJsonAsync</code> ind\u00edt egy HTTP GET aszinkron k\u00e9r\u00e9st a megadott c\u00edmre, \u00e9s a v\u00e1laszt JSON form\u00e1tumb\u00f3l deszerializ\u00e1lja a megadott t\u00edpusra.</p> <pre><code>public class RecipeService : IRecipeService\n{\n    private readonly string _baseUrl = \"https://bmecookbook2.azurewebsites.net/api\";\n\n    public async Task&lt;RecipeGroup[]&gt; GetRecipeGroupsAsync()\n    {\n        using var client = new HttpClient();\n        return await client.GetFromJsonAsync&lt;RecipeGroup[]&gt;($\"{_baseUrl}/Recipes/Groups\");\n    }\n}\n</code></pre> <p>A <code>GetFromJsonAsync</code> m\u0171velet aszinkron, \u00edgy <code>Task</code>-kal t\u00e9r vissza, ezt nem blokkol\u00f3 m\u00f3don bev\u00e1rni \u00e9s az eredm\u00e9ny\u00e9t el\u00e9rni az <code>await</code> kulcssz\u00f3val tudjuk.</p> <p>async-await</p> <p>Az <code>async</code> \u00e9s <code>await</code> kulcsszavak a legt\u00f6bb modern nyelvben az aszinkron f\u00fcggv\u00e9nyh\u00edv\u00e1s nyelvi szint\u0171 kezel\u00e9s\u00e9re szolg\u00e1lnak. A m\u0171k\u00f6d\u00e9s\u00e9r\u0151l a f\u00e9l\u00e9v v\u00e9g\u00e9n lesz m\u00e9g sz\u00f3 r\u00e9szletesen, de most a haszn\u00e1lathoz az al\u00e1bbiakat \u00e9rdemes tudni:</p> <ul> <li>Az <code>await</code> kulcssz\u00f3val tudunk bev\u00e1rni aszinkron v\u00e9grehajt\u00e1s\u00fa m\u0171veletet, an\u00e9lk\u00fcl, hogy blokkoln\u00e1nk a h\u00edv\u00f3t.</li> <li>Az <code>await</code> kulcssz\u00f3t, csak <code>async</code> kulcssz\u00f3val ell\u00e1tott f\u00fcggv\u00e9nyekben haszn\u00e1lhatjuk.</li> <li>Az <code>async</code> f\u00fcggv\u00e9nyeknek csak <code>Task</code> vagy <code>Task&lt;T&gt;</code> vagy <code>void</code> visszat\u00e9r\u00e9si \u00e9rt\u00e9k\u00fck lehet. (Illetve \"Task szer\u0171\", de ezt nem itt vessz\u00fck.)<ul> <li>Ha egy <code>async</code> f\u00fcggv\u00e9nyt k\u00edv\u00fclr\u0151l be szeretn\u00e9nk v\u00e1rni, akkor az voiddal nem tudjuk megtenni, mindenk\u00e9ppen <code>Task</code> vagy <code>Task&lt;T&gt;</code> visszat\u00e9r\u00e9si \u00e9rt\u00e9kkel kell rendelkeznie.</li> <li>az <code>async</code> f\u00fcggv\u00e9nyekben a <code>return</code> utas\u00edt\u00e1s szintaktik\u00e1ja megv\u00e1ltozik: nem a Task objektummal kell visszat\u00e9rj\u00fcnk, hanem az \u00e1ltala tartalmazott adattal (<code>Task</code> eset\u00e9ben <code>void</code>, <code>Task&lt;T&gt;</code> eset\u00e9ben <code>T</code>).</li> </ul> </li> </ul>"},{"location":"labor/old-5-mvvm/#12-fooldal-viewmodel","title":"1.2 F\u0151oldal ViewModel","text":"<p>K\u00f6vetkez\u0151 l\u00e9p\u00e9sben a f\u0151oldal ViewModelj\u00e9t fogjuk elk\u00e9sz\u00edteni, amely az el\u0151bb elk\u00e9sz\u00edtett szolg\u00e1ltat\u00e1st fogja haszn\u00e1lni a recept csoportok lek\u00e9rdez\u00e9s\u00e9hez, \u00e9s \u00e1llapotk\u00e9nt t\u00e1rolja azokat a n\u00e9zet sz\u00e1m\u00e1ra.</p>"},{"location":"labor/old-5-mvvm/#dependency-injection","title":"Dependency Injection","text":"<p>Nyissuk meg a <code>MainPageViewModel</code> oszt\u00e1lyt az <code>MvvmLab.ViewModels</code> mapp\u00e1b\u00f3l. A ViewModel-\u00fcnknek sz\u00fcks\u00e9ge lesz egy <code>IRecipeService</code> interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyra, amelyen kereszt\u00fcl le tudja k\u00e9rdezni a recept csoportokat. A <code>MainPageViewModel</code> konstruktor\u00e1ban f\u00fcgg\u0151s\u00e9g injekt\u00e1l\u00e1son kereszt\u00fcl szerezz\u00fck be a sz\u00fcks\u00e9ges f\u00fcgg\u0151s\u00e9get. Eset\u00fcnkben ez annyit tesz, hogy v\u00e1runk egy <code>IRecipeService</code> t\u00edpus\u00fa param\u00e9tert, amelyet majd a ViewModel p\u00e9ld\u00e1nyos\u00edt\u00e1skor fog megkapni, a param\u00e9tert pedig elmentj\u00fck egy priv\u00e1t v\u00e1ltoz\u00f3ba.</p> <pre><code>private readonly IRecipeService _recipeService;\n\npublic MainPageViewModel(IRecipeService recipeService)\n{\n    _recipeService = recipeService;\n}\n</code></pre> F\u00fcgg\u0151s\u00e9g Injekt\u00e1l\u00e1s - Dependency Injection - DI <p>Alapesetben az oszt\u00e1lyok szoros csatol\u00e1st alak\u00edtanak ki a f\u00fcgg\u0151s\u00e9geikkel (referencia, p\u00e9ld\u00e1nyos\u00edt\u00e1s). </p> <p> Er\u0151s csatol\u00e1s DI n\u00e9lk\u00fcl </p> <p>Ez a szoros csatol\u00e1s nehez\u00edti a tesztelhet\u0151s\u00e9get, a karbantarthat\u00f3s\u00e1got \u00e9s az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got. Ezen seg\u00edt a Dependency Injection (\u00e9s a Strategy) alkalamaz\u00e1sa. A t\u00e1rgy keret\u00e9ben a tervez\u00e9si mint\u00e1khoz kapcsol\u00f3d\u00f3an tanulunk a Dependency Injection (DI) tervez\u00e9si mint\u00e1r\u00f3l, melyet mindig a Strategy mint\u00e1val egy\u00fctt alkalmazunk. A l\u00e9nyege az, hogy egy oszt\u00e1ly nem maga hozza l\u00e9tre a f\u00fcgg\u0151s\u00e9geit (azon oszt\u00e1lyokat, melyekt\u0151l f\u00fcgg, melyeket felhaszn\u00e1l), hanem k\u00edv\u00fclr\u0151l kapja meg, pl. konstruktor param\u00e9terben. A Strategy mint\u00e1b\u00f3l ad\u00f3d\u00f3an pedig az k\u00f6vetkezik, hogy csak \"interf\u00e9szk\u00e9nt\" f\u00fcgg t\u0151l\u00fck. </p> <p>A mai legt\u00f6bb platform egy plusz szolg\u00e1ltat\u00e1st, \u00fan. DI (m\u00e1s nev\u00e9n IoC) kont\u00e9nert is biztos\u00edt a f\u00fcggg\u0151s\u00e9gek k\u00e9nyelmes kezel\u00e9s\u00e9hez.  A f\u00fcgg\u0151s\u00e9gek \u00e9letciklus\u00e1t ez esetben egy kit\u00fcntetett komponens kezeli, a DI kont\u00e9ner. A DI kont\u00e9ner (\u00e1br\u00e1n Builder) felel\u0151s az oszt\u00e1lyok p\u00e9ld\u00e1nyos\u00edt\u00e1s\u00e1\u00e9rt \u00e9s a f\u00fcgg\u0151s\u00e9gek beinjekt\u00e1l\u00e1s\u00e1\u00e9rt rekurz\u00edvan.</p> <p> DI oszt\u00e1lydiagramm </p> <p>Ahhoz, hogy a p\u00e9ld\u00e1nyos\u00edt\u00e1s sor\u00e1n a f\u00fcgg\u0151s\u00e9gi gr\u00e1fot bej\u00e1rva beinjekt\u00e1lja a megfelel\u0151 implement\u00e1ci\u00f3kat a kont\u00e9ner, a DI kont\u00e9nerbe be kell regisztr\u00e1lni a f\u00fcgg\u0151s\u00e9gi lek\u00e9pez\u00e9seket. Alkalmaz\u00e1sunkban ezt az <code>App.xaml.cs</code> f\u00e1jlban a <code>ConfigureServices</code> met\u00f3dusban tessz\u00fck meg. Vegy\u00fck fel az al\u00e1bbi sort, pl. a <code>// Core Services</code> szakasz al\u00e1:</p> <pre><code>services.AddTransient&lt;IRecipeService, RecipeService&gt;();\n</code></pre> <p>Ez azt mondja meg, hogy ahol egy oszt\u00e1lyunk <code>IRecipeService</code> f\u00fcgg\u0151s\u00e9get v\u00e1r (pl. <code>MainPageViewModel</code> konstruktora), a DI keretrendszer egy <code>RecipeService</code> implement\u00e1ci\u00f3t sz\u00far be (\u00e9s mivel itt Tranziens \u00e9lettartam\u00fak\u00e9nt regisztr\u00e1ltuk, minden egyes <code>IRecipeService</code> f\u00fcgg\u0151s\u00e9g ig\u00e9nyt egy \u00faj <code>RecipeService</code> p\u00e9ld\u00e1ny fog kiel\u00e9g\u00edteni).</p> <p>Ahhoz, hogy a Dependency Injection az alkalmaz\u00e1sunkban m\u0171k\u00f6dj\u00f6n, a <code>MainPageViewModel</code> oszt\u00e1lyt is be kell regisztr\u00e1lni a kont\u00e9nerbe, ezt is megtal\u00e1ljuk a <code>ConfigureServices</code> alatt.</p> <p>DI kont\u00e9nerekr\u0151l r\u00e9szletesen</p> <p>A DI kont\u00e9nerek haszn\u00e1lat\u00e1val \u00e9s m\u0171k\u00f6d\u00e9s\u00e9vel Adatvez\u00e9relt rendszerek t\u00e1rgy keret\u00e9ben fogunk k\u00e9s\u0151bb r\u00e9szletesen megismerkedni.</p>"},{"location":"labor/old-5-mvvm/#viewmodel-allapot","title":"ViewModel \u00e1llapot","text":"<p>K\u00f6vetkez\u0151 l\u00e9p\u00e9sben a ViewModel \u00e1llapot\u00e1nak felt\u00f6lt\u00e9s\u00e9t implement\u00e1ljuk.</p> <p>A c\u00e9lunk az, hogy</p> <ul> <li>a <code>MainPageViewModel</code>-ben legyen <code>RecipeGroups</code>nev\u0171 tulajdons\u00e1g, melyben receptcsoportok vannak (ezt akarjuk a fel\u00fclethez k\u00f6tni),</li> <li>a <code>RecipeGroups</code> v\u00e1ltoz\u00e1sait k\u00f6vesse le a fel\u00fclet, melyhez sz\u00fcks\u00e9g van az <code>INotifyPropertyChanged</code> megval\u00f3s\u00edt\u00e1s\u00e1ra \u00e9s a <code>PropertyChanged</code> megfelel\u0151 els\u00fct\u00e9s\u00e9re (ahogy a kor\u00e1bbi laboron/h\u00e1zi feladatban m\u00e1r l\u00e1ttuk).</li> </ul> <p>Ehhez viszonylag \"sokat\" kellene dolgoznunk, de az MVVM toolkit leegyszer\u0171s\u00edti az \u00e9let\u00fcnket, mind\u00f6ssze a k\u00f6vetkez\u0151t kell megtenn\u00fcnk:</p> <ul> <li>A <code>MainPageViewModel</code>-ben hozzunk l\u00e9tre egy <code>_recipeGroups</code> nev\u0171 <code>RecipeGroup[]</code> tagv\u00e1ltoz\u00f3t (vagyis nem tulajdons\u00e1got).</li> <li>A v\u00e1ltoz\u00f3t l\u00e1ssuk el a <code>ObservableProperty</code> attrib\u00fatummal. </li> </ul> <pre><code>[ObservableProperty]\nprivate RecipeGroup[] _recipeGroups = Array.Empty&lt;RecipeGroup&gt;();\n</code></pre> <p>K\u00e9sz is vagyunk. De mi t\u00f6rt\u00e9nik ennek hat\u00e1s\u00e1ra?</p> <ul> <li>Ez alapj\u00e1n az MVVM Toolkit automatikusan gener\u00e1lni fog egy <code>RecipeGroups</code> nev\u0171 property-t az oszt\u00e1ly gener\u00e1lt m\u00e1sik (partial) fel\u00e9ben.</li> <li>Ez a gener\u00e1lt property kihaszn\u00e1lja az <code>INotifyPropertyChanged</code> interf\u00e9szt, \u00edgy a <code>RecipeGroups</code> property \u00e9rt\u00e9k\u00e9nek megv\u00e1ltoz\u00e1sakor a <code>PropertyChanged</code> esem\u00e9nyt kiv\u00e1ltva \u00e9rtes\u00edti a n\u00e9zetet, az adatk\u00f6t\u00e9sek ment\u00e9n.</li> <li>A <code>MainPageViewModel</code>-\u00fcnk m\u00e1r megval\u00f3s\u00edtja az <code>INotifyPropertyChanged</code> interf\u00e9szt, mert az MVVM Toolkit <code>ObservableObject</code> oszt\u00e1ly\u00e1b\u00f3l sz\u00e1rmazik.</li> </ul> <p>A <code>MainPageViewModel</code>-ben implement\u00e1ljuk az el\u0151k\u00e9sz\u00edtett <code>INavigationAware</code> interf\u00e9szt, amelynek seg\u00edts\u00e9g\u00e9vel a n\u00e9zetek k\u00f6z\u00f6tti navig\u00e1ci\u00f3s \u00e9letciklus esem\u00e9nyt tudjuk lekezelni, \u00e9s ak\u00e1r adatokat is tudunk \u00e1tadni a ViewModel-ek k\u00f6z\u00f6tt. A <code>OnNavigatedTo</code> met\u00f3dusban k\u00e9rdezz\u00fck le a recept csoportokat az <code>IRecipeService</code>-en kereszt\u00fcl, majd t\u00e1roljuk el a <code>RecipeGroups</code> v\u00e1ltoz\u00f3ban.</p> <pre><code>public partial class MainPageViewModel : ObservableObject, INavigationAware\n{\n    // ...\n\n    public async void OnNavigatedTo(object parameter)\n    {\n        RecipeGroups = await _recipeService.GetRecipeGroupsAsync();\n    }\n\n    public void OnNavigatedFrom()\n    {\n    }\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/#13-fooldal-nezet","title":"1.3 F\u0151oldal n\u00e9zet","text":"<p>A <code>MainPage</code>-en k\u00e9sz\u00edts\u00fck el a n\u00e9zetet, amelyen megjelen\u00edtj\u00fck a recept csoportokat.</p> <p>Ahhoz, hogy a csoportos\u00edt\u00e1st kezelni tudja a <code>GridView</code>, sz\u00fcks\u00e9g\u00fcnk van egy olyan list\u00e1ra, mely elv\u00e9gzi a csoportos\u00edt\u00e1st. Ezt a <code>CollectionViewSource</code> oszt\u00e1ly seg\u00edts\u00e9g\u00e9vel tudjuk megval\u00f3s\u00edtani, ami bizonyos szempontb\u00f3l UI specifikus burkol\u00f3 feladatokat l\u00e1t el gy\u0171jtem\u00e9nyeken. A <code>CollectionViewSource</code>-nak meg kell adnunk a csoportos\u00edtand\u00f3 elemeket, valamint azt, hogy a csoportokat milyen property alapj\u00e1n hozza l\u00e9tre. Tov\u00e1bb\u00e1 meg kell adnunk azt is, hogy a csoportokon bel\u00fcl milyen property alapj\u00e1n jelen\u00edtse meg az elemeket.</p> <p>Hozzuk l\u00e9tre az oldal er\u0151forr\u00e1sai k\u00f6z\u00f6tt a <code>CollectionViewSource</code> p\u00e9ld\u00e1nyt (az al\u00e1bbi k\u00f3dot a <code>MainPage.xaml</code>-be, a Grid f\u00f6l\u00e9 tegy\u00fck be, vele egy szintre).</p> <pre><code>&lt;Page.Resources&gt;\n    &lt;CollectionViewSource x:Name=\"RecipeGroupsCollectionSource\"\n                            IsSourceGrouped=\"True\"\n                            ItemsPath=\"Recipes\"\n                            Source=\"{x:Bind ViewModel.RecipeGroups, Mode=OneWay}\" /&gt;\n&lt;/Page.Resources&gt;\n</code></pre> <p>Note</p> <p>Vegy\u00fck \u00e9szre, hogy az adatk\u00f6t\u00e9s sor\u00e1n a <code>ViewModel</code> tulajdons\u00e1ghoz k\u00f6t\u00fcnk, mely a <code>MainPage.xaml.cs</code>-ben tal\u00e1lhat\u00f3, \u00e9s egyszer\u0171en csak \u00e1tkasztolja a <code>DataContext</code> property-t a ViewModel t\u00edpusunkra.</p> <pre><code>public MainPageViewModel ViewModel =&gt; DataContext as MainPageViewModel;\n</code></pre> <p>Az, hogy a vez\u00e9rl\u0151k (oldalak) <code>DataContext</code> tulajdons\u00e1g\u00e1ban a ViewModel-t t\u00e1roljuk tipikus az MVVM mint\u00e1ban. Eset\u00fcnkben ezt a gener\u00e1lt projekt <code>NavigationService</code> oszt\u00e1lya teszi meg nek\u00fcnk.</p> Er\u0151forr\u00e1sok <p>XAML k\u00f6rnyezetben minden vez\u00e9rl\u0151 (fenti p\u00e9ld\u00e1ban Page) \u00e9s az <code>Application</code> oszt\u00e1ly is, rendelkezik egy <code>Resources</code> property-vel, mely egy kulcs \u00e9rt\u00e9k t\u00e1rol\u00f3 (<code>Dictionary&lt;string, object&gt;</code>), alap esetben. Ebbe tudunk t\u00f6bbsz\u00f6r felhaszn\u00e1lhat\u00f3 objektumokat rakni, ak\u00e1r alkalmaz\u00e1s szinten is. Ha ehhez az er\u0151forr\u00e1sok p\u00e9ld\u00e1nyos\u00edt\u00e1sakor megadjuk az <code>x:Key</code> attrib\u00fatumot, akkor az er\u0151forr\u00e1sokat a kulcs alapj\u00e1n tudjuk lek\u00e9rdezni pl.: a <code>{StaticResource Key}</code> markup extensionnel.</p> <p>Mi viszont itt kifejezetten <code>x:Key</code> helyett <code>x:Name</code>-et adtunk meg, mert az <code>x:Bind</code>-ban n\u00e9v szerint szeretn\u00e9nk majd hivatkozni r\u00e1 (eml\u00e9kezz\u00fcnk: az <code>x:Name</code> attrib\u00fatum seg\u00edts\u00e9g\u00e9vel azt tudjuk el\u00e9rni, hogy gener\u00e1l\u00f3dik ilyen n\u00e9ven egy tagv\u00e1ltoz\u00f3 az oszt\u00e1lyunkban, \u00edgy a code behind f\u00e1jlb\u00f3l, vagy x:Bind adatk\u00f6t\u00e9s sor\u00e1n ilyen n\u00e9ven el tudjuk \u00e9rni).</p> <p>A receptek list\u00e1z\u00e1s\u00e1hoz, most egy speci\u00e1lis <code>GridView</code> lesz\u00e1rmazott vez\u00e9rl\u0151t haszn\u00e1ljunk, m\u00e9gpedig az <code>AdaptiveGridView</code>-t a CommunityToolkit csomagb\u00f3l, amely a n\u00e9zet m\u00e9ret\u00e9nek megfelel\u0151en v\u00e1ltoztatja a megjelen\u00edtett elemek sz\u00e1m\u00e1t \u00e9s m\u00e9ret\u00e9t, illetve t\u00e1mogatja a Command-okat az elem kattint\u00e1s eset\u00e9ben. A k\u00fcls\u0151 vez\u00e9rl\u0151k hivatkoz\u00e1s\u00e1hoz vegy\u00fck fel az oldalra a k\u00f6vetkez\u0151 n\u00e9vteret:</p> <pre><code>xmlns:controls=\"using:CommunityToolkit.WinUI.UI.Controls\"\n</code></pre> <p>K\u00e9sz\u00edts\u00fck el a GridView-t, amelynek a <code>ItemsSource</code> property-j\u00e9t a fenti er\u0151forr\u00e1sban l\u00e9v\u0151 <code>RecipeGroupsCollectionSource.View</code>-ra k\u00f6tj\u00fck.</p> <p>A <code>GridView</code>-en bel\u00fcl a megszokott m\u00f3don az <code>ItemTemplate</code> property-n kereszt\u00fcl tudjuk megadni, hogy az egyes elemeket hogyan kell megjelen\u00edteni. Eset\u00fcnkben egy k\u00e9pet \u00e9s egy sz\u00f6veget rakunk ki a receptek c\u00edme alapj\u00e1n egy \"k\u00e1rtya\" szer\u0171 layoutra.</p> <p>A <code>GroupStyle</code> property-n kereszt\u00fcl pedig meg tudjuk adni, hogy a csoportokat hogyan kell megjelen\u00edteni. Eset\u00fcnkben a fejl\u00e9cet akarjuk testreszabni.</p> <p>A <code>MainPage.xaml</code>-ben a <code>&lt;Grid x:Name=\"ContentArea\"&gt; ...</code> grid-et cser\u00e9lj\u00fck le a k\u00f6vetkez\u0151re:</p> <pre><code>&lt;Grid x:Name=\"ContentArea\" Padding=\"10\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n\n    &lt;TextBlock Text=\"Recipes\"\n               Grid.Row=\"0\"\n               Style=\"{StaticResource TitleLargeTextBlockStyle}\" /&gt;\n\n    &lt;controls:AdaptiveGridView Grid.Row=\"1\"\n                               DesiredWidth=\"180\"\n                               IsItemClickEnabled=\"True\"\n                               ItemHeight=\"160\"\n                               ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                               SelectionMode=\"None\"\n                               StretchContentForSingleRow=\"False\"&gt;\n        &lt;GridView.ItemTemplate&gt;\n            &lt;DataTemplate x:DataType=\"models:RecipeHeader\"&gt;\n                &lt;Grid MaxWidth=\"300\"&gt;\n                    &lt;Image Source=\"{x:Bind BackgroundImage}\" /&gt;\n                    &lt;Border Height=\"40\"\n                            Padding=\"10,0,0,0\"\n                            VerticalAlignment=\"Bottom\"\n                            Background=\"#88000000\"&gt;\n                        &lt;TextBlock VerticalAlignment=\"Center\"\n                                   Foreground=\"White\"\n                                   Text=\"{x:Bind Title}\" /&gt;\n                    &lt;/Border&gt;\n                &lt;/Grid&gt;\n            &lt;/DataTemplate&gt;\n        &lt;/GridView.ItemTemplate&gt;\n        &lt;GridView.GroupStyle&gt;\n            &lt;GroupStyle&gt;\n                &lt;GroupStyle.HeaderTemplate&gt;\n                    &lt;DataTemplate x:DataType=\"models:RecipeGroup\"&gt;\n                        &lt;TextBlock Margin=\"0\"\n                                   Style=\"{ThemeResource TitleTextBlockStyle}\"\n                                   Text=\"{x:Bind Title}\" /&gt;\n                    &lt;/DataTemplate&gt;\n                &lt;/GroupStyle.HeaderTemplate&gt;\n            &lt;/GroupStyle&gt;\n        &lt;/GridView.GroupStyle&gt;\n    &lt;/controls:AdaptiveGridView&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Vegy\u00fck fel a k\u00f6vetkez\u0151 n\u00e9vteret (ebben vannak a modell oszt\u00e1lyaink):</p> <pre><code>`xmlns:models=\"using:MvvmLab.Core.Models\"`\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st! Gy\u0151z\u0151dj\u00fcnk meg r\u00f3la, hogy a recept csoportok megjelennek a f\u0151oldalon.</p>"},{"location":"labor/old-5-mvvm/#2-feladat-recept-reszletes-oldal","title":"2. Feladat - Recept r\u00e9szletes oldal","text":"<p>A receptek r\u00e9szletes oldal\u00e1nak elk\u00e9sz\u00edt\u00e9se a k\u00f6vetkez\u0151 l\u00e9p\u00e9sekb\u0151l fog \u00e1llni:</p> <ol> <li>Kieg\u00e9sz\u00edtj\u00fck az <code>IRecipeService</code> interf\u00e9szt egy <code>GetRecipeAsync</code> met\u00f3dussal, \u00e9s l\u00e9trehozzuk a sz\u00fcks\u00e9ges oszt\u00e1lyokat</li> <li>L\u00e9trehozzuk a <code>RecipeDetailPageViewModel</code> ViewModel-t, amiben lek\u00e9rdezz\u00fck a recept adatait a <code>RecipeDetailPageViewModel</code>-ben az <code>IRecipeService</code>-en kereszt\u00fcl (a VM az azonos\u00edt\u00f3t kapja meg a navig\u00e1ci\u00f3 sor\u00e1n)</li> <li>L\u00e9trehozzuk a <code>RecipeDetailPage</code> n\u00e9zetet, \u00e9p\u00edtve a ViewModel adataira</li> <li>Regisztr\u00e1ljuk a ViewModel-t \u00e9s a n\u00e9zetet a Dependency Injection konfigur\u00e1ci\u00f3hoz \u00e9s a navig\u00e1ci\u00f3hoz</li> <li>\u00c1tnavig\u00e1lunk a <code>RecipeDetailPage</code>-re a <code>MainPageViewModel</code>-b\u0151l a receptre t\u00f6rt\u00e9n\u0151 kattint\u00e1sra az <code>INavigationService</code> seg\u00edts\u00e9g\u00e9vel, \u00e9s \u00e1tadjuk a kiv\u00e1lasztott recept azonos\u00edt\u00f3j\u00e1t a r\u00e9szletes oldalnak</li> </ol>"},{"location":"labor/old-5-mvvm/#21-recept-lekerdezese","title":"2.1 Recept lek\u00e9rdez\u00e9se","text":"<p>Hozzuk l\u00e9tre a  <code>Recipe</code> oszt\u00e1lyt a <code>MvvmLab.Core.Model</code> n\u00e9vt\u00e9rbe, \u00e9s gener\u00e1ljuk le a tartalm\u00e1t a <code>/api/recipes/{id}</code> v\u00e9gpont \u00e1ltal visszaadott p\u00e9lda JSON adatokb\u00f3l, a fent megismert m\u00f3dszerrel (Paste special).</p> <pre><code>public class Recipe\n{\n    public int Id { get; set; }\n    public string BackgroundImage { get; set; }\n    public string Title { get; set; }\n    public string[] ExtraImages { get; set; }\n    public string[] Ingredients { get; set; }\n    public string Directions { get; set; }\n    public Comment[] Comments { get; set; }\n}\n\npublic class Comment\n{\n    public string Name { get; set; }\n    public string Text { get; set; }\n}\n</code></pre> <p>Warning</p> <p>A \"Paste Special\" sor\u00e1n fontos, hogy olyan receptet tegy\u00fcnk el\u0151tte a v\u00e1g\u00f3lapra, melyhez tartozik megjegyz\u00e9s (k\u00fcl\u00f6nben a <code>Comment</code> oszt\u00e1ly nem fog legener\u00e1l\u00f3dni, illetve a <code>Recipe</code> oszt\u00e1lyban a <code>Comments</code> t\u00edpus\u00e1nak <code>object[]</code> t\u00edpus gener\u00e1l\u00f3dik). \u00c9rdemes ehhez a swagger le\u00edr\u00e1s \"Example value\" mez\u0151j\u00e9b\u0151l a v\u00e1g\u00f3lapra m\u00e1solni a mint\u00e1t!</p> <p>A <code>IRecipeService</code> interf\u00e9szt \u00e9s implement\u00e1ci\u00f3j\u00e1t eg\u00e9sz\u00edts\u00fck ki egy <code>GetRecipeAsync</code> met\u00f3dussal, mely egy receptet ad vissza az azonos\u00edt\u00f3ja alapj\u00e1n.</p> IRecipeService<pre><code>public Task&lt;Recipe&gt; GetRecipeAsync(int id);\n</code></pre> RecipeService<pre><code>public async Task&lt;Recipe&gt; GetRecipeAsync(int id)\n{\n    using var client = new HttpClient();\n    return await client.GetFromJsonAsync&lt;Recipe&gt;($\"{_baseUrl}/Recipes/{id}\");\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/#22-recept-reszletes-viewmodel","title":"2.2 Recept r\u00e9szletes ViewModel","text":"<p>A ViewModel k\u00e9sz\u00edt\u00e9se a f\u0151oldalhoz k\u00e9pest m\u00e1r ujjgyakorlat (alapvet\u0151en annak mint\u00e1j\u00e1ra lehet dolgozni). Hozzuk l\u00e9tre a <code>RecipeDetailPageViewModel</code> oszt\u00e1lyt az <code>MvvmLab.ViewModels</code> mapp\u00e1ban.</p> <p>A ViewModel-nek sz\u00fcks\u00e9ge lesz egy <code>IRecipeService</code> interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyra, amelyen kereszt\u00fcl le tudja k\u00e9rdezni a receptet. A <code>RecipeDetailPageViewModel</code> konstruktor\u00e1ban DI seg\u00edts\u00e9g\u00e9vel szerezz\u00fck be a sz\u00fcks\u00e9ges f\u00fcgg\u0151s\u00e9get.</p> <pre><code>private readonly IRecipeService _recipeService;\n\npublic RecipeDetailPageViewModel(IRecipeService recipeService)\n{\n    _recipeService = recipeService;\n}\n</code></pre> <p>A <code>RecipeDetailPageViewModel</code>-ben hozzunk l\u00e9tre egy <code>_recipe</code> nev\u0171 <code>Recipe</code> t\u00edpus\u00fa v\u00e1ltoz\u00f3t, amelyben t\u00e1rolni fogjuk a receptet. A v\u00e1ltoz\u00f3t attribut\u00e1ljuk fel a <code>ObservableProperty</code> attrib\u00fatummal, mely alapj\u00e1n az MVVM Toolkit automatikusan gener\u00e1lni fogja a <code>Recipe</code> nev\u0171 property-t az oszt\u00e1ly m\u00e1sik gener\u00e1lt partial fel\u00e9ben. Ehhez sz\u00fcks\u00e9ges, hogy az oszt\u00e1ly az <code>ObservableObject</code> oszt\u00e1lyb\u00f3l sz\u00e1rmazzon, publikus legyen \u00e9s a <code>partial</code> kulcssz\u00f3val legyen ell\u00e1tva.</p> <pre><code>public partial class RecipeDetailPageViewModel : ObservableObject\n{\n    // ...\n\n    [ObservableProperty]\n    private Recipe _recipe = new();\n</code></pre> <p>Implement\u00e1ljuk a <code>RecipeDetailPageViewModel</code>-ben az el\u0151k\u00e9sz\u00edtett <code>INavigationAware</code> interf\u00e9szt. Arra k\u00e9sz\u00fcl\u00fcnk, hogy a navig\u00e1ci\u00f3s param\u00e9terk\u00e9nt a megjelen\u00edteni k\u00edv\u00e1nt recept azonos\u00edt\u00f3j\u00e1t fogjuk megkapni. A <code>OnNavigatedTo</code> met\u00f3dusban k\u00e9rdezz\u00fck le a receptet a <code>RecipeService</code>-en kereszt\u00fcl, majd t\u00e1roljuk el a <code>Recipe</code> tulajdons\u00e1gban.</p> <pre><code>public partial class RecipeDetailPageViewModel : ObservableObject, INavigationAware\n{\n    // ...\n\n    public async void OnNavigatedTo(object parameter)\n    {\n        Recipe = await _recipeService.GetRecipeAsync((int)parameter);\n    }\n\n    public void OnNavigatedFrom()\n    {\n    }\n}\n</code></pre> <p>Note</p> <p>A <code>OnNavigatedTo</code> m\u0171velet fejl\u00e9c\u00e9ben haszn\u00e1lni kellett az <code>async</code> kulcssz\u00f3t, mert haszn\u00e1ltuk az <code>await</code>-et a t\u00f6rzs\u00e9ben.</p>"},{"location":"labor/old-5-mvvm/#23-recept-reszletes-oldal-navigacio","title":"2.3 Recept r\u00e9szletes oldal, navig\u00e1ci\u00f3","text":"<p>Hozzunk l\u00e9tre egy \u00faj oldalt <code>RecipeDetailPage</code> n\u00e9ven a <code>Views</code> mapp\u00e1ba (Views mapp\u00e1n jobb gomb / Add New Item / Blank Page (WinUI 3)), amelyen megjelen\u00edtj\u00fck a receptet. Els\u0151 k\u00f6rben csak a recept c\u00edm\u00e9t jelen\u00edts\u00fck meg egy <code>TextBlock</code>-ban.</p> <pre><code>&lt;Grid x:Name=\"ContentArea\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"48\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\"\n               Style=\"{StaticResource PageTitleStyle}\"\n               Text=\"{x:Bind ViewModel.Recipe.Title, Mode=OneWay}\" /&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Az adatk\u00f6t\u00e9shez vegy\u00fck fel a <code>RecipeDetailPage.xaml.cs</code>-ben a <code>ViewModel</code> property-t a f\u0151oldal mint\u00e1j\u00e1ra.</p> <pre><code>public RecipeDetailPageViewModel ViewModel =&gt; (RecipeDetailPageViewModel)DataContext;\n</code></pre> <p>Ford\u00edt\u00e1si hib\u00e1k</p> <p>Ha valami\u00e9rt egzotikus hib\u00e1kat kapn\u00e1nk az \u00faj oldal felv\u00e9tele ut\u00e1n t\u00f6r\u00f6lj\u00fck ki a projekt f\u00e1jlb\u00f3l az al\u00e1bbi sorokat:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;None Remove=\"Views\\RecipeDetailPage.xaml\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <pre><code>&lt;Page Update=\"Views\\RecipeDetailPage.xaml\"&gt;\n    &lt;Generator&gt;MSBuild:Compile&lt;/Generator&gt;\n&lt;/Page&gt;\n</code></pre> <p>A navig\u00e1ci\u00f3 t\u00e1mogat\u00e1s\u00e1hoz a <code>Services</code> mapp\u00e1ban l\u00e9v\u0151 <code>PageService</code>-ben regisztr\u00e1ljuk be a <code>RecipeDetailPage</code>-et az al\u00e1bbi 3 l\u00e9p\u00e9sben:</p> <ol> <li> <p>Vegy\u00fck fel a n\u00e9zet kulcs\u00e1t a <code>Pages</code> oszt\u00e1lyba.</p> <pre><code>public static class Pages\n{\n    public static string Main { get; } = \"Main\";\n    public static string Detail { get; } = \"Detail\";\n}\n</code></pre> </li> <li> <p>Regisztr\u00e1ljuk a n\u00e9zetet \u00e9s ViewModel kapcsolatot a <code>PageService</code>-ben.</p> <pre><code>public PageService()\n{\n    Configure&lt;MainPageViewModel, MainPage&gt;(Pages.Main);\n    Configure&lt;RecipeDetailPageViewModel, RecipeDetailPage&gt;(Pages.Detail);\n}\n</code></pre> </li> <li> <p>Az <code>App.xaml.cs</code> f\u00e1jlban a <code>ConfigureServices</code> met\u00f3dusban regisztr\u00e1ljuk be a ViewModel-t \u00e9s a n\u00e9zetet a Dependency Injection kont\u00e9nerbe.</p> <pre><code>services.AddTransient&lt;RecipeDetailPage&gt;();\nservices.AddTransient&lt;RecipeDetailPageViewModel&gt;();\n</code></pre> </li> </ol> <p>Ezekre az\u00e9rt van sz\u00fcks\u00e9g, mert a projekt sablonban l\u00e9v\u0151 <code>INavigationService</code> alapvet\u0151en egy kulccsal azonos\u00edtja a n\u00e9zeteket, annak \u00e9rdek\u00e9ben, hogy a ViewModel-ben ne legyen sz\u00fcks\u00e9g a n\u00e9zet t\u00edpus\u00e1nak ismeret\u00e9re. A kulcs alapj\u00e1n pedig ki tudja keresni, hogy pontosan melyik Viewt kell megjelen\u00edteni, \u00e9s melyik ViewModel-t kell p\u00e9ld\u00e1nyos\u00edtani a n\u00e9zet <code>DataContext</code>-j\u00e9be a DI kont\u00e9nerb\u0151l.</p> <p>A <code>MainPageViewModel</code>-ben injekt\u00e1ljuk be az <code>INavigationService</code>-t, amelyen kereszt\u00fcl navig\u00e1lni fogunk a <code>RecipeDetailPage</code>-re.</p> <pre><code>private readonly INavigationService _navigationService;\n\npublic MainPageViewModel(IRecipeService recipeService, INavigationService navigationService)\n{\n    _recipeService = recipeService;\n    _navigationService = navigationService;\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/#command","title":"Command","text":"<p>Eddig az MVVM minta egyik oldal\u00e1val foglalkoztunk: hogyan \u00e9ri el adatk\u00f6t\u00e9ssel \u00e9s jelen\u00edti meg a View a ViewModel-ben lev\u0151 adatokat. Ugyanakkor, a View \u00e9s ViewModel k\u00f6z\u00f6tt \u00e1ltal\u00e1ban van egy m\u00e1sik kapcsolat is: ez arr\u00f3l sz\u00f3l, hogy a View esem\u00e9nyei (pl. kattint\u00e1s) hogyan hatnak vissza a ViewModel-re. Most ezzel fogunk foglalkozni.</p> <p>Eset\u00fcnkben pl. meg kell oldani, hogy a f\u0151oldali n\u00e9zeten egy Recepten t\u00f6rt\u00e9n\u0151 kattint\u00e1s eljusson a <code>MainPageViewModel</code>-hez, \u00e9s az ennek hat\u00e1s\u00e1ra \u00e1tnavig\u00e1ljon az adott recept r\u00e9szletes n\u00e9zet\u00e9re.</p> <p>A ViewModel a v\u00e9grehajthat\u00f3 m\u0171veleteket az MVVM mint\u00e1ban tipikusan <code>ICommand</code> interf\u00e9szt megval\u00f3s\u00edt\u00f3 objektumokon kereszt\u00fcl publik\u00e1lja (amelyek a konkr\u00e9t m\u0171velet v\u00e9grehajt\u00e1s\u00e1n t\u00fal kezelhetik a m\u0171velet v\u00e9grehajt\u00e1s\u00e1nak felt\u00e9teleit is).</p> <p>A <code>MainPageViewModel</code>-ben k\u00e9sz\u00edts\u00fcnk egy Commandot, mely a receptre kattintva fog lefutni. A Command param\u00e9terk\u00e9nt megkapja a kiv\u00e1lasztott recept fejl\u00e9cet, \u00e9s \u00e1tnavig\u00e1l a <code>RecipeDetailPage</code>-re, ahol \u00e1tad\u00e1sra ker\u00fcl a kiv\u00e1lasztott recept azonos\u00edt\u00f3ja.</p> <p>Most l\u00e9tre kellene hozzunk egy \u00fagy, <code>ICommand</code> interf\u00e9szt implement\u00e1l\u00f3 oszt\u00e1lyt, majd ebb\u0151l fel kellene vegy\u00fcnk egy p\u00e9ld\u00e1nyt (tulajdons\u00e1got) a ViewModel-be. Ezt a k\u00e9t l\u00e9p\u00e9st az MVVM toolkit leegyszer\u0171s\u00edti, csak egy <code>[RelayCommand]</code> attrib\u00fatummal ell\u00e1tott f\u00fcggv\u00e9nyt kell felvegy\u00fcnk a ViewModelbe:</p> <pre><code>[RelayCommand]\nprivate void RecipeSelected(RecipeHeader recipe)\n{\n    _navigationService.NavigateTo(Pages.Detail, recipe.Id);\n}\n</code></pre> <p>Ennek hat\u00e1s\u00e1ra a compiler legener\u00e1lja a command oszt\u00e1lyt \u00e9s a tulajdons\u00e1got a ViewModel-be <code>RecipeSelectedCommand</code> n\u00e9ven.</p> <p> A parancs \u00e9s a ViewModel el\u0151 van k\u00e9sz\u00edtve, de a View m\u00e9g semmit nem tud a parancsr\u00f3l. A ViewModel-ben lev\u0151 commandunkat a szok\u00e1sos technik\u00e1kkal r\u00e1 kell k\u00f6ss\u00fck a View megfelel\u0151 esem\u00e9ny\u00e9re. MVVM eset\u00e9n mindig \u00edgy haszn\u00e1ljuk a Command mint\u00e1t! A megk\u00f6zel\u00edt\u00e9s sz\u00e9ps\u00e9ge az, hogy ez teljesen a szok\u00e1sos, View-&gt;ViewModel ir\u00e1ny\u00fa adatk\u00f6t\u00e9ssel t\u00f6rt\u00e9nik (amit m\u00e1r eddig is t\u00f6bbsz\u00f6r haszn\u00e1ltunk).</p> <p>Ennek megfelel\u0151en a <code>MainPage</code>-en k\u00f6ss\u00fck a <code>AdaptiveGridView</code> <code>ItemClickCommand</code> tulajdons\u00e1g\u00e1t a <code>RecipeSelectedCommand</code>-ra.</p> <pre><code>ItemClickCommand=\"{x:Bind ViewModel.RecipeSelectedCommand}\"\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st! Gy\u0151z\u0151dj\u00fcnk meg r\u00f3la, hogy a receptekre kattintva megjelenik a recept r\u00e9szletes oldala.</p> Kitekint\u00e9s: Ha nincs a haszn\u00e1lni k\u00edv\u00e1nt esem\u00e9nyre Command? <p>Ha a vez\u00e9rl\u0151 bizonyos esem\u00e9nyekre biztos\u00edt Commandot, akkor viszonylag egyszer\u0171 dolgunk van, amire fentebb l\u00e1thattunk egy p\u00e9ld\u00e1t. Azonban, ha a vez\u00e9rl\u0151 nem biztos\u00edt Commandot (pl.: a be\u00e9p\u00edtett <code>GridView.ItemClicked</code>), akkor t\u00f6bb lehet\u0151s\u00e9g\u00fcnk is van:</p> <ol> <li> <p>Code-Behind \"ragaszt\u00f3 k\u00f3d\": A vez\u00e9rl\u0151 esem\u00e9ny\u00e9t kezelj\u00fck le, \u00e9s a code-behindban (xaml.cs) ViewModel-ben h\u00edvjuk meg a megfelel\u0151 met\u00f3dust/commadot.</p> <pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"\n                            ItemClick=\"GridView_ItemClick\"&gt;\n</code></pre> <pre><code>private void GridView_ItemClick(object sender, ItemClickEventArgs e)\n{\n    ViewModel.RecipeSelectedCommand.Execute((RecipeHeader)e.ClickedItem);\n}\n</code></pre> </li> <li> <p>x:Bind esem\u00e9ny k\u00f6t\u00e9s: haszn\u00e1ljuk az <code>x:Bind</code> met\u00f3dus k\u00f6t\u00e9si lehet\u0151s\u00e9g\u00e9t, amelynek seg\u00edts\u00e9g\u00e9vel a vez\u00e9rl\u0151 esem\u00e9ny\u00e9t tudjuk k\u00f6tni a ViewModel-ben l\u00e9v\u0151 met\u00f3dusra.    A met\u00f3dusnak viszont ilyenkor vagy param\u00e9ter n\u00e9lk\u00fclinek kell lennie, vagy olyan param\u00e9tereket kell fogadnia, amely az esem\u00e9ny szignat\u00far\u00e1j\u00e1ra illeszkedik.</p> View - MainPage.xaml<pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"\n                            ItemClick=\"{x:Bind ViewModel.RecipeSelected\"&gt;\n&lt;/controls:AdaptiveGridView&gt;\n</code></pre> ViewModel - MainPageViewModel<pre><code>public void RecipeSelected(object sender, ItemClickEventArgs e)\n{\n   ...\n}\n</code></pre> <p>Ennek a m\u00f3dszernek a h\u00e1tr\u00e1nya, hogy a esem\u00e9ny param\u00e9tereivel a ViewModel-be a n\u00e9zet keretrendszer f\u00fcgg\u0151s\u00e9geit is beviszi (esem\u00e9nykezel\u0151 param\u00e9ter t\u00edpusok), pedig az alap gondolatunk az volt, hogy a ViewModel f\u00fcggetlen legyen a n\u00e9zett\u0151l. Term\u00e9szetesen ez a m\u00f3dszer is j\u00f3l tud m\u0171k\u00f6dni, ha r\u00e9szben feladjuk az MVVM minta szigor\u00fa betart\u00e1s\u00e1t.</p> </li> <li> <p>A Behavior-\u00f6k seg\u00edts\u00e9g\u00e9vel, azon bel\u00fcl is az <code>EventTriggerBehavior</code> \u00e9s <code>InvokeCommandAction</code> oszt\u00e1lyokkal tudunk Commandot k\u00f6tni tetsz\u0151leges vez\u00e9rl\u0151 esem\u00e9nyre.</p> <pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"&gt;\n    &lt;i:Interaction.Behaviors&gt;\n        &lt;c:EventTriggerBehavior EventName=\"ItemClick\"&gt;\n            &lt;c:InvokeCommandAction Command=\"{x:Bind ViewModel.RecipeSelectedCommand}\" \n                                   InputConverter=\"{StaticResource ItemClickedInputConverter}\" /&gt;\n        &lt;/c:EventTriggerBehavior&gt;\n    &lt;/i:Interaction.Behaviors&gt;\n</code></pre> <p>Ezzel szinte teljesen deklarat\u00edvv\u00e1 tudjuk tenni hagyni a n\u00e9zetet, de m\u00e9g \u00edgy is k\u00e9sz\u00edten\u00fcnk kell egy <code>ItemClickedInputConverter</code> oszt\u00e1lyt, amely az esem\u00e9ny param\u00e9tereit \u00e1talak\u00edtja a megfelel\u0151 t\u00edpusra az <code>IValueConverter</code> interf\u00e9sz seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>public class ItemClickedInputConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        return (RecipeHeader)((value as ItemClickEventArgs)?.ClickedItem);\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre> <p>A behavior-\u00f6k egy\u00e9bk\u00e9nt egy teljesen \u00e1ltal\u00e1nos mechanizmus a XAML vil\u00e1gban, amelyek seg\u00edts\u00e9g\u00e9vel a n\u00e9zetekhez tudunk \u00fajrafelhaszn\u00e1lhat\u00f3 viselked\u00e9st hozz\u00e1adni (b\u0151vebben itt).</p> </li> </ol>"},{"location":"labor/old-5-mvvm/#24-recept-reszletes-nezet","title":"2.4 Recept r\u00e9szletes n\u00e9zet","text":"<p>A recept r\u00e9szletes adatainak megjelen\u00edt\u00e9s\u00e9hez egy <code>Grid</code>-et haszn\u00e1ljunk, amelynek k\u00e9t oszlopa van. Az els\u0151 oszlopban egy <code>ScrollViewer</code>-t helyezz\u00fcnk el, amelybe egy <code>StackPanel</code> ker\u00fcl. A <code>StackPanel</code>-ben helyezz\u00fcnk el egy <code>FlipView</code>-t, amelyben a recept k\u00e9peit fogjuk megjelen\u00edteni. A <code>FlipView</code> egy listak\u00e9nt m\u0171k\u00f6dik, de az elemeit egy lapozhat\u00f3 fel\u00fcleten jelen\u00edti meg.</p> <p>A <code>FlipView</code> alatt lesz tal\u00e1lhat\u00f3 el egy <code>ItemsControl</code> (egyszer\u0171 lista, mely nem t\u00e1mogat g\u00f6rget\u00e9st, kiv\u00e1laszt\u00e1st, kattint\u00e1st stb.), amelyben a recept hozz\u00e1val\u00f3it fogjuk megjelen\u00edteni.</p> <p>Ez al\u00e1 ker\u00fcl egy <code>TextBlock</code>, amelybe a recept elk\u00e9sz\u00edt\u00e9s\u00e9nek l\u00e9p\u00e9sei ker\u00fclnek.</p> <p>A m\u00e1sodik oszlopba helyezz\u00fcnk el egy <code>Grid</code>-et, amelybe kommentek list\u00e1ja \u00e9s beviteli mez\u0151i fognak ker\u00fclni.</p> <p>Az al\u00e1bbi k\u00f3dot a labor sor\u00e1n nyugodtan m\u00e1solhatjuk a <code>RecipeDetailPage.xaml</code> f\u00e1jlba, \u00fajdons\u00e1g ebben a k\u00f3dban nincs az eddigiekhez k\u00e9pest.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;Page x:Class=\"MvvmLab.Views.RecipeDetailPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:local=\"using:MvvmLab.Views\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      xmlns:models=\"using:MvvmLab.Core.Models\"\n      Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\"\n      mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid x:Name=\"ContentArea\"&gt;\n        &lt;Grid.RowDefinitions&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"*\" /&gt;\n        &lt;/Grid.RowDefinitions&gt;\n\n        &lt;TextBlock Grid.Row=\"0\" Padding=\"10\"\n                   Style=\"{StaticResource TitleTextBlockStyle}\"\n                   Text=\"{x:Bind ViewModel.Recipe.Title, Mode=OneWay}\" /&gt;\n\n        &lt;Grid Grid.Row=\"1\"&gt;\n            &lt;Grid.ColumnDefinitions&gt;\n                &lt;ColumnDefinition Width=\"3*\" /&gt;\n                &lt;ColumnDefinition Width=\"*\" /&gt;\n            &lt;/Grid.ColumnDefinitions&gt;\n\n            &lt;ScrollViewer Grid.Column=\"0\" Padding=\"20 10 0 20\"&gt;\n                &lt;StackPanel Orientation=\"Vertical\"&gt;\n                    &lt;StackPanel x:Name=\"images\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Images\" /&gt;\n                        &lt;FlipView x:Name=\"flipView\"\n                                  MaxHeight=\"250\"\n                                  VerticalAlignment=\"Top\"\n                                  ItemsSource=\"{x:Bind ViewModel.Recipe.ExtraImages, Mode=OneWay}\"&gt;\n                            &lt;FlipView.ItemTemplate&gt;\n                                &lt;DataTemplate&gt;\n                                    &lt;Image Source=\"{Binding}\" Stretch=\"Uniform\" /&gt;\n                                &lt;/DataTemplate&gt;\n                            &lt;/FlipView.ItemTemplate&gt;\n                        &lt;/FlipView&gt;\n                    &lt;/StackPanel&gt;\n\n                    &lt;StackPanel x:Name=\"ingredients\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Ingredients\" /&gt;\n                        &lt;ItemsControl HorizontalAlignment=\"Left\" ItemsSource=\"{x:Bind ViewModel.Recipe.Ingredients, Mode=OneWay}\"&gt;\n                            &lt;ItemsControl.ItemTemplate&gt;\n                                &lt;DataTemplate&gt;\n                                    &lt;TextBlock Margin=\"0,0,0,10\"\n                                               Text=\"{Binding}\"\n                                               TextWrapping=\"Wrap\" /&gt;\n                                &lt;/DataTemplate&gt;\n                            &lt;/ItemsControl.ItemTemplate&gt;\n                        &lt;/ItemsControl&gt;\n                    &lt;/StackPanel&gt;\n\n                    &lt;StackPanel x:Name=\"directions\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"\n                                RelativePanel.RightOf=\"ingredients\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Directions\" /&gt;\n                        &lt;TextBlock HorizontalAlignment=\"Left\"\n                                   Text=\"{x:Bind ViewModel.Recipe.Directions, Mode=OneWay}\"\n                                   TextWrapping=\"Wrap\" /&gt;\n                    &lt;/StackPanel&gt;\n                &lt;/StackPanel&gt;\n            &lt;/ScrollViewer&gt;\n\n            &lt;Grid Grid.Column=\"1\" RowSpacing=\"12\"&gt;\n                &lt;Grid.RowDefinitions&gt;\n                    &lt;RowDefinition Height=\"Auto\" /&gt;\n                    &lt;RowDefinition Height=\"*\" /&gt;\n                    &lt;RowDefinition Height=\"Auto\" /&gt;\n                &lt;/Grid.RowDefinitions&gt;\n\n                &lt;TextBlock Grid.Row=\"0\"\n                           Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                           Text=\"Comments\" /&gt;\n\n                &lt;ListView Grid.Row=\"1\" ItemsSource=\"{x:Bind ViewModel.Recipe.Comments, Mode=OneWay}\"&gt;\n                    &lt;ListView.ItemTemplate&gt;\n                        &lt;DataTemplate x:DataType=\"models:Comment\"&gt;\n                            &lt;StackPanel Orientation=\"Vertical\" Padding=\"0 5 0 5\"&gt;\n                                &lt;TextBlock FontWeight=\"Bold\" Text=\"{x:Bind Name}\" /&gt;\n                                &lt;TextBlock Text=\"{x:Bind Text}\" /&gt;\n                            &lt;/StackPanel&gt;\n                        &lt;/DataTemplate&gt;\n                    &lt;/ListView.ItemTemplate&gt;\n                &lt;/ListView&gt;\n\n                &lt;StackPanel x:Name=\"comments\"\n                            Grid.Row=\"2\"\n                            Margin=\"24,0,24,0\"\n                            Orientation=\"Vertical\"&gt;\n                    &lt;!-- TODO input fields for comments --&gt;\n                &lt;/StackPanel&gt;\n            &lt;/Grid&gt;\n        &lt;/Grid&gt;\n    &lt;/Grid&gt;\n&lt;/Page&gt;\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1st!</p>"},{"location":"labor/old-5-mvvm/#3-feladat-kommentek-hozzaadasa","title":"3. Feladat - Kommentek hozz\u00e1ad\u00e1sa","text":"<p>Ha j\u00f3l \u00e1llunk id\u0151vel, k\u00e9sz\u00edts\u00fcnk funkci\u00f3t a kommentek hozz\u00e1ad\u00e1s\u00e1hoz a recept r\u00e9szletes oldal\u00e1n.</p>"},{"location":"labor/old-5-mvvm/#webszolgaltatas","title":"Webszolg\u00e1ltat\u00e1s","text":"<p>Az <code>IRecipeService</code> interf\u00e9szt \u00e9s implement\u00e1ci\u00f3t eg\u00e9sz\u00edts\u00fck ki egy <code>SendCommentAsync</code> met\u00f3dussal, mely egy kommentet k\u00fcld a szervernek a <code>POST /Recipes/{recipeId}/Comments</code> v\u00e9gpontra.</p> IRecipeService<pre><code>public Task SendCommentAsync(int recipeId, Comment comment);\n</code></pre> RecipeService<pre><code>public async Task SendCommentAsync(int recipeId, Comment comment)\n{\n    using var client = new HttpClient();\n    await client.PostAsJsonAsync($\"{_baseUrl}/Recipes/{recipeId}/Comments\", comment);\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/#viewmodel","title":"ViewModel","text":"<p>A <code>RecipeDetailPageViewModel</code>-ben hozzunk l\u00e9tre egy <code>NewCommentText</code> nev\u0171 <code>string</code> t\u00edpus\u00fa tulajdons\u00e1got \u00e9s egy <code>NewCommentName</code> <code>string</code> tulajdons\u00e1got, melyekben t\u00e1rolni fogjuk a felhaszn\u00e1l\u00f3 \u00e1ltal megadott komment adatait. Haszn\u00e1ljuk az <code>ObservableProperty</code> attrib\u00fatumot!</p> <pre><code>[ObservableProperty]\nprivate string _newCommentName = string.Empty;\n\n[ObservableProperty]\nprivate string _newCommentText = string.Empty;\n</code></pre> <p>A <code>RecipeDetailPageViewModel</code>-ben hozzunk l\u00e9tre egy <code>SendComment</code> nev\u0171 f\u00fcggv\u00e9nyt, amelyen kereszt\u00fcl a felhaszn\u00e1l\u00f3 \u00e1ltal megadott kommentet tudjuk elk\u00fcldeni a szervernek. A f\u00fcggv\u00e9nyb\u0151l gener\u00e1ltassunk egy Commandot az MVVM Toolkit seg\u00edts\u00e9g\u00e9vel (<code>[RelayCommand]</code>).</p> <p>Az implement\u00e1ci\u00f3 egyszer\u0171: elk\u00fcldj\u00fck a kommentet a szervernek, majd friss\u00edtj\u00fck a receptet.</p> <pre><code>[RelayCommand]\nprivate async Task SendComment()\n{\n    await _recipeService.SendCommentAsync(Recipe.Id, new Comment\n    {\n        Name = NewCommentName,\n        Text = NewCommentText\n    });\n\n    NewCommentName = string.Empty;\n    NewCommentText = string.Empty;\n\n    Recipe = await _recipeService.GetRecipeAsync(Recipe.Id);\n}\n</code></pre> <p>A n\u00e9zeten a k\u00f6vetkez\u0151 elemeket helyezz\u00fck el a kommentek hozz\u00e1ad\u00e1s\u00e1hoz:</p> <pre><code>&lt;StackPanel x:Name=\"comments\"\n            Grid.Row=\"2\"\n            Margin=\"24,0,24,0\"\n            Orientation=\"Vertical\"&gt;\n    &lt;TextBox Margin=\"0,0,0,16\"\n             Header=\"Name\"\n             Text=\"{x:Bind ViewModel.NewCommentName, Mode=TwoWay}\" /&gt;\n    &lt;TextBox Margin=\"0,0,0,16\"\n             Header=\"Comment\"\n             Text=\"{x:Bind ViewModel.NewCommentText, Mode=TwoWay}\" /&gt;\n    &lt;Button Margin=\"0,0,0,16\"\n            HorizontalAlignment=\"Right\"\n            Command=\"{x:Bind ViewModel.SendCommentCommand}\"\n            Content=\"Send\" /&gt;\n&lt;/StackPanel&gt;\n</code></pre> <p>Vegy\u00fck \u00e9szre, hogy a <code>TextBox</code>-ok <code>Text</code> property-j\u00e9t k\u00e9tir\u00e1ny\u00fa k\u00f6t\u00e9ssel k\u00f6t\u00f6tt\u00fck a ViewModel-ben l\u00e9v\u0151 <code>NewCommentName</code> \u00e9s <code>NewCommentText</code> tulajdons\u00e1gokhoz, \u00e9s a gomb Command-j\u00e1t is a ViewModel-ben l\u00e9v\u0151 <code>SendCommentCommand</code> tulajdons\u00e1ghoz k\u00f6t\u00f6tt\u00fck.</p>"},{"location":"labor/old-5-mvvm/#kitekintes-commandok-vegrehajtasanak-feltetelei","title":"Kitekint\u00e9s: Commandok v\u00e9grehajt\u00e1s\u00e1nak felt\u00e9telei","text":"<p>A <code>SendCommentCommand</code> Command v\u00e9grehajt\u00e1s\u00e1nak felt\u00e9tele, hogy a <code>NewCommentName</code> \u00e9s a <code>NewCommentText</code> tulajdons\u00e1gok ne legyenek \u00fcresek. A Commandok lehet\u0151s\u00e9get adnak arra, hogy a v\u00e9grehajt\u00e1sukat felt\u00e9telekhez k\u00f6ss\u00fck, amelyeket a <code>CanExecute</code> met\u00f3dusban tudunk megadni. Eset\u00fcnkben egy <code>bool</code>-lal visszat\u00e9r\u0151 met\u00f3dus/property nevet kell megadnunk a Command gener\u00e1tor attrib\u00fatumnak.</p> RecipeDetailPageViewModel-ben:<pre><code>private bool CanExecuteSendComment =&gt; !string.IsNullOrEmpty(NewCommentName) &amp;&amp; !string.IsNullOrEmpty(NewCommentText);\n\n[RelayCommand(CanExecute = nameof(CanExecuteSendComment))]\nprivate async Task SendComment()\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki. Azt tapasztaljuk, hogy a gomb nem lesz enged\u00e9lyezve, viszont a <code>TextBox</code>-ok m\u00f3dos\u00edt\u00e1sa ut\u00e1n sem v\u00e1ltozik a gomb \u00e1llapota.</p> <p>A <code>CanExecute</code> met\u00f3dus akkor h\u00edv\u00f3dik meg (akkor h\u00edvj\u00e1k a vez\u00e9rl\u0151k), amikor a Command els\u00fcti a <code>CanExecuteChanged</code> esem\u00e9nyt. Eset\u00fcnkben ezt az esem\u00e9nyt a <code>NewCommentName</code> \u00e9s a <code>NewCommentText</code> tulajdons\u00e1gok <code>PropertyChanged</code> esem\u00e9ny\u00e9nek kiv\u00e1lt\u00e1sakor kell kiv\u00e1ltani. Erre az MVVM Toolkit egy k\u00fcl\u00f6n attrib\u00fatumot biztos\u00edt (<code>[NotifyCanExecuteChangedFor]</code>), amelyet a <code>NewCommentName</code> \u00e9s a <code>NewCommentText</code> tulajdons\u00e1gokra kell r\u00e1rakni.</p> <p>Teh\u00e1t, ha a <code>NewCommentName</code> vagy a <code>NewCommentText</code> tulajdons\u00e1g \u00e9rt\u00e9ke megv\u00e1ltozik, akkor a <code>SendCommentCommand</code> Command <code>CanExecuteChanged</code> esem\u00e9ny\u00e9t is kiv\u00e1ltjuk, ami miatt a <code>CanExecute</code> met\u00f3dus \u00fajra lefut, \u00e9s a gomb \u00e1llapota is friss\u00fcl.</p> <pre><code>[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(SendCommentCommand))]\nprivate string _newCommentName = string.Empty;\n\n[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(SendCommentCommand))]\nprivate string _newCommentText = string.Empty;\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki.</p> <p>M\u00e1r csak egy dolog van h\u00e1tra: jelenleg a <code>TextBox</code> \u00e1llapota csak akkor v\u00e1ltozik, ha a felhaszn\u00e1l\u00f3 elhagyja a <code>TextBox</code>-ot. Ezt a viselked\u00e9st az adatk\u00f6t\u00e9s <code>UpdateSourceTrigger</code> tulajdons\u00e1g\u00e1n kereszt\u00fcl tudjuk m\u00f3dos\u00edtani.</p> <pre><code>Text=\"{x:Bind ViewModel.NewCommentName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n\nText=\"{x:Bind ViewModel.NewCommentText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n</code></pre> <p>Pr\u00f3b\u00e1ljuk ki.</p>"},{"location":"labor/old-5-mvvm/index_ger/","title":"5. MVVM","text":""},{"location":"labor/old-5-mvvm/index_ger/#das-ziel-der-ubung","title":"Das Ziel der \u00dcbung","text":"<p>In dieser \u00dcbung werden wir eine Rezept-Browser-Anwendung unter Verwendung des MVVM-Entwurfsmusters erstellen.</p>"},{"location":"labor/old-5-mvvm/index_ger/#voraussetzungen","title":"Voraussetzungen","text":"<p>Die f\u00fcr die Durchf\u00fchrung des Labors ben\u00f6tigten Werkzeuge:</p> <ul> <li>Betriebssystem Windows 10 oder Windows 11 (Linux und macOS nicht geeignet)</li> <li>Visual Studio 2022<ul> <li>Windows Desktop Development Workload</li> </ul> </li> </ul>"},{"location":"labor/old-5-mvvm/index_ger/#ursprungliches-projekt","title":"Urspr\u00fcngliches Projekt","text":"<p>Klonen Sie das urspr\u00fcngliche Projekt mit dem folgenden Befehl:</p> <pre><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo\n</code></pre> Laden Sie die fertige L\u00f6sung herunter <p> Es ist wichtig, dass Sie sich w\u00e4hrend des Praktikums an die Anleitung halten. Es ist verboten (und sinnlos), die fertige L\u00f6sung herunterzuladen. Allerdings kann es bei der anschlie\u00dfenden Selbstein\u00fcbung n\u00fctzlich sein, die fertige L\u00f6sung zu \u00fcberpr\u00fcfen, daher stellen wir sie zur Verf\u00fcgung.</p> <p>Die L\u00f6sung ist [auf GitHub] (https://github.com/bmeviauab00/lab-mvvm-kiindulo) im <code>solve</code>-Zweig verf\u00fcgbar. Der einfachste Weg, es herunterzuladen, ist, den <code>git clone</code>-Zweig von der Kommandozeile aus zu klonen:</p> <p><code>git clone https://github.com/bmeviauab00/lab-mvvm-kiindulo -b solved</code></p>"},{"location":"labor/old-5-mvvm/index_ger/#uber-das-mvvm-muster","title":"\u00dcber das MVVM-Muster","text":"<p>Das MVVM (Model-View-ViewModel) ist ein Architekturentwurfsmuster, das bei der Entwicklung von XAML-Anwendungen eingesetzt werden kann, aber auch h\u00e4ufig in anderen clientseitigen Technologien verwendet wird. Das MVVM-Muster wurde entwickelt, um die Benutzeroberfl\u00e4che und die zugrunde liegende Logik zu entkoppeln und so eine lose gekoppelte Anwendung zu schaffen, die die Testbarkeit, Wartbarkeit und Wiederverwendbarkeit erh\u00f6ht.</p> <p>Das MVVM-Muster besteht aus drei (+1) Hauptteilen:</p> <ul> <li>Modell: Enth\u00e4lt das Gesch\u00e4ftsmodell/Dom\u00e4nenmodell der Anwendung, das ViewModels zum Speichern von Daten verwenden k\u00f6nnen.</li> <li>View (Ansicht): Sie enth\u00e4lt eine Beschreibung der Benutzeroberfl\u00e4che und der rein auf die Ansichten bezogenen Logik (z.B.: Behandlung von Animationen).</li> <li>ViewModel (Ansichtsmodell): Eine Abstraktion der Ansicht, die den Zustand der Ansicht und die Operationen enth\u00e4lt, die mit der Ansicht durchgef\u00fchrt werden k\u00f6nnen, unabh\u00e4ngig von der Ansicht. Die lose Kopplung zwischen dem ViewModel und dem View wird durch die Datenverbindung gew\u00e4hrleistet.</li> <li>Services (Dienstleistungen): Klassen, die die Gesch\u00e4ftslogik der Anwendung enthalten und von ViewModels verwendet werden. W\u00e4re die gesamte Gesch\u00e4ftslogik in ViewModels enthalten, w\u00e4ren diese zu komplex und undurchsichtig. Dies ist nicht Teil des MVVM-Musters, aber wir erw\u00e4hnen es hier, weil wir die Anwendungsarchitektur auf diese Weise nutzen werden.</li> </ul> <p>Neu:</p> <ul> <li>Modell: Erfasst dom\u00e4nenspezifische Daten, die ViewModels zum Speichern von Daten verwenden k\u00f6nnen. Z.B. die Klasse Recipe/Product/Order, die die Daten eines Rezepts/Produkts/Bestellung zusammenfasst.</li> <li>View (Ansicht): Sie enth\u00e4lt eine Beschreibung der Benutzeroberfl\u00e4che (und der rein auf die Ansichten bezogenen Logik, z. B. die Behandlung von Animationen). Typischerweise eine von Window, Page, UserControl abgeleitete Klasse, mit einer deklarativen Beschreibung in XAML, der Code-Behind ist oft leer (weil die Logik im ViewModel ist).</li> <li>ViewModel (Ansichtsmodell): Sie enth\u00e4lt die Logik f\u00fcr die Ansicht: Sie enth\u00e4lt den Zustand der Ansicht und die Operationen, die mit der Ansicht durchgef\u00fchrt werden k\u00f6nnen. Sie ist unabh\u00e4ngig von der Ansicht, wird eine lose Kopplung zwischen dem ViewModel und der Ansicht durch Datenverbindung erreicht (die Steuerelemente der Ansicht binden an die Eigenschaften des ViewModels). Einheitlich testbar (unit test)!</li> <li>Services (Dienstleistungen): Klassen, die die Gesch\u00e4fts-/Anwendungslogik enthalten und von ViewModels verwendet werden. W\u00e4re die gesamte Gesch\u00e4ftslogik in ViewModels enthalten, w\u00e4ren diese zu komplex und undurchsichtig. Dies ist nicht Teil des MVVM-Musters, aber wir erw\u00e4hnen es hier, weil wir auf diese Weise die Architektur der Anwendung aufbauen werden.</li> </ul> <p></p> <p> Wozu erstellen wir ViewModel-Klassen?</p> <ul> <li>Wir erstellen immer eine ViewModel-Klasse f\u00fcr jede Ansicht (z.B. Window, Page, Dialog, UserControl) und erzeugen daraus je ein Objekt f\u00fcr jede Ansicht.  Z.B. MainPage f\u00fcr MainPageViewModel, DancerDialog f\u00fcr DancerDialogViewModel. Wir wenden dies in der Praxis an.</li> <li>F\u00fcr jede Modellklasse (z.B. Recipe, Product, Dancer  usw.) k\u00f6nnen Sie optional Wrapper-ViewModel-Klassen erstellen (z.B. RecipeViewModel, ProductViewModel, DancerViewModel), aber wir werden sie in dieser \u00dcbung nicht erstellen. Das liegt daran, dass wir nicht dem Strict MVVM-Muster folgen, sondern dem Relaxed MVVM-Muster (siehe Vorlesung).</li> </ul>"},{"location":"labor/old-5-mvvm/index_ger/#aufgabe-0-projektstruktur","title":"Aufgabe 0. - Projektstruktur","text":"<p>Der Anwendungsrahmen ist bereits vorbereitet. Schauen wir uns die Projektstruktur an.</p> <p><code>MvvmLab</code> ist ein Projekt f\u00fcr eine ausf\u00fchrbare Anwendung, die das WinUI-Framework in seiner Anzeigeschicht mit der bereits erlernten XAML-Sprache verwendet. Das Projekt <code>MvvmLab.Core</code> (Klassenbibliothek) enth\u00e4lt die vollst\u00e4ndig ansichtsunabh\u00e4ngige Gesch\u00e4ftslogik.</p> <p>Was ist f\u00fcr uns in der Anfangsphase des Projekts wichtig?</p> <ul> <li><code>App.xaml.cs</code>: Ein Anwendungseintrittspunkt, der die in modernen .NET-Anwendungen verwendeten Muster Host Builder und Dependency Injection verwendet. Dies ist nicht das Thema dieses Semesters, aber die Injektion von Abh\u00e4ngigkeit wird im Labor behandelt werden.</li> <li><code>Views</code>-Ordner: Enth\u00e4lt Ansichten der Anwendung, derzeit <code>MainPage</code></li> <li><code>ViewModels</code>-Ordner: Enth\u00e4lt die ViewModels der Anwendung, derzeit <code>MainPageViewModel</code></li> <li><code>INagivationService</code> ( im Ordner <code>Services</code> ): Dienst f\u00fcr die Navigation zwischen Seiten</li> </ul> <p>MVVM und Boilerplate-Bibliotheken</p> <p>MVVM-Muster wird selten allein auf der Grundlage des .NET-Frameworks implementiert. Es lohnt sich, einige MVVM-Bibliotheken zu verwenden, die Ihren Code kompakter und \u00fcbersichtlicher machen und weniger Boilerplate-Code enthalten. Die am h\u00e4ufigsten verwendeten Bibliotheken sind:</p> <ul> <li>MVVM Toolkit: MVVM-Bibliothek, die von Microsoft gepflegt wird</li> <li>[Prism] (https://prismlibrary.com/): Fr\u00fcher wurde es von Microsoft gewartet und war sehr weit verbreitet, aber jetzt wird es von externen Entwicklern gewartet und ist mit der Zeit kostenpflichtig geworden.</li> <li>ReactiveUI: Es verwendet die Reactive Extensions (Rx)-Bibliotheken, um den Zustand des ViewModels zu verwalten und Daten zwischen der Ansicht und dem ViewModel zu binden. Diese Bibliothek bietet die meisten Dienste, ist aber auch am schwierigsten zu erlernen.</li> <li>Uno.Extensions: Es basiert auf dem MVVM-Toolkit, enth\u00e4lt aber auch mehrere Funktionen, die M\u00e4ngel im WinUI-Framework ausf\u00fcllen.</li> </ul> <p>W\u00e4hrend des Praktikums werden wir das MVVM-Toolkit von Microsoft verwenden.</p> <p>Das urspr\u00fcngliche Projekt wurde mit dem Visual Studio Add-on Windows Template Studio erstellt.</p>"},{"location":"labor/old-5-mvvm/index_ger/#aufgabe-1-rezepte-hauptseite","title":"Aufgabe 1. - Rezepte Hauptseite","text":"<p>Die L\u00f6sung werden wir \"von unten\" aufbauen, von den Daten ausgehend werden wir schrittweise zur Ansicht. Die Entwicklung von oben nach unten ist zwar in der Praxis oft n\u00fctzlicher, aber aufgrund der zeitlichen Beschr\u00e4nkungen im Labor ist die Entwicklung von unten nach oben schneller und einfacher, weil man die Daten so nicht mocken muss. Die folgende Abbildung gibt einen \u00dcberblick \u00fcber die wichtigsten Klassen, die mit der Hauptseite verbunden sind.</p> <p> MMVM-basierte Implementierung der Homepage <p>Schl\u00fcsselelemente:</p> <ul> <li><code>MainPage</code>: Diese Ansicht, ein Nachkomme der Seite, ist eine XAML-basierte Beschreibung der Benutzeroberfl\u00e4che.</li> <li><code>MainPageViewModel</code>: das ViewModel f\u00fcr die Hauptseite (<code>MainPage</code>). Es enth\u00e4lt Rezeptgruppen in einer (generierten) <code>RecipeGroups</code> Eigenschaft, und Rezepte in den Rezeptgruppen. Diese Ansicht zeigt die Kopfzeile der Rezeptgruppen sowie die Kopfzeile und die Bilder der Rezepte in den Gruppen mit Datenverbindung.</li> <li><code>RecipeGroup</code> und <code>Recipe</code>: Modellklassen f\u00fcr Rezeptgruppen und Rezepte.</li> <li><code>RecipeService</code>: Anwendungslogik/Datenzugriff zur Verwaltung von Rezepten (kommuniziert mit einem entfernten Dienst) unter Verwendung von ViewModel.</li> </ul>"},{"location":"labor/old-5-mvvm/index_ger/#11-datenzugangsdienst","title":"1.1 Datenzugangsdienst","text":"<p>Beginnen wir mit der Datenzugriffsschicht, die nun als Modellschicht im MVVM-Muster betrachtet werden kann.</p> <p>Unsere Anwendung ruft Daten von einem Webserver ab (\u00fcber die sogenannte REST-API, HTTP). Client-Server-Architekturen wie diese sind eine sehr verbreitete L\u00f6sung in der modernen Anwendungsentwicklung. Dies wird im n\u00e4chsten Semester in Mobile und Web Software, und Data Driven Applications ausf\u00fchrlicher behandelt. F\u00fcr den Moment gen\u00fcgt es zu wissen, dass unsere Client-Anwendung HTTP-Anfragen an den Server sendet, der mit der R\u00fcckgabe von Daten im JSON-Format antwortet.</p> <p> Client-Server-Architektur <p>Der Ferndienst ist verf\u00fcgbar unter: https://bmecookbook2.azurewebsites.net/api. Der Dienst umfasst eine OpenApi-basierte Dokumentation \u00fcber die https://bmecookbook2.azurewebsites.net/swagger am. Schauen wir uns dies an oder probieren wir die Endpunkte auch \u00fcber die Oberfl\u00e4che von Swagger aus (indem man die URL mit der Endung \"swagger\" in die Adresszeile eines Browsers eingibt). F\u00fcr die erste Aufgabe werden wir den Endpunkt <code>/api/Recipes/Groups</code> verwenden, der die Gruppierung von Rezepten zur\u00fcckgibt.</p> <p>F\u00fcgen wir eine neue Klasse namens <code>RecipeGroup</code> in den Ordner <code>Models</code> des Projekts <code>MvvmLab.Core</code> ein.</p> <p>Rufen wir mit Swagger den Endpunkt \"api/Recipes/Groups\" auf (genauer gesagt, senden wir eine HTTP-GET-Anfrage)</p> <ul> <li>\u00d6ffnen wir in der Swagger-Oberfl\u00e4che die Beschreibung des Endpunktes \"Get api/Recipes/Groups\".</li> <li>Klicken wir auf die Taste Execute.</li> <li>Die vom Dienst gesendete JSON-Antwort wird unter \"Response body\" angezeigt: Hier sehen wir, dass die Antwort Rezeptgruppen enth\u00e4lt. Jede Gruppe hat einen \"Titel\" (z.B. Chinese, Mexican, Italian), und unter jeder Gruppe finden wir zwischen <code>[]</code> (JSON-Array) die Daten der Rezepte in der Gruppe. </li> <li> <p>Kopieren wir die JSON-Daten von <code>RecipeGroup</code> in die Zwischenablage. Wir k\u00f6nnen auch die Ausgabe unter \"Example Value\" verwenden, wenn wir sie in die Zwischenablage kopieren (kopieren wir jedoch nicht die \u00f6ffnenden [ und schlie\u00dfenden ] Schriftzeichen). Wenn wir aus irgendeinem Grund nicht weiterkommen k\u00f6nnen, k\u00f6nnen wir den Inhalt auch aus das folgende Dropdown-Men\u00fc in die Zwischenablage kopieren:</p> In die Zwischenablage zu kopieren <pre><code>{\n    \"Title\": \"string\",\n    \"Recipes\": [\n        {\n            \"Id\": 0,\n            \"Title\": \"string\",\n            \"BackgroundImage\": \"string\"\n        }\n    ]\n}\n</code></pre> </li> </ul> <p>In Visual Studio w\u00e4hlen wir im Men\u00fc <code>Edit</code> / <code>Paste Special</code> / <code>Paste JSON as Classes</code> aus, um den Inhalt der Zwischenablage einf\u00fcgen. VS generiert dann Klassen, die der Struktur des von uns eingef\u00fcgten JSON entsprechen.</p> <p></p> <p>Die entstehenden Klassen k\u00f6nnen umbenannt werden, um den C#-Codierungskonventionen zu entsprechen. Benennen wir die Klasse <code>Rootobject</code> in <code>RecipeGroup</code> und die Klasse <code>Recipe</code> in <code>RecipeHeader</code> um.</p> <pre><code>public class RecipeGroup\n{\n    public string Title { get; set; }\n    public RecipeHeader[] Recipes { get; set; }\n}\n\npublic class RecipeHeader\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string BackgroundImage { get; set; }\n}\n</code></pre> <p> Verwenden von <code>List&lt;T&gt;</code> </p> <p>In unserem Fall war es nicht notwendig (weil wir die Rezeptgruppen nicht erweitern), aber wenn es bequemer f\u00fcr uns ist, k\u00f6nnen wir die Bl\u00f6cke in den generierten Code im  <code>List&lt;T&gt;</code> umwandeln.</p> <p>Erstellen wir eine Schnittstelle <code>IRecipeService</code> zum Namespace <code>MvvmLab.Core.Services</code>, \u00fcber die auf den Remote-Dienst zugegriffen werden soll. In der Schnittstelle erstellen wir eine Methode <code>GetRecipeGroupsAsync</code>, die die Rezeptgruppen abfragt und zur\u00fcckgibt.</p> <pre><code>public interface IRecipeService\n{\n    public Task&lt;RecipeGroup[]&gt; GetRecipeGroupsAsync();\n}\n</code></pre> <p>Task-R\u00fcckgabewert</p> <p>In der Schnittstelle ist der eigentliche R\u00fcckgabewert (<code>RecipeGroup[]</code>) in ein Objekt <code>Task&lt;T&gt;</code> verpackt, da es vorzuziehen ist, Netzwerkoperationen asynchron zu implementieren. In .NET ist die modernste und einfachste Art, Asynchronit\u00e4t zu implementieren, die Verwendung von <code>Task</code>s. Und die Asynchronit\u00e4t sorgt daf\u00fcr, dass die Benutzeroberfl\u00e4che nicht einfriert, wenn die Netzwerkanforderung lange dauert (und das alles, ohne separate Threads zu starten).</p> <p>Die Implementierung der Schnittstelle wird im Namespace <code>MvvmLab.Core.Services</code> unter <code>RecipeService</code> erstellt. Unser Dienst wird die integrierte .NET-Klasse <code>HttpClient</code> f\u00fcr REST-API-Aufrufe verwenden.  <code>GetFromJsonAsync</code> stellt eine asynchrone HTTP GET-Anfrage an die angegebene Adresse und deserialisiert die Antwort von JSON in den angegebenen Typ.</p> <pre><code>public class RecipeService : IRecipeService\n{\n    private readonly string _baseUrl = \"https://bmecookbook2.azurewebsites.net/api\";\n\n    public async Task&lt;RecipeGroup[]&gt; GetRecipeGroupsAsync()\n    {\n        using var client = new HttpClient();\n        return await client.GetFromJsonAsync&lt;RecipeGroup[]&gt;($\"{_baseUrl}/Recipes/Groups\");\n    }\n}\n</code></pre> <p>Die Operation <code>GetFromJsonAsync</code> ist asynchron, sie gibt also <code>Task</code> zur\u00fcck, wir k\u00f6nnen dies nicht blockierend erwarten und mit dem Schl\u00fcsselwort <code>await</code> auf das Ergebnis zugreifen.</p> <p>async-await</p> <p>Die Schl\u00fcsselw\u00f6rter <code>async</code> und <code>await</code> werden in den meisten modernen Sprachen verwendet, um asynchrone Funktionsaufrufe auf Sprachebene zu behandeln. Wir werden am Ende des Semesters mehr dar\u00fcber sprechen, wie es funktioniert, aber bis dahin m\u00fcssen Sie Folgendes wissen, um es zu nutzen:</p> <ul> <li>Mit dem Schl\u00fcsselwort <code>await</code> k\u00f6nnen wir auf eine asynchrone Ausf\u00fchrung warten, ohne den Aufrufer zu blockieren.</li> <li>Das Schl\u00fcsselwort <code>await</code> kann nur in Funktionen mit dem Schl\u00fcsselwort <code>async</code> verwendet werden.</li> <li><code>async</code>-Funktionen k\u00f6nnen nur den R\u00fcckgabewert <code>Task</code> oder <code>Task&lt;T&gt;</code> oder <code>void</code> haben. (Oder \"Task-\u00e4hnlich\", aber das nehmen wir hier nicht.)<ul> <li>Wenn man eine <code>async</code>-Funktion von au\u00dfen abwarten will, kann man das nicht mit void tun, sondern man muss einen R\u00fcckgabewert von <code>Task</code> oder <code>Task&lt;T&gt;</code> haben.</li> <li>In <code>async</code>-Funktionen wird die Syntax der <code>return</code>-Anweisung ge\u00e4ndert: es muss nicht das Task-Objekt zur\u00fcckgegeben werden, sondern die darin enthaltenen Daten (<code>void</code> f\u00fcr <code>Task</code>, <code>Task&lt;T&gt;</code> f\u00fcr <code>T</code>).</li> </ul> </li> </ul>"},{"location":"labor/old-5-mvvm/index_ger/#12-startseite-viewmodel","title":"1.2 Startseite ViewModel","text":"<p>Im n\u00e4chsten Schritt erstellen wir das ViewModel der Hauptseite, das den soeben erstellten Dienst verwendet, um die Rezeptgruppen abzurufen und sie als Status f\u00fcr die Ansicht zu speichern.</p>"},{"location":"labor/old-5-mvvm/index_ger/#dependency-injection","title":"Dependency Injection\u00b6","text":"<p>\u00d6ffnen wir die Klasse <code>MainPageViewModel</code> aus dem Ordner <code>MvvmLab.ViewModels</code>.  Unser ViewModel ben\u00f6tigt eine Klasse, die die Schnittstelle <code>IRecipeService</code> implementiert, \u00fcber die es die Rezeptgruppen abfragen kann. Im <code>MainPageViewModel</code> Konstruktor erhalten wir die erforderliche Abh\u00e4ngigkeit \u00fcber Dependency Injection. In unserem Fall bedeutet dies, dass wir einen Parameter vom Typ <code>IRecipeService</code> erwarten, der vom ViewModel empfangen wird, wenn es instanziiert wird, und der Parameter wird in einer privaten Variablen gespeichert.</p> <pre><code>private readonly IRecipeService _recipeService;\n\npublic MainPageViewModel(IRecipeService recipeService)\n{\n    _recipeService = recipeService;\n}\n</code></pre> Dependency Injection - DI <p>Standardm\u00e4\u00dfig sind Klassen eng mit ihren Abh\u00e4ngigkeiten gekoppelt (Referenz, Instanziierung). </p> <p> Starke Kopplung ohne DI </p> <p>Diese enge Kopplung erschwert die Pr\u00fcfung, Wartung und Wiederverwendung. Dies wird durch den Einsatz von Dependency Injection (und Strategy) unterst\u00fctzt. In diesem Kurs lernen wir das Dependency Injection (DI) Entwurfmuster kennen, das immer in Verbindung mit dem Strategy-Muster verwendet wird. Die Idee ist, dass eine Klasse ihre Abh\u00e4ngigkeiten (die Klassen, von denen sie abh\u00e4ngt und die sie verwendet) nicht selbst erzeugt, sondern sie von au\u00dfen erh\u00e4lt, z.B. in einem Konstruktorparameter. Das Strategy-Muster impliziert, dass sie nur als \"Schnittstelle\" von ihnen abh\u00e4ngt. </p> <p>Die meisten Plattformen bieten heute auch einen zus\u00e4tzlichen Dienst, einen so genannten DI-Container (auch IoC-Container genannt),  zur bequemen Verwaltung von Abh\u00e4ngigkeiten.  Der Lebenszyklus von Abh\u00e4ngigkeiten wird dann von einer speziellen Komponente, dem DI-Container, verwaltet. Der DI-Container (dargestellt als Builder) ist f\u00fcr die Instanziierung von Klassen und die rekursive Injektion von Abh\u00e4ngigkeiten zust\u00e4ndig.</p> <p> DI-Klassendiagramm </p> <p>Um die entsprechenden Implementierungen zu injektieren, w\u00e4hrend des Durchlaufens der Abh\u00e4ngigkeitsgraph w\u00e4hrend der Instanziierung, m\u00fcssen die Abh\u00e4ngigkeitszuordnungen im DI-Container registriert werden. In unserer Anwendung tun wir dies in der Datei <code>App.xaml.cs</code> in der Methode <code>ConfigureServices</code>.  F\u00fcgen wir die folgende Zeile hinzu, z.B. unter dem Abschnitt <code>// Core Services</code>: </p> <pre><code>services.AddTransient&lt;IRecipeService, RecipeService&gt;();\n</code></pre> <p>Dies sagt uns, dass das DI-Framework eine <code>RecipeService</code>-Implementierung injektiert, wenn eine Klasse eine <code>IRecipeService</code>-Abh\u00e4ngigkeit erwartet (z.B. den Konstruktor von <code>MainPageViewModel</code>). (Da wir sie hier als Transient Lifetime registriert haben, wird jede <code>IRecipeService</code>-Abh\u00e4ngigkeitsanforderung durch eine neue <code>RecipeService</code>-Instanz erf\u00fcllt).</p> <p>Damit Dependency Injection in unserer Anwendung funktioniert, muss die Klasse <code>MainPageViewModel</code> auch im Container registriert sein, der ebenfalls unter <code>ConfigureServices</code> zu finden ist.</p> <p>\u00dcber DI-Container im Detail</p> <p>Die Verwendung und Funktionsweise von DI-Containern wird sp\u00e4ter im Kurs Datengesteuerte Systeme ausf\u00fchrlich behandelt.</p>"},{"location":"labor/old-5-mvvm/index_ger/#viewmodel-status","title":"ViewModel-Status","text":"<p>Im n\u00e4chsten Schritt werden wir das Hochladen des ViewModel-Status implementieren.</p> <p>Unser Ziel ist, dass</p> <ul> <li><code>MainPageViewModel</code> hat eine Eigenschaft namens <code>RecipeGroups</code>, die Rezeptgruppen enth\u00e4lt (wir wollen diese an die Oberfl\u00e4che binden),</li> <li>die \u00c4nderungen von <code>RecipeGroups</code> von der Schnittstelle verfolgt werden, was die Implementierung von <code>INotifyPropertyChanged</code> und das korrekte Ausl\u00f6sen von <code>PropertyChanged</code> erfordert (wie wir bereits in der vorherigen \u00dcbung/Hausaufgabe gesehen haben).</li> </ul> <p>Dies w\u00fcrde relativ \"viel\" Arbeit erfordern, aber das MVVM-Toolkit vereinfacht unser Leben, denn wir m\u00fcssen nur das Folgendes tun:</p> <ul> <li>Erstellen wir in <code>MainPageViewModel</code> eine <code>RecipeGroup[]</code> Member-Variable (keine Eigenschaft) mit dem Namen <code>_recipeGroups</code>. </li> <li>Die Variable wird mit dem Attribut <code>ObservableProperty</code> versehen. </li> </ul> <pre><code>[ObservableProperty]\nprivate RecipeGroup[] _recipeGroups = Array.Empty&lt;RecipeGroup&gt;();\n</code></pre> <p>Hier sind wir nun. Aber was passiert dann?</p> <ul> <li>Auf dieser Grundlage erzeugt MVVM Toolkit automatisch eine Eigenschaft namens <code>RecipeGroups</code> in der generierten (partiellen) H\u00e4lfte der Klasse.</li> <li>Diese generierte Eigenschaft nutzt die Vorteile der Schnittstelle <code>INotifyPropertyChanged</code>. Wenn sich der Wert der Eigenschaft <code>RecipeGroups</code> \u00e4ndert, wird das Ereignis <code>PropertyChanged</code> ausgel\u00f6st, um die Ansicht entlang der Datenverbindungen zu benachrichtigen.</li> <li>Unser <code>MainPageViewModel</code> implementiert bereits die Schnittstelle <code>INotifyPropertyChanged</code>, da es von der Klasse <code>ObservableObject</code> des MVVM-Toolkits stammt.</li> </ul> <p>In <code>MainPageViewModel</code> implementieren wir die vorbereitete Schnittstelle <code>INavigationAware</code>, die es uns erm\u00f6glicht, das Navigations-Lebenszyklus-Ereignis zwischen Ansichten zu handhaben und sogar Daten zwischen ViewModels zu \u00fcbergeben. In der Methode <code>OnNavigatedTo</code> werden die Rezeptgruppen \u00fcber <code>IRecipeService</code> abgefragt und in der Variablen <code>RecipeGroups</code> gespeichert.</p> <pre><code>public partial class MainPageViewModel : ObservableObject, INavigationAware\n{\n    // ...\n\n    public async void OnNavigatedTo(object parameter)\n    {\n        RecipeGroups = await _recipeService.GetRecipeGroupsAsync();\n    }\n\n    public void OnNavigatedFrom()\n    {\n    }\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/index_ger/#13-ansicht-der-hauptseite","title":"1.3 Ansicht der Hauptseite","text":"<p>Erstellen wir die Ansicht auf <code>MainPage</code>, in der die Rezeptgruppen angezeigt werden.</p> <p>Damit <code>GridView</code> die Gruppierung behandeln kann, brauchen wir eine Liste, die die Gruppierung vornimmt. Wir k\u00f6nnen dies mit der Klasse <code>CollectionViewSource</code> tun, die in gewisser Weise UI-spezifische Wrapping-Aufgaben f\u00fcr Sammlungen \u00fcbernimmt. <code>CollectionViewSource</code> muss die zu gruppierenden Elemente und die Eigenschaft, auf der die Gruppen basieren, angegeben werden. Wir m\u00fcssen auch die Eigenschaft angeben, auf der die Elemente innerhalb der Gruppen angezeigt werden sollen.</p> <p>Erstellen wir die Instanz <code>CollectionViewSource</code> in den Ressourcen der Seite (f\u00fcgen wir den Code unten in <code>MainPage.xaml</code> ein, oberhalb des Grids, auf der gleichen Ebene wo es liegt).</p> <pre><code>&lt;Page.Resources&gt;\n    &lt;CollectionViewSource x:Name=\"RecipeGroupsCollectionSource\"\n                            IsSourceGrouped=\"True\"\n                            ItemsPath=\"Recipes\"\n                            Source=\"{x:Bind ViewModel.RecipeGroups, Mode=OneWay}\" /&gt;\n&lt;/Page.Resources&gt;\n</code></pre> <p>Note</p> <p>Beachten Sie, dass wir in der Datenverbindung an die Eigenschaft <code>ViewModel</code> binden, die sich in <code>MainPage.xaml.cs</code> befindet, und einfach die Eigenschaft <code>DataContext</code> an unseren ViewModel-Typ \u00fcbergeben.</p> <pre><code>public MainPageViewModel ViewModel =&gt; DataContext as MainPageViewModel;\n</code></pre> <p>Die Speicherung des ViewModels in der Eigenschaft <code>DataContext</code> der Steuerelemente (Seiten) ist typisch f\u00fcr das MVVM-Muster. In unserem Fall \u00fcbernimmt die Klasse \"NavigationService\" des generierten Projekts diese Aufgabe f\u00fcr uns.</p> Ressourcen <p>In der XAML-Umgebung hat jedes Steuerelement (im obigen Beispiel die Seite) und die Klasse <code>Application</code> standardm\u00e4\u00dfig eine Eigenschaft <code>Resources</code>, die ein Schl\u00fcssel-Wert-Speicher ist (<code>Dictionary&lt;string, object&gt;</code>). Sie k\u00f6nnen wiederverwendbare Objekte einf\u00fcgen, sogar auf der Anwendungsebene. Wenn Sie bei der Instanziierung von Ressourcen das Attribut <code>x:Key</code> angeben, k\u00f6nnen Sie Ressourcen nach Schl\u00fcsseln abfragen, z.B. mit der Markup-Erweiterung <code>{StaticResource Key}</code>. </p> <p>Aber hier haben wir explizit <code>x:Name</code> anstelle von <code>x:Key</code> angegeben, weil wir uns in <code>x:Bind</code> auf den Namen beziehen wollen (zur Erinnerung: das Attribut <code>x:Name</code> wird verwendet, um eine Mitgliedsvariable in unserer Klasse mit diesem Namen zu erzeugen, so dass wir sie aus dem code behind Datei oder w\u00e4hrend der Verwendung von x:Bind Datenverbindung, mit diesem Namen erreichen k\u00f6nnen).</p> <p>F\u00fcr die Auflistung der Rezepte verwenden wir nun ein spezielles, von <code>GridView</code> abgeleitetes Steuerelement, n\u00e4mlich <code>AdaptiveGridView</code>aus dem CommunityToolkit-Paket, das die Anzahl und Gr\u00f6\u00dfe der angezeigten Elemente in Abh\u00e4ngigkeit von der Gr\u00f6\u00dfe der Ansicht \u00e4ndert und die Benutzung von Commands f\u00fcr Elementklicks unterst\u00fctzt. Um auf externe Steuerelemente zu verweisen, f\u00fcgen wir zu der Seite den folgenden Namespace hinzu:</p> <pre><code>xmlns:controls=\"using:CommunityToolkit.WinUI.UI.Controls\"\n</code></pre> <p>Erstellen wir die GridView mit der Eigenschaft <code>ItemsSource</code>, die in der obigen Ressource an <code>RecipeGroupsCollectionSource.View</code> gebunden ist.</p> <p>Innerhalb von <code>GridView</code> k\u00f6nnen wir wie gewohnt \u00fcber die Eigenschaft <code>ItemTemplate</code> festlegen, wie jedes Element angezeigt werden soll. In unserem Fall haben wir ein Bild und einen Text, der auf dem Titel des Rezepts basiert, in ein \"karten\u00e4hnliches\" Layout gesetzt.</p> <p>Und \u00fcber die Eigenschaft <code>GroupStyle</code> k\u00f6nnen wir festlegen, wie die Gruppen angezeigt werden sollen. In diesem Fall wollen wir die Kopfzeile anpassen.</p> <p>Ersetzen wir in <code>MainPage.xaml</code> das Gitter <code>&lt;Grid x:Name=\"ContentArea\"&gt; ...</code> durch das folgende:</p> <pre><code>&lt;Grid x:Name=\"ContentArea\" Padding=\"10\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"Auto\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n\n    &lt;TextBlock Text=\"Recipes\"\n               Grid.Row=\"0\"\n               Style=\"{StaticResource TitleLargeTextBlockStyle}\" /&gt;\n\n    &lt;controls:AdaptiveGridView Grid.Row=\"1\"\n                               DesiredWidth=\"180\"\n                               IsItemClickEnabled=\"True\"\n                               ItemHeight=\"160\"\n                               ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                               SelectionMode=\"None\"\n                               StretchContentForSingleRow=\"False\"&gt;\n        &lt;GridView.ItemTemplate&gt;\n            &lt;DataTemplate x:DataType=\"models:RecipeHeader\"&gt;\n                &lt;Grid MaxWidth=\"300\"&gt;\n                    &lt;Image Source=\"{x:Bind BackgroundImage}\" /&gt;\n                    &lt;Border Height=\"40\"\n                            Padding=\"10,0,0,0\"\n                            VerticalAlignment=\"Bottom\"\n                            Background=\"#88000000\"&gt;\n                        &lt;TextBlock VerticalAlignment=\"Center\"\n                                   Foreground=\"White\"\n                                   Text=\"{x:Bind Title}\" /&gt;\n                    &lt;/Border&gt;\n                &lt;/Grid&gt;\n            &lt;/DataTemplate&gt;\n        &lt;/GridView.ItemTemplate&gt;\n        &lt;GridView.GroupStyle&gt;\n            &lt;GroupStyle&gt;\n                &lt;GroupStyle.HeaderTemplate&gt;\n                    &lt;DataTemplate x:DataType=\"models:RecipeGroup\"&gt;\n                        &lt;TextBlock Margin=\"0\"\n                                   Style=\"{ThemeResource TitleTextBlockStyle}\"\n                                   Text=\"{x:Bind Title}\" /&gt;\n                    &lt;/DataTemplate&gt;\n                &lt;/GroupStyle.HeaderTemplate&gt;\n            &lt;/GroupStyle&gt;\n        &lt;/GridView.GroupStyle&gt;\n    &lt;/controls:AdaptiveGridView&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Nehmen wir den folgenden Namespace (hier befinden sich unsere Modellklassen) auf:</p> <pre><code>`xmlns:models=\"using:MvvmLab.Core.Models\"`\n</code></pre> <p>Probieren wir die App aus! Achten Sie darauf, dass die Rezeptgruppen auf der Hauptseite erscheinen.</p>"},{"location":"labor/old-5-mvvm/index_ger/#aufgabe-2-rezept-detailseite","title":"Aufgabe 2. - Rezept-Detailseite","text":"<p>Die Erstellung der detaillierten Rezeptseite erfolgt in folgenden Schritten:</p> <ol> <li>F\u00fcgen wir der Schnittstelle <code>IRecipeService</code> eine Methode <code>GetRecipeAsync</code> hinzu und erstellen wir die erforderlichen Klassen</li> <li>Erstellen wir ein Ansichtsmodell <code>RecipeDetailPageViewModel</code>, in dem wir die Rezeptdaten in <code>RecipeDetailPageViewModel</code> \u00fcber <code>IRecipeService</code> abfragen (die VM erh\u00e4lt die ID bei der Navigation)</li> <li>Erstellen wir die Ansicht <code>RecipeDetailPage</code>, die auf den Daten des ViewModel aufbaut</li> <li>Registrieren wir das ViewModel und View f\u00fcr Dependency Injection Konfiguration und Navigation</li> <li>Navigieren wir von <code>MainPageViewModel</code> zu <code>RecipeDetailPage</code> durch <code>INavigationService</code>, falls es auf das Rezept angeklickt wird und die ID des ausgew\u00e4hlten Rezepts wird an die Detailseite \u00fcbergegeben</li> </ol>"},{"location":"labor/old-5-mvvm/index_ger/#21-abfrage-eines-rezepts","title":"2.1 Abfrage eines Rezepts","text":"<p>Erstellen wir die Klasse <code>Recipe</code> im Namensraum <code>MvvmLab.Core.Model</code> und generieren wir ihren Inhalt aus den JSON-Beispieldaten, die vom Endpunkt <code>/api/recipes/{id}</code> zur\u00fcckgegeben werden, unter Verwendung der oben beschriebenen Methode (Paste special).</p> <pre><code>public class Recipe\n{\n    public int Id { get; set; }\n    public string BackgroundImage { get; set; }\n    public string Title { get; set; }\n    public string[] ExtraImages { get; set; }\n    public string[] Ingredients { get; set; }\n    public string Directions { get; set; }\n    public Comment[] Comments { get; set; }\n}\n\npublic class Comment\n{\n    public string Name { get; set; }\n    public string Text { get; set; }\n}\n</code></pre> <p>Warning</p> <p>W\u00e4hrend des \"Paste Special\" ist es wichtig, ein Rezept in die Zwischenablage zu legen, das einen Kommentar enth\u00e4lt (andernfalls wird die Klasse <code>Comment</code> nicht erzeugt, und die Klasse <code>Recipe</code> erzeugt den Typ <code>object[]</code> des Typs <code>Comments</code>). Es lohnt sich, das Beispiel aus dem Feld \"Example value\" der Swagger-Beschreibung in die Zwischenablage zu kopieren!</p> <p>Die Schnittstelle <code>IRecipeService</code> und ihre Implementierung werden mit einer Methode <code>GetRecipeAsync</code> erweitert, die ein Rezept auf der Grundlage seiner Identifizierungsnummer zur\u00fcckgibt.</p> IRecipeService<pre><code>public Task&lt;Recipe&gt; GetRecipeAsync(int id);\n</code></pre> RecipeService<pre><code>public async Task&lt;Recipe&gt; GetRecipeAsync(int id)\n{\n    using var client = new HttpClient();\n    return await client.GetFromJsonAsync&lt;Recipe&gt;($\"{_baseUrl}/Recipes/{id}\");\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/index_ger/#22-rezept-detailliertes-viewmodel","title":"2.2 Rezept detailliertes ViewModel","text":"<p>Die Erstellung eines ViewModels ist im Vergleich zur Hauptseite eine Finger\u00fcbung (wir k\u00f6nnen grunds\u00e4tzlich auf seinem Muster arbeiten). Erstellen wir die Klasse <code>RecipeDetailPageViewModel</code> im Ordner <code>MvvmLab.ViewModels</code>. </p> <p>Das ViewModel ben\u00f6tigt eine Klasse, die die Schnittstelle <code>IRecipeService</code> implementiert, \u00fcber die es das Rezept abfragen kann. Im <code>RecipeDetailPageViewModel</code> Konstruktor wird DI verwendet, um die notwendige Abh\u00e4ngigkeit zu erhalten.</p> <pre><code>private readonly IRecipeService _recipeService;\n\npublic RecipeDetailPageViewModel(IRecipeService recipeService)\n{\n    _recipeService = recipeService;\n}\n</code></pre> <p>Erstellen wir in <code>RecipeDetailPageViewModel</code> eine Variable des Typs <code>Recipe</code> mit dem Namen <code>_recipe</code>, in der das Rezept gespeichert werden soll. Die Variable wird mit dem Attribut <code>ObservableProperty</code> versehen, wodurch MVVM Toolkit automatisch die Eigenschaft <code>Recipe</code> in der anderen generierten partiellen H\u00e4lfte der Klasse erzeugen kann. Dies setzt voraus, dass die Klasse von der Klasse <code>ObservableObject</code> abgeleitet ist, \u00f6ffentlich ist und das Schl\u00fcsselwort <code>partial</code> enth\u00e4lt.</p> <pre><code>public partial class RecipeDetailPageViewModel : ObservableObject\n{\n    // ...\n\n    [ObservableProperty]\n    private Recipe _recipe = new();\n</code></pre> <p>Implementieren wir die vorbereitete Schnittstelle <code>INavigationAware</code> in <code>RecipeDetailPageViewModel</code>. Wir bereiten uns darauf vor, dass wir  die ID des Rezepts als Navigationsparameter erhalten, das wir anzeigen wollen. In der Methode <code>OnNavigatedTo</code> rufen wir das Rezept \u00fcber <code>RecipeService</code> ab und speichern es in der Eigenschaft <code>Recipe</code>. </p> <pre><code>public partial class RecipeDetailPageViewModel : ObservableObject, INavigationAware\n{\n    // ...\n\n    public async void OnNavigatedTo(object parameter)\n    {\n        Recipe = await _recipeService.GetRecipeAsync((int)parameter);\n    }\n\n    public void OnNavigatedFrom()\n    {\n    }\n}\n</code></pre> <p>Note</p> <p>In der Kopfzeile der Aktion <code>OnNavigatedTo</code> mussten wir das Schl\u00fcsselwort <code>async</code> verwenden, weil wir <code>await</code> in der Wurzel verwendet haben.</p>"},{"location":"labor/old-5-mvvm/index_ger/#23-rezeptdetailseite-navigation","title":"2.3 Rezeptdetailseite, Navigation","text":"<p>Erstellen wir eine neue Seite mit dem Namen <code>RecipeDetailPage</code> im Ordner <code>Views</code> (Rechtsklick auf den Ordner Views / Add New Item / Blank Page (WinUI 3)), auf der wir das Rezept anzeigen k\u00f6nnen. Zeigen wir zun\u00e4chst nur den Titel des Rezepts in einer <code>TextBlock</code> an.</p> <pre><code>&lt;Grid x:Name=\"ContentArea\"&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height=\"48\" /&gt;\n        &lt;RowDefinition Height=\"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n\n    &lt;TextBlock Grid.Row=\"0\"\n               Style=\"{StaticResource PageTitleStyle}\"\n               Text=\"{x:Bind ViewModel.Recipe.Title, Mode=OneWay}\" /&gt;\n&lt;/Grid&gt;\n</code></pre> <p>Zu der Datenverbingung f\u00fcgen wir die Eigenschaft <code>ViewModel</code> in <code>RecipeDetailPage.xaml.cs</code> zur Hauptseite hinzu.</p> <pre><code>public RecipeDetailPageViewModel ViewModel =&gt; (RecipeDetailPageViewModel)DataContext;\n</code></pre> <p>\u00dcbersetzungsfehler</p> <p>Wenn Sie aus irgendeinem Grund exotische Fehler erhalten, nachdem Sie eine neue Seite hinzugef\u00fcgt haben, l\u00f6schen Sie die folgenden Zeilen in der Projektdatei:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;None Remove=\"ViewsRecipeDetailPage.xaml\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <pre><code>&lt;Page Update=\"ViewsRecipeDetailPage.xaml\"&gt;\n    &lt;Generator&gt;MSBuild:Compile&lt;/Generator&gt;\n&lt;/Page&gt;\n</code></pre> <p>Um die Navigation zu unterst\u00fctzen, registrieren wir <code>RecipeDetailPage</code> in <code>PageService</code> im Ordner <code>Services</code> in den folgenden 3 Schritten:</p> <ol> <li> <p>Nehmen wir den Ansichtsschl\u00fcssel in die Klasse <code>Pages</code> auf.</p> <pre><code>public static class Pages\n{\n    public static string Main { get; } = \"Main\";\n    public static string Detail { get; } = \"Detail\";\n}\n</code></pre> </li> <li> <p>Registrieren wir die Ansicht und ViewModel-Verbindung in <code>PageService</code>.</p> <pre><code>public PageService()\n{\n    Configure&lt;MainPageViewModel, MainPage&gt;(Pages.Main);\n    Configure&lt;RecipeDetailPageViewModel, RecipeDetailPage&gt;(Pages.Detail);\n}\n</code></pre> </li> <li> <p>In der Datei <code>App.xaml.cs</code> registrieren wir das ViewModel und den View im Dependency Injection Container in der Methode <code>ConfigureServices</code>. </p> <pre><code>services.AddTransient&lt;RecipeDetailPage&gt;();\nservices.AddTransient&lt;RecipeDetailPageViewModel&gt;();\n</code></pre> </li> </ol> <p>Diese werden ben\u00f6tigt, weil die <code>INavigationService</code> in der Projektvorlage die Ansichten grunds\u00e4tzlich mit einem Schl\u00fcssel identifiziert, so dass das ViewModel den Ansichtstyp nicht kennen muss. Und anhand des Schl\u00fcssels kann man genau herausfinden, welche View angezeigt und welches ViewModel in der View <code>DataContext</code> aus dem DI-Container instanziiert werden soll.</p> <p>In das <code>MainPageViewModel</code> injektieren wir den <code>INavigationService</code>, \u00fcber den wir zur <code>RecipeDetailPage</code> navigieren werden.</p> <pre><code>private readonly INavigationService _navigationService;\n\npublic MainPageViewModel(IRecipeService recipeService, INavigationService navigationService)\n{\n    _recipeService = recipeService;\n    _navigationService = navigationService;\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/index_ger/#command","title":"Command","text":"<p>Bisher haben wir uns mit einem Aspekt des MVVM-Musters besch\u00e4ftigt: wie die View auf die Daten im ViewModel zugreift und diese anzeigt, indem sie Daten bindet. Gleichzeitig besteht in der Regel eine weitere Beziehung zwischen View und ViewModel: Hier geht es darum, wie sich Ereignisse in der View (z.B. Klicks) auf das ViewModel auswirken. Damit werden wir uns jetzt befassen.</p> <p>In unserem Fall m\u00fcssen wir zum Beispiel daf\u00fcr sorgen, dass ein Klick auf ein Rezept in der Hauptseitenansicht zu <code>MainPageViewModel</code> f\u00fchrt und dann zur Detailansicht dieses Rezepts navigiert.</p> <p>Das ViewModel ver\u00f6ffentlicht die ausf\u00fchrbaren Operationen im MVVM-Muster durch Objekte, die typischerweise die Schnittstelle <code>ICommand</code> implementieren (die neben der Ausf\u00fchrung der spezifischen Operation auch die Bedingungen f\u00fcr die Ausf\u00fchrung der Operation verwalten k\u00f6nnen).</p> <p>Erstellen wir unter <code>MainPageViewModel</code> einen Command, der ausgef\u00fchrt wird, wenn wir auf das Rezept klicken. Der Command erh\u00e4lt die Kopfzeile des ausgew\u00e4hlten Rezepts als Parameter und wird an <code>RecipeDetailPage</code> weitergeleitet, wo die ID des ausgew\u00e4hlten Rezepts \u00fcbergeben wird.</p> <p>Jetzt sollten wir eine Klasse erstellen, die die Schnittstelle <code>ICommand</code> implementiert, und dann eine Instanz (Eigenschaft) davon in das ViewModel aufnehmen. Diese beiden Schritte werden durch das MVVM-Toolkit vereinfacht, wir m\u00fcssen nur eine Funktion mit dem Attribut <code>[RelayCommand]</code> zum ViewModel hinzuf\u00fcgen:</p> <pre><code>[RelayCommand]\nprivate void RecipeSelected(RecipeHeader recipe)\n{\n    _navigationService.NavigateTo(Pages.Detail, recipe.Id);\n}\n</code></pre> <p>Dies veranlasst den Compiler, die Commandsklasse und die Eigenschaft im ViewModel als <code>RecipeSelectedCommand</code> zu generieren.</p> <p> Der Befehl und das ViewModel sind vorbereitet, aber die View wei\u00df noch nichts \u00fcber den Befehl. Unser Befehl im ViewModel muss mit den \u00fcblichen Techniken an das entsprechende Ereignis in der View gebunden werden. Verwenden wir f\u00fcr MVVM immer das Command-Muster wie dieses! Das Sch\u00f6ne an diesem Ansatz ist, dass er vollst\u00e4ndig mit der standardm\u00e4\u00dfigen direktionalen Datenverbindung von View-&gt;ViewModel durchgef\u00fchrt wird (die wir bereits mehrfach verwendet haben).</p> <p>Binden wir daher auf <code>MainPage</code> die Eigenschaft <code>AdaptiveGridView</code> <code>ItemClickCommand</code> an <code>RecipeSelectedCommand</code>.</p> <pre><code>ItemClickCommand=\"{x:Bind ViewModel.RecipeSelectedCommand}\"\n</code></pre> <p>Probieren wir die App aus! Klicken wir auf die Rezepte, um die Rezeptdetailseite zu sehen.</p> Ausblick: Gibt es keinen Befehl f\u00fcr das Ereignis, das Sie verwenden m\u00f6chten? <p>Wenn der Controller einen Befehl f\u00fcr bestimmte Ereignisse bereitstellt, ist dies relativ einfach zu bewerkstelligen, wie im obigen Beispiel gezeigt. Wenn das Steuerelement jedoch keinen Befehl bereitstellt (z.B. das eingebaute <code>GridView.ItemClicked</code>), haben wir mehrere M\u00f6glichkeiten:</p> <ol> <li> <p>Code-Behind \"Klebercode\": Behandeln Sie das Ereignis des Controllers und rufen Sie die entsprechende Methode/Befehl des Code-Behind im ViewModel (xaml.cs) auf.</p> <pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"\n                            ItemClick=\"GridView_ItemClick\"&gt;\n</code></pre> <pre><code>private void GridView_ItemClick(object sender, ItemClickEventArgs e)\n{\n    ViewModel.RecipeSelectedCommand.Execute((RecipeHeader)e.ClickedItem);\n}\n</code></pre> </li> <li> <p>x:Bind-Ereignisbindung: Verwenden Sie die Bindungsoption der Methode <code>x:Bind</code>, um das Ereignis des Steuerelements an die Methode im ViewModel zu binden.    Die Methode muss dann entweder parameterlos sein oder einen Parameter annehmen, der der Signatur des Ereignisses entspricht.</p> View - MainPage.xaml<pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"\n                            ItemClick=\"{x:Bind ViewModel.RecipeSelected\"&gt;\n&lt;/controls:AdaptiveGridView&gt;\n</code></pre> ViewModel - MainPageViewModel<pre><code>public void RecipeSelected(object sender, ItemClickEventArgs e)\n{\n   ...\n}\n</code></pre> <p>Der Nachteil dieser Methode ist, dass sie die Framework-Abh\u00e4ngigkeiten des View (Eventhandler-Parametertypen) mit den Ereignisparametern in das ViewModel einf\u00fchrt, obwohl die Idee war, das ViewModel unabh\u00e4ngig von der View zu machen. Nat\u00fcrlich kann diese Methode auch gut funktionieren, wenn wir die strikte Einhaltung des MVVM-Musters teilweise aufgeben.</p> </li> <li> <p>Mit Hilfe von Behavior, ganz konkret <code>EventTriggerBehavior</code> und <code>InvokeCommandAction</code> Klassen, k\u00f6nnen Sie einen Command an ein Ereignis eines beliebigen Steuererelementes binden.</p> <pre><code>&lt;controls:AdaptiveGridView x:Name=\"gridView\"\n                            ItemsSource=\"{x:Bind RecipeGroupsCollectionSource.View, Mode=OneWay}\"\n                            IsItemClickEnabled=\"True\"&gt;\n    &lt;i:Interaction.Behaviors&gt;\n        &lt;c:EventTriggerBehavior EventName=\"ItemClick\"&gt;\n            &lt;c:InvokeCommandAction Command=\"{x:Bind ViewModel.RecipeSelectedCommand}\" \n                                   InputConverter=\"{StaticResource ItemClickedInputConverter}\" /&gt;\n        &lt;/c:EventTriggerBehavior&gt;\n    &lt;/i:Interaction.Behaviors&gt;\n</code></pre> <p>Dies erm\u00f6glicht es uns, die Ansicht fast vollst\u00e4ndig deklarativ zu gestalten, aber wir m\u00fcssen immer noch eine Klasse <code>ItemClickedInputConverter</code> erstellen, die die Ereignisparameter mithilfe der Schnittstelle <code>IValueConverter</code> in den entsprechenden Typ umwandelt.</p> <pre><code>public class ItemClickedInputConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, string language)\n    {\n        return (RecipeHeader)((value as ItemClickEventArgs)?.ClickedItem);\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n</code></pre> <p>Behaviors sind in der XAML-Welt weit verbreiteter Mechanismus, um wiederverwendbare Verhaltensweisen zu Views hinzuzuf\u00fcgen (weitere Informationen hier).</p> </li> </ol>"},{"location":"labor/old-5-mvvm/index_ger/#24-rezept-detailansicht","title":"2.4 Rezept-Detailansicht","text":"<p>Um die Details des Rezepts anzuzeigen, verwenden wir eine <code>Grid</code> mit zwei Spalten. Legen wir in die erste Spalte ein <code>ScrollViewer</code>, in das ein <code>StackPanel</code> eingef\u00fcgt wird. Legen wir auf <code>StackPanel</code> eine <code>FlipView</code>, an der die Bilder des Rezepts angezeigt werden sollen.  <code>FlipView</code> funktioniert wie eine Liste, zeigt aber ihre Elemente in einer bl\u00e4tterbaren Oberfl\u00e4che an.</p> <p>Unter <code>FlipView</code> finden wir <code>ItemsControl</code> (eine einfache Liste, die kein Scrollen, Ausw\u00e4hlen, Anklicken usw. unterst\u00fctzt), in der die Zutaten des Rezepts angezeigt werden.</p> <p>Darunter befindet sich eine <code>TextBlock</code>, die die Schritte zur Zubereitung des Rezepts enth\u00e4lt.</p> <p>In der zweiten Spalte platzieren wir ein <code>Grid</code>, wo die Liste der Kommentare und ihre Eingabefelder platziert werden.</p> <p>Wir k\u00f6nnen den folgenden Code w\u00e4hrend des Praktikums auf <code>RecipeDetailPage.xaml</code> kopieren. Dieser Code ist im Vergleich zu den vorherigen nicht neu.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;Page x:Class=\"MvvmLab.Views.RecipeDetailPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:local=\"using:MvvmLab.Views\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      xmlns:models=\"using:MvvmLab.Core.Models\"\n      Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\"\n      mc:Ignorable=\"d\"&gt;\n\n    &lt;Grid x:Name=\"ContentArea\"&gt;\n        &lt;Grid.RowDefinitions&gt;\n            &lt;RowDefinition Height=\"Auto\" /&gt;\n            &lt;RowDefinition Height=\"*\" /&gt;\n        &lt;/Grid.RowDefinitions&gt;\n\n        &lt;TextBlock Grid.Row=\"0\" Padding=\"10\"\n                   Style=\"{StaticResource TitleTextBlockStyle}\"\n                   Text=\"{x:Bind ViewModel.Recipe.Title, Mode=OneWay}\" /&gt;\n\n        &lt;Grid Grid.Row=\"1\"&gt;\n            &lt;Grid.ColumnDefinitions&gt;\n                &lt;ColumnDefinition Width=\"3*\" /&gt;\n                &lt;ColumnDefinition Width=\"*\" /&gt;\n            &lt;/Grid.ColumnDefinitions&gt;\n\n            &lt;ScrollViewer Grid.Column=\"0\" Padding=\"20 10 0 20\"&gt;\n                &lt;StackPanel Orientation=\"Vertical\"&gt;\n                    &lt;StackPanel x:Name=\"images\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Images\" /&gt;\n                        &lt;FlipView x:Name=\"flipView\"\n                                  MaxHeight=\"250\"\n                                  VerticalAlignment=\"Top\"\n                                  ItemsSource=\"{x:Bind ViewModel.Recipe.ExtraImages, Mode=OneWay}\"&gt;\n                            &lt;FlipView.ItemTemplate&gt;\n                                &lt;DataTemplate&gt;\n                                    &lt;Image Source=\"{Binding}\" Stretch=\"Uniform\" /&gt;\n                                &lt;/DataTemplate&gt;\n                            &lt;/FlipView.ItemTemplate&gt;\n                        &lt;/FlipView&gt;\n                    &lt;/StackPanel&gt;\n\n                    &lt;StackPanel x:Name=\"ingredients\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Ingredients\" /&gt;\n                        &lt;ItemsControl HorizontalAlignment=\"Left\" ItemsSource=\"{x:Bind ViewModel.Recipe.Ingredients, Mode=OneWay}\"&gt;\n                            &lt;ItemsControl.ItemTemplate&gt;\n                                &lt;DataTemplate&gt;\n                                    &lt;TextBlock Margin=\"0,0,0,10\"\n                                               Text=\"{Binding}\"\n                                               TextWrapping=\"Wrap\" /&gt;\n                                &lt;/DataTemplate&gt;\n                            &lt;/ItemsControl.ItemTemplate&gt;\n                        &lt;/ItemsControl&gt;\n                    &lt;/StackPanel&gt;\n\n                    &lt;StackPanel x:Name=\"directions\"\n                                Margin=\"0,0,24,0\"\n                                Orientation=\"Vertical\"\n                                RelativePanel.RightOf=\"ingredients\"&gt;\n                        &lt;TextBlock Margin=\"0,0,0,12\"\n                                   Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                                   Text=\"Directions\" /&gt;\n                        &lt;TextBlock HorizontalAlignment=\"Left\"\n                                   Text=\"{x:Bind ViewModel.Recipe.Directions, Mode=OneWay}\"\n                                   TextWrapping=\"Wrap\" /&gt;\n                    &lt;/StackPanel&gt;\n                &lt;/StackPanel&gt;\n            &lt;/ScrollViewer&gt;\n\n            &lt;Grid Grid.Column=\"1\" RowSpacing=\"12\"&gt;\n                &lt;Grid.RowDefinitions&gt;\n                    &lt;RowDefinition Height=\"Auto\" /&gt;\n                    &lt;RowDefinition Height=\"*\" /&gt;\n                    &lt;RowDefinition Height=\"Auto\" /&gt;\n                &lt;/Grid.RowDefinitions&gt;\n\n                &lt;TextBlock Grid.Row=\"0\"\n                           Style=\"{StaticResource SubtitleTextBlockStyle}\"\n                           Text=\"Comments\" /&gt;\n\n                &lt;ListView Grid.Row=\"1\" ItemsSource=\"{x:Bind ViewModel.Recipe.Comments, Mode=OneWay}\"&gt;\n                    &lt;ListView.ItemTemplate&gt;\n                        &lt;DataTemplate x:DataType=\"models:Comment\"&gt;\n                            &lt;StackPanel Orientation=\"Vertical\" Padding=\"0 5 0 5\"&gt;\n                                &lt;TextBlock FontWeight=\"Bold\" Text=\"{x:Bind Name}\" /&gt;\n                                &lt;TextBlock Text=\"{x:Bind Text}\" /&gt;\n                            &lt;/StackPanel&gt;\n                        &lt;/DataTemplate&gt;\n                    &lt;/ListView.ItemTemplate&gt;\n                &lt;/ListView&gt;\n\n                &lt;StackPanel x:Name=\"comments\"\n                            Grid.Row=\"2\"\n                            Margin=\"24,0,24,0\"\n                            Orientation=\"Vertical\"&gt;\n                    &lt;!-- TODO input fields for comments --&gt;\n                &lt;/StackPanel&gt;\n            &lt;/Grid&gt;\n        &lt;/Grid&gt;\n    &lt;/Grid&gt;\n&lt;/Page&gt;\n</code></pre> <p>Probieren wir die App aus!</p>"},{"location":"labor/old-5-mvvm/index_ger/#aufgabe-3-kommentare-hinzufugen","title":"Aufgabe 3. - Kommentare hinzuf\u00fcgen","text":"<p>Wenn wir einen engen Zeitplan haben, k\u00f6nnen wir eine Funktion zum Hinzuf\u00fcgen von Kommentaren auf der Rezeptdetailseite erstellen.</p>"},{"location":"labor/old-5-mvvm/index_ger/#webdienst","title":"Webdienst","text":"<p>F\u00fcgen wir der Schnittstelle <code>IRecipeService</code> und der Implementierung eine Methode <code>SendCommentAsync</code> hinzu, die einen Kommentar an den Server unter dem Endpunkt <code>POST /Recipes/{recipeId}/Comments</code> sendet.</p> IRecipeService<pre><code>public Task SendCommentAsync(int recipeId, Comment comment);\n</code></pre> RecipeService<pre><code>public async Task SendCommentAsync(int recipeId, Comment comment)\n{\n    using var client = new HttpClient();\n    await client.PostAsJsonAsync($\"{_baseUrl}/Recipes/{recipeId}/Comments\", comment);\n}\n</code></pre>"},{"location":"labor/old-5-mvvm/index_ger/#viewmodel","title":"ViewModel","text":"<p>Erstellen wir in <code>RecipeDetailPageViewModel</code>eine Eigenschaft <code>string</code> mit dem Namen <code>NewCommentText</code> und eine Eigenschaft <code>NewCommentName</code> <code>string</code> mit dem Namen, in denen die vom Benutzer bereitgestellten Kommentarinformationen gespeichert werden sollen. Verwenden wir das Attribut <code>ObservableProperty</code>! </p> <pre><code>[ObservableProperty]\nprivate string _newCommentName = string.Empty;\n\n[ObservableProperty]\nprivate string _newCommentText = string.Empty;\n</code></pre> <p>Erstellen wir in <code>RecipeDetailPageViewModel</code> eine Funktion namens <code>SendComment</code>, mit der der Kommentar des Benutzers an den Server gesendet werden kann. Generieren wir einen Befehl aus der Funktion mit dem MVVM Toolkit (<code>[RelayCommand]</code>).</p> <p>Die Umsetzung ist einfach: Wir senden den Kommentar an den Server und aktualisieren dann das Rezept.</p> <pre><code>[RelayCommand]\nprivate async Task SendComment()\n{\n    await _recipeService.SendCommentAsync(Recipe.Id, new Comment\n    {\n        Name = NewCommentName,\n        Text = NewCommentText\n    });\n\n    NewCommentName = string.Empty;\n    NewCommentText = string.Empty;\n\n    Recipe = await _recipeService.GetRecipeAsync(Recipe.Id);\n}\n</code></pre> <p>Die folgenden Elemente werden in der Ansicht platziert, um Kommentare hinzuzuf\u00fcgen:</p> <pre><code>&lt;StackPanel x:Name=\"comments\"\n            Grid.Row=\"2\"\n            Margin=\"24,0,24,0\"\n            Orientation=\"Vertical\"&gt;\n    &lt;TextBox Margin=\"0,0,0,16\"\n             Header=\"Name\"\n             Text=\"{x:Bind ViewModel.NewCommentName, Mode=TwoWay}\" /&gt;\n    &lt;TextBox Margin=\"0,0,0,16\"\n             Header=\"Comment\"\n             Text=\"{x:Bind ViewModel.NewCommentText, Mode=TwoWay}\" /&gt;\n    &lt;Button Margin=\"0,0,0,16\"\n            HorizontalAlignment=\"Right\"\n            Command=\"{x:Bind ViewModel.SendCommentCommand}\"\n            Content=\"Send\" /&gt;\n&lt;/StackPanel&gt;\n</code></pre> <p>Beachten wir, dass die Eigenschaft <code>Text</code> von <code>TextBox</code> an die Eigenschaften <code>NewCommentName</code> und <code>NewCommentText</code> im ViewModel mit einer bidirektionalen Bindung gebunden ist, und dass die Eigenschaft Command der Taste an die Eigenschaft <code>SendCommentCommand</code> im ViewModel gebunden ist.</p>"},{"location":"labor/old-5-mvvm/index_ger/#ausblick-bedingungen-fur-die-ausfuhrung-von-befehlen","title":"Ausblick: Bedingungen f\u00fcr die Ausf\u00fchrung von Befehlen","text":"<p>Der Befehl <code>SendCommentCommand</code> erfordert, dass die Eigenschaften <code>NewCommentName</code> und <code>NewCommentText</code> nicht leer sind. Befehle bieten die M\u00f6glichkeit, ihre Ausf\u00fchrung an Bedingungen zu kn\u00fcpfen, die in der Methode <code>CanExecute</code> angegeben werden k\u00f6nnen. In unserem Fall m\u00fcssen wir dem Attribut Command generator einen Methoden-/Eigenschaftsnamen geben, der <code>bool</code> zur\u00fcckgibt.</p> RecipeDetailPageViewModel-ben:<pre><code>private bool CanExecuteSendComment =&gt; !string.IsNullOrEmpty(NewCommentName) &amp;&amp; !string.IsNullOrEmpty(NewCommentText);\n\n[RelayCommand(CanExecute = nameof(CanExecuteSendComment))]\nprivate async Task SendComment()\n</code></pre> <p>Probieren wir es aus. Wir stellen fest, dass die Taste nicht aktiviert wird, aber nach der \u00c4nderung von <code>TextBox</code> \u00e4ndert sich der Zustand der Taste nicht.</p> <p>Die Methode <code>CanExecute</code> wird aufgerufen (von den Steuerelementen), wenn Command das Ereignis <code>CanExecuteChanged</code> ausl\u00f6st. In unserem Fall soll dieses Ereignis ausgel\u00f6st werden, wenn das Ereignis <code>PropertyChanged</code> der Eigenschaften <code>NewCommentName</code> und <code>NewCommentText</code> ausgel\u00f6st wird. Zu diesem Zweck bietet das MVVM Toolkit ein eigenes Attribut (<code>[NotifyCanExecuteChangedFor]</code>), das zu den Eigenschaften <code>NewCommentName</code> und <code>NewCommentText</code> hinzugef\u00fcgt werden muss.</p> <p>Wenn sich also der Wert der Eigenschaft <code>NewCommentName</code> oder <code>NewCommentText</code> \u00e4ndert, wird auch das Ereignis <code>SendCommentCommand</code> Befehl <code>CanExecuteChanged</code> ausgel\u00f6st, wodurch die Methode <code>CanExecute</code> erneut ausgef\u00fchrt und der Zustand der Taste aktualisiert wird.</p> <pre><code>[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(SendCommentCommand))]\nprivate string _newCommentName = string.Empty;\n\n[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(SendCommentCommand))]\nprivate string _newCommentText = string.Empty;\n</code></pre> <p>Probieren wir es aus.</p> <p>Es gibt nur noch eine Sache: Derzeit \u00e4ndert sich der Zustand von <code>TextBox</code> nur, wenn der Benutzer <code>TextBox</code> verl\u00e4sst. Dieses Verhalten kann \u00fcber die Eigenschaft <code>UpdateSourceTrigger</code> der Datenverbindung ge\u00e4ndert werden.</p> <pre><code>Text=\"{x:Bind ViewModel.NewCommentName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n\nText=\"{x:Bind ViewModel.NewCommentText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n</code></pre> <p>Probieren wir es aus.</p>"},{"location":"labor/old-6-doc-view/","title":"6. Document-View architekt\u00fara","text":""},{"location":"labor/old-6-doc-view/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9ljai:</p> <ul> <li>UML alap\u00fa tervez\u00e9s \u00e9s n\u00e9h\u00e1ny tervez\u00e9si minta alkalmaz\u00e1sa</li> <li>A Document-View architekt\u00fara alkalmaz\u00e1sa a gyakorlatban</li> <li>UserControl szerep\u00e9nek bemutat\u00e1sa Window Forms alkalmaz\u00e1sokban, Document-View architekt\u00fara eset\u00e9n</li> <li>A grafikus megjelen\u00edt\u00e9s elveinek gyakorl\u00e1sa Window Forms alkalmaz\u00e1sokban (<code>Paint</code> esem\u00e9ny, <code>Invalidate</code>, <code>Graphics</code> haszn\u00e1lata)</li> </ul> <p>A kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok \u00e9s kor\u00e1bbi gyakorlatok anyaga:</p> <ul> <li>UML alap\u00fa modellez\u00e9s (1. gyakorlat)</li> <li>Windows Forms alkalmaz\u00e1sfejleszt\u00e9s</li> <li>Szoftverarchitekt\u00far\u00e1k (Document-View architekt\u00fara)</li> </ul>"},{"location":"labor/old-6-doc-view/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> </ul>"},{"location":"labor/old-6-doc-view/#a-gyakorlat-menete","title":"A gyakorlat menete","text":"<p>Az al\u00e1bbiak szerint fogunk dolgozni:</p> <ul> <li>A feladat/c\u00e9lok r\u00f6vid ismertet\u00e9se: egy interakt\u00edv fonteditor (bet\u0171t\u00edpus-szerkeszt\u0151) megtervez\u00e9se</li> <li>A k\u00e9sz alkalmaz\u00e1st futtatva a feladat (a k\u00e9sz alkalmaz\u00e1s m\u0171k\u00f6d\u00e9s\u00e9nek) ismertet\u00e9se</li> <li>Az alkalmaz\u00e1s architekt\u00far\u00e1j\u00e1nak megtervez\u00e9se (oszt\u00e1lydiagram elk\u00e9sz\u00edt\u00e9se)</li> <li>A k\u00e9sz alkalmaz\u00e1s forr\u00e1sk\u00f3dj\u00e1nak alapj\u00e1n n\u00e9h\u00e1ny fontosabb forgat\u00f3k\u00f6nyv megval\u00f3s\u00edt\u00e1s\u00e1nak \u00e1ttekint\u00e9se</li> </ul> Megjegyz\u00e9s gyakorlatvezet\u0151k sz\u00e1m\u00e1ra <p>A gyakorlat elej\u00e9n t\u00f6lts\u00fck le a k\u00e9sz alkalmaz\u00e1st (innen kl\u00f3nozzuk ki: https://github.com/bmeviauab00/lab-docview-megoldas). A hallgat\u00f3k ekkor m\u00e9g ne t\u00f6lts\u00e9k le, ne ezt kattintgass\u00e1k, majd csak a gyakorlat m\u00e1sodik r\u00e9sz\u00e9ben. A gyakorlatvezet\u0151knek viszont sz\u00fcks\u00e9ge lesz r\u00e1, mert ennek seg\u00edts\u00e9g\u00e9vel t\u00f6rt\u00e9nik a feladat bemutat\u00e1sa.</p>"},{"location":"labor/old-6-doc-view/#1-feladat-a-feladat-ismertetese","title":"1. Feladat - A feladat ismertet\u00e9se","text":"<p>Interakt\u00edv FontEditor (bet\u0171t\u00edpus szerkeszt\u0151) k\u00e9sz\u00edt\u00e9se, amelyben lehet szerkeszteni a karaktereket, \u00e9s az aktu\u00e1lis bet\u0171k\u00e9szlet alapj\u00e1n tetsz\u0151leges p\u00e9ldasz\u00f6veg megjelen\u00edthet\u0151. Az alkalmaz\u00e1s felhaszn\u00e1l\u00f3i fel\u00fclete fut\u00e1s k\u00f6zben:</p> <p></p> <p>A k\u00f6vetkez\u0151 funkci\u00f3kat kell t\u00e1mogatnia:</p> <ul> <li>T\u00f6bb bet\u0171t\u00edpus egyidej\u0171 szerkeszt\u00e9se. Ez egyes bet\u0171t\u00edpusok k\u00fcl\u00f6n tab oldalakon szerkeszthet\u0151k (MDI \u2013 Multiple Document Interface).</li> <li>\u00daj bet\u0171t\u00edpus a File/New men\u00fcelem kiv\u00e1laszt\u00e1s\u00e1val hozhat\u00f3 l\u00e9tre (meg kell adni a nev\u00e9t).</li> <li>Ez egyes bet\u0171t\u00edpusok elmenthet\u0151k (File/Save), bet\u00f6lthet\u0151k (File/Open), \u00e9s az aktu\u00e1lis dokumentum bez\u00e1rhat\u00f3 (File/Close). Ezek helye megvan az alkalmaz\u00e1sban, de nincsenek r\u00e9szleteiben implement\u00e1lva (a f\u00fcggv\u00e9nyek t\u00f6rzse nincs kit\u00f6ltve \u2013 opcion\u00e1lis HF).</li> <li>A felhaszn\u00e1l\u00f3i fel\u00fclet fel\u00e9p\u00edt\u00e9se<ul> <li>Az oldal tetej\u00e9n (Sample text) egy mintasz\u00f6veg adhat\u00f3 meg, melyet az aktu\u00e1lis bet\u0171t\u00edpussal az alkalmaz\u00e1s megjelen\u00edt.</li> <li>Az oldalak k\u00f6zep\u00e9n egy karakters\u00e1v tal\u00e1lhat\u00f3. Egy adott karakteren dupl\u00e1n kattintva alatta megjelenik egy, az adott karakterhez tartoz\u00f3 szerkeszt\u0151n\u00e9zet.</li> <li>Az oldal alj\u00e1n egym\u00e1s mellett az eddig szerkeszt\u00e9sre megnyitott karakterek szerkeszt\u0151n\u00e9zetei l\u00e1that\u00f3k. Egy karakter t\u00f6bbsz\u00f6r is megnyithat\u00f3 szerkeszt\u00e9sre, ez esetben t\u00f6bb szerkeszt\u0151n\u00e9zet j\u00f6n l\u00e9tre hozz\u00e1. Ennek az az \u00e9rtelme, hogy ugyanazt a karaktert k\u00fcl\u00f6nb\u00f6z\u0151 nagy\u00edt\u00e1ssal is l\u00e1thatjuk/szerkeszthetj\u00fck.</li> </ul> </li> <li>A szerkeszt\u0151n\u00e9zetek fel\u00e9p\u00edt\u00e9se<ul> <li>Nagy r\u00e9sze (eltekintve a fels\u0151 s\u00e1v) a szerkeszt\u0151fel\u00fclet, ahol fekete h\u00e1tt\u00e9ren s\u00e1rg\u00e1val jelennek meg az akt\u00edv pixelek. Egy adott pixelen az eg\u00e9rrel kattintva a pixel invert\u00e1l\u00f3dik.</li> <li>Bal fels\u0151 sarokban a megjelen\u00edtett karakter l\u00e1that\u00f3</li> <li>\u2019c\u2019 gomb: Clear, minden akt\u00edv pixelt t\u00f6r\u00f6l</li> <li>\u2019+\u2019 gomb: nagy\u00edt\u00e1s</li> <li>\u2019-\u2019 gomb: kicsiny\u00edt\u00e9s</li> </ul> </li> </ul> <p>Futtassuk az alkalmaz\u00e1st, \u00e9s vizsg\u00e1ljuk meg a m\u0171k\u00f6d\u00e9s\u00e9t a fentieknek megfelel\u0151en. Azt mindenk\u00e9ppen n\u00e9zz\u00fck meg, hogy ha egy karakter szerepel a mintasz\u00f6vegben, valamint t\u00f6bbsz\u00f6r megnyitjuk szerkeszt\u00e9sre, akkor az egyik n\u00e9zetben v\u00e1ltoztatva (egy pixelt invert\u00e1lva) valamennyi n\u00e9zete friss\u00fcl.</p> <p>Az alkalmaz\u00e1s a k\u00f3dmennyis\u00e9g minim\u00e1lis \u00e9rt\u00e9ken tart\u00e1sa \u00e9rdek\u00e9ben minimalisztikus, pl. a hibakezel\u00e9s nincs \u00e1ltal\u00e1noss\u00e1g\u00e1ban kidolgozva, hi\u00e1nyoznak ellen\u0151rz\u00e9sek. Ugyanakkor k\u00f3dmegjegyz\u00e9sekkel el van l\u00e1tva, mely seg\u00edti a k\u00f3d ut\u00f3lagos meg\u00e9rt\u00e9s\u00e9t.</p>"},{"location":"labor/old-6-doc-view/#2-feladat-az-alkalmazas-megtervezese","title":"2. Feladat - Az alkalmaz\u00e1s megtervez\u00e9se","text":"<p>A c\u00e9l az, hogy l\u00e1ssuk, milyen folyamatot k\u00f6vetve, milyen l\u00e9p\u00e9sekben dolgozunk, mikor milyen tervez\u0151i l\u00e9p\u00e9seket kell meghoznunk. T\u00f6rekedj\u00fcnk oktat\u00f3i \u00e9s hallgat\u00f3i r\u00e9szr\u0151l is az interaktivit\u00e1sra, k\u00f6z\u00f6sen hozzuk meg a d\u00f6nt\u00e9seket.</p> <p>Hozzunk l\u00e9tre egy \u00faj C# nyelv\u0171 \u201eWindow Form App\u201d projektet (.NET 6-osat), legyen a neve FontEditor. Vegy\u00fcnk fel egy oszt\u00e1lydiagramot: projekten jobb katt, Add / New Item, majd a megjelen\u0151 ablakban Class Diagram kiv\u00e1laszt\u00e1sa, a neve maradhat az alap\u00e9rtelmezett. \u00c1ll\u00edtsuk be, hogy a diagram mutassa majd a m\u0171veletek szignat\u00far\u00e1it is (pl. jobb katt a h\u00e1tt\u00e9ren, Change Members Format / Display Full Signature). A gyakorlat nagy r\u00e9sz\u00e9ben ezt a diagramot fogjuk szerkeszteni.</p> <p>A k\u00e9sz oszt\u00e1lydiagram a k\u00f6vetkez\u0151, eddig fogunk fokozatosan eljutni:</p> <p></p>"},{"location":"labor/old-6-doc-view/#document-view-architektura","title":"Document-View architekt\u00fara","text":"<p>Az els\u0151 tervez\u0151i d\u00f6nt\u00e9s: architekt\u00far\u00e1t kell v\u00e1lasztani. A Document-View eset\u00fcnkben egy\u00e9rtelm\u0171 v\u00e1laszt\u00e1s: dokumentumokkal dolgozunk, \u00e9s t\u00f6bb n\u00e9zettel, melyeket szinkronban kell tartani. Az al\u00e1bbi \u00e1bra ismerteti a m\u0171k\u00f6d\u00e9st. A n\u00e9zetek az observerek, a document pedig a subject, melynek v\u00e1ltoz\u00e1saira az egyes n\u00e9zetek fel vannak iratkozva.</p> <p></p> <p>A D-V architekt\u00far\u00e1b\u00f3l ad\u00f3d\u00f3an sz\u00fcks\u00e9g\u00fcnk lesz dokumentum oszt\u00e1lyra, amely a dokumentum adatait t\u00e1rolja (tagv\u00e1ltoz\u00f3kban), mint pl. a n\u00e9v, el\u00e9r\u00e9si \u00fat, pixelm\u00e1trix. Tegy\u00fck fel, hogy a k\u00e9s\u0151bbiekben t\u00f6bb dokumentum t\u00edpust is t\u00e1mogatni kell majd: pl. megnyithatunk egy olyan tabf\u00fclet, melyen a BKK j\u00e1rm\u0171vekhez tudjuk rendelni a bet\u0171t\u00edpusokat (elektronikus kijelz\u0151). Vannak olyan dokumentum adatok, melyek minden dokumentum t\u00edpusban megjelennek (pl. n\u00e9v, el\u00e9r\u00e9si \u00fat). Az egyes dokumentum t\u00edpusoknak a k\u00f6z\u00f6s tulajdons\u00e1gait/m\u0171veleteit c\u00e9lszer\u0171 egy <code>Document</code> \u0151soszt\u00e1lyba kiszervezni, hogy ne legyenek duplik\u00e1lva az egyes dokumentum t\u00edpusokat reprezent\u00e1l\u00f3 dokumentum oszt\u00e1lyokban.</p> <ul> <li>Vegy\u00fck fel a <code>Document</code> oszt\u00e1lyt (ez az absztrakt \u0151s).</li> <li>Vegy\u00fcnk fel bele egy <code>string Name</code> property-t (ez jelenik meg a tabf\u00fcleken).</li> </ul> <p>A Document-View architekt\u00far\u00e1b\u00f3l ad\u00f3d\u00f3an sz\u00fcks\u00e9g van egy n\u00e9zet interf\u00e9szre (egy <code>Update</code> m\u0171velettel a n\u00e9zet \u00e9rtes\u00edt\u00e9s\u00e9hez), valamint a dokumentumoknak nyilv\u00e1n kell tartaniuk egy list\u00e1ban a n\u00e9zeteiket:</p> <ul> <li>Vegy\u00fck fel az <code>IView</code> interf\u00e9szt.</li> <li>Vegy\u00fcnk fel bele egy <code>Update</code> m\u0171veletet.</li> <li>A <code>Document</code> oszt\u00e1lyba vegy\u00fcnk fel egy <code>List&lt;IView&gt; views</code> mez\u0151t (a Fields-n\u00e9l). Jobb gombbal kattintsunk a mez\u0151 nev\u00e9n a diagramon, \u00e9s a men\u00fcb\u0151l Show as collection association kiv\u00e1laszt\u00e1sa.</li> <li>A <code>Document</code> oszt\u00e1lyba vegy\u00fcnk fel a <code>void AttachView(IView view)</code> m\u0171veletet, mellyel \u00faj n\u00e9zetet lehet beregisztr\u00e1lni.</li> <li>V\u00e9g\u00fcl vegy\u00fcnk fel egy <code>void DetachView(IView view)</code>-t, mert n\u00e9zetet bez\u00e1rni is lehet.</li> </ul> <p>T\u00e1mogatnunk kell az egyes dokumentumok tartalm\u00e1nak perziszt\u00e1l\u00e1s\u00e1t (ment\u00e9s/bet\u00f6lt\u00e9s). Ezekhez vegy\u00fcnk fel a <code>Document</code> \u0151sbe a megfelel\u0151 m\u0171veleteket:</p> <ul> <li><code>Document</code>-be <code>LoadDocument(string path)</code> felv\u00e9tele.</li> <li><code>Document</code>-be <code>SaveDocument(string path)</code> felv\u00e9tele.</li> <li>Mindkett\u0151 legyen absztrakt, hiszen csak az egyes dokumentum lesz\u00e1rmazottakban tudunk implement\u00e1ci\u00f3t megadni: szelekt\u00e1ljuk ki a k\u00e9t m\u0171veletet, \u00e9s a Properties ablakban az Inheritence modifier legyen Abstract.</li> </ul> <p>Az egyes dokumentumoknak t\u00e1mogatniuk kell a n\u00e9zeteik friss\u00edt\u00e9s\u00e9t, ez minden dokumentum t\u00edpusra k\u00f6z\u00f6s:</p> <ul> <li>A <code>Document</code>-be vegy\u00fck fel az <code>UpdateAllViews()</code>-t (ez felel meg az Observer minta Notify m\u0171velet\u00e9nek).</li> </ul>"},{"location":"labor/old-6-doc-view/#konkret-dokumentum-es-adatai","title":"Konkr\u00e9t dokumentum \u00e9s adatai","text":"<p>Sz\u00fcks\u00e9g van egy olyan dokumentum t\u00edpusra, ami a bet\u0171t\u00edpusok szerkeszt\u00e9s\u00e9hez tartozik, amely a tagv\u00e1ltoz\u00f3iban nyilv\u00e1ntartja a sz\u00fcks\u00e9ges adatokat: legyen a neve <code>FontEditorDocument</code>.</p> <ul> <li>Vegy\u00fck fel a <code>FontEditorDocument</code> oszt\u00e1lyt.</li> <li>Sz\u00e1rmaztassuk a <code>Document</code>-b\u0151l (Toolbox \u2013 Inheritence kapcsolat).</li> <li>Ekkor a <code>LoadDocument</code> \u00e9s <code>SaveDocument</code> m\u0171veletekre automatikusan megsz\u00fcletik az override-ol\u00f3 m\u0171velet. Ha m\u00e9gsem lenne \u00edgy<ul> <li>Jel\u00f6lj\u00fck ki az \u0151sben a k\u00e9t m\u0171veletet.</li> <li>Copy</li> <li>Jel\u00f6lj\u00fck ki a <code>FontEditorDocument</code> oszt\u00e1lyt.</li> <li>Paste</li> <li>Jel\u00f6lj\u00fck itt ki a k\u00e9t m\u0171veletet, \u00e9s a Properties ablakban a Instance Modifier legyen <code>override</code>.</li> </ul> </li> </ul> <p>A dokumentumunk tagv\u00e1ltoz\u00f3kban t\u00e1rolja az adatokat. Gondoljuk \u00e1t, hogy ezt hogyan c\u00e9lszer\u0171 megval\u00f3s\u00edtani. Lehetne egy h\u00e1romdimenzi\u00f3s t\u00f6mb (karakter \u2013 x \u2013 y), de ink\u00e1bb emelj\u00fck ki egy k\u00fcl\u00f6n oszt\u00e1lyba az egy adott karakter pixeleinek t\u00e1rol\u00e1s\u00e1t/menedzsel\u00e9s\u00e9t: vezess\u00fck be a <code>CharDef</code> oszt\u00e1lyt.</p> <p>Pixel t\u00f6mb helyett</p> <p>Az\u00e9rt nem a pixelt\u00f6mb\u00f6t haszn\u00e1ljuk k\u00f6zvetlen\u00fcl, mert csak egy \u00faj oszt\u00e1ly bevezet\u00e9s\u00e9vel van lehet\u0151s\u00e9g\u00fcnk kifejezetten ide tartoz\u00f3 m\u0171veletek bevezet\u00e9s\u00e9re, vagyis az egys\u00e9gbez\u00e1r\u00e1s korrekt megval\u00f3s\u00edt\u00e1s\u00e1ra.</p> <ul> <li>Vegy\u00fck fel a <code>CharDef</code> oszt\u00e1lyt.</li> <li> <p><code>CharDef</code>-be <code>bool[,] Pixels</code> tulajdons\u00e1g felv\u00e9tele.</p> <p>t\u00f6bbdimenzo\u00f3s t\u00f6mb\u00f6k C#-ban</p> <p>A fenti p\u00e9ld\u00e1ban egy t\u00f6bbdimenzi\u00f3s t\u00f6mb\u00f6t haszn\u00e1ltunk <code>bool[,]</code> \u00e9s nem t\u00f6mb\u00f6k t\u00f6mbj\u00e9t <code>bool[][]</code>, mivel ezt nyelvi szinten is t\u00e1mogatja a C# \u00e9s jobb teljes\u00edtm\u00e9nyt ny\u00fajt, mint a t\u00f6mb\u00f6k t\u00f6mbje, mert egy objektumk\u00e9nt t\u00f6rol\u00f3dik a heapen.</p> </li> <li> <p><code>CharDef</code>-be <code>char Character</code> felv\u00e9tele: az egyes <code>CharDef</code> oszt\u00e1lyok t\u00e1rolj\u00e1k magukr\u00f3l, hogy mely karakter pixeleit reprezent\u00e1lj\u00e1k.</p> </li> </ul> <p>A dokumentumnak lesz egy gy\u0171jtem\u00e9nye <code>CharDef</code> objektumokb\u00f3l: minden karakterhez pontosan egy darab. Gondoljuk \u00e1t, hogy a legc\u00e9lszer\u0171bb ezt megval\u00f3s\u00edtani. Az egyes karakterdefin\u00edci\u00f3kat a karakterk\u00f3djukkal akarjuk c\u00edmezni, \u00edgy a <code>Dictionary&lt;char, CharDef&gt;</code> ide\u00e1lis v\u00e1laszt\u00e1s: a karakterk\u00f3d a kulcs, az hozz\u00e1 tartoz\u00f3 <code>CharDef</code> pedig az \u00e9rt\u00e9k.</p> <ul> <li><code>FontEditorDocument</code>-be: <code>Dictionary&lt;char, CharDef&gt; charDefs</code> mez\u0151 felv\u00e9tele. Jobb katt, Show as collection association.</li> </ul>"},{"location":"labor/old-6-doc-view/#dokumentumok-menedzselese-app-singleton-osztaly","title":"Dokumentumok menedzsel\u00e9se - App Singleton oszt\u00e1ly","text":"<p>Az alkalmaz\u00e1sban nyilv\u00e1n kell tartani a megnyitott dokumentumok list\u00e1j\u00e1t. Mely oszt\u00e1ly felel\u0151ss\u00e9ge legyen? Vezess\u00fcnk be r\u00e1 egy alkalmaz\u00e1sszint\u0171 oszt\u00e1lyt: legyen a neve <code>App</code> (Windows Forms alatt m\u00e1r van <code>Application</code>, nem c\u00e9lszer\u0171 ezt a nevet v\u00e1lasztani). Ez lesz az alkalmaz\u00e1sunk \u201egy\u00f6k\u00e9roszt\u00e1lya\u201d.</p> <ul> <li>Vegy\u00fck fel az <code>App</code> oszt\u00e1lyt.</li> <li><code>App</code>-ba <code>List&lt;FontEditorDocument&gt; documents</code> mez\u0151 felv\u00e9tele, majd Show as collection association.</li> </ul> <p>Gondoljuk v\u00e9gig, hogyan t\u00f6rt\u00e9nik majd egy \u00faj dokumentum l\u00e9trehoz\u00e1sa (mi t\u00f6rt\u00e9nik a File/New men\u00fcelem kiv\u00e1laszt\u00e1sakor): be kell k\u00e9rni a felhaszn\u00e1l\u00f3t\u00f3l a dokumentum nev\u00e9t, l\u00e9tre kell hozni egy <code>FontEditorDocument</code> objektumot, fel kell venni a megnyitott dokumentumok list\u00e1j\u00e1ba stb. Ezt a logik\u00e1t ne tegy\u00fck a GUI-ba (men\u00fcelem click esem\u00e9nykezel\u0151): tegy\u00fck abba az oszt\u00e1lyba, melynek a felel\u0151ss\u00e9ge a megnyitott dokumentumok menedzsel\u00e9se, amely t\u00e1rolja a sz\u00fcks\u00e9ges adatokat hozz\u00e1 (dokumentum lista). \u00cdgy legyen ez az <code>App</code> oszt\u00e1lyunk feladata, benne vegy\u00fck fel a sz\u00fcks\u00e9ges m\u0171veleteket:</p> <ul> <li><code>App</code>-ba <code>NewDocument</code> \u00e9s <code>OpenDocument</code> m\u0171veletek felv\u00e9tele.</li> </ul> <p>Most a dokumentum ment\u00e9st gondoljuk v\u00e9gig: a File/Save mindig az akt\u00edv dokumentumra vonatkozik. Valakinek nyilv\u00e1n kell tartani, melyik az akt\u00edv dokumentum: legyen ez az <code>App</code>, hiszen \u0151 t\u00e1rolja a dokumentumok list\u00e1j\u00e1t is.</p> <ul> <li>A Toolbox-on v\u00e1lasszuk ki az Association kapcsolatot. Az <code>App</code>-b\u00f3l h\u00fazzunk egy nyilat a <code>FontEditorDocument</code>-be. V\u00e1lasszuk ki az \u00fajonnan l\u00e9trehozott kapcsolatot, \u00e9s nevezz\u00fck \u00e1t <code>ActiveDocument</code>-re.</li> <li><code>App</code>-ba <code>void SaveActiveDocument()</code> felv\u00e9tele.</li> <li><code>App</code>-ba <code>void CloseActiveDocument\u00e1()</code> felv\u00e9tele.</li> </ul> <p>Konkr\u00e9t dokumentumra vagy absztrakt \u0151sre hivatkozzunk?</p> <p>Mivel az <code>App</code> oszt\u00e1lyunk alkalmaz\u00e1s specifikus funkci\u00f3kat l\u00e1t el, nyugodtan hivatkozhat a konkr\u00e9t dokumentum t\u00edpusra, \u00e9s felesleges az absztrakt \u0151st\u0151l f\u00fcggen\u00fcnk, mert az csak nem k\u00edv\u00e1nt castol\u00e1sokhoz vezetne.</p> <p>Az <code>App</code> objektumb\u00f3l \u00e9rtelemszer\u0171en csak egyet kell/szabad l\u00e9trehozni, amely a fut\u00f3 alkalmaz\u00e1st reprezent\u00e1lja. Van m\u00e9g egy probl\u00e9m\u00e1nk: a File/Save stb. men\u00fcelem click esem\u00e9nykezel\u0151ben el kell \u00e9rj\u00fck ezt az egy objektumot. Illetve, majd t\u00f6bb m\u00e1s helyen is. J\u00f3 lenne, ha nem kellene minden oszt\u00e1lyban k\u00fcl\u00f6n el\u00e9rhet\u0151v\u00e9 tenni (tagv\u00e1ltoz\u00f3 vagy f\u00fcggv\u00e9nyparam\u00e9ter form\u00e1j\u00e1ban), hanem b\u00e1rhonnan egyszer\u0171en el\u00e9rhet\u0151 lenne. Erre ny\u00fajt megold\u00e1st a Singleton tervez\u00e9si minta. Egy oszt\u00e1lyb\u00f3l csak egy objektumot enged l\u00e9trehozni, \u00e9s ahhoz glob\u00e1lis hozz\u00e1f\u00e9r\u00e9st biztos\u00edt, m\u00e9gpedig az oszt\u00e1ly nev\u00e9n \u00e9s egy statikus <code>Instance</code> property-n kereszt\u00fcl, pl. \u00edgy: <code>App.Instance.SaveDocument</code> stb. Nem val\u00f3s\u00edtjuk meg teljes \u00e9rt\u00e9k\u0171en, de tegy\u00fck meg az al\u00e1bbiakat:</p> <ul> <li><code>App</code>-ba <code>App Instance</code> property felv\u00e9tele. Properties ablakban static: true.</li> <li><code>App</code>-ba priv\u00e1t konstruktor felv\u00e9tele.</li> </ul> <p>Az <code>App</code>-oszt\u00e1llyal v\u00e9gezt\u00fcnk.</p>"},{"location":"labor/old-6-doc-view/#nezetek","title":"N\u00e9zetek","text":"<p>A n\u00e9zetekkel eddig nem foglalkoztunk, ez a k\u00f6vetkez\u0151 l\u00e9p\u00e9s. Futtassuk a k\u00e9sz alkalmaz\u00e1st, \u00e9s n\u00e9zz\u00fck meg, hogy h\u00e1ny t\u00edpus\u00fa n\u00e9zetre van sz\u00fcks\u00e9g, melyikb\u0151l h\u00e1ny p\u00e9ld\u00e1ny lesz:</p> <ul> <li>K\u00e9t t\u00edpus\u00fa n\u00e9zetre van sz\u00fcks\u00e9g: az egyik a mintasz\u00f6veget jelen\u00edti meg, a m\u00e1sik egy adott karakter szerkeszt\u00e9s\u00e9t teszi lehet\u0151v\u00e9.</li> <li>Legyen az el\u0151z\u0151 neve <code>SampleTextView</code>, az ut\u00f3bbi\u00e9 <code>FontEditorView</code>.</li> <li><code>SampleTextView</code>-b\u00f3l mindig egy van (egy adott dokumentumra vonatkoz\u00f3an), a <code>FontEditorView</code> objektumok ig\u00e9ny szerint j\u00f6nnek l\u00e9tre, 0..n p\u00e9ld\u00e1ny l\u00e9tezhet.</li> <li>Vegy\u00fck fel a k\u00e9t oszt\u00e1lyt.</li> <li>Implement\u00e1ltassuk vel\u00fck az <code>IView</code> interf\u00e9szt (Toolbox / Inheritence kapcsolat). Az <code>Update</code> m\u0171velet automatikusan implement\u00e1lva lesz.</li> </ul> <p>Az egyes n\u00e9zetek a dokumentumukb\u00f3l \u201et\u00e1pl\u00e1lkoznak\u201d, a a dokumentumukban t\u00e1rolt adatokat jelen\u00edtik meg, azokat m\u00f3dos\u00edtj\u00e1k. Ehhez, a D-V architekt\u00far\u00e1nak megfelel\u0151en el kell \u00e9rj\u00e9k a dokumentumukat.</p> <ul> <li>A <code>SampleTextView</code> \u00e9s <code>FontEditorView</code>-ban vegy\u00fcnk fel egy <code>FontEditorDocument</code> t\u00edpus\u00fa <code>document</code> nev\u0171 mez\u0151t (ha felvett\u00fck az egyikben, lehet copy-paste-tel m\u00e1solni a m\u00e1sikba), majd \"Show as Association\". Megjegyz\u00e9s: az\u00e9rt nem c\u00e9lszer\u0171 \u00e1ltal\u00e1nos <code>Document</code> t\u00edpus\u00fat felvenni (\u00e9s az interf\u00e9szbe felvinni), mert a view-knak a konkr\u00e9t dokumentum adatait (l\u00e1sd al\u00e1bb) el kell \u00e9rni\u00fck.</li> </ul> <p>Gondoljuk v\u00e9gig, milyen adattagokkal rendelkeznek az egyes n\u00e9zetek. Ehhez futtassuk az alkalmaz\u00e1st, \u00e9s n\u00e9zz\u00fck meg ism\u00e9t a felhaszn\u00e1l\u00f3i fel\u00fclet\u00e9t.</p> <ul> <li>A <code>SampleTextView</code> t\u00e1rolja a mintasz\u00f6veget, melyet meg kell jelen\u00edteni. Vegy\u00fcnk fel egy <code>sampleText:string</code> mez\u0151t. Ha el kellene menteni a mintasz\u00f6veget is, akkor a <code>FontEditorDocument</code>-ben kellene t\u00e1rolni (\u00e9s onnan mindig lek\u00e9rdezni), mert az adatok ment\u00e9s\u00e9\u00e9rt a dokumentum oszt\u00e1lyunk a felel\u0151s.</li> <li>A <code>FontEditorView</code> k\u00e9t dolgot t\u00e1rol:<ul> <li>A karakter k\u00f3dja, melynek pixeleit megjelen\u00edti. Vegy\u00fcnk fel egy <code>editedChar: char</code> mez\u0151t.</li> <li>A nagy\u00edt\u00e1si t\u00e9nyez\u0151t (<code>zoom: double</code> felv\u00e9tele)</li> </ul> </li> </ul> <p>A n\u00e9zetek maguk felel\u0151sek a kirajzol\u00e1suk\u00e9rt:</p> <ul> <li><code>Draw (g:Graphics)</code> felv\u00e9tele mindk\u00e9t n\u00e9zetbe.</li> </ul>"},{"location":"labor/old-6-doc-view/#fonteditordocument-muveletek","title":"FontEditorDocument m\u0171veletek","text":"<p>A <code>FontEditorDocument</code>-ben egy priv\u00e1t list\u00e1ban van egyel\u0151re jelen a <code>CharDef</code>-ek list\u00e1ja. A n\u00e9zetek \u00edgy nem tudj\u00e1k el\u00e9rni, pedig a megjelen\u00edt\u00e9shez sz\u00fcks\u00e9g\u00fck lenne r\u00e1. A dokumentumunkban be kell vezess\u00fcnk olyan m\u0171veleteket, melyek a dokumentum \u00e1ltal t\u00e1rolt adatokat a n\u00e9zetek sz\u00e1m\u00e1ra el\u00e9rhet\u0151v\u00e9 teszik, \u00e9s lehet\u0151s\u00e9get biztos\u00edtanak a m\u00f3dos\u00edt\u00e1sra is.</p> <ul> <li>Mindk\u00e9t n\u00e9zet el kell \u00e9rje a megjelen\u00edtett karakterek pixeleit t\u00e1rol\u00f3 <code>CharDef</code> objektumokat. Ehhez vezess\u00fck be a <code>FontEditorDocument</code>-ben a <code>GetCharDef(c:char):CharDef</code> m\u0171veletet. Ezt hossz\u00fa t\u00e1von majd \u00fagy lesz c\u00e9lszer\u0171 megval\u00f3s\u00edtani, hogy a <code>GetCharDef</code> nem az eredeti objektumot adja vissza, hanem annak egy m\u00e1solat\u00e1t (clone). Ha az eredetit adn\u00e1 vissza, akkor a n\u00e9zetek K\u00d6ZVETLEN\u00dcL tudn\u00e1k m\u00f3dos\u00edtani a pixelek \u00e9rt\u00e9k\u00e9t, ezt mi nem akarjuk (b\u00e1r a funkci\u00f3k b\u0151v\u00edt\u00e9s\u00e9vel r\u00e1k\u00e9nyszer\u00fclhet\u00fcnk).</li> <li>A <code>FontEditorView</code>-nak k\u00e9pesnek kell lennie egy adott <code>CharDef</code> adott koordin\u00e1t\u00e1ban lev\u0151 pixel \u00e9rt\u00e9k\u00e9t invert\u00e1lni (eg\u00e9r kattint\u00e1skor). Ehhez vezess\u00fck be a <code>FontEditorDocument</code>-ben az <code>InvertCharDefPixel(c:char, x: int, y: int)</code> m\u0171veletet.</li> </ul>"},{"location":"labor/old-6-doc-view/#a-tervezes-zarasa","title":"A tervez\u00e9s z\u00e1r\u00e1sa","text":"<p>Eljutottunk oda, hogy megtervezt\u00fck az architekt\u00far\u00e1t, minden igaz\u00e1n l\u00e9nyeges d\u00f6nt\u00e9st meghoztunk. Az UML diagram alapj\u00e1n megsz\u00fcletett az oszt\u00e1lyok v\u00e1za. Ezt term\u00e9szetesen jelent\u0151sen b\u0151v\u00edteni kell, m\u00e9g sz\u00fcletnek \u00faj oszt\u00e1lyok is (pl. Form-ok, vez\u00e9rl\u0151k).</p>"},{"location":"labor/old-6-doc-view/#3-feladat-a-kesz-alkalmazas-attekintese","title":"3. Feladat - A k\u00e9sz alkalmaz\u00e1s \u00e1ttekint\u00e9se","text":"<p>Id\u0151 hi\u00e1ny\u00e1ban nem val\u00f3s\u00edtjuk meg az alkalmaz\u00e1st, hanem a k\u00e9sz megold\u00e1st n\u00e9zz\u00fck \u00e1t (laboron kb. 15 percben), annak is csak n\u00e9h\u00e1ny l\u00e9nyeges haszn\u00e1lati eset\u00e9t.</p> <p>T\u00f6lts\u00fck le  a k\u00e9sz megold\u00e1st. Ehhez parancssorban navig\u00e1ljunk a c:\\work\\ mapp\u00e1ba (ha a laborban dolgozunk), \u00e9s adjuk ki a k\u00f6vetkez\u0151 parancsot: <p><code>git clone https://github.com/bmeviauab00/lab-docview-megoldas</code></p> <p>Nyissuk meg a k\u00e9sz solution-t, futtassuk \u00e9s pr\u00f3b\u00e1ljuk ki az alkalmaz\u00e1s alapfunkci\u00f3it.</p>"},{"location":"labor/old-6-doc-view/#nezetek-megvalositasa","title":"N\u00e9zetek megval\u00f3s\u00edt\u00e1sa","text":"<p>Nyissuk meg a <code>FontEditorView</code>-t, el\u0151sz\u00f6r a k\u00f3dot n\u00e9zz\u00fck. A <code>FontEditorView</code> egyr\u00e9szt implement\u00e1lja az <code>IView</code> interf\u00e9szt, m\u00e1sr\u00e9szt a <code>UserControl</code>-b\u00f3l sz\u00e1rmazik. M\u00e9gpedig az\u00e9rt, mert \u00edgy a tervez\u0151ben (designer) tudjuk kialak\u00edtani a felhaszn\u00e1l\u00f3i fel\u00fclet\u00e9t, pont \u00fagy, mint egy \u0171rlapnak. A Visual Studio designer fel\u00fclet\u00e9n ak\u00e1r bele is m\u00f3dos\u00edthatn\u00e1nk a layoutba \u00e9s a vez\u00e9rl\u0151k tulajdons\u00e1gaiba. Ha k\u00edv\u00e1ncsiak vagyunk, ki is pr\u00f3b\u00e1lhatjuk ezt (pl. a nagy\u00edt\u00e1s \u00e9s a kicsiny\u00edt\u00e9s gombok hely\u00e9nek megv\u00e1ltoztat\u00e1s\u00e1val).</p> <p>A <code>SampleTextView</code> is <code>UserControl</code> lesz\u00e1rmazott, b\u00e1r annak egyszer\u0171 a fel\u00fclete (nincsenek rajta m\u00e1s vez\u00e9rl\u0151k), \u00edgy lehetett volna k\u00f6z\u00f6ns\u00e9ges <code>Control</code> lesz\u00e1rmazott is.</p> <p> Vonjuk le a tanuls\u00e1got: Windows Forms k\u00f6rnyezetben a n\u00e9zeteket tipikusan <code>UserControl</code>-k\u00e9nt (esetleg <code>Control</code>-k\u00e9nt) c\u00e9lszer\u0171 megval\u00f3s\u00edtani.</p>"},{"location":"labor/old-6-doc-view/#egy-oldal-tab-elrendezese","title":"Egy oldal (tab) elrendez\u00e9se","text":"<p>Futtassuk az alkalmaz\u00e1st. Valahogy ki kell alak\u00edtsuk egy adott oldal (tabpage) elrendez\u00e9s\u00e9t. Lehet\u0151leg tervez\u0151i n\u00e9zetben, \u00e9s nem fut\u00e1s k\u00f6zben, k\u00f3db\u00f3l poz\u00edcion\u00e1lva az elemeket (legal\u00e1bbis ahol nem musz\u00e1j). A <code>UserControl</code>-ok alkalmaz\u00e1sa jelenti sz\u00e1munkra a megold\u00e1st. Nyissuk meg a <code>FontDocumentControl</code>-t tervez\u0151i n\u00e9zetben. Ez egy olyan vez\u00e9rl\u0151, amely egy taboldalra ker\u00fcl fel, azt t\u00f6lti ki teljesen. Az oldalt a m\u00e1r ismert layout technik\u00e1kkal alak\u00edtottuk ki (<code>Label</code>, <code>TextBox</code>, <code>Panel</code>-ek Dock-kolva). Ha van id\u0151nk, akkor n\u00e9zz\u00fck meg a Document Outline ablakban. Az igazi \u00e9rdekess\u00e9g pedig az, hogy a <code>SampleTextView</code>-t is a Toolbox-r\u00f3l drag&amp;drop-pal ker\u00fclt felhelyez\u00e9sre (pont \u00fagy, mintha egy be\u00e9p\u00edtett vez\u00e9rl\u0151 lenne). Annyit n\u00e9zz\u00fcnk meg, hogy a <code>SampleTextView</code> val\u00f3ban ott van a Toolbox tetej\u00e9n.</p>"},{"location":"labor/old-6-doc-view/#forgatokonyv-1-egy-pixel-invertalasa-nezetek-szinkronizalasa","title":"Forgat\u00f3k\u00f6nyv 1 \u2013 Egy pixel invert\u00e1l\u00e1sa, n\u00e9zetek szinkroniz\u00e1l\u00e1sa","text":"<p> Ez egy kiemelt jelent\u0151s\u00e9g\u0171 forgat\u00f3k\u00f6nyv, mert ezt illusztr\u00e1lja a D-V architekt\u00fara alapmechanizmus\u00e1t, a n\u00e9zetek friss\u00edt\u00e9s\u00e9t \u00e9s konzisztensen tart\u00e1s\u00e1t. Keress\u00fck meg azt a f\u00fcggv\u00e9nyt, ahol az eg\u00e9sz pixel invert\u00e1l\u00e1s folyamat elindul. A <code>FontEditorView.FontEditorView_MouseClick</code> a kiindul\u00f3pont. Itt az al\u00e1bb kiemelt sor a l\u00e9nyeg:</p> <pre><code>private void FontEditorView_MouseClick(object sender, MouseEventArgs e)\n{\n    int x = e.X / zoom;\n    int y = (e.Y - offsetY) / zoom;\n    if (x &gt;= CharDef.FontSize.Width)\n        return;\n\n    document.InvertCharDefPixel(editedChar, x, y);\n}\n</code></pre> <p>N\u00e9zz\u00fck meg a <code>FontEditorDocument.InvertCharDefPixel</code>-t. Az invert\u00e1lja a megfelel\u0151 <code>CharDef</code> pixel\u00e9t, de a l\u00e9nyeg az utols\u00f3 sor:</p> <pre><code>public void InvertCharDefPixel(char c, int x, int y)\n{\n    var charDef = GetCharDefCore(c);\n    if (charDef == null)\n        return;\n\n    charDef.Pixels[x, y] = !charDef.Pixels[x, y];\n\n    UpdateAllViews();\n}\n</code></pre> <p>Az <code>UpdateAllViews</code> a <code>Document</code> \u0151sben van, <code>Update</code>-et h\u00edv minden n\u00e9zetre. Ami \u00e9rdekes, hogy az <code>Update</code> hogyan van meg\u00edrva az egyes n\u00e9zetekben. N\u00e9zz\u00fck meg pl. a <code>FontEditView</code>-t:</p> <pre><code>public void Update()\n{\n    Invalidate();\n}\n</code></pre> <p>Az <code>Update</code> hat\u00e1s\u00e1ra a n\u00e9zetek \u00fajra kell rajzolj\u00e1k magukat az aktu\u00e1lis dokumentum \u00e1llapot alapj\u00e1n. De az <code>Update</code>-ben nem tudunk rajzolni, csak az <code>OnPaint</code>-ben. \u00cdgy itt az <code>Invalidate</code> h\u00edv\u00e1ssal kiv\u00e1ltjuk a <code>Paint</code> esem\u00e9nyt. Ez megint egy tanuls\u00e1g: Windows Forms alkalmaz\u00e1sokban a n\u00e9zetek <code>Update</code> f\u00fcggv\u00e9ny\u00e9ben tipikusan egy <code>Invalidate</code> h\u00edv\u00e1s szokott lenni.</p> <p>Z\u00e1r\u00e1sk\u00e9ppen n\u00e9zz\u00fck meg a <code>FontEditView.OnPaint</code> megval\u00f3s\u00edt\u00e1s\u00e1t. Egyetlen l\u00e9nyeges dolog van itt: a megjelen\u00edt\u00e9shez le kell k\u00e9rni a dokumentumt\u00f3l az aktu\u00e1lis <code>CharDef</code>-et (mert a n\u00e9zet a D-V architekt\u00fara alapelveinek megfelel\u0151en nem t\u00e1rolja), majd ki kell azt rajzolni.</p> <pre><code>protected override void OnPaint(PaintEventArgs e)\n{\n    base.OnPaint(e);\n\n    var editedCharDef = document.GetCharDef(editedChar);\n\n    CharDefViewModel.DrawFont(e.Graphics, editedCharDef, 0, offsetY, zoom);\n}\n</code></pre> <p>Kirajzol\u00e1s logik\u00e1ja</p> <p>Mivel a kirajzol\u00e1s logik\u00e1ja a <code>FontEditorView</code>-ban \u00e9s a <code>SampleTextView</code>-ban is azonosan m\u0171k\u00f6dik a <code>Graphics</code> oszt\u00e1ly haszn\u00e1lat\u00e1val, kiszervezt\u00fck ezt egy <code>CharDefViewModel</code> seg\u00e9doszt\u00e1lyba az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1g kedv\u00e9\u00e9rt.</p> <p>A <code>CharDef</code>-be nem c\u00e9lszer\u0171 rakni ezt a logik\u00e1t, mivel az egy n\u00e9zet f\u00fcggetlen adatreprezent\u00e1ci\u00f3, \u00e9s sokkal ink\u00e1bb a dokumentumhoz tartozik, mint a n\u00e9zethez.</p>"},{"location":"labor/old-6-doc-view/#forgatokonyv-2-uj-dokumentum-letrehozasa-opcionalis","title":"Forgat\u00f3k\u00f6nyv 2 \u2013 \u00daj dokumentum l\u00e9trehoz\u00e1sa (opcion\u00e1lis)","text":"<p>Azt n\u00e9zz\u00fck meg, hogyan t\u00f6rt\u00e9nik egy \u00faj dokumentum l\u00e9trehoz\u00e1sa, vagyis mi t\u00f6rt\u00e9nik a File/New men\u00fcelem kiv\u00e1laszt\u00e1sakor.</p> <p>Nyissuk meg a <code>MainForm</code>-ot tervez\u0151i n\u00e9zetben, v\u00e1laszuk a File/New men\u00fcelemet, majd ugorjunk el a <code>Click</code> esem\u00e9nykezel\u0151h\u00f6z. Arra l\u00e1tunk p\u00e9ld\u00e1t, hogy az <code>App</code> oszt\u00e1ly, mint Singleton, hogy \u00e9rhet\u0151 el:</p> <pre><code>App.Instance.NewDocument();\n</code></pre> <p>Az \u00f6sszes t\u00f6bbi men\u00fcelem esem\u00e9nykezel\u0151je hasonl\u00f3, nincs semmi logika a GUI-ban, csak egyszer\u0171 tov\u00e1bbh\u00edv\u00e1s az <code>App</code>-ba.</p> <p>Tekints\u00fck \u00e1t az <code>App.NewDocument</code> t\u00f6rzs\u00e9t, \u00e9s egy-egy mondatban fussuk \u00e1t a fontosabb l\u00e9p\u00e9seket.</p> <ol> <li><code>NewDocForm</code> n\u00e9zet megnyit\u00e1sa \u00e9s v\u00e1rakoz\u00e1s a v\u00e1laszra.</li> <li>Sikeres v\u00e1lasz eset\u00e9n \u00faj <code>FontEditorDocument</code> l\u00e9trehoz\u00e1sa \u00e9s felv\u00e9tele a dokumentumok k\u00f6z\u00e9, valamint akt\u00edvv\u00e1 t\u00e9tele.</li> <li>\u00daj tab l\u00e9trehoz\u00e1sa a n\u00e9zetekkel.</li> </ol> <pre><code>public void NewDocument()\n{\n    // Bek\u00e9rj\u00fckk az \u00faj font t\u00edpus (dokumentum) nev\u00e9t a\n    // felhaszn\u00e1l\u00f3t\u00f3l egy mod\u00e1lis dial\u00f3gs ablakban.\n    var form = new NewDocForm(GetDocumentNames());\n    if (form.ShowDialog() != DialogResult.OK)\n        return;\n\n    // \u00daj dokumentum objektum l\u00e9trehoz\u00e1sa \u00e9s felv\u00e9tele a dokumentum list\u00e1ba.\n    var doc = new FontEditorDocument(form.FontName);\n    documents.Add(doc);\n\n    // Az \u00faj tab lesz az akt\u00edv, az activeDocument tagv\u00e1ltoz\u00f3t erre kell \u00e1ll\u00edtani.\n    UpdateActiveDocument(doc.Name);\n\n    CreateTabForNewDocument(doc);\n}\n</code></pre> <p>App oszt\u00e1ly felel\u0151ss\u00e9gi k\u00f6re</p> <p>Az egyszer\u0171s\u00e9g \u00e9rdek\u00e9ben az <code>App</code> oszt\u00e1ly most t\u00f6bb felel\u0151ss\u00e9ggel is rendelkezik, de ide\u00e1lis esetben sz\u00e9t lenne szedve pl. a k\u00f6vetkez\u0151 oszt\u00e1lyokra a felel\u0151ss\u00e9gi k\u00f6r\u00f6knek megfelel\u0151en:</p> <ul> <li><code>DocumentManager</code>: a megjelen\u00edt\u00e9st\u0151l f\u00fcggetlen\u00fcl a dokumentumokat t\u00e1roln\u00e1.</li> <li><code>ViewManager</code>: feladata a n\u00e9zetek menedzsel\u00e9se, tabcontrolokhoz hozz\u00e1ad\u00e1sa stb. lenne.</li> </ul> <p>Az <code>App.OpenDocument</code> m\u0171velet t\u00f6rzse nincs implement\u00e1lva, de a l\u00e9p\u00e9sek k\u00f3dmegjegyz\u00e9sek form\u00e1j\u00e1ban adottak, remek otthoni gyakorl\u00e1si lehet\u0151s\u00e9g a m\u0171velet t\u00e9nyleges megval\u00f3s\u00edt\u00e1sa.</p>"},{"location":"labor/old-7-tervezesi-mintak/","title":"7. Tervez\u00e9si mint\u00e1k","text":""},{"location":"labor/old-7-tervezesi-mintak/#a-gyakorlat-celja","title":"A gyakorlat c\u00e9lja","text":"<p>A gyakorlat c\u00e9ljai:</p> <ul> <li>Egy \u00f6sszetettebb p\u00e9lda alapj\u00e1n n\u00e9h\u00e1ny tervez\u00e9si minta gyakorlati alkalmaz\u00e1sa (els\u0151dlegesen Singleton, Command Processor \u00e9s Memento).</li> <li>A Document-View minta tov\u00e1bbi gyakorl\u00e1sa, illetve annak demonstr\u00e1l\u00e1sa, hogy a mint\u00e1nak t\u00f6bb vari\u00e1nsa l\u00e9tezik.</li> <li>Alapszint\u0171 betekint\u00e9st nyerni az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1got t\u00e1mogat\u00f3 oszt\u00e1lyk\u00f6nyvt\u00e1rak/keretrendszerek fejleszt\u00e9s\u00e9nek vil\u00e1g\u00e1ba.</li> <li>Jelent\u0151s\u00e9g\u00fcknek megfelel\u0151en tov\u00e1bb gyakoroljuk az objektumorient\u00e1lt paradigma legfontosabb koncepci\u00f3it (pl. felel\u0151ss\u00e9gek k\u00fcl\u00f6nv\u00e1laszt\u00e1sa).</li> </ul> <p>Kapcsol\u00f3d\u00f3 el\u0151ad\u00e1sok:</p> <ul> <li>Tervez\u00e9si mint\u00e1k</li> <li>Szoftver architekt\u00far\u00e1k t\u00e9mak\u00f6rb\u0151l a Document-View architekt\u00fara</li> <li>Windows Forms alkalmaz\u00e1sok fejleszt\u00e9se</li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#elofeltetelek","title":"El\u0151felt\u00e9telek","text":"<p>A gyakorlat elv\u00e9gz\u00e9s\u00e9hez sz\u00fcks\u00e9ges eszk\u00f6z\u00f6k:</p> <ul> <li>Visual Studio 2022</li> <li>Windows 10 vagy Windows 11 oper\u00e1ci\u00f3s rendszer (Linux \u00e9s macOS nem alkalmas)</li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#megoldas","title":"Megold\u00e1s","text":"A k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se <p> L\u00e9nyeges, hogy a labor sor\u00e1n a laborvezet\u0151t k\u00f6vetve kell dolgozni, tilos (\u00e9s \u00e9rtelmetlen) a k\u00e9sz megold\u00e1s let\u00f6lt\u00e9se. Ugyanakkor az ut\u00f3lagos \u00f6n\u00e1ll\u00f3 gyakorl\u00e1s sor\u00e1n hasznos lehet a k\u00e9sz megold\u00e1s \u00e1ttekint\u00e9se, \u00edgy ezt el\u00e9rhet\u0151v\u00e9 tessz\u00fck.</p> <p>A megold\u00e1s GitHubon \u00e9rhet\u0151 el itt. A legegyszer\u0171bb m\u00f3d a let\u00f6lt\u00e9s\u00e9re, ha parancssorb\u00f3l a <code>git clone</code> utas\u00edt\u00e1ssal lekl\u00f3nozzuk a g\u00e9p\u00fcnkre:</p> <p><code>git clone https://github.com/bmeviauab00/lab-designpattern-kiindulo -b megoldas-refactor-elott</code></p> <p>Ehhez telep\u00edtve kell legyen a g\u00e9pre a parancssori git, b\u0151vebb inform\u00e1ci\u00f3 itt.</p>"},{"location":"labor/old-7-tervezesi-mintak/#bevezeto","title":"Bevezet\u0151","text":""},{"location":"labor/old-7-tervezesi-mintak/#elmeleti-hatter","title":"Elm\u00e9leti h\u00e1tt\u00e9r","text":"<p>A komplexebb alkalmaz\u00e1sok fejleszt\u00e9se sor\u00e1n sz\u00e1mos tervez\u0151i d\u00f6nt\u00e9st kell meghoznunk, melyek sor\u00e1n t\u00f6bb lehet\u0151s\u00e9g k\u00f6z\u00fcl is v\u00e1laszthatunk. Amennyiben ezen pontokban olyan d\u00f6nt\u00e9seket hozunk, melyek nem k\u00f6vetik az objektumorient\u00e1lt szeml\u00e9letm\u00f3d alapelveit, nem tartjuk szem el\u0151tt az alkalmaz\u00e1sunk k\u00f6nny\u0171 karbantarthat\u00f3s\u00e1g\u00e1t, illetve egyszer\u0171en megval\u00f3s\u00edthat\u00f3 tov\u00e1bbfejleszt\u00e9si lehet\u0151s\u00e9g\u00e9t, k\u00f6nnyen hamar r\u00e9m\u00e1lomm\u00e1 v\u00e1lhat a fejleszt\u00e9s. Az egyes hib\u00e1k jav\u00edt\u00e1sa folyamatosan \u00faj hib\u00e1kat sz\u00fcl. Ezen fel\u00fcl a megrendel\u0151i v\u00e1ltoztat\u00e1si \u00e9s b\u0151v\u00edt\u00e9si ig\u00e9nyek a k\u00f3d nagym\u00e9rt\u00e9k\u0171 folyamatos \u00e1t\u00edr\u00e1s\u00e1t ig\u00e9nylik ahelyett, hogy a k\u00f3d p\u00e1r j\u00f3l meghat\u00e1rozott pontj\u00e1ban t\u00f6rt\u00e9n\u0151 b\u0151v\u00edt\u00e9s\u00e9vel - a megl\u00e9v\u0151 k\u00f3d jelent\u0151s m\u00f3dos\u00edt\u00e1sa n\u00e9lk\u00fcl - el tudn\u00e1nk ezt \u00e9rni. A tervez\u00e9si mint\u00e1k j\u00f3l bev\u00e1lt megold\u00e1sokat mutatnak bizonyos gyakran el\u0151fordul\u00f3 tervez\u00e9si probl\u00e9m\u00e1kra: ezen megold\u00e1sok abban seg\u00edtenek, hogy k\u00f3dunk k\u00f6nnyebben b\u0151v\u00edthet\u0151, karbantarthat\u00f3 \u00e9s min\u00e9l nagyobb m\u00e9rt\u00e9kben \u00fajrafelhaszn\u00e1lhat\u00f3 legyen. Ugyanakkor ne ess\u00fcnk \u00e1t a l\u00f3 t\u00faloldal\u00e1ra: csak akkor \u00e9rdemes egy adott tervez\u00e9si mint\u00e1t bevetni, ha adott esetben val\u00f3s el\u0151nyt jelent az alkalmaz\u00e1sa. Ellenkez\u0151 esetben csak a megval\u00f3s\u00edt\u00e1s komplexit\u00e1s\u00e1t n\u00f6veli feleslegesen.</p>"},{"location":"labor/old-7-tervezesi-mintak/#a-feladat-ismertetese","title":"A feladat ismertet\u00e9se","text":"<p>A feladatunk egy vektorgrafikus rajzol\u00f3program kifejleszt\u00e9se:</p> <ul> <li>Az alkalmaz\u00e1sban vektorgrafikus alakzatokat lehet l\u00e9trehozni, \u00fagymint t\u00e9glalap, ellipszis stb.</li> <li>A m\u00e1r l\u00e9trehozott alakzatokat egy grafikus fel\u00fcleten meg kell jelen\u00edteni (ki kell rajzolni).</li> <li>A m\u00e1r l\u00e9trehozott alakzatok fontosabb param\u00e9tereit, \u00fagymint koordin\u00e1t\u00e1k, befoglal\u00f3 t\u00e9glalap meg kell jelen\u00edteni egy list\u00e1ban egy inform\u00e1ci\u00f3s panelen.</li> <li>Windows Forms technol\u00f3gi\u00e1ra \u00e9p\u00edtve dolgozunk.</li> <li>Document-View architekt\u00far\u00e1t k\u00f6vetj\u00fck, de egyszerre csak egy dokumentum lehet megnyitva (nincsenek dokumentumonk\u00e9nt tabf\u00fclek vagy ablakok).</li> <li>Egy adott pontig el\u0151k\u00e9sz\u00edtett k\u00f6rnyezetet visz\u00fcnk tov\u00e1bb. A munka mennyis\u00e9g\u00e9nek kezelhet\u0151 szinten tart\u00e1sa v\u00e9gett csak bizonyos pontig vissz\u00fck tov\u00e1bb a fejleszt\u00e9st, nem val\u00f3s\u00edtjuk meg a teljes \u00e9rt\u00e9k\u0171 megold\u00e1st. Az \u00fajonnan besz\u00farand\u00f3 sorokat az \u00fatmutat\u00f3ban kiemelt h\u00e1tt\u00e9r jelzi.</li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#1-feladat-a-kiindulasi-kornyezet-megismerese","title":"1. Feladat - A kiindul\u00e1si k\u00f6rnyezet megismer\u00e9se","text":"<p>Kl\u00f3nozzuk le a gyakorlathoz tartoz\u00f3 kiindul\u00f3 alkalmaz\u00e1s repositoryj\u00e1t:</p> <ul> <li>Nyissunk egy command prompt-ot,</li> <li>Navig\u00e1ljunk el egy tetsz\u0151leges mapp\u00e1ba, p\u00e9ld\u00e1ul c:\\work\\NEPTUN</li> <li>Adjuk ki a k\u00f6vetkez\u0151 parancsot: <code>git clone https://github.com/bmeviauab00/lab-designpattern-kiindulo</code></li> <li>Nyissuk meg a DesignPatternApp.sln solutiont Visual Studio-ban.</li> </ul> <p>Futtassuk az alkalmaz\u00e1st, az al\u00e1bbihoz hasonl\u00f3 fel\u00fcletet l\u00e1tunk (amennyiben a File/New men\u00fcelemet kiv\u00e1lasztjuk):</p> <p></p> <p>Ismerkedj\u00fcnk meg m\u0171k\u00f6d\u00e9s\u00e9nek n\u00e9h\u00e1ny aspektus\u00e1val:</p> <ul> <li>A legt\u00f6bb funkci\u00f3 nincs m\u00e9g megval\u00f3s\u00edtva.</li> <li>A File/New men\u00fcelem valamint a toolbar els\u0151 gombja egy \u00faj dokumentumot hoz l\u00e9tre. Ez m\u00e1r m\u0171k\u00f6dik, pr\u00f3b\u00e1ljuk ki.</li> <li>Mivel \u00faj alakzatot jelen pillanatban m\u00e9g nem tudunk l\u00e9trehozni, a dokumentum a l\u00e9trej\u00f6tt\u00e9t k\u00f6vet\u0151en nem \u00fcres, tartalmaz n\u00e9mi tesztel\u00e9st szolg\u00e1l\u00f3 adatot (k\u00e9t t\u00e9glalapot \u00e9s egy ellipszist).</li> <li>Az alakzatok kirajzol\u00e1sa is meg van val\u00f3s\u00edtva. Ezen fel\u00fcl a jobb oldali inform\u00e1ci\u00f3s panelen l\u00e1thatjuk a m\u00e1r l\u00e9tez\u0151 alakzatok param\u00e9tereit.</li> <li>Az alakzatok k\u00f6z\u00fcl egy ki lehet v\u00e1lasztva: ez piros sz\u00ednnel \u00e9s szaggatott k\u00e9k kerettel ker\u00fcl kirajzol\u00e1sra, illetve az inform\u00e1ci\u00f3s panelen ki is van v\u00e1lasztva az alakzathoz tartoz\u00f3 sor. \u00daj alakzat kijel\u00f6l\u00e9s\u00e9re az inform\u00e1ci\u00f3s panelen a megfelel\u0151 sor kiv\u00e1laszt\u00e1s\u00e1val van m\u00f3d. Ezt pr\u00f3b\u00e1ljuk is ki. Azt tapasztaljuk, hogy v\u00e1ltoztat\u00e1skor a bal oldali grafikus fel\u00fclet is friss\u00fcl, a kiv\u00e1lasztott alakzat sz\u00edne piros lesz. Hangs\u00falyozzuk, hogy ez bizony a klasszikus dokumentum-n\u00e9zet architekt\u00fara alap\u00fa megk\u00f6zel\u00edt\u00e9s ig\u00e9ny\u00e9t veti fel: a dokumentumunkhoz k\u00e9t n\u00e9zet kapcsol\u00f3dik, melyeket konzisztensen kell tartani. Megjegyz\u00e9s: a teljes \u00e9rt\u00e9k\u0171 megold\u00e1sban a bal oldali grafikus n\u00e9zetben is megval\u00f3s\u00edthatn\u00e1nk az eg\u00e9rkattint\u00e1sra t\u00f6rt\u00e9n\u0151 kijel\u00f6l\u00e9st. Ez jelent\u0151sen komplexebb\u00e9 tenn\u00e9 a k\u00e9s\u0151bbi feladataink megval\u00f3s\u00edt\u00e1s\u00e1t, \u00edgy ezt sz\u00e1nd\u00e9kosan kihagyjuk.</li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#megvalositando-funkciok","title":"Megval\u00f3s\u00edtand\u00f3 funkci\u00f3k","text":"<p>A k\u00f6vetkez\u0151 funkci\u00f3kat fogjuk a gyakorlat sor\u00e1n megval\u00f3s\u00edtani:</p> <ul> <li>\u00daj t\u00e9glalap \u00e9s \u00faj ellipszis l\u00e9trehoz\u00e1sa v\u00e9letlen poz\u00edci\u00f3ban. A funkci\u00f3k az eszk\u00f6zs\u00e1von (toolbar)  \u00e9s a Tools men\u00fc alatt is el\u00e9rhet\u0151k.</li> <li>Dokumentum tartalm\u00e1nak t\u00f6rl\u00e9se. Minden alakzatot elt\u00e1vol\u00edt a dokumentumb\u00f3l. File/Clear men\u00fcvel el\u00e9rhet\u0151.</li> <li>Visszavon\u00e1s (Undo). Az utols\u00f3 parancs visszavon\u00e1sa, ak\u00e1rh\u00e1ny l\u00e9p\u00e9sig visszamen\u0151en. Visszavonja az utols\u00f3 parancsot, legyen az valamilyen \u00faj alakzat l\u00e9trehoz\u00e1sa, vagy a dokumentum tartalm\u00e1nak t\u00f6rl\u00e9se. Az eszk\u00f6zs\u00e1von \u00e9s \u00e9s az Edit/Undo men\u00fcvel is el\u00e9rhet\u0151.</li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#a-solution-felepitese","title":"A solution fel\u00e9p\u00edt\u00e9se","text":"<p>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sben a kiindul\u00f3 k\u00f3db\u00e1zissal fogunk megismerkedni. Gyakorlatilag az architekt\u00far\u00e1nk komponens n\u00e9zet\u00e9t tekintj\u00fck \u00e1t ebben a l\u00e9p\u00e9sben. A Visual Studio Solution Explorer ablak\u00e1ban megfigyelhet\u0151, hogy solution\u00fcnk k\u00e9t projektet is tartalmaz.</p> <ul> <li><code>AppFx</code>: Egy oszt\u00e1lyk\u00f6nyvt\u00e1r (egy DLL a kimenete). Az ebben tal\u00e1lhat\u00f3 oszt\u00e1lyok \u00e1ltal\u00e1nos dokumentumkezel\u00e9si \u00e9s parancskezel\u00e9si szolg\u00e1ltat\u00e1sokat val\u00f3s\u00edtanak meg, melyek ak\u00e1r t\u00f6bb alkalmaz\u00e1sban is felhaszn\u00e1lhat\u00f3k. Az oszt\u00e1lyk\u00f6nyvt\u00e1r bevezet\u00e9s\u00e9vel az els\u0151dleges c\u00e9lunk teh\u00e1t az \u00fajrafelhaszn\u00e1lhat\u00f3s\u00e1g el\u00e9r\u00e9se.</li> <li><code>DesignPatternApp</code>: A futtathat\u00f3 (.exe) alkalmaz\u00e1sunk projektje, mely \u00e9p\u00edt az <code>AppFx</code> oszt\u00e1lyk\u00f6nyvt\u00e1rra.</li> </ul> <p>F\u00fcgg\u0151s\u00e9g a projektek k\u00f6z\u00f6tt</p> <p>Visual Studio projektek k\u00f6z\u00f6tt mindig csak egyir\u00e1ny\u00fa f\u00fcgg\u0151s\u00e9g lehet. Jelen esetben a DesignPatternApp \u00e9p\u00edt az <code>AppFx</code> projektre. Ezt a gyakorlatban \u00fagy val\u00f3s\u00edtottuk meg, hogy a DesignPatternApp projektben felvett\u00fcnk egy referenci\u00e1t az <code>AppFx</code> projektre. Ett\u0151l kezdve az DesignPatternApp-ban el\u00e9rhet\u0151k az <code>AppFx</code> (publikus) oszt\u00e1lyai. Ford\u00edtva viszont nem igaz az \u00e1ll\u00edt\u00e1s, \u00e9s ennek el\u00e9r\u00e9s\u00e9re nincs is m\u00f3d.</p>"},{"location":"labor/old-7-tervezesi-mintak/#document-view-architektura","title":"Document-View architekt\u00fara","text":"<p>Az alkalmaz\u00e1sunk a Document-View architekt\u00far\u00e1ra \u00e9p\u00fcl, annak n\u00e9mik\u00e9ppen tov\u00e1bbfejlesztett koncepci\u00f3j\u00e1t val\u00f3s\u00edtja meg: ahelyett, hogy a n\u00e9zeteknek egy <code>Update</code> m\u0171velete lenne, amelyen kereszt\u00fcl \u00e1ltal\u00e1nos v\u00e1ltoz\u00e1s \u00e9rtes\u00edt\u00e9st kapnak a dokumentumukt\u00f3l, a dokumentumok k\u00fcl\u00f6nb\u00f6z\u0151 v\u00e1ltoz\u00e1si esem\u00e9nyeket publik\u00e1lhatnak: minden n\u00e9zet arra az esem\u00e9nyre fizet el\u0151, \u00e9s arr\u00f3l kap \u00e9rtes\u00edt\u00e9st, mely sz\u00e1m\u00e1ra \u00e9rdekes.</p> <ul> <li>Az <code>AppFx</code> projekt DocView mapp\u00e1j\u00e1ban tal\u00e1lhat\u00f3 egy <code>Document</code> oszt\u00e1ly \u00e9s egy <code>IView</code> interf\u00e9sz. N\u00e9zz\u00fck meg \u0151ket sorban (nyissuk is meg a forr\u00e1sf\u00e1jlt):<ul> <li><code>Document</code>: K\u00fcl\u00f6nb\u00f6z\u0151 dokumentum t\u00edpusok \u0151soszt\u00e1lyak\u00e9nt szolg\u00e1lhat. T\u00f6bbek k\u00f6z\u00f6tt van egy n\u00e9zet list\u00e1ja. (Megjegyz\u00e9s: mivel alkalmaz\u00e1sunk a Document-View architekt\u00fara egy speci\u00e1lis vari\u00e1ns\u00e1t haszn\u00e1lja, a n\u00e9zet list\u00e1t az \u0151sb\u0151l el is hagyhattuk volna).</li> <li><code>IView</code>: K\u00fcl\u00f6nb\u00f6z\u0151 n\u00e9zet implement\u00e1ci\u00f3k k\u00f6z\u00f6s interf\u00e9sze. Nincs <code>Update</code> m\u0171velet, helyette egy <code>SetDocumentAndRegisterToDocEvents</code> m\u0171veletet tal\u00e1lunk (ebben kell a n\u00e9zetnek a dokumentum megfelel\u0151 esem\u00e9nyeire beregisztr\u00e1lnia).</li> </ul> </li> </ul> <p>A k\u00f6vetkez\u0151kben a <code>DesignPatternApp</code> projekt kapcsol\u00f3d\u00f3 oszt\u00e1lyait tekintj\u00fck \u00e1t:</p> <ul> <li> <p><code>DrawingDocument</code> oszt\u00e1ly</p> <ul> <li>Egy <code>shapes</code> nev\u0171 list\u00e1ban t\u00e1rolja az alakzatokat.</li> <li>A <code>selectedShape</code> az aktu\u00e1lisan kiv\u00e1lasztott alakzatra mutat.</li> <li>A dokumentum adatai a <code>Shapes</code>, <code>SelectedShape</code> \u00e9s <code>SelectedShapeIndex</code> tulajdons\u00e1gokon kereszt\u00fcl \u00e9rhet\u0151k el a k\u00fclvil\u00e1g (pl. n\u00e9zetek) sz\u00e1m\u00e1ra.</li> <li>A kor\u00e1bban ismertetett koncepci\u00f3nknak megfelel\u0151en a dokumentumunk k\u00e9t esem\u00e9nyt is publik\u00e1l, melyek C# esem\u00e9nyk\u00e9nt vannak megval\u00f3s\u00edtva:<ul> <li><code>ShapesChanged</code>: azt jelzi, hogy az alakzatok list\u00e1ja megv\u00e1ltozott, pl. \u00faj alakzattal b\u0151v\u00fclt, vagy kiker\u00fclt egy alakzat a list\u00e1b\u00f3l, vagy ak\u00e1r egy alakzat adatai v\u00e1ltoztak meg a list\u00e1ban.</li> <li><code>SelectionChanged</code>: azt jelzi, hogy egy kor\u00e1bbit\u00f3l elt\u00e9r\u0151 alakzat ker\u00fclt kiv\u00e1laszt\u00e1sra (mely piros sz\u00ednnel jelenik meg rajzol\u00e1skor).</li> </ul> </li> <li>A <code>CreateRect</code> \u00e9s <code>CreateEllipse</code> m\u0171veletek l\u00e9trehoznak egy megfelel\u0151 alakzatot, amit a dokumentum el is t\u00e1rol (\u00e9s term\u00e9szetesen el is s\u00fcti a <code>ShapesChanged</code> esem\u00e9nyt).</li> </ul> </li> <li> <p><code>ViewBase</code> oszt\u00e1ly</p> <ul> <li>A n\u00e9zeteink k\u00f6z\u00f6s \u0151soszt\u00e1lya, a k\u00f3dduplik\u00e1ci\u00f3 elker\u00fcl\u00e9s\u00e9re vezett\u00fck be. Implement\u00e1lja az <code>IView</code> interf\u00e9szt.</li> <li><code>UserControl</code>-b\u00f3l sz\u00e1rmazik (hasonl\u00f3 koncepci\u00f3t m\u00e1r l\u00e1ttunk a megel\u0151z\u0151 gyakorlat <code>FontEditor</code> p\u00e9ld\u00e1j\u00e1ban).</li> <li>A <code>document</code> tagv\u00e1ltoz\u00f3ban t\u00e1rolja a n\u00e9zetet.</li> <li>A dokumentum megfelel\u0151 esem\u00e9nyeire val\u00f3 fel/leiratkoz\u00e1shoz bevezeti a <code>RegisterToDocEvents</code> \u00e9s <code>UnRegisterToDocEvents</code> virtu\u00e1lis m\u0171veleteket, a lesz\u00e1rmazottakban ig\u00e9ny szerint kell implement\u00e1lni.</li> </ul> </li> <li><code>GraphicsView</code> oszt\u00e1ly<ul> <li>Az alkalmaz\u00e1sunk bal oldali, grafikus n\u00e9zet\u00e9nek implement\u00e1ci\u00f3ja.</li> <li>A <code>ViewBase</code>-b\u0151l sz\u00e1rmazik, \u00edgy k\u00f6zvetve ezen oszt\u00e1lyunk is egy <code>UserControl</code>.</li> <li>A <code>RegisterToDocEvents</code> m\u0171velet\u00e9ben a dokumentum mindk\u00e9t esem\u00e9ny\u00e9re (<code>ShapesChanged</code> \u00e9s <code>SelectionChanged</code>) el\u0151fizet, ugyanazt a <code>DocumentOnShapesChanged</code> esem\u00e9nykezel\u0151 f\u00fcggv\u00e9nyt regisztr\u00e1lja be. Az esem\u00e9nykezel\u0151ben egy egyszer\u0171 <code>Invalidate</code> h\u00edv\u00e1st tal\u00e1lunk, mely kik\u00e9nyszer\u00edti a n\u00e9zet\u00fcnk \u00fajrarajzol\u00e1s\u00e1t.</li> <li>Az <code>OnPaint</code> megval\u00f3s\u00edt\u00e1s\u00e1nak alapelve: minden alakzatra megh\u00edvjuk a <code>Draw</code> m\u0171veletet, mely gondoskodik a t\u00e9nyleges megjelen\u00edt\u00e9sr\u0151l.</li> </ul> </li> <li><code>InfoPanel</code> oszt\u00e1ly<ul> <li>Az alkalmaz\u00e1sunk jobb oldali inform\u00e1ci\u00f3s panel n\u00e9zet\u00e9nek implement\u00e1ci\u00f3ja.</li> <li>Szint\u00e9n a <code>ViewBase</code>-b\u0151l sz\u00e1rmazik, \u00edgy k\u00f6zvetve ezen oszt\u00e1lyunk is egy UserControl.</li> <li>Az inform\u00e1ci\u00f3k megjelen\u00edt\u00e9s\u00e9re egy <code>ListBox</code> vez\u00e9rl\u0151t haszn\u00e1l.</li> <li>A <code>RegisterToDocEvents</code> m\u0171velet\u00e9ben \u0151 is feliratkozik a dokumentum mindk\u00e9t esem\u00e9ny\u00e9re:<ul> <li>Amikor a dokumentum ShapesChanged esem\u00e9nye s\u00fcl el, az InfoPanel <code>Document_ShapesChanged</code> m\u0171velete h\u00edv\u00f3dik meg: ebben friss\u00edti a listbox tartalm\u00e1t a dokumentum aktu\u00e1lis \u00e1llapot\u00e1nak megfelel\u0151en.</li> <li>Amikor a dokumentum SelectionChanged esem\u00e9nye s\u00fcl el, a <code>Document_SelectionChanged</code> h\u00edv\u00f3dik: ebben a listbox megfelel\u0151 elem\u00e9t \u00e1ll\u00edtjuk be kiv\u00e1lasztottnak.</li> </ul> </li> <li>Amikor a felhaszn\u00e1l\u00f3 egy \u00faj elemet v\u00e1laszt ki a listboxban, a <code>listBox_SelectedIndexChanged</code> esem\u00e9nykezel\u0151 h\u00edv\u00f3dik: ebben az <code>App.Instance.SetSelectedShape()</code> h\u00edv\u00e1ssal az aktu\u00e1lis dokumentumunkban \u00e1ll\u00edtjuk \u00e1t a kiv\u00e1lasztott alakzatot a listbox felhaszn\u00e1l\u00f3 \u00e1ltal kiv\u00e1lasztott sor\u00e1nak megfelel\u0151en.</li> </ul> </li> <li><code>Shape</code>, <code>Rect</code>, <code>Ellipse</code> oszt\u00e1lyok<ul> <li>A <code>Shape</code> a k\u00f6z\u00f6s \u0151s, az egyes alakzatok ennek lesz\u00e1rmazottai.</li> <li>A gyakorlat sor\u00e1n ezek k\u00f3dj\u00e1ra \u00e9ppen csak n\u00e9zz\u00fcnk r\u00e1, ezek implement\u00e1ci\u00f3s r\u00e9szletei sz\u00e1munkra most kev\u00e9sb\u00e9 izgalmasak. Megjegyz\u00e9s: Az egyik feladat megval\u00f3s\u00edt\u00e1sa sor\u00e1n m\u00e1solatot k\u00e9sz\u00edt\u00fcnk majd az alakzatokr\u00f3l. Annak \u00e9rdek\u00e9ben, hogy az alakzatot \u00e9s a m\u00e1solatait \u00f6ssze tudjuk \u201etal\u00e1ltatni\u201d, az egyes alakzatokhoz egy sz\u00e1mazonos\u00edt\u00f3t rendel\u00fcnk (<code>Id</code> tag), mely az alakzat \u00e9s m\u00e1solatai eset\u00e9ben ugyanazt az \u00e9rt\u00e9ket veszi fel.</li> </ul> </li> <li><code>App</code> oszt\u00e1ly<ul> <li>Az alkalmaz\u00e1sunk \u201eroot\u201d oszt\u00e1lya, mag\u00e1t az alkalmaz\u00e1st reprezent\u00e1lja. Szerepe hasonl\u00f3, mint az el\u0151z\u0151 gyakorlat <code>FontEditor</code> p\u00e9ld\u00e1j\u00e1ban.</li> <li>Megval\u00f3s\u00edt\u00e1sa a <code>Singleton</code> tervez\u00e9si minta fontosabb elveit k\u00f6veti: egy p\u00e9ld\u00e1ny l\u00e9tezhet bel\u0151le, mely egy statikus <code>Instance</code> nev\u0171 tulajdons\u00e1gon kereszt\u00fcl \u00e9rhet\u0151 el, a konstruktora pedig v\u00e9dett.</li> <li>Mivel alkalmaz\u00e1sunkban egyszerre egy dokumentum lehet megnyitva (\u00fan. SDI, Single Document Interface application), egy jelent\u0151s egyszer\u0171s\u00edt\u00e9ssel \u00e9lhett\u00fcnk: a dokumentumunkb\u00f3l \u00e9s mindk\u00e9t n\u00e9zet t\u00edpusunkb\u00f3l egy-egy objektumra van csak sz\u00fcks\u00e9g. Ezekre az <code>App</code> oszt\u00e1lyunkban el is t\u00e1rolunk egy-egy hivatkoz\u00e1st az al\u00e1bbi tagv\u00e1ltoz\u00f3kban: <pre><code>    private DrawingDocument document;\n    private GraphicsView graphicsView;\n    private InfoPanel infoPanel;\n</code></pre></li> <li>Az <code>Initialize</code> m\u0171veletben lev\u0151 <code>CommandBindingManager</code> h\u00edv\u00e1sokra k\u00e9s\u0151bb t\u00e9r\u00fcnk vissza.</li> </ul> </li> </ul>"},{"location":"labor/old-7-tervezesi-mintak/#command-binding","title":"Command Binding","text":"<p>A komplex felhaszn\u00e1l\u00f3 fel\u00fclettel rendelkez\u0151 alkalmaz\u00e1sok eset\u00e9n gyakran el\u0151fordul, hogy ugyanazt a parancsot k\u00fcl\u00f6nb\u00f6z\u0151 felhaszn\u00e1l\u00f3i fel\u00fcletelemekhez is hozz\u00e1 szeretn\u00e9nk k\u00f6tni. P\u00e9ld\u00e1ul New/Open/Close/Cut/Copy/stb. parancsok a legt\u00f6bb alkalmaz\u00e1sban egyar\u00e1nt el\u00e9rhet\u0151k men\u00fcb\u0151l \u00e9s eszk\u00f6zs\u00e1vr\u00f3l is. Vagyis a parancs \u00e9s a kiv\u00e1lt\u00f3 fel\u00fcletelemek k\u00f6z\u00f6tt egy-t\u00f6bb kapcsolat van.  Ilyen esetben egy adott parancs vonatkoz\u00e1s\u00e1ban a k\u00f6vetkez\u0151ket kell megval\u00f3s\u00edtani:</p> <ul> <li>Parancs futtat\u00e1sa. Ak\u00e1rmelyik fel\u00fcletelemet is aktiv\u00e1lja a felhaszn\u00e1l\u00f3, a parancshoz tartoz\u00f3 ugyanazon \u201eesem\u00e9nykezel\u0151\u201d k\u00f3dot kell futtatni. Ez a gyakorlatban egy adott f\u00fcggv\u00e9ny megh\u00edv\u00e1s\u00e1t jelenti.</li> <li>Fel\u00fcletelemek \u00e1llapotkezel\u00e9se. Adott parancs vonatkoz\u00e1s\u00e1ban valamennyi fel\u00fcletelem \u00e1llapot\u00e1t konzisztensen kell tartani. Vagyis ha pl. letiltjuk az Undo men\u00fct, mert nincs visszavonhat\u00f3 m\u0171velet, akkor a visszavon\u00e1sra szolg\u00e1l\u00f3 Undo toolbar gombot is le kell tiltani. Hasonl\u00f3k\u00e9ppen, ha egy men\u00fcelemet el akarunk rejteni, akkor a kapcsol\u00f3d\u00f3 toolbar gombot is rejteni kell. De m\u00e9g fel\u00fcletelemek kijel\u00f6lts\u00e9gi \u00e1llapot\u00e1t is akarhatjuk szab\u00e1lyozni, erre is \u00e9l a szab\u00e1lyunk.</li> </ul> <p>N\u00e9zz\u00fcnk erre p\u00e9ld\u00e1kat az alkalmaz\u00e1sunkban:</p> <ol> <li>Ind\u00edtsuk el az alkalmaz\u00e1st. Figyelj\u00fck meg, hogy a File men\u00fc alatt a Save/Save As/Close men\u00fcelemek \u00e9s az ezeknek megfelel\u0151 toolbar gombok (a Close a harmadik gomb a toolbaron) is le vannak tiltva: am\u00edg nem hoztunk l\u00e9tre vagy t\u00f6lt\u00f6tt\u00fcnk be dokumentumot, ezen parancsok futtat\u00e1s\u00e1nak nincs \u00e9rtelme.</li> <li>Hozzunk l\u00e9tre egy \u00faj dokumentumot (File/New men\u00fc). Ekkor valamennyi, az el\u0151z\u0151 pontban eml\u00edtett fel\u00fcletelem konzisztens m\u00f3don enged\u00e9lyezett lesz.</li> <li>Ha bez\u00e1rjuk a dokumentumot (File/Close men\u00fc), ism\u00e9t valamennyi fel\u00fcletelem tiltott lesz.</li> </ol> <p>Egy komplex alkalmaz\u00e1sban a fenti probl\u00e9mak\u00f6r egyszer\u0171 kezel\u00e9s\u00e9re c\u00e9lszer\u0171 egy k\u00f6zponti megold\u00e1st bevezetni. Ezt sz\u00e1mos m\u00f3don lehet implement\u00e1lni, a legt\u00f6bb k\u00f6rnyezet Command Binding n\u00e9ven hivatkozik a koncepci\u00f3ra. Sajnos az elnevez\u00e9s tekintet\u00e9ben nincs egys\u00e9gess\u00e9g: van olyan technol\u00f3gia, mely Command n\u00e9ven neves\u00edti ezt a technik\u00e1t. Mi Command minta alatt \u2013 a tervez\u00e9si mint\u00e1k klasszikus nevez\u00e9ktan\u00e1t k\u00f6vetve \u2013 m\u00e1st fogunk \u00e9rteni, egy k\u00e9s\u0151bbi feladatban t\u00e9r\u00fcnk majd r\u00e1.</p> <p>A Command Binding minta alapelvei:</p> <ul> <li>Minden felhaszn\u00e1l\u00f3i parancshoz egy k\u00f6zponti (<code>CommandBinding</code>) objektumot hozunk l\u00e9tre.</li> <li>Ehhez hozz\u00e1k\u00f6tj\u00fck a parancs aktiv\u00e1l\u00e1sakor futtatand\u00f3 esem\u00e9nykezel\u0151t.</li> <li>Hozz\u00e1k\u00f6tj\u00fck valamennyi aktiv\u00e1l\u00f3 fel\u00fcletelemet (men\u00fc, toolbar gomb stb.)</li> <li>Seg\u00e9dm\u0171veleteket vezet\u00fcnk be a parancsok tilt\u00e1s\u00e1ra/enged\u00e9lyez\u00e9s\u00e9re/elrejt\u00e9s\u00e9re/megjelen\u00edt\u00e9s\u00e9re.</li> <li>A parancsokat a k\u00f6nny\u0171 azonos\u00edt\u00e1s \u00e9rdek\u00e9ben valamilyen egyszer\u0171 m\u00f3don, tipikusan stringgel azonos\u00edtjuk.</li> </ul> <p>A solution\u00fcnk <code>AppFx</code> projektj\u00e9ben tal\u00e1lunk t\u00e1mogat\u00e1st a Command Binding megval\u00f3s\u00edt\u00e1s\u00e1ra (<code>CommandBinding</code> mappa). A megval\u00f3s\u00edt\u00e1s r\u00e9szletei sz\u00e1munkra teljesen \u00e9rdektelenek, gyakorlaton ne is n\u00e9zz\u00fck a k\u00f3dj\u00e1t, ink\u00e1bb a felhaszn\u00e1l\u00e1s\u00e1nak m\u00f3dj\u00e1t tekints\u00fck \u00e1t r\u00f6viden DesignPatternApp projekt\u00fcnkben:</p> <ul> <li>N\u00e9zz\u00fck meg a <code>CommandName</code> oszt\u00e1lyt: minden parancshoz egy string nevet vezett\u00fcnk be, mely a parancsot azonos\u00edtja (pl. \"Open\", \"Undo\" stb.).</li> <li>Inicializ\u00e1l\u00e1s: a <code>CommandBinding</code> objektumokat a <code>MainForm</code> oszt\u00e1ly <code>initCommandBindings</code> m\u0171veletben hozzuk l\u00e9tre \u00e9s k\u00f6tj\u00fck hozz\u00e1 az egyes men\u00fcelemekhez/toolbar gombokhoz. El\u00e9g, ha itt egy p\u00e9ld\u00e1t megn\u00e9z\u00fcnk a sok el\u0151fordul\u00e1s k\u00f6z\u00fcl.</li> <li>Ezt k\u00f6vet\u0151en adott parancshoz tartoz\u00f3 fel\u00fcletelemek \u00e1llapotai a <code>CommandBindingManager</code> oszt\u00e1ly \u00e1llapot\u00e1ll\u00edt\u00f3 seg\u00e9df\u00fcggv\u00e9nyeivel b\u00e1rmikor k\u00e9nyelmesen \u00e1ll\u00edthat\u00f3k (pl. <code>EnableCommandBinding</code> tilt\u00e1shoz/enged\u00e9lyez\u00e9shez). N\u00e9zz\u00fck meg, hogyan t\u00f6rt\u00e9nik ez a Save/Save As/Close parancsok vonatkoz\u00e1s\u00e1ban:<ul> <li>Amikor az alkalmaz\u00e1s elindul, a parancsokat az <code>App</code> oszt\u00e1ly Initialize m\u0171velet\u00e9ben tiltjuk (a false m\u00e1sodik param\u00e9ter jelzi, hogy tiltani akarjuk a vez\u00e9rl\u0151t): <pre><code>CommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.CloseDocument, false);\nCommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.SaveDocument, false);\nCommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.SaveAsDocument, false);\n</code></pre></li> <li>A parancsok enged\u00e9lyez\u00e9s\u00e9re az <code>App.NewDocument</code>-ben l\u00e1tunk p\u00e9ld\u00e1t. Ez a m\u0171velet egy parancs esem\u00e9nykezel\u0151je, a t\u00f6bbi esem\u00e9nykezel\u0151vel egy\u00fctt az <code>App.CommandHandlers.cs</code> f\u00e1jlban tal\u00e1lhat\u00f3 (az App oszt\u00e1ly \u201epartial\u201d, t\u00f6bb f\u00e1jlban van meg\u00edrva). <pre><code>CommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.CloseDocument, true);\nCommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.SaveDocument, true);\nCommandBindingManager.Instance.EnableCommandBinding(\n    CommandName.SaveAsDocument, true);\n</code></pre></li> </ul> </li> </ul> <p>A tov\u00e1bbi feladatok megval\u00f3s\u00edt\u00e1sa sor\u00e1n is a <code>CommandBindingManager</code> oszt\u00e1lyunkat fogjuk haszn\u00e1lni a parancsok tilt\u00e1s\u00e1hoz \u00e9s enged\u00e9lyez\u00e9s\u00e9hez.</p>"},{"location":"labor/old-7-tervezesi-mintak/#2-feladat-command-processor-minta","title":"2. Feladat - Command Processor minta","text":"<p>A feladat sor\u00e1n a Command, pontosabban annak tov\u00e1bbfejlesztett v\u00e1ltozata, a Command Processor tervez\u00e9si minta megval\u00f3s\u00edt\u00e1s\u00e1t fogjuk gyakorolni. Mindk\u00e9t minta elm\u00e9leti h\u00e1tter\u00e9t a kapcsol\u00f3d\u00f3 el\u0151ad\u00e1s ismerteti r\u00e9szletesen, UML diagramokkal illusztr\u00e1lva. A gyakorlat sor\u00e1n, \u00e9s \u00edgy jelen \u00fatmutat\u00f3ban is csak az elm\u00e9leti h\u00e1tt\u00e9r legfontosabb elemeire t\u00e9r\u00fcnk ki. L\u00e9nyeges, hogy a mint\u00e1t ne keverj\u00fck a m\u00e1r kor\u00e1bban ismertetett Command Binding mint\u00e1val, mert att\u00f3l elt\u00e9r\u0151 probl\u00e9m\u00e1ra mutat megold\u00e1st.</p>"},{"location":"labor/old-7-tervezesi-mintak/#a-command-processor-minta-koncepcioja","title":"A Command Processor minta koncepci\u00f3ja","text":"<p>A minta alapelve az, hogy minden felhaszn\u00e1l\u00f3i k\u00e9r\u00e9st egy k\u00fcl\u00f6n parancs (Command) objektumk\u00e9nt z\u00e1r egys\u00e9gbe. Ezen t\u00falmen\u0151en a v\u00e9grehajtott parancs objektumok elt\u00e1rol\u00e1sra ker\u00fclnek, ami lehet\u0151v\u00e9 teszi a kor\u00e1bban v\u00e9grehajtott parancsok visszavon\u00e1s\u00e1t. A k\u00f6vetkez\u0151kben \u00e1ttekintj\u00fck a minta m\u0171k\u00f6d\u00e9s\u00e9t. Els\u0151 l\u00e9p\u00e9sben m\u00e9g nem val\u00f3s\u00edtjuk meg, csak az alapelveire koncentr\u00e1lunk (b\u00e1r hogy k\u00f6nnyebben meg\u00e9rthet\u0151 legyen, a mint\u00e1t az alkalmaz\u00e1sunkra vet\u00edtve mutatjuk be). K\u00f6vetkezzen egy \u00e1bra, majd a hozz\u00e1 kapcsol\u00f3d\u00f3 gondolatok. </p> <p></p> <ul> <li>Bevezet\u00fcnk egy <code>Command</code> \u0151soszt\u00e1lyt vagy interf\u00e9szt, melynek van egy <code>Execute</code> \u00e9s egy <code>UnExecute</code> absztrakt m\u0171velete (vagy nevezhetj\u00fck <code>Do</code> \u00e9s <code>Undo</code>-nak is \u0151ket, ha \u00fagy tartja kedv\u00fcnk).</li> <li>Az egyes felhaszn\u00e1l\u00f3i parancsokhoz bevezet\u00fcnk egy Command lesz\u00e1rmazott oszt\u00e1lyt.<ul> <li>Els\u0151 k\u00f6rben a New Rect \u00e9s New Ellipse parancsokra vonatkoz\u00f3an k\u00edv\u00e1nunk Undo t\u00e1mogat\u00e1st bevezetni, \u00edgy ezekhez vezet\u00fcnk majd r\u00f6videsen be egy-egy \u00faj oszt\u00e1lyt, pl. <code>NewRectCommand</code> \u00e9s <code>NewEllipseCommand</code> n\u00e9ven.</li> <li>Ezen oszt\u00e1lyokban a parancsspecifikusan meg\u00edrjuk az <code>Execute</code> m\u0171veletet (pl. a <code>NewRectCommand.Execute</code>-ban felvesz\u00fcnk a dokumentumunkban egy \u00faj t\u00e9glalapot), az <code>UnExecute</code>-ban pedig visszacsin\u00e1ljuk a m\u0171velet hat\u00e1s\u00e1t. </li> <li>A <code>Command</code> lesz\u00e1rmazott oszt\u00e1lyok sokszor nem maguk val\u00f3s\u00edtj\u00e1k meg funkci\u00f3jukat, hanem deleg\u00e1lj\u00e1k azt egy vagy t\u00f6bb m\u00e1sik oszt\u00e1lynak. Ezt az oszt\u00e1lyt az UML diagramon Receiver n\u00e9ven t\u00fcntett\u00fck fel. A gyakorlatban nem \u00edgy szoktuk h\u00edvni. Alkalmaz\u00e1sunkban a Command-ok tipikusan az <code>App</code> oszt\u00e1lyba h\u00edvnak tov\u00e1bb, vagyis eset\u00fcnkben az <code>App</code> felel meg legt\u00f6bb esetben az \u00e1br\u00e1n szerepl\u0151 Receiver oszt\u00e1lynak.</li> </ul> </li> <li>Bevezet\u00fcnk egy k\u00f6zponti <code>CommandProcessor</code> oszt\u00e1lyt k\u00e9t m\u0171velettel:<ul> <li><code>ExecuteCommand</code>: v\u00e9grehajtja a param\u00e9ter\u00fcl kapott parancsot (megh\u00edvja az <code>Execute</code> m\u0171velet\u00e9t), majd elt\u00e1rolja egy bels\u0151 stack gy\u0171jtem\u00e9nyben.</li> <li><code>UnExecuteLastCommand</code>: kiveszi az utolj\u00e1ra v\u00e9grehajtott parancsot a command stack-b\u0151l, \u00e9s megh\u00edvja annak <code>UnExecute</code> m\u0171velet\u00e9t. Ezzel gyakorlatilag a parancs visszavon\u00e1s funkci\u00f3j\u00e1t (Undo) val\u00f3s\u00edtja meg.</li> </ul> </li> </ul> <p>L\u00e9nyeges, hogy a Command Binding mint\u00e1val ellent\u00e9tben itt a parancsok minden egyes futtat\u00e1s\u00e1hoz \u00faj Command objektumot hozunk l\u00e9tre, vagyis ha pl. h\u00e1romszor \u201efuttatjuk\" a <code>NewRectCommand</code> parancsot, akkor h\u00e1rom <code>NewRectCommand</code> objektumot hozunk ehhez l\u00e9tre. Ennek oka az, hogy a <code>CommandProcessor</code> command stack-j\u00e9ben h\u00e1rom parancsobjektumot kell elt\u00e1rolni (hiszen ezeket egym\u00e1st\u00f3l f\u00fcggetlen\u00fcl akarjuk visszavonni Undo eset\u00e9n).</p>"},{"location":"labor/old-7-tervezesi-mintak/#a-command-processor-minta-megvalositasa-alkalmazasunkban","title":"A Command Processor minta megval\u00f3s\u00edt\u00e1sa alkalmaz\u00e1sunkban","text":"<p>K\u00f6vess\u00fck az al\u00e1bbi l\u00e9p\u00e9seket:</p> <ol> <li>Az <code>AppFx</code> projekt Command mapp\u00e1j\u00e1ban m\u00e1r l\u00e9tezik egy absztrakt <code>Command</code> oszt\u00e1ly, \u00edgy ezzel nincs teend\u0151nk.</li> <li>A <code>Command</code> mapp\u00e1ban vegy\u00fck fel a parancsok menedzsel\u00e9s\u00e9\u00e9rt felel\u0151s az \u00e1ltal\u00e1nos <code>CommandProcessor</code> oszt\u00e1lyt: <pre><code>public class CommandProcessor\n{\n    Stack&lt;Command&gt; commands = new Stack&lt;Command&gt;();\n\n    public void ExecuteCommand(Command cmd)\n    {\n        cmd.Execute();\n        commands.Push(cmd);\n    }\n\n    public void UnExecuteLastCommand()\n    {\n        // Ha \u00fcres, nem csin\u00e1lunk semmit\n        if (!commands.Any())\n            return;\n\n        Command lastCommand = commands.Pop();\n        lastCommand.UnExecute();\n    }\n\n    public void Clear()\n    {\n      commands.Clear();\n    }\n\n    public bool HasAny { get { return commands.Any(); } }\n}\n</code></pre> A megval\u00f3s\u00edt\u00e1s sor\u00e1n a .NET be\u00e9p\u00edtett <code>Stack&lt;T&gt;</code> oszt\u00e1ly\u00e1t haszn\u00e1ljuk a command stack megval\u00f3s\u00edt\u00e1s\u00e1ra. A met\u00f3dusok implement\u00e1ci\u00f3ja egyszer\u0171, a kor\u00e1bban ismertetett logik\u00e1t k\u00f6veti.</li> <li>Integr\u00e1ljuk be a <code>CommandProcessor</code> oszt\u00e1lyt az alkalmaz\u00e1sunkba. Vegy\u00fcnk fel egy tagv\u00e1ltoz\u00f3t az <code>App</code> oszt\u00e1lyba: <pre><code>readonly CommandProcessor commandProcessor = new CommandProcessor();\n</code></pre> Annak \u00e9rdek\u00e9ben, hogy ez forduljon, a forr\u00e1sf\u00e1jlban az <code>AppFx.Command</code> n\u00e9vteret \u201eusing-olni\u201d kell.</li> <li>Az <code>App.CommandHandlers.cs</code>-be a <code>CloseDocument</code> v\u00e9g\u00e9re vegy\u00fck fel ezt a sort: <pre><code>commandProcessor.Clear();\n</code></pre> Ennek az a szerepe, hogy amikor bez\u00e1rjuk a dokumentumot, kipucoljuk az undo sort, hiszen a benne lev\u0151 elemek egy m\u00e1r bez\u00e1rt, nem l\u00e9tez\u0151 dokumentumra vonatkoznak.</li> <li>Amikor egy parancsot futtatunk vagy visszavonunk, az Undo men\u00fct \u00e9s toolbar gombot is megfelel\u0151en tiltani vagy enged\u00e9lyezni kell: ha van legal\u00e1bb egy command a command stack-en, akkor enged\u00e9lyezz\u00fck, egy\u00e9bk\u00e9nt tiltjuk. Vezess\u00fcnk be egy-egy seg\u00e9df\u00fcggv\u00e9nyt az App oszt\u00e1lyba a parancsok futtat\u00e1s\u00e1hoz \u00e9s visszavon\u00e1s\u00e1hoz, melyek a kor\u00e1bban ismertetett CommandBindingManager oszt\u00e1lyunk seg\u00edts\u00e9g\u00e9vel gondoskodnak az Undo tilt\u00e1s\u00e1r\u00f3l/enged\u00e9lyez\u00e9s\u00e9r\u0151l is: <pre><code>void executeCommand(Command cmd)\n{\n    commandProcessor.ExecuteCommand(cmd);\n    CommandBindingManager.Instance.EnableCommandBinding(\n                    CommandName.Undo, commandProcessor.HasAny);\n}\n</code></pre> <pre><code>void unexecuteLastCommand()\n{\n    commandProcessor.UnExecuteLastCommand();\n    CommandBindingManager.Instance.EnableCommandBinding(\n                    CommandName.Undo, commandProcessor.HasAny);\n}\n</code></pre> Az <code>unexecuteLastCommand</code> m\u0171veletet akkor kell megh\u00edvni, amikor a felhaszn\u00e1l\u00f3 az Undo funkci\u00f3t aktiv\u00e1lja. Az <code>App.CommandHandlers.cs</code> f\u00e1jlban lev\u0151 UndoLast met\u00f3dus egy <code>CommandBinding</code> seg\u00edts\u00e9g\u00e9vel m\u00e1r hozz\u00e1 van k\u00f6tve a fel\u00fcletelemekhez (Undo men\u00fc \u00e9s toolbar gomb), \u00edgy aktiv\u00e1l\u00e1sukkor meg is h\u00edv\u00f3dik. M\u00e1r csak az a dolgunk, hogy \u00e1t\u00edrjuk az <code>UndoLast</code> t\u00f6rzs\u00e9t: <pre><code>public void UndoLast()\n{\n    unexecuteLastCommand();\n}\n</code></pre></li> <li>A k\u00f6vetkez\u0151 l\u00e9p\u00e9sekben Command lesz\u00e1rmazott oszt\u00e1lyokat hozunk l\u00e9tre az egyes alkalmaz\u00e1sspecifikus parancsokhoz. A <code>DesignPatternApp</code> projektben vegy\u00fcnk fel egy <code>Commands</code> nev\u0171 mapp\u00e1t (jobb katt a projekten, Add/New Folder men\u00fc), ebbe fogjuk az ide tartoz\u00f3 oszt\u00e1lyokat \u00f6sszegy\u0171jteni.</li> <li>Ebbe a <code>Commands</code> mapp\u00e1ba vegy\u00fcnk fel egy <code>NewRectCommand</code> oszt\u00e1lyt a \u201eNew Rect\u201d funkci\u00f3 megval\u00f3s\u00edt\u00e1s\u00e1hoz, a k\u00f6vetkez\u0151 k\u00f3ddal: <pre><code>using AppFx.Command;\n\u2026\n\nclass NewRectCommand : Command\n{\n    private int shapeId;\n\n    public override void Execute()\n    {\n        shapeId = App.Instance.CreateRandomRect().Id;\n    }\n\n    public override void UnExecute()\n    {\n        App.Instance.RemoveShape(shapeId);\n    }\n}\n</code></pre> Az <code>Execute</code> m\u0171velet megh\u00edvja az <code>App</code> singleton <code>CreateRandomRect</code> m\u0171velet\u00e9t, amely felvesz egy \u00faj <code>Rectangle</code> objektumot a dokumentumban, v\u00e9letlenszer\u0171en gener\u00e1lt befoglal\u00f3 t\u00e9glalapban, \u00e9s visszat\u00e9r vele. Az \u00fajonnan l\u00e9trehozott <code>Rect</code> objektumra a <code>NewRectCommand</code> elt\u00e1rolja az alakzat azonos\u00edt\u00f3j\u00e1t a <code>shapeId</code> tagv\u00e1ltoz\u00f3ban. (Jelen pillanatban egy referencia t\u00e1rol\u00e1sa is el\u00e9g lenne, de mikor k\u00e9s\u0151bb a Memento megval\u00f3s\u00edt\u00e1sa sor\u00e1n m\u00e1solatot k\u00e9sz\u00edt\u00fcnk az alakzat objektumokr\u00f3l, a referencia haszn\u00e1lata m\u00e1r nem jelentene megold\u00e1st.) Az <code>UnExecute</code> m\u0171veletben az App singleton <code>RemoveShape</code> m\u0171velet\u00e9nek seg\u00edts\u00e9g\u00e9vel elt\u00e1vol\u00edtjuk a parancs \u00e1ltal l\u00e9trehozott alakzatot, \u00edgy visszavonjuk annak hat\u00e1s\u00e1t (n\u00e9zz\u00fck meg a k\u00f3dban, hogyan van megval\u00f3s\u00edtva).</li> <li>Vegy\u00fcnk fel a <code>Commands</code> mapp\u00e1ba egy <code>NewEllipseCommand</code> oszt\u00e1lyt, \u00e9s implement\u00e1ljuk a <code>NewRectCommand</code>-hoz hasonl\u00f3 elveknek megfelel\u0151en: <pre><code>using AppFx.Command;\n\nclass NewEllipseCommand : Command\n{\n    private int shapeId;\n\n    public override void Execute()\n    {\n        shapeId = App.Instance.CreateRandomEllipse().Id;\n    }\n\n    public override void UnExecute()\n    {\n        App.Instance.RemoveShape(shapeId);\n    }\n}\n</code></pre></li> <li>A <code>NewRectCommand</code> \u00e9s <code>NewEllipseCommand</code> oszt\u00e1lyainkat m\u00e9g nem haszn\u00e1ljuk sehol, most ezek bevet\u00e9se k\u00f6vetkezik. Amikor a felhaszn\u00e1l\u00f3 ak\u00e1r men\u00fcb\u0151l, ak\u00e1r toolbarr\u00f3l aktiv\u00e1lja a New Rect funkci\u00f3t, l\u00e9tre kell hozzunk egy NewRectCommand objektumot, \u00e9s futtatni kell seg\u00e9dm\u0171veleteink felhaszn\u00e1l\u00e1s\u00e1val. Keress\u00fck meg az <code>App.CommandHandlers.cs</code> f\u00e1jlban a <code>NewRect</code> met\u00f3dust. Ez egy <code>CommandBinding</code> seg\u00edts\u00e9g\u00e9vel m\u00e1r r\u00e1 van k\u00f6tve a megfelel\u0151 men\u00fcre/toolbar gombra, csak a t\u00f6rzs\u00e9ben lev\u0151 <code>showNotImplemented()</code> h\u00edv\u00e1st kell lecser\u00e9lni: <pre><code>using DesignPatternApp.Commands;\n\u2026\npublic void NewRect()\n{\n    executeCommand( new NewRectCommand() );\n}\n</code></pre> Ehhez hasonl\u00f3an alak\u00edtsuk \u00e1t a <code>NewRect</code> mellett tal\u00e1lhat\u00f3 <code>NewEllipse</code> m\u0171veletet is: <pre><code>public void NewEllipse()\n{\n    executeCommand( new NewEllipseCommand() );\n}\n</code></pre></li> <li>Mostant\u00f3l tudunk \u00faj alakzatokat l\u00e9trehozni, \u00edgy \u00faj dokumentum l\u00e9trehoz\u00e1sakor tesztadatok automatikus felv\u00e9tel\u00e9re nincs sz\u00fcks\u00e9g: az App.NewDocument m\u0171veletben kommentezz\u00fck ki az <code>addTestData</code> h\u00edv\u00e1s\u00e1t.</li> </ol> <p>Elk\u00e9sz\u00fclt\u00fcnk, tesztelj\u00fck a megold\u00e1sunkat:</p> <ol> <li>Futtassuk az alkalmaz\u00e1st, \u00e9s hozzunk l\u00e9tre egy dokumentumot.</li> <li>Figyelj\u00fck meg, hogy az Undo parancs (toolbar \u00e9s men\u00fc is) tiltva van.</li> <li>A New Rect paranccsal hozzunk l\u00e9tre egy \u00faj t\u00e9glalapot. A t\u00e9glalap megjelenik, \u00e9s az Undo parancs enged\u00e9lyezett lesz.</li> <li>Hozzunk l\u00e9tre n\u00e9h\u00e1ny tov\u00e1bbi alakzatot, t\u00e9glalapot \u00e9s ellipszist vegyesen.</li> <li>Az Undo funkci\u00f3 haszn\u00e1lat\u00e1val vonjuk vissza a m\u0171veleteket mindaddig, am\u00edg nem marad alakzat: ekkor az Undo parancs letilt\u00e1sra ker\u00fcl.</li> </ol> <p>Amennyiben a gyakorlat sor\u00e1n j\u00f3l \u00e1llunk id\u0151vel, a k\u00f3dot l\u00e9p\u00e9senk\u00e9nt futtatva is n\u00e9zz\u00fck vissza megold\u00e1sunk m\u0171k\u00f6d\u00e9s\u00e9t:</p> <ol> <li>Tegy\u00fcnk egy t\u00f6r\u00e9spontot az <code>App.CommandHandlers.cs</code>-ben tal\u00e1lhat\u00f3 <code>NewRect</code> \u00e9s <code>UndoLast</code> m\u0171veletek t\u00f6rzs\u00e9be (mindk\u00e9t m\u0171velet egysoros).</li> <li>Ind\u00edtsuk el debug m\u00f3dban az alkalmaz\u00e1st (F5).</li> <li>Hozzunk l\u00e9tre egy dokumentumot, majd egy t\u00e9glalapot. A <code>NewRect</code> k\u00f3dj\u00e1b\u00f3l kiindulva az F11 billenty\u0171vel az <code>executeCommand</code> \u00e9s a <code>CommandProcessor</code> m\u0171veleteibe belel\u00e9pve \u201e\u00e9rtelmezz\u00fck\u201d megold\u00e1sunkat.</li> <li>Ezt k\u00f6vet\u0151en vonjuk vissza az utols\u00f3 m\u0171veletet. Ekkor az <code>UndoLast</code> m\u0171veletb\u0151l kiindulva l\u00e9pkedj\u00fcnk v\u00e9gig a k\u00f3dunkon.</li> </ol>"},{"location":"labor/old-7-tervezesi-mintak/#3-feladat-memento-minta","title":"3. Feladat \u2013 Memento minta","text":"<p>A feladatban a Memento minta megval\u00f3s\u00edt\u00e1s\u00e1t gyakoroljuk. A minta teljes elm\u00e9leti h\u00e1ttere \u2013 UML diagramokkal illusztr\u00e1lva - el\u0151ad\u00e1son ker\u00fcl ismertet\u00e9sre, itt a minta legfontosabb elemeire koncentr\u00e1lunk.</p>"},{"location":"labor/old-7-tervezesi-mintak/#a-memento-minta-koncepcioja","title":"A Memento minta koncepci\u00f3ja","text":"<p>El\u0151z\u0151 feladatunkban a New Rect \u00e9s New Ellipse parancsok visszavon\u00e1s\u00e1t k\u00f6nnyen meg tudtuk val\u00f3s\u00edtani: mind\u00f6ssze el kellett t\u00e1vol\u00edtani a parancs \u00e1ltal l\u00e9trehozott alakzatot a dokumentum alakzatlist\u00e1j\u00e1b\u00f3l. A command objektumainkban ehhez el\u00e9g volt egy azonos\u00edt\u00f3t elt\u00e1rolni az \u00fajonnan l\u00e9trehozott alakzatra.</p> <p>Az alkalmaz\u00e1sok t\u00f6bbs\u00e9g\u00e9n\u00e9l azonban sz\u00e1mos olyan parancs felbukkanhat, mely a dokumentum \u00e1llapot\u00e1t jelent\u0151s m\u00e9rt\u00e9kben befoly\u00e1solja. Ilyenkor a parancsnak a v\u00e9grehajt\u00e1s el\u0151tt a dokumentum \u00e1llapot\u00e1nak jelent\u0151s r\u00e9sz\u00e9hez, vagy ak\u00e1r a teljes \u00e1llapot\u00e1hoz is hozz\u00e1 kell f\u00e9rnie, hogy eltudja azt menteni az UnExecute megval\u00f3s\u00edt\u00e1s\u00e1hoz. Ez \u00fagy lehets\u00e9ges, ha a dokumentum teljes \u00e1llapot\u00e1t publikuss\u00e1 tessz\u00fck. Ez viszont nem szerencs\u00e9s, mert ellentmond az egys\u00e9gbez\u00e1r\u00e1s elv\u00e9nek. Nem szeretn\u00e9nk a teljes \u00e1llapotot \u2013 r\u00e1ad\u00e1sul m\u00f3dos\u00edt\u00e1sra vonatkoz\u00f3an is \u2013 hozz\u00e1f\u00e9rhet\u0151v\u00e9 tenni a k\u00fclvil\u00e1g sz\u00e1m\u00e1ra, csak a visszavon\u00e1s kedv\u00e9\u00e9rt.  Erre a probl\u00e9m\u00e1ra ny\u00fajt megold\u00e1st a Memento tervez\u00e9si minta.</p> <p>Alapelve egy mondatban: dokumentumunk \u00e1llapot\u00e1t egy \u00fan. Memento objektumba csomagoljuk be, hogy az k\u00e9s\u0151bb a visszavon\u00e1s sor\u00e1n vissza\u00e1ll\u00edthat\u00f3 legyen.</p> <p>K\u00f6vetkezzen egy \u00e1bra, majd a hozz\u00e1 kapcsol\u00f3d\u00f3 gondolatok.</p> <p></p> <p>Alapelve r\u00e9szletesebben: - Az <code>Originator</code> azon oszt\u00e1ly, melynek az \u00e1llapot\u00e1hoz hozz\u00e1 szeretn\u00e9nk f\u00e9rni. Eset\u00fcnkben ez a <code>DrawingDocument</code> oszt\u00e1ly t\u00f6lti be az <code>Originator</code> szerep\u00e9t. Az \u00e1llapotot \u00f6sszefog\u00f3an az \u00e1bra a <code>state:State</code> taggal jel\u00f6li. Eset\u00fcnkben ez a <code>shapes</code> lista, valamint a <code>selectedShape</code> tag lesz.  A k\u00f6vetkez\u0151 l\u00e9p\u00e9sekt\u0151l a mint\u00e1t az alkalmaz\u00e1sunkra vet\u00edtj\u00fck. - A dokumentumunk \u00e1llapot\u00e1t (eset\u00fcnkben ez a <code>shapes</code> lista, valamit a <code>selectedShape</code> tag) NEM tessz\u00fck publikuss\u00e1. - A dokumentumunkban bevezet\u00fcnk egy <code>CreateMemento</code> m\u0171veletet, mely egy \u00fan. <code>Memento</code> objektumot hoz l\u00e9tre. A <code>Memento</code> tagv\u00e1ltoz\u00f3iban a dokumentum \u00e1llapot\u00e1nak pillanatnyi k\u00e9p\u00e9t tartalmazza (vagyis tulajdonk\u00e9ppen egy csomagol\u00f3 objektum a dokumentum aktu\u00e1lis \u00e1llapot\u00e1hoz). - A dokumentum \u00e1llapot\u00e1nak vissza\u00e1ll\u00edt\u00e1s\u00e1ra bevezet\u00fcnk a dokumentumban egy <code>RestoreFromMemento</code> m\u0171veletet, mely param\u00e9terk\u00e9nt egy <code>Memento</code> objektumot kap. A dokumentum ebben a m\u0171veletben vissza\u00e1ll\u00edtja saj\u00e1t \u00e1llapot\u00e1t a param\u00e9terk\u00e9nt kapott <code>Memento</code> objektum alapj\u00e1n.</p>"},{"location":"labor/old-7-tervezesi-mintak/#a-memento-minta-megvalositasa-alkalmazasunkban","title":"A Memento minta megval\u00f3s\u00edt\u00e1sa alkalmaz\u00e1sunkban","text":"<p>Alkalmaz\u00e1sunkban a Clear funkci\u00f3t val\u00f3s\u00edtjuk meg a Memento mint\u00e1ra \u00e9p\u00edtve. A Clear parancs t\u00f6rli a dokumentumb\u00f3l az \u00f6sszes alakzatot. Annak \u00e9rdek\u00e9ken, hogy ez visszavonhat\u00f3 legyen, a dokumentumunk teljes \u00e1llapot\u00e1t el kell menteni a parancs v\u00e9grehajt\u00e1sa el\u0151tt. Ehhez a <code>DrawingDocument</code> oszt\u00e1lyunk \u00e1llapot\u00e1t jelent\u0151 shapes tagot NEM fogjuk publikuss\u00e1 tenni. M\u00e9g k\u00f6zvetve, property-n/m\u0171veleten kereszt\u00fcl sem tessz\u00fck m\u00f3dos\u00edthat\u00f3v\u00e1!</p> <p>Warning</p> <p>Amennyiben kev\u00e9s id\u0151 maradt gyakorlaton, nyissuk meg a k\u00e9sz megold\u00e1st, \u00e9s abban mutassuk be a megval\u00f3s\u00edt\u00e1s r\u00e9szleteit!</p> <ul> <li> <p>A dokumentum \u00e1llapot\u00e1t t\u00e1rol\u00f3 Memento oszt\u00e1lyt egy a <code>DrawingDocument</code>-be be\u00e1gyazott oszt\u00e1lyk\u00e9nt val\u00f3s\u00edtjuk meg, ezzel is hangs\u00falyozva, hogy <code>Memento</code> oszt\u00e1lyunk nagyon szorosan kapcsol\u00f3dik a dokumentumhoz. Forr\u00e1sk\u00f3d szintj\u00e9n viszont igyeksz\u00fcnk lev\u00e1lasztani, \u00edgy a DrawingDocument oszt\u00e1lyt partial class-ra alak\u00edtva k\u00fcl\u00f6n f\u00e1jlban dolgozunk.</p> <ul> <li>Alak\u00edtsuk a <code>DrawingDocument</code>-et partial class-\u00e1: <pre><code>public partial class DrawingDocument\n</code></pre></li> <li>Vegy\u00fcnk fel egy <code>DrawingDocument.Memento.cs</code> f\u00e1jlt a <code>DesignPatternApp</code> projektbe (jobb katt a projekten, Add/New Item, \u00e9s a megjelen\u0151 ablakban a Code File-t v\u00e1lasszuk ki).</li> <li> <p>Illessz\u00fck be az al\u00e1bbi k\u00f3dr\u00e9szletet a f\u00e1jlba:</p> DrawingDocument.Memento.cs <pre><code>using System.Collections.Generic;\n\nnamespace DesignPatternApp\n{\n    public partial class DrawingDocument\n    {\n        public class Memento\n        {\n            private List&lt;Shape&gt; shapes = new List&lt;Shape&gt;();\n            private Shape selectedShape;\n\n            public Memento(List&lt;Shape&gt; shapes, Shape selectedShape)\n            {\n                // Deep copyra van sz\u00fcks\u00e9g\u00fcnk!\n                foreach (Shape shape in shapes)\n                    this.shapes.Add(shape.CreateCopy());\n\n                // Be kell \u00e1ll\u00edtsuk selectedShape-nek. Az \u00faj Shape list\u00e1ban kell a megfelel\u00f5\n                // elemre hivatkoznia, nem az eredetiben. Be kell \u00e1ll\u00edtsuk.\n                this.selectedShape = null;\n                for (int i = 0; i &lt; shapes.Count; ++i)\n                    if (shapes[i] == selectedShape)\n                    {\n                        this.selectedShape = this.shapes[i];\n                        break;\n                    }\n            }\n\n            public void GetState(out List&lt;Shape&gt; shapes, out Shape selectedShape)\n            {\n                shapes = this.shapes;\n                selectedShape = this.selectedShape;\n            }\n        }\n\n    }\n}\n</code></pre> </li> </ul> </li> <li> <p>A <code>Memento</code> oszt\u00e1lyunk legfontosabb aspektusai:</p> <ul> <li>Pontosan olyan tagv\u00e1ltoz\u00f3i vannak, mint a dokumentum oszt\u00e1lyunknak: \u00edgy tudja annak teljes \u00e1llapot\u00e1t elt\u00e1rolni.</li> <li>Konstruktor\u00e1ban a dokumentum \u00e1llapotv\u00e1ltoz\u00f3it v\u00e1rja (<code>shapes</code> \u00e9s <code>selectedShape</code>). L\u00e9nyeges, hogy a <code>shapes</code> list\u00e1r\u00f3l deep-copy m\u00e1solatot k\u00e9sz\u00edt: ha csak referenci\u00e1kat t\u00e1rolna a dokumentumban lev\u0151 objektumokra, akkor a dokumentum v\u00e1ltoz\u00e1s\u00e1val a memento objektumunk \u00e1llapota is v\u00e1ltozna. Nek\u00fcnk viszont az aktu\u00e1lis \u00e1llapot meg\u0151rz\u00e9se a c\u00e9lunk.</li> <li>A <code>GetState</code>-ben k\u00e9t out param\u00e9terben visszaadja az elmentett \u00e1llapotot. Az Undo m\u0171velet sor\u00e1n fogjuk ezt haszn\u00e1lni.</li> </ul> </li> <li> <p>Emelj\u00fck be az al\u00e1bbi k\u00f3dr\u00e9szletet a <code>DrawingDocument.cs</code> f\u00e1jlba a <code>DrawingDocument</code> oszt\u00e1lyba:</p> DrawingDocument.cs f\u00e1jlba <pre><code>public Memento CreateMemento()\n{\n    return new Memento(shapes, selectedShape);\n}\n\npublic void RestoreFromMemento(Memento m)\n{\n    m.GetState(out shapes, out selectedShape);\n    fireShapesChanged();\n    fireSelectionChanged();\n}\n</code></pre> <p>A <code>CreateMemento</code> m\u0171velet a mint\u00e1nak megfelel\u0151en legy\u00e1rt egy <code>Memento</code> objektumot a dokumentum \u00e1llapot\u00e1r\u00f3l. A <code>RestoreFromMemento</code> pedig a param\u00e9ter\u00fcl kapott <code>Memento</code> objektum alapj\u00e1n vissza\u00e1ll\u00edtja a dokumentum \u00e1llapot\u00e1t.</p> </li> </ul> <p>Ezzel a Memento t\u00e1mogat\u00e1s be\u00e9p\u00edt\u00e9s\u00e9vel v\u00e9gezt\u00fcnk. Ugyanakkor jelen pillanatban egyetlen parancsunk sem haszn\u00e1lja ezt a szolg\u00e1ltat\u00e1st.  Mint kor\u00e1bban eml\u00edtett\u00fck, a Clear funkci\u00f3t val\u00f3s\u00edtjuk meg a Memento mint\u00e1ra \u00e9p\u00edtve.</p> <ul> <li>Vegy\u00fcnk fel egy <code>ClearCommand</code> oszt\u00e1lyt a <code>DesignPatternApp</code> projekt <code>Commands</code> mapp\u00e1j\u00e1ban.</li> <li> <p>Emelj\u00fck be az al\u00e1bbi k\u00f3dr\u00e9szletet az \u00faj <code>ClearCommand.cs</code> f\u00e1jlba:</p> ClearCommand.cs <pre><code>class ClearCommand: Command\n{\n    DrawingDocument.Memento memento = null;\n\n    public override void Execute()\n    {\n        if (App.Instance.Document == null)\n            return;\n\n        memento = App.Instance.Document.CreateMemento();\n        App.Instance.Document.Clear();\n    }\n\n    public override void UnExecute()\n    {\n        if (App.Instance.Document == null)\n            return;\n\n        App.Instance.Document.RestoreFromMemento(memento);\n    }\n}\n</code></pre> </li> <li> <p>Vegy\u00fck fel a f\u00e1jl elej\u00e9re ez al\u00e1bbi sort: <pre><code>using AppFx.Command;\n</code></pre></p> </li> <li>Az <code>App.CommandHandlers.cs</code> f\u00e1jlban a <code>ClearDocument</code> m\u0171veletet \u00edrjuk \u00e1t, hogy most m\u00e1r az \u00fajonnan l\u00e9trehozott <code>ClearCommand</code> parancsunkat \u201efuttassa\u201d: <pre><code>public void ClearDocument()\n{\n    executeCommand(new ClearCommand());\n}\n</code></pre></li> </ul> <p>Tesztelj\u00fck megold\u00e1sunkat:</p> <ul> <li>Futtassuk az alkalmaz\u00e1st,</li> <li>Hozzunk l\u00e9tre p\u00e1r alakzatot,</li> <li>A File/Clear men\u00fcb\u0151l futtassuk a Clear parancsot: az alakzataink elt\u0171nnek.</li> <li>Az Undo paranccsal vonjuk vissza a parancsot: az alakzatok \u00fajra megjelennek.</li> </ul> <p>L\u00e9p\u00e9senk\u00e9nt futtatva is tesztelj\u00fck a megold\u00e1st:</p> <ul> <li>Tegy\u00fcnk egy t\u00f6r\u00e9spontot a <code>ClearCommand.Execute</code> m\u0171velet els\u0151 sor\u00e1ra.</li> <li>Ind\u00edtsuk ez az alkalmaz\u00e1st, hozzunk l\u00e9tre p\u00e1r alakzatot, majd a File/Clear men\u00fcb\u0151l futtassuk a Clear parancsot.</li> <li>Mikor a k\u00f3dunk meg\u00e1ll a t\u00f6r\u00e9spontn\u00e1l, l\u00e9pkedj\u00fck el a <code>CreateMemento</code> h\u00edv\u00e1s\u00e1ig, \u00e9s l\u00e9pj\u00fcnk is \u00e1t rajta. A <code>CreateMemento</code> \u00e1ltal visszaadott memento objektum bels\u0151 \u00e1llapot\u00e1t n\u00e9zz\u00fck meg vagy a Watch ablakban, vagy tooltipben r\u00e1\u00e1llva. Azt l\u00e1tjuk, hogy val\u00f3ban \u201etartalmazza\u201d a dokumentum pillanatnyi \u00e1llapot\u00e1t a shapes \u00e9s <code>selectedShape</code> tagv\u00e1ltoz\u00f3j\u00e1ban. A <code>ClearCommand</code> ezt el is t\u00e1rolja a tagv\u00e1ltoz\u00f3j\u00e1ban, amit az <code>UnExecute</code> m\u0171veletben haszn\u00e1l fel a dokumentum \u00e1llapot\u00e1nak vissza\u00e1ll\u00edt\u00e1s\u00e1ra.</li> </ul> <p>P\u00e9ld\u00e1nkban a Memento minta arra \u00e9p\u00edt, hogy a dokumentum teljes \u00e1llapot\u00e1r\u00f3l m\u00e1solatot k\u00e9sz\u00edt\u00fcnk. Sok alkalmaz\u00e1s, illetve nagym\u00e9ret\u0171 dokumentum eset\u00e9ben ennek nagyon nagy lehet a mem\u00f3riaig\u00e9nye. Milyen megold\u00e1sokban gondolkozhatunk a probl\u00e9ma elker\u00fcl\u00e9s\u00e9re?</p> <ul> <li>A kisebb v\u00e1ltoz\u00e1sok hat\u00e1s\u00e1t ink\u00e1bb \u201einverz\u201d m\u0171velettel pr\u00f3b\u00e1ljuk visszacsin\u00e1lni. Ezt alkalmaztuk pl. a New Rect parancs eset\u00e9ben.</li> <li>A Memento-ba nem mentj\u00fck bele a teljes \u00e1llapotot, hanem csak m\u00f3dosult \u00e1llapotot. Sajnos ez nem mindig tehet\u0151 meg, valamint nehezebben karbantarthat\u00f3 megold\u00e1st eredm\u00e9nyez.</li> <li>Korl\u00e1tozzuk a visszavonhat\u00f3 l\u00e9p\u00e9sek sz\u00e1m\u00e1t.</li> </ul>"}]}